
ense481_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  08004e9c  08004e9c  00014e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005254  08005254  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005254  08005254  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005254  08005254  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005254  08005254  00015254  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800525c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000068  080052c4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002f4  080052c4  000202f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d881  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216d  00000000  00000000  0002d955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000dd0  00000000  00000000  0002fac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000abf  00000000  00000000  00030898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001915f  00000000  00000000  00031357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000edf2  00000000  00000000  0004a4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090faa  00000000  00000000  000592a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000428c  00000000  00000000  000ea254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ee4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e84 	.word	0x08004e84

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004e84 	.word	0x08004e84

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	3a01      	subs	r2, #1
 80009fa:	bf28      	it	cs
 80009fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a00:	d2ed      	bcs.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <__io_putchar+0x20>)
 8000b6e:	f002 fff1 	bl	8003b54 <HAL_UART_Transmit>
  return ch;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000fc 	.word	0x200000fc

08000b80 <select_adc_channel>:
  * @brief Select ADC1 channel function
  * @param None
  * @retval None
  */
void select_adc_channel(int channel)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
    //sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
    switch (channel)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f200 812d 	bhi.w	8000dfa <select_adc_channel+0x27a>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <select_adc_channel+0x28>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000be9 	.word	0x08000be9
 8000bac:	08000c0b 	.word	0x08000c0b
 8000bb0:	08000c2d 	.word	0x08000c2d
 8000bb4:	08000c4f 	.word	0x08000c4f
 8000bb8:	08000c71 	.word	0x08000c71
 8000bbc:	08000c93 	.word	0x08000c93
 8000bc0:	08000cb5 	.word	0x08000cb5
 8000bc4:	08000cd7 	.word	0x08000cd7
 8000bc8:	08000cf9 	.word	0x08000cf9
 8000bcc:	08000d1b 	.word	0x08000d1b
 8000bd0:	08000d3b 	.word	0x08000d3b
 8000bd4:	08000d5b 	.word	0x08000d5b
 8000bd8:	08000d7b 	.word	0x08000d7b
 8000bdc:	08000d9b 	.word	0x08000d9b
 8000be0:	08000dbb 	.word	0x08000dbb
 8000be4:	08000ddb 	.word	0x08000ddb
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]

              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4893      	ldr	r0, [pc, #588]	; (8000e44 <select_adc_channel+0x2c4>)
 8000bf8:	f001 f9ba 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80fd 	beq.w	8000dfe <select_adc_channel+0x27e>
              {
                Error_Handler();
 8000c04:	f000 fc64 	bl	80014d0 <Error_Handler>
              }
              break;
 8000c08:	e0f9      	b.n	8000dfe <select_adc_channel+0x27e>

        case 1:
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
              sConfig.Channel = ADC_CHANNEL_1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	488a      	ldr	r0, [pc, #552]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c1a:	f001 f9a9 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80ee 	beq.w	8000e02 <select_adc_channel+0x282>
              {
                Error_Handler();
 8000c26:	f000 fc53 	bl	80014d0 <Error_Handler>
              }
              break;
 8000c2a:	e0ea      	b.n	8000e02 <select_adc_channel+0x282>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 2:
              sConfig.Channel = ADC_CHANNEL_2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4882      	ldr	r0, [pc, #520]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c3c:	f001 f998 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80df 	beq.w	8000e06 <select_adc_channel+0x286>
              {
                Error_Handler();
 8000c48:	f000 fc42 	bl	80014d0 <Error_Handler>
              }
              break;
 8000c4c:	e0db      	b.n	8000e06 <select_adc_channel+0x286>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 3:
              sConfig.Channel = ADC_CHANNEL_3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4879      	ldr	r0, [pc, #484]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c5e:	f001 f987 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80d0 	beq.w	8000e0a <select_adc_channel+0x28a>
              {
                Error_Handler();
 8000c6a:	f000 fc31 	bl	80014d0 <Error_Handler>
              }
              break;
 8000c6e:	e0cc      	b.n	8000e0a <select_adc_channel+0x28a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 4:
              sConfig.Channel = ADC_CHANNEL_4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4871      	ldr	r0, [pc, #452]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c80:	f001 f976 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80c1 	beq.w	8000e0e <select_adc_channel+0x28e>
              {
                Error_Handler();
 8000c8c:	f000 fc20 	bl	80014d0 <Error_Handler>
              }
              break;
 8000c90:	e0bd      	b.n	8000e0e <select_adc_channel+0x28e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 5:
              sConfig.Channel = ADC_CHANNEL_5;
 8000c92:	2305      	movs	r3, #5
 8000c94:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4868      	ldr	r0, [pc, #416]	; (8000e44 <select_adc_channel+0x2c4>)
 8000ca2:	f001 f965 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80b2 	beq.w	8000e12 <select_adc_channel+0x292>
              {
                Error_Handler();
 8000cae:	f000 fc0f 	bl	80014d0 <Error_Handler>
              }
              break;
 8000cb2:	e0ae      	b.n	8000e12 <select_adc_channel+0x292>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 6:
              sConfig.Channel = ADC_CHANNEL_6;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4860      	ldr	r0, [pc, #384]	; (8000e44 <select_adc_channel+0x2c4>)
 8000cc4:	f001 f954 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80a3 	beq.w	8000e16 <select_adc_channel+0x296>
              {
                Error_Handler();
 8000cd0:	f000 fbfe 	bl	80014d0 <Error_Handler>
              }
              break;
 8000cd4:	e09f      	b.n	8000e16 <select_adc_channel+0x296>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 7:
              sConfig.Channel = ADC_CHANNEL_7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4857      	ldr	r0, [pc, #348]	; (8000e44 <select_adc_channel+0x2c4>)
 8000ce6:	f001 f943 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8094 	beq.w	8000e1a <select_adc_channel+0x29a>
              {
                Error_Handler();
 8000cf2:	f000 fbed 	bl	80014d0 <Error_Handler>
              }
              break;
 8000cf6:	e090      	b.n	8000e1a <select_adc_channel+0x29a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 8:
              sConfig.Channel = ADC_CHANNEL_8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 9;
 8000cfc:	2309      	movs	r3, #9
 8000cfe:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	484f      	ldr	r0, [pc, #316]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d08:	f001 f932 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8085 	beq.w	8000e1e <select_adc_channel+0x29e>
              {
                Error_Handler();
 8000d14:	f000 fbdc 	bl	80014d0 <Error_Handler>
              }
              break;
 8000d18:	e081      	b.n	8000e1e <select_adc_channel+0x29e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 9:
              sConfig.Channel = ADC_CHANNEL_9;
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4846      	ldr	r0, [pc, #280]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d2a:	f001 f921 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d076      	beq.n	8000e22 <select_adc_channel+0x2a2>
              {
                Error_Handler();
 8000d34:	f000 fbcc 	bl	80014d0 <Error_Handler>
              }
              break;
 8000d38:	e073      	b.n	8000e22 <select_adc_channel+0x2a2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 10:
              sConfig.Channel = ADC_CHANNEL_10;
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	483e      	ldr	r0, [pc, #248]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d4a:	f001 f911 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d068      	beq.n	8000e26 <select_adc_channel+0x2a6>
              {
                Error_Handler();
 8000d54:	f000 fbbc 	bl	80014d0 <Error_Handler>
              }
              break;
 8000d58:	e065      	b.n	8000e26 <select_adc_channel+0x2a6>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 11:
              sConfig.Channel = ADC_CHANNEL_11;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4836      	ldr	r0, [pc, #216]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d6a:	f001 f901 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d05a      	beq.n	8000e2a <select_adc_channel+0x2aa>
              {
                Error_Handler();
 8000d74:	f000 fbac 	bl	80014d0 <Error_Handler>
              }
              break;
 8000d78:	e057      	b.n	8000e2a <select_adc_channel+0x2aa>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 12:
              sConfig.Channel = ADC_CHANNEL_12;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d8a:	f001 f8f1 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d04c      	beq.n	8000e2e <select_adc_channel+0x2ae>
              {
                Error_Handler();
 8000d94:	f000 fb9c 	bl	80014d0 <Error_Handler>
              }
              break;
 8000d98:	e049      	b.n	8000e2e <select_adc_channel+0x2ae>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 13:
              sConfig.Channel = ADC_CHANNEL_13;
 8000d9a:	230d      	movs	r3, #13
 8000d9c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <select_adc_channel+0x2c4>)
 8000daa:	f001 f8e1 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d03e      	beq.n	8000e32 <select_adc_channel+0x2b2>
              {
                Error_Handler();
 8000db4:	f000 fb8c 	bl	80014d0 <Error_Handler>
              }
              break;
 8000db8:	e03b      	b.n	8000e32 <select_adc_channel+0x2b2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 14:
              sConfig.Channel = ADC_CHANNEL_14;
 8000dba:	230e      	movs	r3, #14
 8000dbc:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <select_adc_channel+0x2c4>)
 8000dca:	f001 f8d1 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d030      	beq.n	8000e36 <select_adc_channel+0x2b6>
              {
                Error_Handler();
 8000dd4:	f000 fb7c 	bl	80014d0 <Error_Handler>
              }
              break;
 8000dd8:	e02d      	b.n	8000e36 <select_adc_channel+0x2b6>
        case 15:
              sConfig.Channel = ADC_CHANNEL_15;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <select_adc_channel+0x2c4>)
 8000dea:	f001 f8c1 	bl	8001f70 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d022      	beq.n	8000e3a <select_adc_channel+0x2ba>
              {
                Error_Handler();
 8000df4:	f000 fb6c 	bl	80014d0 <Error_Handler>
              }
              break;
 8000df8:	e01f      	b.n	8000e3a <select_adc_channel+0x2ba>
        default:
            break;
 8000dfa:	bf00      	nop
 8000dfc:	e01e      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000dfe:	bf00      	nop
 8000e00:	e01c      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e02:	bf00      	nop
 8000e04:	e01a      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e06:	bf00      	nop
 8000e08:	e018      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e0a:	bf00      	nop
 8000e0c:	e016      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e0e:	bf00      	nop
 8000e10:	e014      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e12:	bf00      	nop
 8000e14:	e012      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e16:	bf00      	nop
 8000e18:	e010      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e1a:	bf00      	nop
 8000e1c:	e00e      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e1e:	bf00      	nop
 8000e20:	e00c      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e22:	bf00      	nop
 8000e24:	e00a      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e26:	bf00      	nop
 8000e28:	e008      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e2a:	bf00      	nop
 8000e2c:	e006      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e2e:	bf00      	nop
 8000e30:	e004      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e32:	bf00      	nop
 8000e34:	e002      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e3a:	bf00      	nop
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000084 	.word	0x20000084

08000e48 <print_pwr>:

void print_pwr(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

	  printf("-------------------------------\r\n");
 8000e4e:	4872      	ldr	r0, [pc, #456]	; (8001018 <print_pwr+0x1d0>)
 8000e50:	f003 f9a8 	bl	80041a4 <puts>
	  for (uint16_t i = 0; i < 2; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	e031      	b.n	8000ebe <print_pwr+0x76>



			  select_adc_channel(i);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe8f 	bl	8000b80 <select_adc_channel>
			  // Get each ADC value from the group (2 channels in this case)
			  HAL_ADC_Start(&hadc1);
 8000e62:	486e      	ldr	r0, [pc, #440]	; (800101c <print_pwr+0x1d4>)
 8000e64:	f000 fec4 	bl	8001bf0 <HAL_ADC_Start>
			  // Wait for regular group conversion to be completed
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	486b      	ldr	r0, [pc, #428]	; (800101c <print_pwr+0x1d4>)
 8000e6e:	f000 ff6d 	bl	8001d4c <HAL_ADC_PollForConversion>

			  if (i == 0) {
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10e      	bne.n	8000e96 <print_pwr+0x4e>
				  source_V_q = HAL_ADC_GetValue(&hadc1);
 8000e78:	4868      	ldr	r0, [pc, #416]	; (800101c <print_pwr+0x1d4>)
 8000e7a:	f001 f86d 	bl	8001f58 <HAL_ADC_GetValue>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <print_pwr+0x1d8>)
 8000e84:	801a      	strh	r2, [r3, #0]
				  printf("Quantized Source Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) source_V_q);
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	4a65      	ldr	r2, [pc, #404]	; (8001020 <print_pwr+0x1d8>)
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4865      	ldr	r0, [pc, #404]	; (8001024 <print_pwr+0x1dc>)
 8000e90:	f003 f922 	bl	80040d8 <iprintf>
 8000e94:	e010      	b.n	8000eb8 <print_pwr+0x70>
			  } else if (i == 1) {
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10d      	bne.n	8000eb8 <print_pwr+0x70>
				  mcu_V_q = HAL_ADC_GetValue(&hadc1);
 8000e9c:	485f      	ldr	r0, [pc, #380]	; (800101c <print_pwr+0x1d4>)
 8000e9e:	f001 f85b 	bl	8001f58 <HAL_ADC_GetValue>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <print_pwr+0x1e0>)
 8000ea8:	801a      	strh	r2, [r3, #0]
				  printf("Quantized MCU Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) mcu_V_q);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <print_pwr+0x1e0>)
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	485e      	ldr	r0, [pc, #376]	; (800102c <print_pwr+0x1e4>)
 8000eb4:	f003 f910 	bl	80040d8 <iprintf>
	  for (uint16_t i = 0; i < 2; i++) {
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d9ca      	bls.n	8000e5a <print_pwr+0x12>
			  }
		  }

		  shunt_resistor_V_q = source_V_q - mcu_V_q;
 8000ec4:	4b56      	ldr	r3, [pc, #344]	; (8001020 <print_pwr+0x1d8>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <print_pwr+0x1e0>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <print_pwr+0x1e8>)
 8000ed2:	801a      	strh	r2, [r3, #0]
		  shunt_resistor_mV = (uint16_t) (((float) (shunt_resistor_V_q * 1000)) / 4095.0) * 3.3;
 8000ed4:	4b56      	ldr	r3, [pc, #344]	; (8001030 <print_pwr+0x1e8>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fde6 	bl	8000ab4 <__aeabi_i2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa9e 	bl	800042c <__aeabi_f2d>
 8000ef0:	a345      	add	r3, pc, #276	; (adr r3, 8001008 <print_pwr+0x1c0>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fc1b 	bl	8000730 <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fcfd 	bl	8000900 <__aeabi_d2uiz>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fa7c 	bl	8000408 <__aeabi_i2d>
 8000f10:	a33f      	add	r3, pc, #252	; (adr r3, 8001010 <print_pwr+0x1c8>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fae1 	bl	80004dc <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fced 	bl	8000900 <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <print_pwr+0x1ec>)
 8000f2c:	801a      	strh	r2, [r3, #0]
		  mcu_mV = (uint16_t) (((float) (mcu_V_q * 1000)) / 4095.0) * 3.3;
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <print_pwr+0x1e0>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fdb9 	bl	8000ab4 <__aeabi_i2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa71 	bl	800042c <__aeabi_f2d>
 8000f4a:	a32f      	add	r3, pc, #188	; (adr r3, 8001008 <print_pwr+0x1c0>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fbee 	bl	8000730 <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff fcd0 	bl	8000900 <__aeabi_d2uiz>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa4f 	bl	8000408 <__aeabi_i2d>
 8000f6a:	a329      	add	r3, pc, #164	; (adr r3, 8001010 <print_pwr+0x1c8>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fab4 	bl	80004dc <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fcc0 	bl	8000900 <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <print_pwr+0x1f0>)
 8000f86:	801a      	strh	r2, [r3, #0]


		  printf("shunt resistor voltage: %u [mV]\r\n", shunt_resistor_mV);
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <print_pwr+0x1ec>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482b      	ldr	r0, [pc, #172]	; (800103c <print_pwr+0x1f4>)
 8000f90:	f003 f8a2 	bl	80040d8 <iprintf>
		  printf("mcu voltage: %u [mV]\r\n", mcu_mV);
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <print_pwr+0x1f0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4829      	ldr	r0, [pc, #164]	; (8001040 <print_pwr+0x1f8>)
 8000f9c:	f003 f89c 	bl	80040d8 <iprintf>

		  // since 1 ohm (assumed constant) shunt resistor
		  // I = V / R
		  // I = V
		  circuit_mA = shunt_resistor_mV;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <print_pwr+0x1ec>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <print_pwr+0x1fc>)
 8000fa6:	801a      	strh	r2, [r3, #0]
		  printf("Circuit current: %u [mA]\r\n", circuit_mA);
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <print_pwr+0x1fc>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4826      	ldr	r0, [pc, #152]	; (8001048 <print_pwr+0x200>)
 8000fb0:	f003 f892 	bl	80040d8 <iprintf>

		  mcu_mW = circuit_mA * (mcu_mV / 1000);
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <print_pwr+0x1f0>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <print_pwr+0x204>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	099b      	lsrs	r3, r3, #6
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <print_pwr+0x1fc>)
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <print_pwr+0x208>)
 8000fce:	801a      	strh	r2, [r3, #0]

		  shunt_resistor_uW = circuit_mA * (shunt_resistor_mV);
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <print_pwr+0x1fc>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <print_pwr+0x1ec>)
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	fb02 f303 	mul.w	r3, r2, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <print_pwr+0x20c>)
 8000fe0:	801a      	strh	r2, [r3, #0]

		  printf("shunt resistor power: %u [uW]\r\n", shunt_resistor_uW);
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <print_pwr+0x20c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481b      	ldr	r0, [pc, #108]	; (8001058 <print_pwr+0x210>)
 8000fea:	f003 f875 	bl	80040d8 <iprintf>
		  printf("mcu power: %u [mW]\r\n", mcu_mW);
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <print_pwr+0x208>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <print_pwr+0x214>)
 8000ff6:	f003 f86f 	bl	80040d8 <iprintf>



}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	00000000 	.word	0x00000000
 800100c:	40affe00 	.word	0x40affe00
 8001010:	66666666 	.word	0x66666666
 8001014:	400a6666 	.word	0x400a6666
 8001018:	08004e9c 	.word	0x08004e9c
 800101c:	20000084 	.word	0x20000084
 8001020:	20000144 	.word	0x20000144
 8001024:	08004ec0 	.word	0x08004ec0
 8001028:	20000146 	.word	0x20000146
 800102c:	08004ef8 	.word	0x08004ef8
 8001030:	20000148 	.word	0x20000148
 8001034:	2000014a 	.word	0x2000014a
 8001038:	2000014c 	.word	0x2000014c
 800103c:	08004f2c 	.word	0x08004f2c
 8001040:	08004f50 	.word	0x08004f50
 8001044:	2000014e 	.word	0x2000014e
 8001048:	08004f68 	.word	0x08004f68
 800104c:	10624dd3 	.word	0x10624dd3
 8001050:	20000150 	.word	0x20000150
 8001054:	20000152 	.word	0x20000152
 8001058:	08004f84 	.word	0x08004f84
 800105c:	08004fa4 	.word	0x08004fa4

08001060 <print_help>:

void print_help(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	printf("Help: \r\n    max : power consumption test enabling all clocks and peripherals\r\n");
 8001064:	4806      	ldr	r0, [pc, #24]	; (8001080 <print_help+0x20>)
 8001066:	f003 f89d 	bl	80041a4 <puts>
	printf("    typ : power consumption test for this program: USART1, ADC1, TIM3\r\n");
 800106a:	4806      	ldr	r0, [pc, #24]	; (8001084 <print_help+0x24>)
 800106c:	f003 f89a 	bl	80041a4 <puts>
	printf("    min : power consumption test all peripherals disabled, only CPU enabled CANNOT GATHER INFO IN THIS MODE\r\n");
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <print_help+0x28>)
 8001072:	f003 f897 	bl	80041a4 <puts>
	printf("    pwr : free-running print of power readings\r\n");
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <print_help+0x2c>)
 8001078:	f003 f894 	bl	80041a4 <puts>
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08004fbc 	.word	0x08004fbc
 8001084:	0800500c 	.word	0x0800500c
 8001088:	08005054 	.word	0x08005054
 800108c:	080050c4 	.word	0x080050c4

08001090 <print_version>:

void print_version(void) {
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	printf("Version: REV B April 1th, 2024\r\n");
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <print_version+0x10>)
 8001096:	f003 f885 	bl	80041a4 <puts>
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	080050f4 	.word	0x080050f4

080010a4 <test_max>:

void test_max(void) {
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0


}
 80010a8:	bf00      	nop
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bc80      	pop	{r7}
 80010ae:	4770      	bx	lr

080010b0 <test_typ>:

void test_typ(void) {
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0


}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <test_min>:

void test_min(void) {
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0


}
 80010c0:	bf00      	nop
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bc80      	pop	{r7}
 80010c6:	4770      	bx	lr

080010c8 <test_pwr>:

void test_pwr(void) {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
	printf("Entering free-running power mode, press `q` three times quickly to exit\r\n");
 80010cc:	480b      	ldr	r0, [pc, #44]	; (80010fc <test_pwr+0x34>)
 80010ce:	f003 f869 	bl	80041a4 <puts>
	while (1) {

		print_pwr();
 80010d2:	f7ff feb9 	bl	8000e48 <print_pwr>
		HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, 2000);
 80010d6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010da:	2203      	movs	r2, #3
 80010dc:	4908      	ldr	r1, [pc, #32]	; (8001100 <test_pwr+0x38>)
 80010de:	4809      	ldr	r0, [pc, #36]	; (8001104 <test_pwr+0x3c>)
 80010e0:	f002 fdbb 	bl	8003c5a <HAL_UART_Receive>

		if (strcmp(UART1_rxBuffer, "qqq") == 0) {
 80010e4:	4908      	ldr	r1, [pc, #32]	; (8001108 <test_pwr+0x40>)
 80010e6:	4806      	ldr	r0, [pc, #24]	; (8001100 <test_pwr+0x38>)
 80010e8:	f7ff f832 	bl	8000150 <strcmp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1ef      	bne.n	80010d2 <test_pwr+0xa>
			printf("Exiting `pwr` mode\r\n");
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <test_pwr+0x44>)
 80010f4:	f003 f856 	bl	80041a4 <puts>
			return;
 80010f8:	bf00      	nop

		}
	}


}
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	08005114 	.word	0x08005114
 8001100:	20000154 	.word	0x20000154
 8001104:	200000fc 	.word	0x200000fc
 8001108:	08005160 	.word	0x08005160
 800110c:	08005164 	.word	0x08005164

08001110 <read_cli>:

// CLI commands
// max, typ, min, pwr
void read_cli(void) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8001116:	2300      	movs	r3, #0
 8001118:	71fb      	strb	r3, [r7, #7]
 800111a:	e005      	b.n	8001128 <read_cli+0x18>
		UART1_rxBuffer[0] = 0;
 800111c:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <read_cli+0xb0>)
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	3301      	adds	r3, #1
 8001126:	71fb      	strb	r3, [r7, #7]
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d9f6      	bls.n	800111c <read_cli+0xc>
	}
	// need to type the command in the timeout
	while(HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, CLI_timeout_ms) != HAL_OK);
 800112e:	bf00      	nop
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <read_cli+0xb4>)
 8001132:	2203      	movs	r2, #3
 8001134:	4922      	ldr	r1, [pc, #136]	; (80011c0 <read_cli+0xb0>)
 8001136:	4824      	ldr	r0, [pc, #144]	; (80011c8 <read_cli+0xb8>)
 8001138:	f002 fd8f 	bl	8003c5a <HAL_UART_Receive>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f6      	bne.n	8001130 <read_cli+0x20>
	printf("Your command: %s\r\n", UART1_rxBuffer);
 8001142:	491f      	ldr	r1, [pc, #124]	; (80011c0 <read_cli+0xb0>)
 8001144:	4821      	ldr	r0, [pc, #132]	; (80011cc <read_cli+0xbc>)
 8001146:	f002 ffc7 	bl	80040d8 <iprintf>

	if (strcmp(UART1_rxBuffer, "max") == 0) {
 800114a:	4921      	ldr	r1, [pc, #132]	; (80011d0 <read_cli+0xc0>)
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <read_cli+0xb0>)
 800114e:	f7fe ffff 	bl	8000150 <strcmp>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d101      	bne.n	800115c <read_cli+0x4c>
		test_max();
 8001158:	f7ff ffa4 	bl	80010a4 <test_max>

	}

	if (strcmp(UART1_rxBuffer, "typ") == 0) {
 800115c:	491d      	ldr	r1, [pc, #116]	; (80011d4 <read_cli+0xc4>)
 800115e:	4818      	ldr	r0, [pc, #96]	; (80011c0 <read_cli+0xb0>)
 8001160:	f7fe fff6 	bl	8000150 <strcmp>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <read_cli+0x5e>
		test_typ();
 800116a:	f7ff ffa1 	bl	80010b0 <test_typ>
	}

	if (strcmp(UART1_rxBuffer, "min") == 0) {
 800116e:	491a      	ldr	r1, [pc, #104]	; (80011d8 <read_cli+0xc8>)
 8001170:	4813      	ldr	r0, [pc, #76]	; (80011c0 <read_cli+0xb0>)
 8001172:	f7fe ffed 	bl	8000150 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d101      	bne.n	8001180 <read_cli+0x70>
		test_min();
 800117c:	f7ff ff9e 	bl	80010bc <test_min>

	}

	if (strcmp(UART1_rxBuffer, "pwr") == 0) {
 8001180:	4916      	ldr	r1, [pc, #88]	; (80011dc <read_cli+0xcc>)
 8001182:	480f      	ldr	r0, [pc, #60]	; (80011c0 <read_cli+0xb0>)
 8001184:	f7fe ffe4 	bl	8000150 <strcmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <read_cli+0x82>
		test_pwr();
 800118e:	f7ff ff9b 	bl	80010c8 <test_pwr>

	}

	if (strcmp(UART1_rxBuffer, "ver") == 0) {
 8001192:	4913      	ldr	r1, [pc, #76]	; (80011e0 <read_cli+0xd0>)
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <read_cli+0xb0>)
 8001196:	f7fe ffdb 	bl	8000150 <strcmp>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d101      	bne.n	80011a4 <read_cli+0x94>
		print_version();
 80011a0:	f7ff ff76 	bl	8001090 <print_version>

	}

	if (strcmp(UART1_rxBuffer, "hel") == 0) {
 80011a4:	490f      	ldr	r1, [pc, #60]	; (80011e4 <read_cli+0xd4>)
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <read_cli+0xb0>)
 80011a8:	f7fe ffd2 	bl	8000150 <strcmp>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <read_cli+0xa6>
		print_help();
 80011b2:	f7ff ff55 	bl	8001060 <print_help>

	}

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000154 	.word	0x20000154
 80011c4:	000186a0 	.word	0x000186a0
 80011c8:	200000fc 	.word	0x200000fc
 80011cc:	08005178 	.word	0x08005178
 80011d0:	0800518c 	.word	0x0800518c
 80011d4:	08005190 	.word	0x08005190
 80011d8:	08005194 	.word	0x08005194
 80011dc:	08005198 	.word	0x08005198
 80011e0:	0800519c 	.word	0x0800519c
 80011e4:	080051a0 	.word	0x080051a0

080011e8 <main>:
  * CPU Config: nothing special
  * Version Control: recommended to checkout latest commit in master or latest stable release.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fbd2 	bl	8001994 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f816 	bl	8001220 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f000 f920 	bl	8001438 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80011f8:	f000 f8f4 	bl	80013e4 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80011fc:	f000 f866 	bl	80012cc <MX_ADC1_Init>
  MX_TIM3_Init();
 8001200:	f000 f8a2 	bl	8001348 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */



  // display firmware version+build info
  printf("REV B April 1th, 2024\r\n\r\n");
 8001204:	4804      	ldr	r0, [pc, #16]	; (8001218 <main+0x30>)
 8001206:	f002 ffcd 	bl	80041a4 <puts>
  printf("Power Consumption CLI\r\n");
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <main+0x34>)
 800120c:	f002 ffca 	bl	80041a4 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_cli();
 8001210:	f7ff ff7e 	bl	8001110 <read_cli>
 8001214:	e7fc      	b.n	8001210 <main+0x28>
 8001216:	bf00      	nop
 8001218:	080051a4 	.word	0x080051a4
 800121c:	080051c0 	.word	0x080051c0

08001220 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b094      	sub	sp, #80	; 0x50
 8001224:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800122a:	2228      	movs	r2, #40	; 0x28
 800122c:	2100      	movs	r1, #0
 800122e:	4618      	mov	r0, r3
 8001230:	f003 f898 	bl	8004364 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]
 800124e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001250:	2302      	movs	r3, #2
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001254:	2301      	movs	r3, #1
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2310      	movs	r3, #16
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800125c:	2302      	movs	r3, #2
 800125e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001260:	2300      	movs	r3, #0
 8001262:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001264:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001268:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800126e:	4618      	mov	r0, r3
 8001270:	f001 fa76 	bl	8002760 <HAL_RCC_OscConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800127a:	f000 f929 	bl	80014d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127e:	230f      	movs	r3, #15
 8001280:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800128e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f001 fce2 	bl	8002c64 <HAL_RCC_ClockConfig>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80012a6:	f000 f913 	bl	80014d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012aa:	2302      	movs	r3, #2
 80012ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4618      	mov	r0, r3
 80012b6:	f001 fe93 	bl	8002fe0 <HAL_RCCEx_PeriphCLKConfig>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80012c0:	f000 f906 	bl	80014d0 <Error_Handler>
  }
}
 80012c4:	bf00      	nop
 80012c6:	3750      	adds	r7, #80	; 0x50
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_ADC1_Init+0x74>)
 80012de:	4a19      	ldr	r2, [pc, #100]	; (8001344 <MX_ADC1_Init+0x78>)
 80012e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80012e2:	4b17      	ldr	r3, [pc, #92]	; (8001340 <MX_ADC1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_ADC1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80012ee:	4b14      	ldr	r3, [pc, #80]	; (8001340 <MX_ADC1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <MX_ADC1_Init+0x74>)
 80012f6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80012fa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012fc:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_ADC1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001302:	4b0f      	ldr	r3, [pc, #60]	; (8001340 <MX_ADC1_Init+0x74>)
 8001304:	2201      	movs	r2, #1
 8001306:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_ADC1_Init+0x74>)
 800130a:	f000 fb99 	bl	8001a40 <HAL_ADC_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 f8dc 	bl	80014d0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001318:	2300      	movs	r3, #0
 800131a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800131c:	2301      	movs	r3, #1
 800131e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001320:	2301      	movs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_ADC1_Init+0x74>)
 800132a:	f000 fe21 	bl	8001f70 <HAL_ADC_ConfigChannel>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001334:	f000 f8cc 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000084 	.word	0x20000084
 8001344:	40012400 	.word	0x40012400

08001348 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_TIM3_Init+0x94>)
 8001366:	4a1e      	ldr	r2, [pc, #120]	; (80013e0 <MX_TIM3_Init+0x98>)
 8001368:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM3_Init+0x94>)
 800136c:	2200      	movs	r2, #0
 800136e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM3_Init+0x94>)
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <MX_TIM3_Init+0x94>)
 8001378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800137c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_TIM3_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM3_Init+0x94>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800138a:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM3_Init+0x94>)
 800138c:	f001 ff94 	bl	80032b8 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001396:	f000 f89b 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM3_Init+0x94>)
 80013a8:	f002 f930 	bl	800360c <HAL_TIM_ConfigClockSource>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80013b2:	f000 f88d 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM3_Init+0x94>)
 80013c4:	f002 fb06 	bl	80039d4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80013ce:	f000 f87f 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200000b4 	.word	0x200000b4
 80013e0:	40000400 	.word	0x40000400

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	; (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	; (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f002 fb4a 	bl	8003ab4 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f853 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200000fc 	.word	0x200000fc
 8001434:	40013800 	.word	0x40013800

08001438 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001440:	699b      	ldr	r3, [r3, #24]
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001444:	f043 0310 	orr.w	r3, r3, #16
 8001448:	6193      	str	r3, [r2, #24]
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_GPIO_Init+0x70>)
 800144c:	699b      	ldr	r3, [r3, #24]
 800144e:	f003 0310 	and.w	r3, r3, #16
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001458:	699b      	ldr	r3, [r3, #24]
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <MX_GPIO_Init+0x70>)
 800145c:	f043 0320 	orr.w	r3, r3, #32
 8001460:	6193      	str	r3, [r2, #24]
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001464:	699b      	ldr	r3, [r3, #24]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800146e:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6193      	str	r3, [r2, #24]
 800147a:	4b0b      	ldr	r3, [pc, #44]	; (80014a8 <MX_GPIO_Init+0x70>)
 800147c:	699b      	ldr	r3, [r3, #24]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001486:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	4a07      	ldr	r2, [pc, #28]	; (80014a8 <MX_GPIO_Init+0x70>)
 800148c:	f043 0308 	orr.w	r3, r3, #8
 8001490:	6193      	str	r3, [r2, #24]
 8001492:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <MX_GPIO_Init+0x70>)
 8001494:	699b      	ldr	r3, [r3, #24]
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	603b      	str	r3, [r7, #0]
 800149c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr
 80014a8:	40021000 	.word	0x40021000

080014ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d101      	bne.n	80014c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014be:	f000 fa7f 	bl	80019c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40000800 	.word	0x40000800

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Bricked");
 80014d8:	4803      	ldr	r0, [pc, #12]	; (80014e8 <Error_Handler+0x18>)
 80014da:	f002 fdfd 	bl	80040d8 <iprintf>
	  HAL_Delay(1000);
 80014de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014e2:	f000 fa89 	bl	80019f8 <HAL_Delay>
	  printf("Bricked");
 80014e6:	e7f7      	b.n	80014d8 <Error_Handler+0x8>
 80014e8:	080051d8 	.word	0x080051d8

080014ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <HAL_MspInit+0x5c>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	4a14      	ldr	r2, [pc, #80]	; (8001548 <HAL_MspInit+0x5c>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6193      	str	r3, [r2, #24]
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <HAL_MspInit+0x5c>)
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	60bb      	str	r3, [r7, #8]
 8001508:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800150a:	4b0f      	ldr	r3, [pc, #60]	; (8001548 <HAL_MspInit+0x5c>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	4a0e      	ldr	r2, [pc, #56]	; (8001548 <HAL_MspInit+0x5c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	61d3      	str	r3, [r2, #28]
 8001516:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <HAL_MspInit+0x5c>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <HAL_MspInit+0x60>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	4a04      	ldr	r2, [pc, #16]	; (800154c <HAL_MspInit+0x60>)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800153e:	bf00      	nop
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	40021000 	.word	0x40021000
 800154c:	40010000 	.word	0x40010000

08001550 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a14      	ldr	r2, [pc, #80]	; (80015bc <HAL_ADC_MspInit+0x6c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d121      	bne.n	80015b4 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 8001576:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157a:	6193      	str	r3, [r2, #24]
 800157c:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 800158a:	699b      	ldr	r3, [r3, #24]
 800158c:	4a0c      	ldr	r2, [pc, #48]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 800158e:	f043 0304 	orr.w	r3, r3, #4
 8001592:	6193      	str	r3, [r2, #24]
 8001594:	4b0a      	ldr	r3, [pc, #40]	; (80015c0 <HAL_ADC_MspInit+0x70>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	f003 0304 	and.w	r3, r3, #4
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015a0:	2303      	movs	r3, #3
 80015a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015a4:	2303      	movs	r3, #3
 80015a6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4805      	ldr	r0, [pc, #20]	; (80015c4 <HAL_ADC_MspInit+0x74>)
 80015b0:	f000 ff52 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3720      	adds	r7, #32
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40012400 	.word	0x40012400
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010800 	.word	0x40010800

080015c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a09      	ldr	r2, [pc, #36]	; (80015fc <HAL_TIM_Base_MspInit+0x34>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d10b      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_TIM_Base_MspInit+0x38>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_TIM_Base_MspInit+0x38>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	61d3      	str	r3, [r2, #28]
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_TIM_Base_MspInit+0x38>)
 80015e8:	69db      	ldr	r3, [r3, #28]
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80015f2:	bf00      	nop
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	40000400 	.word	0x40000400
 8001600:	40021000 	.word	0x40021000

08001604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 0310 	add.w	r3, r7, #16
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_UART_MspInit+0x8c>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d131      	bne.n	8001688 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	4a1a      	ldr	r2, [pc, #104]	; (8001694 <HAL_UART_MspInit+0x90>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6193      	str	r3, [r2, #24]
 8001630:	4b18      	ldr	r3, [pc, #96]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163c:	4b15      	ldr	r3, [pc, #84]	; (8001694 <HAL_UART_MspInit+0x90>)
 800163e:	699b      	ldr	r3, [r3, #24]
 8001640:	4a14      	ldr	r2, [pc, #80]	; (8001694 <HAL_UART_MspInit+0x90>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6193      	str	r3, [r2, #24]
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_UART_MspInit+0x90>)
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001654:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001658:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165a:	2302      	movs	r3, #2
 800165c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800165e:	2303      	movs	r3, #3
 8001660:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001662:	f107 0310 	add.w	r3, r7, #16
 8001666:	4619      	mov	r1, r3
 8001668:	480b      	ldr	r0, [pc, #44]	; (8001698 <HAL_UART_MspInit+0x94>)
 800166a:	f000 fef5 	bl	8002458 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001672:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	4619      	mov	r1, r3
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <HAL_UART_MspInit+0x94>)
 8001684:	f000 fee8 	bl	8002458 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001688:	bf00      	nop
 800168a:	3720      	adds	r7, #32
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	40013800 	.word	0x40013800
 8001694:	40021000 	.word	0x40021000
 8001698:	40010800 	.word	0x40010800

0800169c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08e      	sub	sp, #56	; 0x38
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016a4:	2300      	movs	r3, #0
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80016ac:	2300      	movs	r3, #0
 80016ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80016b2:	4b34      	ldr	r3, [pc, #208]	; (8001784 <HAL_InitTick+0xe8>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a33      	ldr	r2, [pc, #204]	; (8001784 <HAL_InitTick+0xe8>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b31      	ldr	r3, [pc, #196]	; (8001784 <HAL_InitTick+0xe8>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ca:	f107 0210 	add.w	r2, r7, #16
 80016ce:	f107 0314 	add.w	r3, r7, #20
 80016d2:	4611      	mov	r1, r2
 80016d4:	4618      	mov	r0, r3
 80016d6:	f001 fc35 	bl	8002f44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80016da:	6a3b      	ldr	r3, [r7, #32]
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80016de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d103      	bne.n	80016ec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80016e4:	f001 fc06 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80016e8:	6378      	str	r0, [r7, #52]	; 0x34
 80016ea:	e004      	b.n	80016f6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016ec:	f001 fc02 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 80016f0:	4603      	mov	r3, r0
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016f8:	4a23      	ldr	r2, [pc, #140]	; (8001788 <HAL_InitTick+0xec>)
 80016fa:	fba2 2303 	umull	r2, r3, r2, r3
 80016fe:	0c9b      	lsrs	r3, r3, #18
 8001700:	3b01      	subs	r3, #1
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001704:	4b21      	ldr	r3, [pc, #132]	; (800178c <HAL_InitTick+0xf0>)
 8001706:	4a22      	ldr	r2, [pc, #136]	; (8001790 <HAL_InitTick+0xf4>)
 8001708:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800170a:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_InitTick+0xf0>)
 800170c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001710:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001712:	4a1e      	ldr	r2, [pc, #120]	; (800178c <HAL_InitTick+0xf0>)
 8001714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001716:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001718:	4b1c      	ldr	r3, [pc, #112]	; (800178c <HAL_InitTick+0xf0>)
 800171a:	2200      	movs	r2, #0
 800171c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800171e:	4b1b      	ldr	r3, [pc, #108]	; (800178c <HAL_InitTick+0xf0>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001724:	4b19      	ldr	r3, [pc, #100]	; (800178c <HAL_InitTick+0xf0>)
 8001726:	2200      	movs	r2, #0
 8001728:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800172a:	4818      	ldr	r0, [pc, #96]	; (800178c <HAL_InitTick+0xf0>)
 800172c:	f001 fdc4 	bl	80032b8 <HAL_TIM_Base_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001736:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800173a:	2b00      	cmp	r3, #0
 800173c:	d11b      	bne.n	8001776 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800173e:	4813      	ldr	r0, [pc, #76]	; (800178c <HAL_InitTick+0xf0>)
 8001740:	f001 fe0a 	bl	8003358 <HAL_TIM_Base_Start_IT>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800174a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800174e:	2b00      	cmp	r3, #0
 8001750:	d111      	bne.n	8001776 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001752:	201e      	movs	r0, #30
 8001754:	f000 fe71 	bl	800243a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b0f      	cmp	r3, #15
 800175c:	d808      	bhi.n	8001770 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800175e:	2200      	movs	r2, #0
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	201e      	movs	r0, #30
 8001764:	f000 fe4d 	bl	8002402 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001768:	4a0a      	ldr	r2, [pc, #40]	; (8001794 <HAL_InitTick+0xf8>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
 800176e:	e002      	b.n	8001776 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001776:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800177a:	4618      	mov	r0, r3
 800177c:	3738      	adds	r7, #56	; 0x38
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	431bde83 	.word	0x431bde83
 800178c:	20000158 	.word	0x20000158
 8001790:	40000800 	.word	0x40000800
 8001794:	20000004 	.word	0x20000004

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800179c:	e7fe      	b.n	800179c <NMI_Handler+0x4>

0800179e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a2:	e7fe      	b.n	80017a2 <HardFault_Handler+0x4>

080017a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <MemManage_Handler+0x4>

080017aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr

080017ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr

080017da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017da:	b480      	push	{r7}
 80017dc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr
	...

080017e8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <TIM4_IRQHandler+0x10>)
 80017ee:	f001 fe05 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000158 	.word	0x20000158

080017fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e00a      	b.n	8001824 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800180e:	f3af 8000 	nop.w
 8001812:	4601      	mov	r1, r0
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	60ba      	str	r2, [r7, #8]
 800181a:	b2ca      	uxtb	r2, r1
 800181c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	3301      	adds	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	429a      	cmp	r2, r3
 800182a:	dbf0      	blt.n	800180e <_read+0x12>
  }

  return len;
 800182c:	687b      	ldr	r3, [r7, #4]
}
 800182e:	4618      	mov	r0, r3
 8001830:	3718      	adds	r7, #24
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b086      	sub	sp, #24
 800183a:	af00      	add	r7, sp, #0
 800183c:	60f8      	str	r0, [r7, #12]
 800183e:	60b9      	str	r1, [r7, #8]
 8001840:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	1c5a      	adds	r2, r3, #1
 800184c:	60ba      	str	r2, [r7, #8]
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f983 	bl	8000b5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbf1      	blt.n	8001848 <_write+0x12>
  }
  return len;
 8001864:	687b      	ldr	r3, [r7, #4]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3718      	adds	r7, #24
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <_close>:

int _close(int file)
{
 800186e:	b480      	push	{r7}
 8001870:	b083      	sub	sp, #12
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800187a:	4618      	mov	r0, r3
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001894:	605a      	str	r2, [r3, #4]
  return 0;
 8001896:	2300      	movs	r3, #0
}
 8001898:	4618      	mov	r0, r3
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <_isatty>:

int _isatty(int file)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018aa:	2301      	movs	r3, #1
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b085      	sub	sp, #20
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	60f8      	str	r0, [r7, #12]
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	4618      	mov	r0, r3
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f002 fd7e 	bl	8004400 <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20005000 	.word	0x20005000
 8001930:	00000400 	.word	0x00000400
 8001934:	200001a0 	.word	0x200001a0
 8001938:	200002f8 	.word	0x200002f8

0800193c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001948:	f7ff fff8 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800194c:	480b      	ldr	r0, [pc, #44]	; (800197c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800194e:	490c      	ldr	r1, [pc, #48]	; (8001980 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001950:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001964:	4c09      	ldr	r4, [pc, #36]	; (800198c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001972:	f002 fd4b 	bl	800440c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001976:	f7ff fc37 	bl	80011e8 <main>
  bx lr
 800197a:	4770      	bx	lr
  ldr r0, =_sdata
 800197c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001984:	0800525c 	.word	0x0800525c
  ldr r2, =_sbss
 8001988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800198c:	200002f4 	.word	0x200002f4

08001990 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001990:	e7fe      	b.n	8001990 <ADC1_2_IRQHandler>
	...

08001994 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_Init+0x28>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	; (80019bc <HAL_Init+0x28>)
 800199e:	f043 0310 	orr.w	r3, r3, #16
 80019a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 fd21 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	200f      	movs	r0, #15
 80019ac:	f7ff fe76 	bl	800169c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fd9c 	bl	80014ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40022000 	.word	0x40022000

080019c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <HAL_IncTick+0x1c>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_IncTick+0x20>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a03      	ldr	r2, [pc, #12]	; (80019e0 <HAL_IncTick+0x20>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000008 	.word	0x20000008
 80019e0:	200001a4 	.word	0x200001a4

080019e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return uwTick;
 80019e8:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <HAL_GetTick+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	200001a4 	.word	0x200001a4

080019f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a00:	f7ff fff0 	bl	80019e4 <HAL_GetTick>
 8001a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a10:	d005      	beq.n	8001a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_Delay+0x44>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a1e:	bf00      	nop
 8001a20:	f7ff ffe0 	bl	80019e4 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f7      	bhi.n	8001a20 <HAL_Delay+0x28>
  {
  }
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000008 	.word	0x20000008

08001a40 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e0be      	b.n	8001be0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fd66 	bl	8001550 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fbc5 	bl	8002214 <ADC_ConversionStop_Disable>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f003 0310 	and.w	r3, r3, #16
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f040 8099 	bne.w	8001bce <HAL_ADC_Init+0x18e>
 8001a9c:	7dfb      	ldrb	r3, [r7, #23]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f040 8095 	bne.w	8001bce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001aac:	f023 0302 	bic.w	r3, r3, #2
 8001ab0:	f043 0202 	orr.w	r2, r3, #2
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001ac0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7b1b      	ldrb	r3, [r3, #12]
 8001ac6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001ac8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad8:	d003      	beq.n	8001ae2 <HAL_ADC_Init+0xa2>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d102      	bne.n	8001ae8 <HAL_ADC_Init+0xa8>
 8001ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ae6:	e000      	b.n	8001aea <HAL_ADC_Init+0xaa>
 8001ae8:	2300      	movs	r3, #0
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7d1b      	ldrb	r3, [r3, #20]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d119      	bne.n	8001b2c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	7b1b      	ldrb	r3, [r3, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	035a      	lsls	r2, r3, #13
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b10:	613b      	str	r3, [r7, #16]
 8001b12:	e00b      	b.n	8001b2c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	f043 0220 	orr.w	r2, r3, #32
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b24:	f043 0201 	orr.w	r2, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	4b28      	ldr	r3, [pc, #160]	; (8001be8 <HAL_ADC_Init+0x1a8>)
 8001b48:	4013      	ands	r3, r2
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6812      	ldr	r2, [r2, #0]
 8001b4e:	68b9      	ldr	r1, [r7, #8]
 8001b50:	430b      	orrs	r3, r1
 8001b52:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b5c:	d003      	beq.n	8001b66 <HAL_ADC_Init+0x126>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d104      	bne.n	8001b70 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	051b      	lsls	r3, r3, #20
 8001b6e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b76:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	689a      	ldr	r2, [r3, #8]
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <HAL_ADC_Init+0x1ac>)
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	68ba      	ldr	r2, [r7, #8]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10b      	bne.n	8001bac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	f023 0303 	bic.w	r3, r3, #3
 8001ba2:	f043 0201 	orr.w	r2, r3, #1
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001baa:	e018      	b.n	8001bde <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb0:	f023 0312 	bic.w	r3, r3, #18
 8001bb4:	f043 0210 	orr.w	r2, r3, #16
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f043 0201 	orr.w	r2, r3, #1
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bcc:	e007      	b.n	8001bde <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd2:	f043 0210 	orr.w	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3718      	adds	r7, #24
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	ffe1f7fd 	.word	0xffe1f7fd
 8001bec:	ff1f0efe 	.word	0xff1f0efe

08001bf0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_ADC_Start+0x1a>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e098      	b.n	8001d3c <HAL_ADC_Start+0x14c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f000 faa4 	bl	8002160 <ADC_Enable>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f040 8087 	bne.w	8001d32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2c:	f023 0301 	bic.w	r3, r3, #1
 8001c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <HAL_ADC_Start+0x154>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d105      	bne.n	8001c4e <HAL_ADC_Start+0x5e>
 8001c42:	4b41      	ldr	r3, [pc, #260]	; (8001d48 <HAL_ADC_Start+0x158>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d115      	bne.n	8001c7a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d026      	beq.n	8001cb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c78:	e01d      	b.n	8001cb6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a2f      	ldr	r2, [pc, #188]	; (8001d48 <HAL_ADC_Start+0x158>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d004      	beq.n	8001c9a <HAL_ADC_Start+0xaa>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a2b      	ldr	r2, [pc, #172]	; (8001d44 <HAL_ADC_Start+0x154>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10d      	bne.n	8001cb6 <HAL_ADC_Start+0xc6>
 8001c9a:	4b2b      	ldr	r3, [pc, #172]	; (8001d48 <HAL_ADC_Start+0x158>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d007      	beq.n	8001cb6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d006      	beq.n	8001cd0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc6:	f023 0206 	bic.w	r2, r3, #6
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cce:	e002      	b.n	8001cd6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0202 	mvn.w	r2, #2
 8001ce6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cf2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cf6:	d113      	bne.n	8001d20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001cfc:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_ADC_Start+0x154>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d105      	bne.n	8001d0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001d02:	4b11      	ldr	r3, [pc, #68]	; (8001d48 <HAL_ADC_Start+0x158>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d108      	bne.n	8001d20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e00c      	b.n	8001d3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689a      	ldr	r2, [r3, #8]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	e003      	b.n	8001d3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001d3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3710      	adds	r7, #16
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40012800 	.word	0x40012800
 8001d48:	40012400 	.word	0x40012400

08001d4c <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d4c:	b590      	push	{r4, r7, lr}
 8001d4e:	b087      	sub	sp, #28
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001d62:	f7ff fe3f 	bl	80019e4 <HAL_GetTick>
 8001d66:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00b      	beq.n	8001d8e <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	f043 0220 	orr.w	r2, r3, #32
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e0d3      	b.n	8001f36 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d131      	bne.n	8001e00 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d12a      	bne.n	8001e00 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001daa:	e021      	b.n	8001df0 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001db2:	d01d      	beq.n	8001df0 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d007      	beq.n	8001dca <HAL_ADC_PollForConversion+0x7e>
 8001dba:	f7ff fe13 	bl	80019e4 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d212      	bcs.n	8001df0 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10b      	bne.n	8001df0 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ddc:	f043 0204 	orr.w	r2, r3, #4
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e0a2      	b.n	8001f36 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0d6      	beq.n	8001dac <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001dfe:	e070      	b.n	8001ee2 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001e00:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <HAL_ADC_PollForConversion+0x1f4>)
 8001e02:	681c      	ldr	r4, [r3, #0]
 8001e04:	2002      	movs	r0, #2
 8001e06:	f001 f9a1 	bl	800314c <HAL_RCCEx_GetPeriphCLKFreq>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	6919      	ldr	r1, [r3, #16]
 8001e16:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_ADC_PollForConversion+0x1f8>)
 8001e18:	400b      	ands	r3, r1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d118      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x104>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68d9      	ldr	r1, [r3, #12]
 8001e24:	4b48      	ldr	r3, [pc, #288]	; (8001f48 <HAL_ADC_PollForConversion+0x1fc>)
 8001e26:	400b      	ands	r3, r1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d111      	bne.n	8001e50 <HAL_ADC_PollForConversion+0x104>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6919      	ldr	r1, [r3, #16]
 8001e32:	4b46      	ldr	r3, [pc, #280]	; (8001f4c <HAL_ADC_PollForConversion+0x200>)
 8001e34:	400b      	ands	r3, r1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d108      	bne.n	8001e4c <HAL_ADC_PollForConversion+0x100>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	68d9      	ldr	r1, [r3, #12]
 8001e40:	4b43      	ldr	r3, [pc, #268]	; (8001f50 <HAL_ADC_PollForConversion+0x204>)
 8001e42:	400b      	ands	r3, r1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_PollForConversion+0x100>
 8001e48:	2314      	movs	r3, #20
 8001e4a:	e020      	b.n	8001e8e <HAL_ADC_PollForConversion+0x142>
 8001e4c:	2329      	movs	r3, #41	; 0x29
 8001e4e:	e01e      	b.n	8001e8e <HAL_ADC_PollForConversion+0x142>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	6919      	ldr	r1, [r3, #16]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <HAL_ADC_PollForConversion+0x200>)
 8001e58:	400b      	ands	r3, r1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_ADC_PollForConversion+0x120>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68d9      	ldr	r1, [r3, #12]
 8001e64:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_ADC_PollForConversion+0x204>)
 8001e66:	400b      	ands	r3, r1
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00d      	beq.n	8001e88 <HAL_ADC_PollForConversion+0x13c>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6919      	ldr	r1, [r3, #16]
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <HAL_ADC_PollForConversion+0x208>)
 8001e74:	400b      	ands	r3, r1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d108      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x140>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68d9      	ldr	r1, [r3, #12]
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_ADC_PollForConversion+0x208>)
 8001e82:	400b      	ands	r3, r1
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x140>
 8001e88:	2354      	movs	r3, #84	; 0x54
 8001e8a:	e000      	b.n	8001e8e <HAL_ADC_PollForConversion+0x142>
 8001e8c:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001e8e:	fb02 f303 	mul.w	r3, r2, r3
 8001e92:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001e94:	e021      	b.n	8001eda <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e9c:	d01a      	beq.n	8001ed4 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_ADC_PollForConversion+0x168>
 8001ea4:	f7ff fd9e 	bl	80019e4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d20f      	bcs.n	8001ed4 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d90b      	bls.n	8001ed4 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec0:	f043 0204 	orr.w	r2, r3, #4
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e030      	b.n	8001f36 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d8d9      	bhi.n	8001e96 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f06f 0212 	mvn.w	r2, #18
 8001eea:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001f02:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001f06:	d115      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d111      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d105      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	371c      	adds	r7, #28
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd90      	pop	{r4, r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	24924924 	.word	0x24924924
 8001f48:	00924924 	.word	0x00924924
 8001f4c:	12492492 	.word	0x12492492
 8001f50:	00492492 	.word	0x00492492
 8001f54:	00249249 	.word	0x00249249

08001f58 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d101      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x20>
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	e0dc      	b.n	800214a <HAL_ADC_ConfigChannel+0x1da>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b06      	cmp	r3, #6
 8001f9e:	d81c      	bhi.n	8001fda <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	3b05      	subs	r3, #5
 8001fb2:	221f      	movs	r2, #31
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4019      	ands	r1, r3
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	6818      	ldr	r0, [r3, #0]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	4413      	add	r3, r2
 8001fca:	3b05      	subs	r3, #5
 8001fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8001fd8:	e03c      	b.n	8002054 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b0c      	cmp	r3, #12
 8001fe0:	d81c      	bhi.n	800201c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3b23      	subs	r3, #35	; 0x23
 8001ff4:	221f      	movs	r2, #31
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	4019      	ands	r1, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	6818      	ldr	r0, [r3, #0]
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	4613      	mov	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	4413      	add	r3, r2
 800200c:	3b23      	subs	r3, #35	; 0x23
 800200e:	fa00 f203 	lsl.w	r2, r0, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	631a      	str	r2, [r3, #48]	; 0x30
 800201a:	e01b      	b.n	8002054 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	4413      	add	r3, r2
 800202c:	3b41      	subs	r3, #65	; 0x41
 800202e:	221f      	movs	r2, #31
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	4019      	ands	r1, r3
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6818      	ldr	r0, [r3, #0]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	4413      	add	r3, r2
 8002046:	3b41      	subs	r3, #65	; 0x41
 8002048:	fa00 f203 	lsl.w	r2, r0, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b09      	cmp	r3, #9
 800205a:	d91c      	bls.n	8002096 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4413      	add	r3, r2
 800206c:	3b1e      	subs	r3, #30
 800206e:	2207      	movs	r2, #7
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	4019      	ands	r1, r3
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	6898      	ldr	r0, [r3, #8]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4613      	mov	r3, r2
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	4413      	add	r3, r2
 8002086:	3b1e      	subs	r3, #30
 8002088:	fa00 f203 	lsl.w	r2, r0, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	60da      	str	r2, [r3, #12]
 8002094:	e019      	b.n	80020ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6919      	ldr	r1, [r3, #16]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	4613      	mov	r3, r2
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	4413      	add	r3, r2
 80020a6:	2207      	movs	r2, #7
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4019      	ands	r1, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6898      	ldr	r0, [r3, #8]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	fa00 f203 	lsl.w	r2, r0, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2b10      	cmp	r3, #16
 80020d0:	d003      	beq.n	80020da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80020d6:	2b11      	cmp	r3, #17
 80020d8:	d132      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a1d      	ldr	r2, [pc, #116]	; (8002154 <HAL_ADC_ConfigChannel+0x1e4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d125      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d126      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689a      	ldr	r2, [r3, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002100:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b10      	cmp	r3, #16
 8002108:	d11a      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800210a:	4b13      	ldr	r3, [pc, #76]	; (8002158 <HAL_ADC_ConfigChannel+0x1e8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a13      	ldr	r2, [pc, #76]	; (800215c <HAL_ADC_ConfigChannel+0x1ec>)
 8002110:	fba2 2303 	umull	r2, r3, r2, r3
 8002114:	0c9a      	lsrs	r2, r3, #18
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002120:	e002      	b.n	8002128 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	3b01      	subs	r3, #1
 8002126:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1f9      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x1b2>
 800212e:	e007      	b.n	8002140 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002134:	f043 0220 	orr.w	r2, r3, #32
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr
 8002154:	40012400 	.word	0x40012400
 8002158:	20000000 	.word	0x20000000
 800215c:	431bde83 	.word	0x431bde83

08002160 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d040      	beq.n	8002200 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <ADC_Enable+0xac>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <ADC_Enable+0xb0>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	0c9b      	lsrs	r3, r3, #18
 800219a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800219c:	e002      	b.n	80021a4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3b01      	subs	r3, #1
 80021a2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d1f9      	bne.n	800219e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80021aa:	f7ff fc1b 	bl	80019e4 <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021b0:	e01f      	b.n	80021f2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021b2:	f7ff fc17 	bl	80019e4 <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d918      	bls.n	80021f2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d011      	beq.n	80021f2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	f043 0210 	orr.w	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f043 0201 	orr.w	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e007      	b.n	8002202 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d1d8      	bne.n	80021b2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000000 	.word	0x20000000
 8002210:	431bde83 	.word	0x431bde83

08002214 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d12e      	bne.n	800228c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800223e:	f7ff fbd1 	bl	80019e4 <HAL_GetTick>
 8002242:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002244:	e01b      	b.n	800227e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002246:	f7ff fbcd 	bl	80019e4 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d914      	bls.n	800227e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10d      	bne.n	800227e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002266:	f043 0210 	orr.w	r2, r3, #16
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002272:	f043 0201 	orr.w	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e007      	b.n	800228e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b01      	cmp	r3, #1
 800228a:	d0dc      	beq.n	8002246 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022b4:	4013      	ands	r3, r2
 80022b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	; (80022dc <__NVIC_SetPriorityGrouping+0x44>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	e000ed00 	.word	0xe000ed00

080022e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <__NVIC_GetPriorityGrouping+0x18>)
 80022e6:	68db      	ldr	r3, [r3, #12]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	f003 0307 	and.w	r3, r3, #7
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr
 80022f6:	bf00      	nop
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	2b00      	cmp	r3, #0
 800230c:	db0b      	blt.n	8002326 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800230e:	79fb      	ldrb	r3, [r7, #7]
 8002310:	f003 021f 	and.w	r2, r3, #31
 8002314:	4906      	ldr	r1, [pc, #24]	; (8002330 <__NVIC_EnableIRQ+0x34>)
 8002316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231a:	095b      	lsrs	r3, r3, #5
 800231c:	2001      	movs	r0, #1
 800231e:	fa00 f202 	lsl.w	r2, r0, r2
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002326:	bf00      	nop
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	e000e100 	.word	0xe000e100

08002334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	6039      	str	r1, [r7, #0]
 800233e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002344:	2b00      	cmp	r3, #0
 8002346:	db0a      	blt.n	800235e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	b2da      	uxtb	r2, r3
 800234c:	490c      	ldr	r1, [pc, #48]	; (8002380 <__NVIC_SetPriority+0x4c>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	0112      	lsls	r2, r2, #4
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	440b      	add	r3, r1
 8002358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800235c:	e00a      	b.n	8002374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	b2da      	uxtb	r2, r3
 8002362:	4908      	ldr	r1, [pc, #32]	; (8002384 <__NVIC_SetPriority+0x50>)
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3b04      	subs	r3, #4
 800236c:	0112      	lsls	r2, r2, #4
 800236e:	b2d2      	uxtb	r2, r2
 8002370:	440b      	add	r3, r1
 8002372:	761a      	strb	r2, [r3, #24]
}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000e100 	.word	0xe000e100
 8002384:	e000ed00 	.word	0xe000ed00

08002388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f1c3 0307 	rsb	r3, r3, #7
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	bf28      	it	cs
 80023a6:	2304      	movcs	r3, #4
 80023a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2b06      	cmp	r3, #6
 80023b0:	d902      	bls.n	80023b8 <NVIC_EncodePriority+0x30>
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3b03      	subs	r3, #3
 80023b6:	e000      	b.n	80023ba <NVIC_EncodePriority+0x32>
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43da      	mvns	r2, r3
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	401a      	ands	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	fa01 f303 	lsl.w	r3, r1, r3
 80023da:	43d9      	mvns	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e0:	4313      	orrs	r3, r2
         );
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3724      	adds	r7, #36	; 0x24
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bc80      	pop	{r7}
 80023ea:	4770      	bx	lr

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff4f 	bl	8002298 <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff64 	bl	80022e0 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ffb2 	bl	8002388 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff81 	bl	8002334 <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff57 	bl	80022fc <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002458:	b480      	push	{r7}
 800245a:	b08b      	sub	sp, #44	; 0x2c
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002462:	2300      	movs	r3, #0
 8002464:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246a:	e169      	b.n	8002740 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800246c:	2201      	movs	r2, #1
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	429a      	cmp	r2, r3
 8002486:	f040 8158 	bne.w	800273a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4a9a      	ldr	r2, [pc, #616]	; (80026f8 <HAL_GPIO_Init+0x2a0>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d05e      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 8002494:	4a98      	ldr	r2, [pc, #608]	; (80026f8 <HAL_GPIO_Init+0x2a0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d875      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 800249a:	4a98      	ldr	r2, [pc, #608]	; (80026fc <HAL_GPIO_Init+0x2a4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d058      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024a0:	4a96      	ldr	r2, [pc, #600]	; (80026fc <HAL_GPIO_Init+0x2a4>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d86f      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024a6:	4a96      	ldr	r2, [pc, #600]	; (8002700 <HAL_GPIO_Init+0x2a8>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d052      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024ac:	4a94      	ldr	r2, [pc, #592]	; (8002700 <HAL_GPIO_Init+0x2a8>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d869      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024b2:	4a94      	ldr	r2, [pc, #592]	; (8002704 <HAL_GPIO_Init+0x2ac>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04c      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024b8:	4a92      	ldr	r2, [pc, #584]	; (8002704 <HAL_GPIO_Init+0x2ac>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d863      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024be:	4a92      	ldr	r2, [pc, #584]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d046      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
 80024c4:	4a90      	ldr	r2, [pc, #576]	; (8002708 <HAL_GPIO_Init+0x2b0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d85d      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024ca:	2b12      	cmp	r3, #18
 80024cc:	d82a      	bhi.n	8002524 <HAL_GPIO_Init+0xcc>
 80024ce:	2b12      	cmp	r3, #18
 80024d0:	d859      	bhi.n	8002586 <HAL_GPIO_Init+0x12e>
 80024d2:	a201      	add	r2, pc, #4	; (adr r2, 80024d8 <HAL_GPIO_Init+0x80>)
 80024d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024d8:	08002553 	.word	0x08002553
 80024dc:	0800252d 	.word	0x0800252d
 80024e0:	0800253f 	.word	0x0800253f
 80024e4:	08002581 	.word	0x08002581
 80024e8:	08002587 	.word	0x08002587
 80024ec:	08002587 	.word	0x08002587
 80024f0:	08002587 	.word	0x08002587
 80024f4:	08002587 	.word	0x08002587
 80024f8:	08002587 	.word	0x08002587
 80024fc:	08002587 	.word	0x08002587
 8002500:	08002587 	.word	0x08002587
 8002504:	08002587 	.word	0x08002587
 8002508:	08002587 	.word	0x08002587
 800250c:	08002587 	.word	0x08002587
 8002510:	08002587 	.word	0x08002587
 8002514:	08002587 	.word	0x08002587
 8002518:	08002587 	.word	0x08002587
 800251c:	08002535 	.word	0x08002535
 8002520:	08002549 	.word	0x08002549
 8002524:	4a79      	ldr	r2, [pc, #484]	; (800270c <HAL_GPIO_Init+0x2b4>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d013      	beq.n	8002552 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800252a:	e02c      	b.n	8002586 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	623b      	str	r3, [r7, #32]
          break;
 8002532:	e029      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	3304      	adds	r3, #4
 800253a:	623b      	str	r3, [r7, #32]
          break;
 800253c:	e024      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	3308      	adds	r3, #8
 8002544:	623b      	str	r3, [r7, #32]
          break;
 8002546:	e01f      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	330c      	adds	r3, #12
 800254e:	623b      	str	r3, [r7, #32]
          break;
 8002550:	e01a      	b.n	8002588 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800255a:	2304      	movs	r3, #4
 800255c:	623b      	str	r3, [r7, #32]
          break;
 800255e:	e013      	b.n	8002588 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002568:	2308      	movs	r3, #8
 800256a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69fa      	ldr	r2, [r7, #28]
 8002570:	611a      	str	r2, [r3, #16]
          break;
 8002572:	e009      	b.n	8002588 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002574:	2308      	movs	r3, #8
 8002576:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69fa      	ldr	r2, [r7, #28]
 800257c:	615a      	str	r2, [r3, #20]
          break;
 800257e:	e003      	b.n	8002588 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002580:	2300      	movs	r3, #0
 8002582:	623b      	str	r3, [r7, #32]
          break;
 8002584:	e000      	b.n	8002588 <HAL_GPIO_Init+0x130>
          break;
 8002586:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	2bff      	cmp	r3, #255	; 0xff
 800258c:	d801      	bhi.n	8002592 <HAL_GPIO_Init+0x13a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	e001      	b.n	8002596 <HAL_GPIO_Init+0x13e>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	3304      	adds	r3, #4
 8002596:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	2bff      	cmp	r3, #255	; 0xff
 800259c:	d802      	bhi.n	80025a4 <HAL_GPIO_Init+0x14c>
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	e002      	b.n	80025aa <HAL_GPIO_Init+0x152>
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	3b08      	subs	r3, #8
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	210f      	movs	r1, #15
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	fa01 f303 	lsl.w	r3, r1, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	401a      	ands	r2, r3
 80025bc:	6a39      	ldr	r1, [r7, #32]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	431a      	orrs	r2, r3
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 80b1 	beq.w	800273a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80025d8:	4b4d      	ldr	r3, [pc, #308]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80025da:	699b      	ldr	r3, [r3, #24]
 80025dc:	4a4c      	ldr	r2, [pc, #304]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80025de:	f043 0301 	orr.w	r3, r3, #1
 80025e2:	6193      	str	r3, [r2, #24]
 80025e4:	4b4a      	ldr	r3, [pc, #296]	; (8002710 <HAL_GPIO_Init+0x2b8>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80025f0:	4a48      	ldr	r2, [pc, #288]	; (8002714 <HAL_GPIO_Init+0x2bc>)
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	220f      	movs	r2, #15
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a40      	ldr	r2, [pc, #256]	; (8002718 <HAL_GPIO_Init+0x2c0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d013      	beq.n	8002644 <HAL_GPIO_Init+0x1ec>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	4a3f      	ldr	r2, [pc, #252]	; (800271c <HAL_GPIO_Init+0x2c4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d00d      	beq.n	8002640 <HAL_GPIO_Init+0x1e8>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a3e      	ldr	r2, [pc, #248]	; (8002720 <HAL_GPIO_Init+0x2c8>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d007      	beq.n	800263c <HAL_GPIO_Init+0x1e4>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a3d      	ldr	r2, [pc, #244]	; (8002724 <HAL_GPIO_Init+0x2cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d101      	bne.n	8002638 <HAL_GPIO_Init+0x1e0>
 8002634:	2303      	movs	r3, #3
 8002636:	e006      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002638:	2304      	movs	r3, #4
 800263a:	e004      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 800263c:	2302      	movs	r3, #2
 800263e:	e002      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002640:	2301      	movs	r3, #1
 8002642:	e000      	b.n	8002646 <HAL_GPIO_Init+0x1ee>
 8002644:	2300      	movs	r3, #0
 8002646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002648:	f002 0203 	and.w	r2, r2, #3
 800264c:	0092      	lsls	r2, r2, #2
 800264e:	4093      	lsls	r3, r2
 8002650:	68fa      	ldr	r2, [r7, #12]
 8002652:	4313      	orrs	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002656:	492f      	ldr	r1, [pc, #188]	; (8002714 <HAL_GPIO_Init+0x2bc>)
 8002658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265a:	089b      	lsrs	r3, r3, #2
 800265c:	3302      	adds	r3, #2
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002670:	4b2d      	ldr	r3, [pc, #180]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	492c      	ldr	r1, [pc, #176]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 8002676:	69bb      	ldr	r3, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800267e:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	43db      	mvns	r3, r3
 8002686:	4928      	ldr	r1, [pc, #160]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 8002688:	4013      	ands	r3, r2
 800268a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d006      	beq.n	80026a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002698:	4b23      	ldr	r3, [pc, #140]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	4922      	ldr	r1, [pc, #136]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	60cb      	str	r3, [r1, #12]
 80026a4:	e006      	b.n	80026b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	43db      	mvns	r3, r3
 80026ae:	491e      	ldr	r1, [pc, #120]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80026c0:	4b19      	ldr	r3, [pc, #100]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	4918      	ldr	r1, [pc, #96]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	604b      	str	r3, [r1, #4]
 80026cc:	e006      	b.n	80026dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80026ce:	4b16      	ldr	r3, [pc, #88]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	43db      	mvns	r3, r3
 80026d6:	4914      	ldr	r1, [pc, #80]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026d8:	4013      	ands	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d021      	beq.n	800272c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	490e      	ldr	r1, [pc, #56]	; (8002728 <HAL_GPIO_Init+0x2d0>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e021      	b.n	800273a <HAL_GPIO_Init+0x2e2>
 80026f6:	bf00      	nop
 80026f8:	10320000 	.word	0x10320000
 80026fc:	10310000 	.word	0x10310000
 8002700:	10220000 	.word	0x10220000
 8002704:	10210000 	.word	0x10210000
 8002708:	10120000 	.word	0x10120000
 800270c:	10110000 	.word	0x10110000
 8002710:	40021000 	.word	0x40021000
 8002714:	40010000 	.word	0x40010000
 8002718:	40010800 	.word	0x40010800
 800271c:	40010c00 	.word	0x40010c00
 8002720:	40011000 	.word	0x40011000
 8002724:	40011400 	.word	0x40011400
 8002728:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_GPIO_Init+0x304>)
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	43db      	mvns	r3, r3
 8002734:	4909      	ldr	r1, [pc, #36]	; (800275c <HAL_GPIO_Init+0x304>)
 8002736:	4013      	ands	r3, r2
 8002738:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	3301      	adds	r3, #1
 800273e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	f47f ae8e 	bne.w	800246c <HAL_GPIO_Init+0x14>
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	372c      	adds	r7, #44	; 0x2c
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	40010400 	.word	0x40010400

08002760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e272      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 8087 	beq.w	800288e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002780:	4b92      	ldr	r3, [pc, #584]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f003 030c 	and.w	r3, r3, #12
 8002788:	2b04      	cmp	r3, #4
 800278a:	d00c      	beq.n	80027a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800278c:	4b8f      	ldr	r3, [pc, #572]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 030c 	and.w	r3, r3, #12
 8002794:	2b08      	cmp	r3, #8
 8002796:	d112      	bne.n	80027be <HAL_RCC_OscConfig+0x5e>
 8002798:	4b8c      	ldr	r3, [pc, #560]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027a4:	d10b      	bne.n	80027be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a6:	4b89      	ldr	r3, [pc, #548]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d06c      	beq.n	800288c <HAL_RCC_OscConfig+0x12c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d168      	bne.n	800288c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e24c      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x76>
 80027c8:	4b80      	ldr	r3, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a7f      	ldr	r2, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d2:	6013      	str	r3, [r2, #0]
 80027d4:	e02e      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d10c      	bne.n	80027f8 <HAL_RCC_OscConfig+0x98>
 80027de:	4b7b      	ldr	r3, [pc, #492]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7a      	ldr	r2, [pc, #488]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	4b78      	ldr	r3, [pc, #480]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a77      	ldr	r2, [pc, #476]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	e01d      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002800:	d10c      	bne.n	800281c <HAL_RCC_OscConfig+0xbc>
 8002802:	4b72      	ldr	r3, [pc, #456]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a71      	ldr	r2, [pc, #452]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800280c:	6013      	str	r3, [r2, #0]
 800280e:	4b6f      	ldr	r3, [pc, #444]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a6e      	ldr	r2, [pc, #440]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_OscConfig+0xd4>
 800281c:	4b6b      	ldr	r3, [pc, #428]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a6a      	ldr	r2, [pc, #424]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	6013      	str	r3, [r2, #0]
 8002828:	4b68      	ldr	r3, [pc, #416]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a67      	ldr	r2, [pc, #412]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800282e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002832:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800283c:	f7ff f8d2 	bl	80019e4 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002844:	f7ff f8ce 	bl	80019e4 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b64      	cmp	r3, #100	; 0x64
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e200      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002856:	4b5d      	ldr	r3, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0xe4>
 8002862:	e014      	b.n	800288e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7ff f8be 	bl	80019e4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286c:	f7ff f8ba 	bl	80019e4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b64      	cmp	r3, #100	; 0x64
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e1ec      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800287e:	4b53      	ldr	r3, [pc, #332]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x10c>
 800288a:	e000      	b.n	800288e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d063      	beq.n	8002962 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 030c 	and.w	r3, r3, #12
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80028a6:	4b49      	ldr	r3, [pc, #292]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b08      	cmp	r3, #8
 80028b0:	d11c      	bne.n	80028ec <HAL_RCC_OscConfig+0x18c>
 80028b2:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d116      	bne.n	80028ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028be:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d005      	beq.n	80028d6 <HAL_RCC_OscConfig+0x176>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d001      	beq.n	80028d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e1c0      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028d6:	4b3d      	ldr	r3, [pc, #244]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	695b      	ldr	r3, [r3, #20]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4939      	ldr	r1, [pc, #228]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ea:	e03a      	b.n	8002962 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d020      	beq.n	8002936 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	4b36      	ldr	r3, [pc, #216]	; (80029d0 <HAL_RCC_OscConfig+0x270>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fa:	f7ff f873 	bl	80019e4 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002902:	f7ff f86f 	bl	80019e4 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e1a1      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002914:	4b2d      	ldr	r3, [pc, #180]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d0f0      	beq.n	8002902 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002920:	4b2a      	ldr	r3, [pc, #168]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	00db      	lsls	r3, r3, #3
 800292e:	4927      	ldr	r1, [pc, #156]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002930:	4313      	orrs	r3, r2
 8002932:	600b      	str	r3, [r1, #0]
 8002934:	e015      	b.n	8002962 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002936:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <HAL_RCC_OscConfig+0x270>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7ff f852 	bl	80019e4 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002944:	f7ff f84e 	bl	80019e4 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e180      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002956:	4b1d      	ldr	r3, [pc, #116]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0302 	and.w	r3, r3, #2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03a      	beq.n	80029e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d019      	beq.n	80029aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002976:	4b17      	ldr	r3, [pc, #92]	; (80029d4 <HAL_RCC_OscConfig+0x274>)
 8002978:	2201      	movs	r2, #1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297c:	f7ff f832 	bl	80019e4 <HAL_GetTick>
 8002980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	e008      	b.n	8002996 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002984:	f7ff f82e 	bl	80019e4 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	2b02      	cmp	r3, #2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e160      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002996:	4b0d      	ldr	r3, [pc, #52]	; (80029cc <HAL_RCC_OscConfig+0x26c>)
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0f0      	beq.n	8002984 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80029a2:	2001      	movs	r0, #1
 80029a4:	f000 fafe 	bl	8002fa4 <RCC_Delay>
 80029a8:	e01c      	b.n	80029e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <HAL_RCC_OscConfig+0x274>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b0:	f7ff f818 	bl	80019e4 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b6:	e00f      	b.n	80029d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff f814 	bl	80019e4 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d908      	bls.n	80029d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e146      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
 80029ca:	bf00      	nop
 80029cc:	40021000 	.word	0x40021000
 80029d0:	42420000 	.word	0x42420000
 80029d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029d8:	4b92      	ldr	r3, [pc, #584]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	f003 0302 	and.w	r3, r3, #2
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d1e9      	bne.n	80029b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0304 	and.w	r3, r3, #4
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80a6 	beq.w	8002b3e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f6:	4b8b      	ldr	r3, [pc, #556]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a02:	4b88      	ldr	r3, [pc, #544]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	4a87      	ldr	r2, [pc, #540]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a0c:	61d3      	str	r3, [r2, #28]
 8002a0e:	4b85      	ldr	r3, [pc, #532]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a10:	69db      	ldr	r3, [r3, #28]
 8002a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a16:	60bb      	str	r3, [r7, #8]
 8002a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d118      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a2a:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7e      	ldr	r2, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a36:	f7fe ffd5 	bl	80019e4 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3e:	f7fe ffd1 	bl	80019e4 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b64      	cmp	r3, #100	; 0x64
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e103      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a50:	4b75      	ldr	r3, [pc, #468]	; (8002c28 <HAL_RCC_OscConfig+0x4c8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d0f0      	beq.n	8002a3e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d106      	bne.n	8002a72 <HAL_RCC_OscConfig+0x312>
 8002a64:	4b6f      	ldr	r3, [pc, #444]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a66:	6a1b      	ldr	r3, [r3, #32]
 8002a68:	4a6e      	ldr	r2, [pc, #440]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6213      	str	r3, [r2, #32]
 8002a70:	e02d      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x334>
 8002a7a:	4b6a      	ldr	r3, [pc, #424]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	4a69      	ldr	r2, [pc, #420]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a80:	f023 0301 	bic.w	r3, r3, #1
 8002a84:	6213      	str	r3, [r2, #32]
 8002a86:	4b67      	ldr	r3, [pc, #412]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	4a66      	ldr	r2, [pc, #408]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a8c:	f023 0304 	bic.w	r3, r3, #4
 8002a90:	6213      	str	r3, [r2, #32]
 8002a92:	e01c      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b05      	cmp	r3, #5
 8002a9a:	d10c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x356>
 8002a9c:	4b61      	ldr	r3, [pc, #388]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002a9e:	6a1b      	ldr	r3, [r3, #32]
 8002aa0:	4a60      	ldr	r2, [pc, #384]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aa2:	f043 0304 	orr.w	r3, r3, #4
 8002aa6:	6213      	str	r3, [r2, #32]
 8002aa8:	4b5e      	ldr	r3, [pc, #376]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aaa:	6a1b      	ldr	r3, [r3, #32]
 8002aac:	4a5d      	ldr	r2, [pc, #372]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6213      	str	r3, [r2, #32]
 8002ab4:	e00b      	b.n	8002ace <HAL_RCC_OscConfig+0x36e>
 8002ab6:	4b5b      	ldr	r3, [pc, #364]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	4a5a      	ldr	r2, [pc, #360]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002abc:	f023 0301 	bic.w	r3, r3, #1
 8002ac0:	6213      	str	r3, [r2, #32]
 8002ac2:	4b58      	ldr	r3, [pc, #352]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	4a57      	ldr	r2, [pc, #348]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ac8:	f023 0304 	bic.w	r3, r3, #4
 8002acc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d015      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad6:	f7fe ff85 	bl	80019e4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	e00a      	b.n	8002af4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ade:	f7fe ff81 	bl	80019e4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e0b1      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af4:	4b4b      	ldr	r3, [pc, #300]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ee      	beq.n	8002ade <HAL_RCC_OscConfig+0x37e>
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b02:	f7fe ff6f 	bl	80019e4 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7fe ff6b 	bl	80019e4 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e09b      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b20:	4b40      	ldr	r3, [pc, #256]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f003 0302 	and.w	r3, r3, #2
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ee      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b2c:	7dfb      	ldrb	r3, [r7, #23]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 8087 	beq.w	8002c56 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b48:	4b36      	ldr	r3, [pc, #216]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d061      	beq.n	8002c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	69db      	ldr	r3, [r3, #28]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d146      	bne.n	8002bea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b33      	ldr	r3, [pc, #204]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7fe ff3f 	bl	80019e4 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe ff3b 	bl	80019e4 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e06d      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7c:	4b29      	ldr	r3, [pc, #164]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d108      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4921      	ldr	r1, [pc, #132]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a19      	ldr	r1, [r3, #32]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	430b      	orrs	r3, r1
 8002bb6:	491b      	ldr	r1, [pc, #108]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bbc:	4b1b      	ldr	r3, [pc, #108]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe ff0f 	bl	80019e4 <HAL_GetTick>
 8002bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc8:	e008      	b.n	8002bdc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bca:	f7fe ff0b 	bl	80019e4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d901      	bls.n	8002bdc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	e03d      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d0f0      	beq.n	8002bca <HAL_RCC_OscConfig+0x46a>
 8002be8:	e035      	b.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bea:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_OscConfig+0x4cc>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf0:	f7fe fef8 	bl	80019e4 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf8:	f7fe fef4 	bl	80019e4 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e026      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c0a:	4b06      	ldr	r3, [pc, #24]	; (8002c24 <HAL_RCC_OscConfig+0x4c4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f0      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x498>
 8002c16:	e01e      	b.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e019      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
 8002c24:	40021000 	.word	0x40021000
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_OscConfig+0x500>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a1b      	ldr	r3, [r3, #32]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d106      	bne.n	8002c52 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d001      	beq.n	8002c56 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40021000 	.word	0x40021000

08002c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0d0      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c78:	4b6a      	ldr	r3, [pc, #424]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d910      	bls.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c86:	4b67      	ldr	r3, [pc, #412]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f023 0207 	bic.w	r2, r3, #7
 8002c8e:	4965      	ldr	r1, [pc, #404]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	4b63      	ldr	r3, [pc, #396]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0b8      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0304 	and.w	r3, r3, #4
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cc0:	4b59      	ldr	r3, [pc, #356]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	4a58      	ldr	r2, [pc, #352]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cc6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0308 	and.w	r3, r3, #8
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d005      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cd8:	4b53      	ldr	r3, [pc, #332]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a52      	ldr	r2, [pc, #328]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cde:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ce2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b50      	ldr	r3, [pc, #320]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	494d      	ldr	r1, [pc, #308]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d040      	beq.n	8002d84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d0a:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e07f      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e073      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e06b      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	4936      	ldr	r1, [pc, #216]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fe46 	bl	80019e4 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d5a:	e00a      	b.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d5c:	f7fe fe42 	bl	80019e4 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e053      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	4b2d      	ldr	r3, [pc, #180]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f003 020c 	and.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d1eb      	bne.n	8002d5c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d84:	4b27      	ldr	r3, [pc, #156]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d210      	bcs.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b24      	ldr	r3, [pc, #144]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 0207 	bic.w	r2, r3, #7
 8002d9a:	4922      	ldr	r1, [pc, #136]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da2:	4b20      	ldr	r3, [pc, #128]	; (8002e24 <HAL_RCC_ClockConfig+0x1c0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0307 	and.w	r3, r3, #7
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d001      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e032      	b.n	8002e1a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0304 	and.w	r3, r3, #4
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	4916      	ldr	r1, [pc, #88]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d009      	beq.n	8002df2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	490e      	ldr	r1, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002df2:	f000 f821 	bl	8002e38 <HAL_RCC_GetSysClockFreq>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b0b      	ldr	r3, [pc, #44]	; (8002e28 <HAL_RCC_ClockConfig+0x1c4>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	490a      	ldr	r1, [pc, #40]	; (8002e2c <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	5ccb      	ldrb	r3, [r1, r3]
 8002e06:	fa22 f303 	lsr.w	r3, r2, r3
 8002e0a:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <HAL_RCC_ClockConfig+0x1cc>)
 8002e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002e0e:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <HAL_RCC_ClockConfig+0x1d0>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe fc42 	bl	800169c <HAL_InitTick>

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	40022000 	.word	0x40022000
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	080051e0 	.word	0x080051e0
 8002e30:	20000000 	.word	0x20000000
 8002e34:	20000004 	.word	0x20000004

08002e38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	2300      	movs	r3, #0
 8002e44:	60bb      	str	r3, [r7, #8]
 8002e46:	2300      	movs	r3, #0
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	d002      	beq.n	8002e68 <HAL_RCC_GetSysClockFreq+0x30>
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d003      	beq.n	8002e6e <HAL_RCC_GetSysClockFreq+0x36>
 8002e66:	e027      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e68:	4b19      	ldr	r3, [pc, #100]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e6a:	613b      	str	r3, [r7, #16]
      break;
 8002e6c:	e027      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	4a17      	ldr	r2, [pc, #92]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002e78:	5cd3      	ldrb	r3, [r2, r3]
 8002e7a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d010      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e86:	4b11      	ldr	r3, [pc, #68]	; (8002ecc <HAL_RCC_GetSysClockFreq+0x94>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0c5b      	lsrs	r3, r3, #17
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	4a11      	ldr	r2, [pc, #68]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002e92:	5cd3      	ldrb	r3, [r2, r3]
 8002e94:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a0d      	ldr	r2, [pc, #52]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002e9a:	fb03 f202 	mul.w	r2, r3, r2
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	617b      	str	r3, [r7, #20]
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	613b      	str	r3, [r7, #16]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b05      	ldr	r3, [pc, #20]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002eba:	613b      	str	r3, [r7, #16]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	693b      	ldr	r3, [r7, #16]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	080051f8 	.word	0x080051f8
 8002ed8:	08005208 	.word	0x08005208
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b02      	ldr	r3, [pc, #8]	; (8002ef0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bc80      	pop	{r7}
 8002eee:	4770      	bx	lr
 8002ef0:	20000000 	.word	0x20000000

08002ef4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef8:	f7ff fff2 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	0a1b      	lsrs	r3, r3, #8
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40021000 	.word	0x40021000
 8002f18:	080051f0 	.word	0x080051f0

08002f1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f20:	f7ff ffde 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f24:	4602      	mov	r2, r0
 8002f26:	4b05      	ldr	r3, [pc, #20]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	0adb      	lsrs	r3, r3, #11
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	4903      	ldr	r1, [pc, #12]	; (8002f40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f32:	5ccb      	ldrb	r3, [r1, r3]
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	080051f0 	.word	0x080051f0

08002f44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	220f      	movs	r2, #15
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_GetClockConfig+0x58>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 0203 	and.w	r2, r3, #3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <HAL_RCC_GetClockConfig+0x58>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_GetClockConfig+0x58>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <HAL_RCC_GetClockConfig+0x58>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	08db      	lsrs	r3, r3, #3
 8002f7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_GetClockConfig+0x5c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0207 	and.w	r2, r3, #7
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002f92:	bf00      	nop
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40021000 	.word	0x40021000
 8002fa0:	40022000 	.word	0x40022000

08002fa4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002fac:	4b0a      	ldr	r3, [pc, #40]	; (8002fd8 <RCC_Delay+0x34>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	; (8002fdc <RCC_Delay+0x38>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	0a5b      	lsrs	r3, r3, #9
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002fc0:	bf00      	nop
  }
  while (Delay --);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1e5a      	subs	r2, r3, #1
 8002fc6:	60fa      	str	r2, [r7, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d1f9      	bne.n	8002fc0 <RCC_Delay+0x1c>
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	20000000 	.word	0x20000000
 8002fdc:	10624dd3 	.word	0x10624dd3

08002fe0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b086      	sub	sp, #24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d07d      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003000:	4b4f      	ldr	r3, [pc, #316]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	4a4b      	ldr	r2, [pc, #300]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003012:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003016:	61d3      	str	r3, [r2, #28]
 8003018:	4b49      	ldr	r3, [pc, #292]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800301a:	69db      	ldr	r3, [r3, #28]
 800301c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003020:	60bb      	str	r3, [r7, #8]
 8003022:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003024:	2301      	movs	r3, #1
 8003026:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b46      	ldr	r3, [pc, #280]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d118      	bne.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003034:	4b43      	ldr	r3, [pc, #268]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a42      	ldr	r2, [pc, #264]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800303a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800303e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003040:	f7fe fcd0 	bl	80019e4 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003046:	e008      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003048:	f7fe fccc 	bl	80019e4 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e06d      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003066:	4b36      	ldr	r3, [pc, #216]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003068:	6a1b      	ldr	r3, [r3, #32]
 800306a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800306e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d02e      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d027      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800308c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800308e:	4b2e      	ldr	r3, [pc, #184]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003096:	2200      	movs	r2, #0
 8003098:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800309a:	4a29      	ldr	r2, [pc, #164]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d014      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fc9b 	bl	80019e4 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	e00a      	b.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b2:	f7fe fc97 	bl	80019e4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d901      	bls.n	80030c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80030c4:	2303      	movs	r3, #3
 80030c6:	e036      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d0ee      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030d4:	4b1a      	ldr	r3, [pc, #104]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	4917      	ldr	r1, [pc, #92]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e6:	7dfb      	ldrb	r3, [r7, #23]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d105      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ee:	69db      	ldr	r3, [r3, #28]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030f6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003104:	4b0e      	ldr	r3, [pc, #56]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	490b      	ldr	r1, [pc, #44]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003112:	4313      	orrs	r3, r2
 8003114:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d008      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003122:	4b07      	ldr	r3, [pc, #28]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3718      	adds	r7, #24
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000
 8003144:	40007000 	.word	0x40007000
 8003148:	42420440 	.word	0x42420440

0800314c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
 8003158:	2300      	movs	r3, #0
 800315a:	61fb      	str	r3, [r7, #28]
 800315c:	2300      	movs	r3, #0
 800315e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	2300      	movs	r3, #0
 8003166:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b10      	cmp	r3, #16
 800316c:	d00a      	beq.n	8003184 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b10      	cmp	r3, #16
 8003172:	f200 808a 	bhi.w	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d045      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d075      	beq.n	800326e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003182:	e082      	b.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003184:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d07b      	beq.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	0c9b      	lsrs	r3, r3, #18
 800319a:	f003 030f 	and.w	r3, r3, #15
 800319e:	4a41      	ldr	r2, [pc, #260]	; (80032a4 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80031a0:	5cd3      	ldrb	r3, [r2, r3]
 80031a2:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d015      	beq.n	80031da <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	0c5b      	lsrs	r3, r3, #17
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	4a3b      	ldr	r2, [pc, #236]	; (80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 80031ba:	5cd3      	ldrb	r3, [r2, r3]
 80031bc:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00d      	beq.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 80031c8:	4a38      	ldr	r2, [pc, #224]	; (80032ac <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	61fb      	str	r3, [r7, #28]
 80031d8:	e004      	b.n	80031e4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80031de:	fb02 f303 	mul.w	r3, r2, r3
 80031e2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031e4:	4b2e      	ldr	r3, [pc, #184]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f0:	d102      	bne.n	80031f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	61bb      	str	r3, [r7, #24]
      break;
 80031f6:	e04a      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80031fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	61bb      	str	r3, [r7, #24]
      break;
 8003206:	e042      	b.n	800328e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003218:	d108      	bne.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d003      	beq.n	800322c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003224:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	e01f      	b.n	800326c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003236:	d109      	bne.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d003      	beq.n	800324c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003244:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	e00f      	b.n	800326c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003256:	d11c      	bne.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d016      	beq.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003264:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003268:	61bb      	str	r3, [r7, #24]
      break;
 800326a:	e012      	b.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800326c:	e011      	b.n	8003292 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800326e:	f7ff fe55 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 8003272:	4602      	mov	r2, r0
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	0b9b      	lsrs	r3, r3, #14
 800327a:	f003 0303 	and.w	r3, r3, #3
 800327e:	3301      	adds	r3, #1
 8003280:	005b      	lsls	r3, r3, #1
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	61bb      	str	r3, [r7, #24]
      break;
 8003288:	e004      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800328a:	bf00      	nop
 800328c:	e002      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800328e:	bf00      	nop
 8003290:	e000      	b.n	8003294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003292:	bf00      	nop
    }
  }
  return (frequency);
 8003294:	69bb      	ldr	r3, [r7, #24]
}
 8003296:	4618      	mov	r0, r3
 8003298:	3720      	adds	r7, #32
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40021000 	.word	0x40021000
 80032a4:	0800520c 	.word	0x0800520c
 80032a8:	0800521c 	.word	0x0800521c
 80032ac:	007a1200 	.word	0x007a1200
 80032b0:	003d0900 	.word	0x003d0900
 80032b4:	aaaaaaab 	.word	0xaaaaaaab

080032b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e041      	b.n	800334e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7fe f972 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3304      	adds	r3, #4
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f000 fa74 	bl	80037e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2201      	movs	r2, #1
 8003300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2201      	movs	r2, #1
 8003310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e03a      	b.n	80033e6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <HAL_TIM_Base_Start_IT+0x98>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d00e      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339a:	d009      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_TIM_Base_Start_IT+0x9c>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d004      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x58>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a13      	ldr	r2, [pc, #76]	; (80033f8 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d111      	bne.n	80033d4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2b06      	cmp	r3, #6
 80033c0:	d010      	beq.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f042 0201 	orr.w	r2, r2, #1
 80033d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d2:	e007      	b.n	80033e4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	40012c00 	.word	0x40012c00
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b02      	cmp	r3, #2
 8003410:	d122      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b02      	cmp	r3, #2
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f06f 0202 	mvn.w	r2, #2
 8003428:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f9b4 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 8003444:	e005      	b.n	8003452 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f9a7 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f000 f9b6 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b04      	cmp	r3, #4
 8003464:	d122      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b04      	cmp	r3, #4
 8003472:	d11b      	bne.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f98a 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f97d 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 f98c 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	f003 0308 	and.w	r3, r3, #8
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d122      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d11b      	bne.n	8003500 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f06f 0208 	mvn.w	r2, #8
 80034d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2204      	movs	r2, #4
 80034d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f960 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 80034ec:	e005      	b.n	80034fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f953 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f962 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	691b      	ldr	r3, [r3, #16]
 8003506:	f003 0310 	and.w	r3, r3, #16
 800350a:	2b10      	cmp	r3, #16
 800350c:	d122      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b10      	cmp	r3, #16
 800351a:	d11b      	bne.n	8003554 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0210 	mvn.w	r2, #16
 8003524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2208      	movs	r2, #8
 800352a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f936 	bl	80037ac <HAL_TIM_IC_CaptureCallback>
 8003540:	e005      	b.n	800354e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003542:	6878      	ldr	r0, [r7, #4]
 8003544:	f000 f929 	bl	800379a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f938 	bl	80037be <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	691b      	ldr	r3, [r3, #16]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b01      	cmp	r3, #1
 8003560:	d10e      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f06f 0201 	mvn.w	r2, #1
 8003578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7fd ff96 	bl	80014ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b80      	cmp	r3, #128	; 0x80
 800358c:	d10e      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003598:	2b80      	cmp	r3, #128	; 0x80
 800359a:	d107      	bne.n	80035ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa7b 	bl	8003aa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b6:	2b40      	cmp	r3, #64	; 0x40
 80035b8:	d10e      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c4:	2b40      	cmp	r3, #64	; 0x40
 80035c6:	d107      	bne.n	80035d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f8fc 	bl	80037d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d10e      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	f003 0320 	and.w	r3, r3, #32
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d107      	bne.n	8003604 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f06f 0220 	mvn.w	r2, #32
 80035fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa46 	bl	8003a90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003604:	bf00      	nop
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIM_ConfigClockSource+0x1c>
 8003624:	2302      	movs	r3, #2
 8003626:	e0b4      	b.n	8003792 <HAL_TIM_ConfigClockSource+0x186>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800364e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003660:	d03e      	beq.n	80036e0 <HAL_TIM_ConfigClockSource+0xd4>
 8003662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003666:	f200 8087 	bhi.w	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 800366a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800366e:	f000 8086 	beq.w	800377e <HAL_TIM_ConfigClockSource+0x172>
 8003672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003676:	d87f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 8003678:	2b70      	cmp	r3, #112	; 0x70
 800367a:	d01a      	beq.n	80036b2 <HAL_TIM_ConfigClockSource+0xa6>
 800367c:	2b70      	cmp	r3, #112	; 0x70
 800367e:	d87b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 8003680:	2b60      	cmp	r3, #96	; 0x60
 8003682:	d050      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x11a>
 8003684:	2b60      	cmp	r3, #96	; 0x60
 8003686:	d877      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b50      	cmp	r3, #80	; 0x50
 800368a:	d03c      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0xfa>
 800368c:	2b50      	cmp	r3, #80	; 0x50
 800368e:	d873      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d058      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x13a>
 8003694:	2b40      	cmp	r3, #64	; 0x40
 8003696:	d86f      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 8003698:	2b30      	cmp	r3, #48	; 0x30
 800369a:	d064      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x15a>
 800369c:	2b30      	cmp	r3, #48	; 0x30
 800369e:	d86b      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d060      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x15a>
 80036a4:	2b20      	cmp	r3, #32
 80036a6:	d867      	bhi.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d05c      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x15a>
 80036ac:	2b10      	cmp	r3, #16
 80036ae:	d05a      	beq.n	8003766 <HAL_TIM_ConfigClockSource+0x15a>
 80036b0:	e062      	b.n	8003778 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036c2:	f000 f968 	bl	8003996 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80036d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	609a      	str	r2, [r3, #8]
      break;
 80036de:	e04f      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036f0:	f000 f951 	bl	8003996 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689a      	ldr	r2, [r3, #8]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003702:	609a      	str	r2, [r3, #8]
      break;
 8003704:	e03c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003712:	461a      	mov	r2, r3
 8003714:	f000 f8c8 	bl	80038a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2150      	movs	r1, #80	; 0x50
 800371e:	4618      	mov	r0, r3
 8003720:	f000 f91f 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003724:	e02c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003732:	461a      	mov	r2, r3
 8003734:	f000 f8e6 	bl	8003904 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2160      	movs	r1, #96	; 0x60
 800373e:	4618      	mov	r0, r3
 8003740:	f000 f90f 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003744:	e01c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003752:	461a      	mov	r2, r3
 8003754:	f000 f8a8 	bl	80038a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2140      	movs	r1, #64	; 0x40
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f8ff 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003764:	e00c      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f000 f8f6 	bl	8003962 <TIM_ITRx_SetConfig>
      break;
 8003776:	e003      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      break;
 800377c:	e000      	b.n	8003780 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800377e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2201      	movs	r2, #1
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003790:	7bfb      	ldrb	r3, [r7, #15]
}
 8003792:	4618      	mov	r0, r3
 8003794:	3710      	adds	r7, #16
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr

080037be <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037be:	b480      	push	{r7}
 80037c0:	b083      	sub	sp, #12
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80037c6:	bf00      	nop
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bc80      	pop	{r7}
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr
	...

080037e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a29      	ldr	r2, [pc, #164]	; (800389c <TIM_Base_SetConfig+0xb8>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00b      	beq.n	8003814 <TIM_Base_SetConfig+0x30>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003802:	d007      	beq.n	8003814 <TIM_Base_SetConfig+0x30>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a26      	ldr	r2, [pc, #152]	; (80038a0 <TIM_Base_SetConfig+0xbc>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d003      	beq.n	8003814 <TIM_Base_SetConfig+0x30>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a25      	ldr	r2, [pc, #148]	; (80038a4 <TIM_Base_SetConfig+0xc0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d108      	bne.n	8003826 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800381a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	68fa      	ldr	r2, [r7, #12]
 8003822:	4313      	orrs	r3, r2
 8003824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a1c      	ldr	r2, [pc, #112]	; (800389c <TIM_Base_SetConfig+0xb8>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00b      	beq.n	8003846 <TIM_Base_SetConfig+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003834:	d007      	beq.n	8003846 <TIM_Base_SetConfig+0x62>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a19      	ldr	r2, [pc, #100]	; (80038a0 <TIM_Base_SetConfig+0xbc>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_Base_SetConfig+0x62>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a18      	ldr	r2, [pc, #96]	; (80038a4 <TIM_Base_SetConfig+0xc0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d108      	bne.n	8003858 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800384c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	4313      	orrs	r3, r2
 8003864:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	689a      	ldr	r2, [r3, #8]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <TIM_Base_SetConfig+0xb8>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d103      	bne.n	800388c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	691a      	ldr	r2, [r3, #16]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	615a      	str	r2, [r3, #20]
}
 8003892:	bf00      	nop
 8003894:	3714      	adds	r7, #20
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	40000400 	.word	0x40000400
 80038a4:	40000800 	.word	0x40000800

080038a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	f023 0201 	bic.w	r2, r3, #1
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 030a 	bic.w	r3, r3, #10
 80038e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	621a      	str	r2, [r3, #32]
}
 80038fa:	bf00      	nop
 80038fc:	371c      	adds	r7, #28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6a1b      	ldr	r3, [r3, #32]
 8003914:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6a1b      	ldr	r3, [r3, #32]
 800391a:	f023 0210 	bic.w	r2, r3, #16
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800392e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	031b      	lsls	r3, r3, #12
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003940:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	bf00      	nop
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003962:	b480      	push	{r7}
 8003964:	b085      	sub	sp, #20
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	f043 0307 	orr.w	r3, r3, #7
 8003984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	609a      	str	r2, [r3, #8]
}
 800398c:	bf00      	nop
 800398e:	3714      	adds	r7, #20
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003996:	b480      	push	{r7}
 8003998:	b087      	sub	sp, #28
 800399a:	af00      	add	r7, sp, #0
 800399c:	60f8      	str	r0, [r7, #12]
 800399e:	60b9      	str	r1, [r7, #8]
 80039a0:	607a      	str	r2, [r7, #4]
 80039a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	021a      	lsls	r2, r3, #8
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	431a      	orrs	r2, r3
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	4313      	orrs	r3, r2
 80039be:	697a      	ldr	r2, [r7, #20]
 80039c0:	4313      	orrs	r3, r2
 80039c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	609a      	str	r2, [r3, #8]
}
 80039ca:	bf00      	nop
 80039cc:	371c      	adds	r7, #28
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr

080039d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b085      	sub	sp, #20
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d101      	bne.n	80039ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039e8:	2302      	movs	r3, #2
 80039ea:	e046      	b.n	8003a7a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68fa      	ldr	r2, [r7, #12]
 8003a24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a16      	ldr	r2, [pc, #88]	; (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d00e      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a38:	d009      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a12      	ldr	r2, [pc, #72]	; (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d004      	beq.n	8003a4e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a10      	ldr	r2, [pc, #64]	; (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d10c      	bne.n	8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	68ba      	ldr	r2, [r7, #8]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	40012c00 	.word	0x40012c00
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800

08003a90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc80      	pop	{r7}
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e042      	b.n	8003b4c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d106      	bne.n	8003ae0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7fd fd92 	bl	8001604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2224      	movs	r2, #36	; 0x24
 8003ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68da      	ldr	r2, [r3, #12]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 f9af 	bl	8003e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68da      	ldr	r2, [r3, #12]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}

08003b54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08a      	sub	sp, #40	; 0x28
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	4613      	mov	r3, r2
 8003b62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b64:	2300      	movs	r3, #0
 8003b66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d16d      	bne.n	8003c50 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d002      	beq.n	8003b80 <HAL_UART_Transmit+0x2c>
 8003b7a:	88fb      	ldrh	r3, [r7, #6]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e066      	b.n	8003c52 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2221      	movs	r2, #33	; 0x21
 8003b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b92:	f7fd ff27 	bl	80019e4 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	88fa      	ldrh	r2, [r7, #6]
 8003ba2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bac:	d108      	bne.n	8003bc0 <HAL_UART_Transmit+0x6c>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d104      	bne.n	8003bc0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e003      	b.n	8003bc8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bc8:	e02a      	b.n	8003c20 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	9300      	str	r3, [sp, #0]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2180      	movs	r1, #128	; 0x80
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f8d2 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e036      	b.n	8003c52 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10b      	bne.n	8003c02 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	881b      	ldrh	r3, [r3, #0]
 8003bee:	461a      	mov	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	61bb      	str	r3, [r7, #24]
 8003c00:	e007      	b.n	8003c12 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	781a      	ldrb	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1cf      	bne.n	8003bca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2140      	movs	r1, #64	; 0x40
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f8a2 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e006      	b.n	8003c52 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2220      	movs	r2, #32
 8003c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	e000      	b.n	8003c52 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003c50:	2302      	movs	r3, #2
  }
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3720      	adds	r7, #32
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}

08003c5a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c5a:	b580      	push	{r7, lr}
 8003c5c:	b08a      	sub	sp, #40	; 0x28
 8003c5e:	af02      	add	r7, sp, #8
 8003c60:	60f8      	str	r0, [r7, #12]
 8003c62:	60b9      	str	r1, [r7, #8]
 8003c64:	603b      	str	r3, [r7, #0]
 8003c66:	4613      	mov	r3, r2
 8003c68:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	2b20      	cmp	r3, #32
 8003c78:	d17c      	bne.n	8003d74 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d002      	beq.n	8003c86 <HAL_UART_Receive+0x2c>
 8003c80:	88fb      	ldrh	r3, [r7, #6]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e075      	b.n	8003d76 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2222      	movs	r2, #34	; 0x22
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c9e:	f7fd fea1 	bl	80019e4 <HAL_GetTick>
 8003ca2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	88fa      	ldrh	r2, [r7, #6]
 8003ca8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	88fa      	ldrh	r2, [r7, #6]
 8003cae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb8:	d108      	bne.n	8003ccc <HAL_UART_Receive+0x72>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d104      	bne.n	8003ccc <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	e003      	b.n	8003cd4 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cd4:	e043      	b.n	8003d5e <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	2120      	movs	r1, #32
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f000 f84c 	bl	8003d7e <UART_WaitOnFlagUntilTimeout>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	e042      	b.n	8003d76 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10c      	bne.n	8003d10 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d02:	b29a      	uxth	r2, r3
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	61bb      	str	r3, [r7, #24]
 8003d0e:	e01f      	b.n	8003d50 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d18:	d007      	beq.n	8003d2a <HAL_UART_Receive+0xd0>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_UART_Receive+0xde>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d106      	bne.n	8003d38 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e008      	b.n	8003d4a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d44:	b2da      	uxtb	r2, r3
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1b6      	bne.n	8003cd6 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8003d70:	2300      	movs	r3, #0
 8003d72:	e000      	b.n	8003d76 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d74:	2302      	movs	r3, #2
  }
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3720      	adds	r7, #32
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b090      	sub	sp, #64	; 0x40
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	60f8      	str	r0, [r7, #12]
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	603b      	str	r3, [r7, #0]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8e:	e050      	b.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d96:	d04c      	beq.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003d98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x30>
 8003d9e:	f7fd fe21 	bl	80019e4 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d241      	bcs.n	8003e32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	330c      	adds	r3, #12
 8003db4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dce:	637a      	str	r2, [r7, #52]	; 0x34
 8003dd0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	613b      	str	r3, [r7, #16]
   return(result);
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f023 0301 	bic.w	r3, r3, #1
 8003df8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e02:	623a      	str	r2, [r7, #32]
 8003e04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	69f9      	ldr	r1, [r7, #28]
 8003e08:	6a3a      	ldr	r2, [r7, #32]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2220      	movs	r2, #32
 8003e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e00f      	b.n	8003e52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	bf0c      	ite	eq
 8003e42:	2301      	moveq	r3, #1
 8003e44:	2300      	movne	r3, #0
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	461a      	mov	r2, r3
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d09f      	beq.n	8003d90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	3740      	adds	r7, #64	; 0x40
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
	...

08003e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689a      	ldr	r2, [r3, #8]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003e96:	f023 030c 	bic.w	r3, r3, #12
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	68b9      	ldr	r1, [r7, #8]
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	699a      	ldr	r2, [r3, #24]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2c      	ldr	r2, [pc, #176]	; (8003f70 <UART_SetConfig+0x114>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d103      	bne.n	8003ecc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7ff f82a 	bl	8002f1c <HAL_RCC_GetPCLK2Freq>
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	e002      	b.n	8003ed2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003ecc:	f7ff f812 	bl	8002ef4 <HAL_RCC_GetPCLK1Freq>
 8003ed0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	009a      	lsls	r2, r3, #2
 8003edc:	441a      	add	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	009b      	lsls	r3, r3, #2
 8003ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee8:	4a22      	ldr	r2, [pc, #136]	; (8003f74 <UART_SetConfig+0x118>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	095b      	lsrs	r3, r3, #5
 8003ef0:	0119      	lsls	r1, r3, #4
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	009a      	lsls	r2, r3, #2
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	009b      	lsls	r3, r3, #2
 8003f04:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f08:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <UART_SetConfig+0x118>)
 8003f0a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f0e:	095b      	lsrs	r3, r3, #5
 8003f10:	2064      	movs	r0, #100	; 0x64
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	3332      	adds	r3, #50	; 0x32
 8003f1c:	4a15      	ldr	r2, [pc, #84]	; (8003f74 <UART_SetConfig+0x118>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	095b      	lsrs	r3, r3, #5
 8003f24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f28:	4419      	add	r1, r3
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009a      	lsls	r2, r3, #2
 8003f34:	441a      	add	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f40:	4b0c      	ldr	r3, [pc, #48]	; (8003f74 <UART_SetConfig+0x118>)
 8003f42:	fba3 0302 	umull	r0, r3, r3, r2
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2064      	movs	r0, #100	; 0x64
 8003f4a:	fb00 f303 	mul.w	r3, r0, r3
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	3332      	adds	r3, #50	; 0x32
 8003f54:	4a07      	ldr	r2, [pc, #28]	; (8003f74 <UART_SetConfig+0x118>)
 8003f56:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	f003 020f 	and.w	r2, r3, #15
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	440a      	add	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	40013800 	.word	0x40013800
 8003f74:	51eb851f 	.word	0x51eb851f

08003f78 <std>:
 8003f78:	2300      	movs	r3, #0
 8003f7a:	b510      	push	{r4, lr}
 8003f7c:	4604      	mov	r4, r0
 8003f7e:	e9c0 3300 	strd	r3, r3, [r0]
 8003f82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f86:	6083      	str	r3, [r0, #8]
 8003f88:	8181      	strh	r1, [r0, #12]
 8003f8a:	6643      	str	r3, [r0, #100]	; 0x64
 8003f8c:	81c2      	strh	r2, [r0, #14]
 8003f8e:	6183      	str	r3, [r0, #24]
 8003f90:	4619      	mov	r1, r3
 8003f92:	2208      	movs	r2, #8
 8003f94:	305c      	adds	r0, #92	; 0x5c
 8003f96:	f000 f9e5 	bl	8004364 <memset>
 8003f9a:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <std+0x38>)
 8003f9c:	6224      	str	r4, [r4, #32]
 8003f9e:	6263      	str	r3, [r4, #36]	; 0x24
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <std+0x3c>)
 8003fa2:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <std+0x40>)
 8003fa6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fa8:	4b04      	ldr	r3, [pc, #16]	; (8003fbc <std+0x44>)
 8003faa:	6323      	str	r3, [r4, #48]	; 0x30
 8003fac:	bd10      	pop	{r4, pc}
 8003fae:	bf00      	nop
 8003fb0:	080041b5 	.word	0x080041b5
 8003fb4:	080041d7 	.word	0x080041d7
 8003fb8:	0800420f 	.word	0x0800420f
 8003fbc:	08004233 	.word	0x08004233

08003fc0 <stdio_exit_handler>:
 8003fc0:	4a02      	ldr	r2, [pc, #8]	; (8003fcc <stdio_exit_handler+0xc>)
 8003fc2:	4903      	ldr	r1, [pc, #12]	; (8003fd0 <stdio_exit_handler+0x10>)
 8003fc4:	4803      	ldr	r0, [pc, #12]	; (8003fd4 <stdio_exit_handler+0x14>)
 8003fc6:	f000 b869 	b.w	800409c <_fwalk_sglue>
 8003fca:	bf00      	nop
 8003fcc:	2000000c 	.word	0x2000000c
 8003fd0:	08004cf1 	.word	0x08004cf1
 8003fd4:	20000018 	.word	0x20000018

08003fd8 <cleanup_stdio>:
 8003fd8:	6841      	ldr	r1, [r0, #4]
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <cleanup_stdio+0x34>)
 8003fdc:	b510      	push	{r4, lr}
 8003fde:	4299      	cmp	r1, r3
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	d001      	beq.n	8003fe8 <cleanup_stdio+0x10>
 8003fe4:	f000 fe84 	bl	8004cf0 <_fflush_r>
 8003fe8:	68a1      	ldr	r1, [r4, #8]
 8003fea:	4b09      	ldr	r3, [pc, #36]	; (8004010 <cleanup_stdio+0x38>)
 8003fec:	4299      	cmp	r1, r3
 8003fee:	d002      	beq.n	8003ff6 <cleanup_stdio+0x1e>
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	f000 fe7d 	bl	8004cf0 <_fflush_r>
 8003ff6:	68e1      	ldr	r1, [r4, #12]
 8003ff8:	4b06      	ldr	r3, [pc, #24]	; (8004014 <cleanup_stdio+0x3c>)
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	d004      	beq.n	8004008 <cleanup_stdio+0x30>
 8003ffe:	4620      	mov	r0, r4
 8004000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004004:	f000 be74 	b.w	8004cf0 <_fflush_r>
 8004008:	bd10      	pop	{r4, pc}
 800400a:	bf00      	nop
 800400c:	200001a8 	.word	0x200001a8
 8004010:	20000210 	.word	0x20000210
 8004014:	20000278 	.word	0x20000278

08004018 <global_stdio_init.part.0>:
 8004018:	b510      	push	{r4, lr}
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <global_stdio_init.part.0+0x30>)
 800401c:	4c0b      	ldr	r4, [pc, #44]	; (800404c <global_stdio_init.part.0+0x34>)
 800401e:	4a0c      	ldr	r2, [pc, #48]	; (8004050 <global_stdio_init.part.0+0x38>)
 8004020:	4620      	mov	r0, r4
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	2104      	movs	r1, #4
 8004026:	2200      	movs	r2, #0
 8004028:	f7ff ffa6 	bl	8003f78 <std>
 800402c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004030:	2201      	movs	r2, #1
 8004032:	2109      	movs	r1, #9
 8004034:	f7ff ffa0 	bl	8003f78 <std>
 8004038:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800403c:	2202      	movs	r2, #2
 800403e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004042:	2112      	movs	r1, #18
 8004044:	f7ff bf98 	b.w	8003f78 <std>
 8004048:	200002e0 	.word	0x200002e0
 800404c:	200001a8 	.word	0x200001a8
 8004050:	08003fc1 	.word	0x08003fc1

08004054 <__sfp_lock_acquire>:
 8004054:	4801      	ldr	r0, [pc, #4]	; (800405c <__sfp_lock_acquire+0x8>)
 8004056:	f000 b9fd 	b.w	8004454 <__retarget_lock_acquire_recursive>
 800405a:	bf00      	nop
 800405c:	200002e9 	.word	0x200002e9

08004060 <__sfp_lock_release>:
 8004060:	4801      	ldr	r0, [pc, #4]	; (8004068 <__sfp_lock_release+0x8>)
 8004062:	f000 b9f8 	b.w	8004456 <__retarget_lock_release_recursive>
 8004066:	bf00      	nop
 8004068:	200002e9 	.word	0x200002e9

0800406c <__sinit>:
 800406c:	b510      	push	{r4, lr}
 800406e:	4604      	mov	r4, r0
 8004070:	f7ff fff0 	bl	8004054 <__sfp_lock_acquire>
 8004074:	6a23      	ldr	r3, [r4, #32]
 8004076:	b11b      	cbz	r3, 8004080 <__sinit+0x14>
 8004078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800407c:	f7ff bff0 	b.w	8004060 <__sfp_lock_release>
 8004080:	4b04      	ldr	r3, [pc, #16]	; (8004094 <__sinit+0x28>)
 8004082:	6223      	str	r3, [r4, #32]
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <__sinit+0x2c>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1f5      	bne.n	8004078 <__sinit+0xc>
 800408c:	f7ff ffc4 	bl	8004018 <global_stdio_init.part.0>
 8004090:	e7f2      	b.n	8004078 <__sinit+0xc>
 8004092:	bf00      	nop
 8004094:	08003fd9 	.word	0x08003fd9
 8004098:	200002e0 	.word	0x200002e0

0800409c <_fwalk_sglue>:
 800409c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040a0:	4607      	mov	r7, r0
 80040a2:	4688      	mov	r8, r1
 80040a4:	4614      	mov	r4, r2
 80040a6:	2600      	movs	r6, #0
 80040a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80040ac:	f1b9 0901 	subs.w	r9, r9, #1
 80040b0:	d505      	bpl.n	80040be <_fwalk_sglue+0x22>
 80040b2:	6824      	ldr	r4, [r4, #0]
 80040b4:	2c00      	cmp	r4, #0
 80040b6:	d1f7      	bne.n	80040a8 <_fwalk_sglue+0xc>
 80040b8:	4630      	mov	r0, r6
 80040ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040be:	89ab      	ldrh	r3, [r5, #12]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d907      	bls.n	80040d4 <_fwalk_sglue+0x38>
 80040c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80040c8:	3301      	adds	r3, #1
 80040ca:	d003      	beq.n	80040d4 <_fwalk_sglue+0x38>
 80040cc:	4629      	mov	r1, r5
 80040ce:	4638      	mov	r0, r7
 80040d0:	47c0      	blx	r8
 80040d2:	4306      	orrs	r6, r0
 80040d4:	3568      	adds	r5, #104	; 0x68
 80040d6:	e7e9      	b.n	80040ac <_fwalk_sglue+0x10>

080040d8 <iprintf>:
 80040d8:	b40f      	push	{r0, r1, r2, r3}
 80040da:	b507      	push	{r0, r1, r2, lr}
 80040dc:	4906      	ldr	r1, [pc, #24]	; (80040f8 <iprintf+0x20>)
 80040de:	ab04      	add	r3, sp, #16
 80040e0:	6808      	ldr	r0, [r1, #0]
 80040e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80040e6:	6881      	ldr	r1, [r0, #8]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	f000 fad1 	bl	8004690 <_vfiprintf_r>
 80040ee:	b003      	add	sp, #12
 80040f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80040f4:	b004      	add	sp, #16
 80040f6:	4770      	bx	lr
 80040f8:	20000064 	.word	0x20000064

080040fc <_puts_r>:
 80040fc:	6a03      	ldr	r3, [r0, #32]
 80040fe:	b570      	push	{r4, r5, r6, lr}
 8004100:	4605      	mov	r5, r0
 8004102:	460e      	mov	r6, r1
 8004104:	6884      	ldr	r4, [r0, #8]
 8004106:	b90b      	cbnz	r3, 800410c <_puts_r+0x10>
 8004108:	f7ff ffb0 	bl	800406c <__sinit>
 800410c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800410e:	07db      	lsls	r3, r3, #31
 8004110:	d405      	bmi.n	800411e <_puts_r+0x22>
 8004112:	89a3      	ldrh	r3, [r4, #12]
 8004114:	0598      	lsls	r0, r3, #22
 8004116:	d402      	bmi.n	800411e <_puts_r+0x22>
 8004118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800411a:	f000 f99b 	bl	8004454 <__retarget_lock_acquire_recursive>
 800411e:	89a3      	ldrh	r3, [r4, #12]
 8004120:	0719      	lsls	r1, r3, #28
 8004122:	d513      	bpl.n	800414c <_puts_r+0x50>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	b18b      	cbz	r3, 800414c <_puts_r+0x50>
 8004128:	3e01      	subs	r6, #1
 800412a:	68a3      	ldr	r3, [r4, #8]
 800412c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004130:	3b01      	subs	r3, #1
 8004132:	60a3      	str	r3, [r4, #8]
 8004134:	b9e9      	cbnz	r1, 8004172 <_puts_r+0x76>
 8004136:	2b00      	cmp	r3, #0
 8004138:	da2e      	bge.n	8004198 <_puts_r+0x9c>
 800413a:	4622      	mov	r2, r4
 800413c:	210a      	movs	r1, #10
 800413e:	4628      	mov	r0, r5
 8004140:	f000 f87b 	bl	800423a <__swbuf_r>
 8004144:	3001      	adds	r0, #1
 8004146:	d007      	beq.n	8004158 <_puts_r+0x5c>
 8004148:	250a      	movs	r5, #10
 800414a:	e007      	b.n	800415c <_puts_r+0x60>
 800414c:	4621      	mov	r1, r4
 800414e:	4628      	mov	r0, r5
 8004150:	f000 f8b0 	bl	80042b4 <__swsetup_r>
 8004154:	2800      	cmp	r0, #0
 8004156:	d0e7      	beq.n	8004128 <_puts_r+0x2c>
 8004158:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800415c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800415e:	07da      	lsls	r2, r3, #31
 8004160:	d405      	bmi.n	800416e <_puts_r+0x72>
 8004162:	89a3      	ldrh	r3, [r4, #12]
 8004164:	059b      	lsls	r3, r3, #22
 8004166:	d402      	bmi.n	800416e <_puts_r+0x72>
 8004168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800416a:	f000 f974 	bl	8004456 <__retarget_lock_release_recursive>
 800416e:	4628      	mov	r0, r5
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	2b00      	cmp	r3, #0
 8004174:	da04      	bge.n	8004180 <_puts_r+0x84>
 8004176:	69a2      	ldr	r2, [r4, #24]
 8004178:	429a      	cmp	r2, r3
 800417a:	dc06      	bgt.n	800418a <_puts_r+0x8e>
 800417c:	290a      	cmp	r1, #10
 800417e:	d004      	beq.n	800418a <_puts_r+0x8e>
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	6022      	str	r2, [r4, #0]
 8004186:	7019      	strb	r1, [r3, #0]
 8004188:	e7cf      	b.n	800412a <_puts_r+0x2e>
 800418a:	4622      	mov	r2, r4
 800418c:	4628      	mov	r0, r5
 800418e:	f000 f854 	bl	800423a <__swbuf_r>
 8004192:	3001      	adds	r0, #1
 8004194:	d1c9      	bne.n	800412a <_puts_r+0x2e>
 8004196:	e7df      	b.n	8004158 <_puts_r+0x5c>
 8004198:	250a      	movs	r5, #10
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	1c5a      	adds	r2, r3, #1
 800419e:	6022      	str	r2, [r4, #0]
 80041a0:	701d      	strb	r5, [r3, #0]
 80041a2:	e7db      	b.n	800415c <_puts_r+0x60>

080041a4 <puts>:
 80041a4:	4b02      	ldr	r3, [pc, #8]	; (80041b0 <puts+0xc>)
 80041a6:	4601      	mov	r1, r0
 80041a8:	6818      	ldr	r0, [r3, #0]
 80041aa:	f7ff bfa7 	b.w	80040fc <_puts_r>
 80041ae:	bf00      	nop
 80041b0:	20000064 	.word	0x20000064

080041b4 <__sread>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	460c      	mov	r4, r1
 80041b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041bc:	f000 f8fc 	bl	80043b8 <_read_r>
 80041c0:	2800      	cmp	r0, #0
 80041c2:	bfab      	itete	ge
 80041c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80041c6:	89a3      	ldrhlt	r3, [r4, #12]
 80041c8:	181b      	addge	r3, r3, r0
 80041ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80041ce:	bfac      	ite	ge
 80041d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80041d2:	81a3      	strhlt	r3, [r4, #12]
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <__swrite>:
 80041d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041da:	461f      	mov	r7, r3
 80041dc:	898b      	ldrh	r3, [r1, #12]
 80041de:	4605      	mov	r5, r0
 80041e0:	05db      	lsls	r3, r3, #23
 80041e2:	460c      	mov	r4, r1
 80041e4:	4616      	mov	r6, r2
 80041e6:	d505      	bpl.n	80041f4 <__swrite+0x1e>
 80041e8:	2302      	movs	r3, #2
 80041ea:	2200      	movs	r2, #0
 80041ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041f0:	f000 f8d0 	bl	8004394 <_lseek_r>
 80041f4:	89a3      	ldrh	r3, [r4, #12]
 80041f6:	4632      	mov	r2, r6
 80041f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041fc:	81a3      	strh	r3, [r4, #12]
 80041fe:	4628      	mov	r0, r5
 8004200:	463b      	mov	r3, r7
 8004202:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004206:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800420a:	f000 b8e7 	b.w	80043dc <_write_r>

0800420e <__sseek>:
 800420e:	b510      	push	{r4, lr}
 8004210:	460c      	mov	r4, r1
 8004212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004216:	f000 f8bd 	bl	8004394 <_lseek_r>
 800421a:	1c43      	adds	r3, r0, #1
 800421c:	89a3      	ldrh	r3, [r4, #12]
 800421e:	bf15      	itete	ne
 8004220:	6560      	strne	r0, [r4, #84]	; 0x54
 8004222:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004226:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800422a:	81a3      	strheq	r3, [r4, #12]
 800422c:	bf18      	it	ne
 800422e:	81a3      	strhne	r3, [r4, #12]
 8004230:	bd10      	pop	{r4, pc}

08004232 <__sclose>:
 8004232:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004236:	f000 b89d 	b.w	8004374 <_close_r>

0800423a <__swbuf_r>:
 800423a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800423c:	460e      	mov	r6, r1
 800423e:	4614      	mov	r4, r2
 8004240:	4605      	mov	r5, r0
 8004242:	b118      	cbz	r0, 800424c <__swbuf_r+0x12>
 8004244:	6a03      	ldr	r3, [r0, #32]
 8004246:	b90b      	cbnz	r3, 800424c <__swbuf_r+0x12>
 8004248:	f7ff ff10 	bl	800406c <__sinit>
 800424c:	69a3      	ldr	r3, [r4, #24]
 800424e:	60a3      	str	r3, [r4, #8]
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	071a      	lsls	r2, r3, #28
 8004254:	d525      	bpl.n	80042a2 <__swbuf_r+0x68>
 8004256:	6923      	ldr	r3, [r4, #16]
 8004258:	b31b      	cbz	r3, 80042a2 <__swbuf_r+0x68>
 800425a:	6823      	ldr	r3, [r4, #0]
 800425c:	6922      	ldr	r2, [r4, #16]
 800425e:	b2f6      	uxtb	r6, r6
 8004260:	1a98      	subs	r0, r3, r2
 8004262:	6963      	ldr	r3, [r4, #20]
 8004264:	4637      	mov	r7, r6
 8004266:	4283      	cmp	r3, r0
 8004268:	dc04      	bgt.n	8004274 <__swbuf_r+0x3a>
 800426a:	4621      	mov	r1, r4
 800426c:	4628      	mov	r0, r5
 800426e:	f000 fd3f 	bl	8004cf0 <_fflush_r>
 8004272:	b9e0      	cbnz	r0, 80042ae <__swbuf_r+0x74>
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	6022      	str	r2, [r4, #0]
 8004280:	701e      	strb	r6, [r3, #0]
 8004282:	6962      	ldr	r2, [r4, #20]
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	429a      	cmp	r2, r3
 8004288:	d004      	beq.n	8004294 <__swbuf_r+0x5a>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	07db      	lsls	r3, r3, #31
 800428e:	d506      	bpl.n	800429e <__swbuf_r+0x64>
 8004290:	2e0a      	cmp	r6, #10
 8004292:	d104      	bne.n	800429e <__swbuf_r+0x64>
 8004294:	4621      	mov	r1, r4
 8004296:	4628      	mov	r0, r5
 8004298:	f000 fd2a 	bl	8004cf0 <_fflush_r>
 800429c:	b938      	cbnz	r0, 80042ae <__swbuf_r+0x74>
 800429e:	4638      	mov	r0, r7
 80042a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042a2:	4621      	mov	r1, r4
 80042a4:	4628      	mov	r0, r5
 80042a6:	f000 f805 	bl	80042b4 <__swsetup_r>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d0d5      	beq.n	800425a <__swbuf_r+0x20>
 80042ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80042b2:	e7f4      	b.n	800429e <__swbuf_r+0x64>

080042b4 <__swsetup_r>:
 80042b4:	b538      	push	{r3, r4, r5, lr}
 80042b6:	4b2a      	ldr	r3, [pc, #168]	; (8004360 <__swsetup_r+0xac>)
 80042b8:	4605      	mov	r5, r0
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	460c      	mov	r4, r1
 80042be:	b118      	cbz	r0, 80042c8 <__swsetup_r+0x14>
 80042c0:	6a03      	ldr	r3, [r0, #32]
 80042c2:	b90b      	cbnz	r3, 80042c8 <__swsetup_r+0x14>
 80042c4:	f7ff fed2 	bl	800406c <__sinit>
 80042c8:	89a3      	ldrh	r3, [r4, #12]
 80042ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80042ce:	0718      	lsls	r0, r3, #28
 80042d0:	d422      	bmi.n	8004318 <__swsetup_r+0x64>
 80042d2:	06d9      	lsls	r1, r3, #27
 80042d4:	d407      	bmi.n	80042e6 <__swsetup_r+0x32>
 80042d6:	2309      	movs	r3, #9
 80042d8:	602b      	str	r3, [r5, #0]
 80042da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80042de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042e2:	81a3      	strh	r3, [r4, #12]
 80042e4:	e034      	b.n	8004350 <__swsetup_r+0x9c>
 80042e6:	0758      	lsls	r0, r3, #29
 80042e8:	d512      	bpl.n	8004310 <__swsetup_r+0x5c>
 80042ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042ec:	b141      	cbz	r1, 8004300 <__swsetup_r+0x4c>
 80042ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042f2:	4299      	cmp	r1, r3
 80042f4:	d002      	beq.n	80042fc <__swsetup_r+0x48>
 80042f6:	4628      	mov	r0, r5
 80042f8:	f000 f8ae 	bl	8004458 <_free_r>
 80042fc:	2300      	movs	r3, #0
 80042fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004306:	81a3      	strh	r3, [r4, #12]
 8004308:	2300      	movs	r3, #0
 800430a:	6063      	str	r3, [r4, #4]
 800430c:	6923      	ldr	r3, [r4, #16]
 800430e:	6023      	str	r3, [r4, #0]
 8004310:	89a3      	ldrh	r3, [r4, #12]
 8004312:	f043 0308 	orr.w	r3, r3, #8
 8004316:	81a3      	strh	r3, [r4, #12]
 8004318:	6923      	ldr	r3, [r4, #16]
 800431a:	b94b      	cbnz	r3, 8004330 <__swsetup_r+0x7c>
 800431c:	89a3      	ldrh	r3, [r4, #12]
 800431e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004322:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004326:	d003      	beq.n	8004330 <__swsetup_r+0x7c>
 8004328:	4621      	mov	r1, r4
 800432a:	4628      	mov	r0, r5
 800432c:	f000 fd2d 	bl	8004d8a <__smakebuf_r>
 8004330:	89a0      	ldrh	r0, [r4, #12]
 8004332:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004336:	f010 0301 	ands.w	r3, r0, #1
 800433a:	d00a      	beq.n	8004352 <__swsetup_r+0x9e>
 800433c:	2300      	movs	r3, #0
 800433e:	60a3      	str	r3, [r4, #8]
 8004340:	6963      	ldr	r3, [r4, #20]
 8004342:	425b      	negs	r3, r3
 8004344:	61a3      	str	r3, [r4, #24]
 8004346:	6923      	ldr	r3, [r4, #16]
 8004348:	b943      	cbnz	r3, 800435c <__swsetup_r+0xa8>
 800434a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800434e:	d1c4      	bne.n	80042da <__swsetup_r+0x26>
 8004350:	bd38      	pop	{r3, r4, r5, pc}
 8004352:	0781      	lsls	r1, r0, #30
 8004354:	bf58      	it	pl
 8004356:	6963      	ldrpl	r3, [r4, #20]
 8004358:	60a3      	str	r3, [r4, #8]
 800435a:	e7f4      	b.n	8004346 <__swsetup_r+0x92>
 800435c:	2000      	movs	r0, #0
 800435e:	e7f7      	b.n	8004350 <__swsetup_r+0x9c>
 8004360:	20000064 	.word	0x20000064

08004364 <memset>:
 8004364:	4603      	mov	r3, r0
 8004366:	4402      	add	r2, r0
 8004368:	4293      	cmp	r3, r2
 800436a:	d100      	bne.n	800436e <memset+0xa>
 800436c:	4770      	bx	lr
 800436e:	f803 1b01 	strb.w	r1, [r3], #1
 8004372:	e7f9      	b.n	8004368 <memset+0x4>

08004374 <_close_r>:
 8004374:	b538      	push	{r3, r4, r5, lr}
 8004376:	2300      	movs	r3, #0
 8004378:	4d05      	ldr	r5, [pc, #20]	; (8004390 <_close_r+0x1c>)
 800437a:	4604      	mov	r4, r0
 800437c:	4608      	mov	r0, r1
 800437e:	602b      	str	r3, [r5, #0]
 8004380:	f7fd fa75 	bl	800186e <_close>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_close_r+0x1a>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_close_r+0x1a>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	200002e4 	.word	0x200002e4

08004394 <_lseek_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	2200      	movs	r2, #0
 800439e:	4d05      	ldr	r5, [pc, #20]	; (80043b4 <_lseek_r+0x20>)
 80043a0:	602a      	str	r2, [r5, #0]
 80043a2:	461a      	mov	r2, r3
 80043a4:	f7fd fa87 	bl	80018b6 <_lseek>
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d102      	bne.n	80043b2 <_lseek_r+0x1e>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	b103      	cbz	r3, 80043b2 <_lseek_r+0x1e>
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	bd38      	pop	{r3, r4, r5, pc}
 80043b4:	200002e4 	.word	0x200002e4

080043b8 <_read_r>:
 80043b8:	b538      	push	{r3, r4, r5, lr}
 80043ba:	4604      	mov	r4, r0
 80043bc:	4608      	mov	r0, r1
 80043be:	4611      	mov	r1, r2
 80043c0:	2200      	movs	r2, #0
 80043c2:	4d05      	ldr	r5, [pc, #20]	; (80043d8 <_read_r+0x20>)
 80043c4:	602a      	str	r2, [r5, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f7fd fa18 	bl	80017fc <_read>
 80043cc:	1c43      	adds	r3, r0, #1
 80043ce:	d102      	bne.n	80043d6 <_read_r+0x1e>
 80043d0:	682b      	ldr	r3, [r5, #0]
 80043d2:	b103      	cbz	r3, 80043d6 <_read_r+0x1e>
 80043d4:	6023      	str	r3, [r4, #0]
 80043d6:	bd38      	pop	{r3, r4, r5, pc}
 80043d8:	200002e4 	.word	0x200002e4

080043dc <_write_r>:
 80043dc:	b538      	push	{r3, r4, r5, lr}
 80043de:	4604      	mov	r4, r0
 80043e0:	4608      	mov	r0, r1
 80043e2:	4611      	mov	r1, r2
 80043e4:	2200      	movs	r2, #0
 80043e6:	4d05      	ldr	r5, [pc, #20]	; (80043fc <_write_r+0x20>)
 80043e8:	602a      	str	r2, [r5, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	f7fd fa23 	bl	8001836 <_write>
 80043f0:	1c43      	adds	r3, r0, #1
 80043f2:	d102      	bne.n	80043fa <_write_r+0x1e>
 80043f4:	682b      	ldr	r3, [r5, #0]
 80043f6:	b103      	cbz	r3, 80043fa <_write_r+0x1e>
 80043f8:	6023      	str	r3, [r4, #0]
 80043fa:	bd38      	pop	{r3, r4, r5, pc}
 80043fc:	200002e4 	.word	0x200002e4

08004400 <__errno>:
 8004400:	4b01      	ldr	r3, [pc, #4]	; (8004408 <__errno+0x8>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20000064 	.word	0x20000064

0800440c <__libc_init_array>:
 800440c:	b570      	push	{r4, r5, r6, lr}
 800440e:	2600      	movs	r6, #0
 8004410:	4d0c      	ldr	r5, [pc, #48]	; (8004444 <__libc_init_array+0x38>)
 8004412:	4c0d      	ldr	r4, [pc, #52]	; (8004448 <__libc_init_array+0x3c>)
 8004414:	1b64      	subs	r4, r4, r5
 8004416:	10a4      	asrs	r4, r4, #2
 8004418:	42a6      	cmp	r6, r4
 800441a:	d109      	bne.n	8004430 <__libc_init_array+0x24>
 800441c:	f000 fd32 	bl	8004e84 <_init>
 8004420:	2600      	movs	r6, #0
 8004422:	4d0a      	ldr	r5, [pc, #40]	; (800444c <__libc_init_array+0x40>)
 8004424:	4c0a      	ldr	r4, [pc, #40]	; (8004450 <__libc_init_array+0x44>)
 8004426:	1b64      	subs	r4, r4, r5
 8004428:	10a4      	asrs	r4, r4, #2
 800442a:	42a6      	cmp	r6, r4
 800442c:	d105      	bne.n	800443a <__libc_init_array+0x2e>
 800442e:	bd70      	pop	{r4, r5, r6, pc}
 8004430:	f855 3b04 	ldr.w	r3, [r5], #4
 8004434:	4798      	blx	r3
 8004436:	3601      	adds	r6, #1
 8004438:	e7ee      	b.n	8004418 <__libc_init_array+0xc>
 800443a:	f855 3b04 	ldr.w	r3, [r5], #4
 800443e:	4798      	blx	r3
 8004440:	3601      	adds	r6, #1
 8004442:	e7f2      	b.n	800442a <__libc_init_array+0x1e>
 8004444:	08005254 	.word	0x08005254
 8004448:	08005254 	.word	0x08005254
 800444c:	08005254 	.word	0x08005254
 8004450:	08005258 	.word	0x08005258

08004454 <__retarget_lock_acquire_recursive>:
 8004454:	4770      	bx	lr

08004456 <__retarget_lock_release_recursive>:
 8004456:	4770      	bx	lr

08004458 <_free_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4605      	mov	r5, r0
 800445c:	2900      	cmp	r1, #0
 800445e:	d040      	beq.n	80044e2 <_free_r+0x8a>
 8004460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004464:	1f0c      	subs	r4, r1, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfb8      	it	lt
 800446a:	18e4      	addlt	r4, r4, r3
 800446c:	f000 f8dc 	bl	8004628 <__malloc_lock>
 8004470:	4a1c      	ldr	r2, [pc, #112]	; (80044e4 <_free_r+0x8c>)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	b933      	cbnz	r3, 8004484 <_free_r+0x2c>
 8004476:	6063      	str	r3, [r4, #4]
 8004478:	6014      	str	r4, [r2, #0]
 800447a:	4628      	mov	r0, r5
 800447c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004480:	f000 b8d8 	b.w	8004634 <__malloc_unlock>
 8004484:	42a3      	cmp	r3, r4
 8004486:	d908      	bls.n	800449a <_free_r+0x42>
 8004488:	6820      	ldr	r0, [r4, #0]
 800448a:	1821      	adds	r1, r4, r0
 800448c:	428b      	cmp	r3, r1
 800448e:	bf01      	itttt	eq
 8004490:	6819      	ldreq	r1, [r3, #0]
 8004492:	685b      	ldreq	r3, [r3, #4]
 8004494:	1809      	addeq	r1, r1, r0
 8004496:	6021      	streq	r1, [r4, #0]
 8004498:	e7ed      	b.n	8004476 <_free_r+0x1e>
 800449a:	461a      	mov	r2, r3
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	b10b      	cbz	r3, 80044a4 <_free_r+0x4c>
 80044a0:	42a3      	cmp	r3, r4
 80044a2:	d9fa      	bls.n	800449a <_free_r+0x42>
 80044a4:	6811      	ldr	r1, [r2, #0]
 80044a6:	1850      	adds	r0, r2, r1
 80044a8:	42a0      	cmp	r0, r4
 80044aa:	d10b      	bne.n	80044c4 <_free_r+0x6c>
 80044ac:	6820      	ldr	r0, [r4, #0]
 80044ae:	4401      	add	r1, r0
 80044b0:	1850      	adds	r0, r2, r1
 80044b2:	4283      	cmp	r3, r0
 80044b4:	6011      	str	r1, [r2, #0]
 80044b6:	d1e0      	bne.n	800447a <_free_r+0x22>
 80044b8:	6818      	ldr	r0, [r3, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	4408      	add	r0, r1
 80044be:	6010      	str	r0, [r2, #0]
 80044c0:	6053      	str	r3, [r2, #4]
 80044c2:	e7da      	b.n	800447a <_free_r+0x22>
 80044c4:	d902      	bls.n	80044cc <_free_r+0x74>
 80044c6:	230c      	movs	r3, #12
 80044c8:	602b      	str	r3, [r5, #0]
 80044ca:	e7d6      	b.n	800447a <_free_r+0x22>
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	1821      	adds	r1, r4, r0
 80044d0:	428b      	cmp	r3, r1
 80044d2:	bf01      	itttt	eq
 80044d4:	6819      	ldreq	r1, [r3, #0]
 80044d6:	685b      	ldreq	r3, [r3, #4]
 80044d8:	1809      	addeq	r1, r1, r0
 80044da:	6021      	streq	r1, [r4, #0]
 80044dc:	6063      	str	r3, [r4, #4]
 80044de:	6054      	str	r4, [r2, #4]
 80044e0:	e7cb      	b.n	800447a <_free_r+0x22>
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	200002ec 	.word	0x200002ec

080044e8 <sbrk_aligned>:
 80044e8:	b570      	push	{r4, r5, r6, lr}
 80044ea:	4e0e      	ldr	r6, [pc, #56]	; (8004524 <sbrk_aligned+0x3c>)
 80044ec:	460c      	mov	r4, r1
 80044ee:	6831      	ldr	r1, [r6, #0]
 80044f0:	4605      	mov	r5, r0
 80044f2:	b911      	cbnz	r1, 80044fa <sbrk_aligned+0x12>
 80044f4:	f000 fca8 	bl	8004e48 <_sbrk_r>
 80044f8:	6030      	str	r0, [r6, #0]
 80044fa:	4621      	mov	r1, r4
 80044fc:	4628      	mov	r0, r5
 80044fe:	f000 fca3 	bl	8004e48 <_sbrk_r>
 8004502:	1c43      	adds	r3, r0, #1
 8004504:	d00a      	beq.n	800451c <sbrk_aligned+0x34>
 8004506:	1cc4      	adds	r4, r0, #3
 8004508:	f024 0403 	bic.w	r4, r4, #3
 800450c:	42a0      	cmp	r0, r4
 800450e:	d007      	beq.n	8004520 <sbrk_aligned+0x38>
 8004510:	1a21      	subs	r1, r4, r0
 8004512:	4628      	mov	r0, r5
 8004514:	f000 fc98 	bl	8004e48 <_sbrk_r>
 8004518:	3001      	adds	r0, #1
 800451a:	d101      	bne.n	8004520 <sbrk_aligned+0x38>
 800451c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004520:	4620      	mov	r0, r4
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	200002f0 	.word	0x200002f0

08004528 <_malloc_r>:
 8004528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800452c:	1ccd      	adds	r5, r1, #3
 800452e:	f025 0503 	bic.w	r5, r5, #3
 8004532:	3508      	adds	r5, #8
 8004534:	2d0c      	cmp	r5, #12
 8004536:	bf38      	it	cc
 8004538:	250c      	movcc	r5, #12
 800453a:	2d00      	cmp	r5, #0
 800453c:	4607      	mov	r7, r0
 800453e:	db01      	blt.n	8004544 <_malloc_r+0x1c>
 8004540:	42a9      	cmp	r1, r5
 8004542:	d905      	bls.n	8004550 <_malloc_r+0x28>
 8004544:	230c      	movs	r3, #12
 8004546:	2600      	movs	r6, #0
 8004548:	603b      	str	r3, [r7, #0]
 800454a:	4630      	mov	r0, r6
 800454c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004550:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004624 <_malloc_r+0xfc>
 8004554:	f000 f868 	bl	8004628 <__malloc_lock>
 8004558:	f8d8 3000 	ldr.w	r3, [r8]
 800455c:	461c      	mov	r4, r3
 800455e:	bb5c      	cbnz	r4, 80045b8 <_malloc_r+0x90>
 8004560:	4629      	mov	r1, r5
 8004562:	4638      	mov	r0, r7
 8004564:	f7ff ffc0 	bl	80044e8 <sbrk_aligned>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	4604      	mov	r4, r0
 800456c:	d155      	bne.n	800461a <_malloc_r+0xf2>
 800456e:	f8d8 4000 	ldr.w	r4, [r8]
 8004572:	4626      	mov	r6, r4
 8004574:	2e00      	cmp	r6, #0
 8004576:	d145      	bne.n	8004604 <_malloc_r+0xdc>
 8004578:	2c00      	cmp	r4, #0
 800457a:	d048      	beq.n	800460e <_malloc_r+0xe6>
 800457c:	6823      	ldr	r3, [r4, #0]
 800457e:	4631      	mov	r1, r6
 8004580:	4638      	mov	r0, r7
 8004582:	eb04 0903 	add.w	r9, r4, r3
 8004586:	f000 fc5f 	bl	8004e48 <_sbrk_r>
 800458a:	4581      	cmp	r9, r0
 800458c:	d13f      	bne.n	800460e <_malloc_r+0xe6>
 800458e:	6821      	ldr	r1, [r4, #0]
 8004590:	4638      	mov	r0, r7
 8004592:	1a6d      	subs	r5, r5, r1
 8004594:	4629      	mov	r1, r5
 8004596:	f7ff ffa7 	bl	80044e8 <sbrk_aligned>
 800459a:	3001      	adds	r0, #1
 800459c:	d037      	beq.n	800460e <_malloc_r+0xe6>
 800459e:	6823      	ldr	r3, [r4, #0]
 80045a0:	442b      	add	r3, r5
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	f8d8 3000 	ldr.w	r3, [r8]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d038      	beq.n	800461e <_malloc_r+0xf6>
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	42a2      	cmp	r2, r4
 80045b0:	d12b      	bne.n	800460a <_malloc_r+0xe2>
 80045b2:	2200      	movs	r2, #0
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	e00f      	b.n	80045d8 <_malloc_r+0xb0>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	1b52      	subs	r2, r2, r5
 80045bc:	d41f      	bmi.n	80045fe <_malloc_r+0xd6>
 80045be:	2a0b      	cmp	r2, #11
 80045c0:	d917      	bls.n	80045f2 <_malloc_r+0xca>
 80045c2:	1961      	adds	r1, r4, r5
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	6025      	str	r5, [r4, #0]
 80045c8:	bf18      	it	ne
 80045ca:	6059      	strne	r1, [r3, #4]
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	bf08      	it	eq
 80045d0:	f8c8 1000 	streq.w	r1, [r8]
 80045d4:	5162      	str	r2, [r4, r5]
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	4638      	mov	r0, r7
 80045da:	f104 060b 	add.w	r6, r4, #11
 80045de:	f000 f829 	bl	8004634 <__malloc_unlock>
 80045e2:	f026 0607 	bic.w	r6, r6, #7
 80045e6:	1d23      	adds	r3, r4, #4
 80045e8:	1af2      	subs	r2, r6, r3
 80045ea:	d0ae      	beq.n	800454a <_malloc_r+0x22>
 80045ec:	1b9b      	subs	r3, r3, r6
 80045ee:	50a3      	str	r3, [r4, r2]
 80045f0:	e7ab      	b.n	800454a <_malloc_r+0x22>
 80045f2:	42a3      	cmp	r3, r4
 80045f4:	6862      	ldr	r2, [r4, #4]
 80045f6:	d1dd      	bne.n	80045b4 <_malloc_r+0x8c>
 80045f8:	f8c8 2000 	str.w	r2, [r8]
 80045fc:	e7ec      	b.n	80045d8 <_malloc_r+0xb0>
 80045fe:	4623      	mov	r3, r4
 8004600:	6864      	ldr	r4, [r4, #4]
 8004602:	e7ac      	b.n	800455e <_malloc_r+0x36>
 8004604:	4634      	mov	r4, r6
 8004606:	6876      	ldr	r6, [r6, #4]
 8004608:	e7b4      	b.n	8004574 <_malloc_r+0x4c>
 800460a:	4613      	mov	r3, r2
 800460c:	e7cc      	b.n	80045a8 <_malloc_r+0x80>
 800460e:	230c      	movs	r3, #12
 8004610:	4638      	mov	r0, r7
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	f000 f80e 	bl	8004634 <__malloc_unlock>
 8004618:	e797      	b.n	800454a <_malloc_r+0x22>
 800461a:	6025      	str	r5, [r4, #0]
 800461c:	e7dc      	b.n	80045d8 <_malloc_r+0xb0>
 800461e:	605b      	str	r3, [r3, #4]
 8004620:	deff      	udf	#255	; 0xff
 8004622:	bf00      	nop
 8004624:	200002ec 	.word	0x200002ec

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f7ff bf13 	b.w	8004454 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	200002e8 	.word	0x200002e8

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f7ff bf0e 	b.w	8004456 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	200002e8 	.word	0x200002e8

08004640 <__sfputc_r>:
 8004640:	6893      	ldr	r3, [r2, #8]
 8004642:	b410      	push	{r4}
 8004644:	3b01      	subs	r3, #1
 8004646:	2b00      	cmp	r3, #0
 8004648:	6093      	str	r3, [r2, #8]
 800464a:	da07      	bge.n	800465c <__sfputc_r+0x1c>
 800464c:	6994      	ldr	r4, [r2, #24]
 800464e:	42a3      	cmp	r3, r4
 8004650:	db01      	blt.n	8004656 <__sfputc_r+0x16>
 8004652:	290a      	cmp	r1, #10
 8004654:	d102      	bne.n	800465c <__sfputc_r+0x1c>
 8004656:	bc10      	pop	{r4}
 8004658:	f7ff bdef 	b.w	800423a <__swbuf_r>
 800465c:	6813      	ldr	r3, [r2, #0]
 800465e:	1c58      	adds	r0, r3, #1
 8004660:	6010      	str	r0, [r2, #0]
 8004662:	7019      	strb	r1, [r3, #0]
 8004664:	4608      	mov	r0, r1
 8004666:	bc10      	pop	{r4}
 8004668:	4770      	bx	lr

0800466a <__sfputs_r>:
 800466a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466c:	4606      	mov	r6, r0
 800466e:	460f      	mov	r7, r1
 8004670:	4614      	mov	r4, r2
 8004672:	18d5      	adds	r5, r2, r3
 8004674:	42ac      	cmp	r4, r5
 8004676:	d101      	bne.n	800467c <__sfputs_r+0x12>
 8004678:	2000      	movs	r0, #0
 800467a:	e007      	b.n	800468c <__sfputs_r+0x22>
 800467c:	463a      	mov	r2, r7
 800467e:	4630      	mov	r0, r6
 8004680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004684:	f7ff ffdc 	bl	8004640 <__sfputc_r>
 8004688:	1c43      	adds	r3, r0, #1
 800468a:	d1f3      	bne.n	8004674 <__sfputs_r+0xa>
 800468c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004690 <_vfiprintf_r>:
 8004690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004694:	460d      	mov	r5, r1
 8004696:	4614      	mov	r4, r2
 8004698:	4698      	mov	r8, r3
 800469a:	4606      	mov	r6, r0
 800469c:	b09d      	sub	sp, #116	; 0x74
 800469e:	b118      	cbz	r0, 80046a8 <_vfiprintf_r+0x18>
 80046a0:	6a03      	ldr	r3, [r0, #32]
 80046a2:	b90b      	cbnz	r3, 80046a8 <_vfiprintf_r+0x18>
 80046a4:	f7ff fce2 	bl	800406c <__sinit>
 80046a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046aa:	07d9      	lsls	r1, r3, #31
 80046ac:	d405      	bmi.n	80046ba <_vfiprintf_r+0x2a>
 80046ae:	89ab      	ldrh	r3, [r5, #12]
 80046b0:	059a      	lsls	r2, r3, #22
 80046b2:	d402      	bmi.n	80046ba <_vfiprintf_r+0x2a>
 80046b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046b6:	f7ff fecd 	bl	8004454 <__retarget_lock_acquire_recursive>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	071b      	lsls	r3, r3, #28
 80046be:	d501      	bpl.n	80046c4 <_vfiprintf_r+0x34>
 80046c0:	692b      	ldr	r3, [r5, #16]
 80046c2:	b99b      	cbnz	r3, 80046ec <_vfiprintf_r+0x5c>
 80046c4:	4629      	mov	r1, r5
 80046c6:	4630      	mov	r0, r6
 80046c8:	f7ff fdf4 	bl	80042b4 <__swsetup_r>
 80046cc:	b170      	cbz	r0, 80046ec <_vfiprintf_r+0x5c>
 80046ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046d0:	07dc      	lsls	r4, r3, #31
 80046d2:	d504      	bpl.n	80046de <_vfiprintf_r+0x4e>
 80046d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046d8:	b01d      	add	sp, #116	; 0x74
 80046da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046de:	89ab      	ldrh	r3, [r5, #12]
 80046e0:	0598      	lsls	r0, r3, #22
 80046e2:	d4f7      	bmi.n	80046d4 <_vfiprintf_r+0x44>
 80046e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046e6:	f7ff feb6 	bl	8004456 <__retarget_lock_release_recursive>
 80046ea:	e7f3      	b.n	80046d4 <_vfiprintf_r+0x44>
 80046ec:	2300      	movs	r3, #0
 80046ee:	9309      	str	r3, [sp, #36]	; 0x24
 80046f0:	2320      	movs	r3, #32
 80046f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046f6:	2330      	movs	r3, #48	; 0x30
 80046f8:	f04f 0901 	mov.w	r9, #1
 80046fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004700:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80048b0 <_vfiprintf_r+0x220>
 8004704:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004708:	4623      	mov	r3, r4
 800470a:	469a      	mov	sl, r3
 800470c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004710:	b10a      	cbz	r2, 8004716 <_vfiprintf_r+0x86>
 8004712:	2a25      	cmp	r2, #37	; 0x25
 8004714:	d1f9      	bne.n	800470a <_vfiprintf_r+0x7a>
 8004716:	ebba 0b04 	subs.w	fp, sl, r4
 800471a:	d00b      	beq.n	8004734 <_vfiprintf_r+0xa4>
 800471c:	465b      	mov	r3, fp
 800471e:	4622      	mov	r2, r4
 8004720:	4629      	mov	r1, r5
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff ffa1 	bl	800466a <__sfputs_r>
 8004728:	3001      	adds	r0, #1
 800472a:	f000 80a9 	beq.w	8004880 <_vfiprintf_r+0x1f0>
 800472e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004730:	445a      	add	r2, fp
 8004732:	9209      	str	r2, [sp, #36]	; 0x24
 8004734:	f89a 3000 	ldrb.w	r3, [sl]
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80a1 	beq.w	8004880 <_vfiprintf_r+0x1f0>
 800473e:	2300      	movs	r3, #0
 8004740:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004748:	f10a 0a01 	add.w	sl, sl, #1
 800474c:	9304      	str	r3, [sp, #16]
 800474e:	9307      	str	r3, [sp, #28]
 8004750:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004754:	931a      	str	r3, [sp, #104]	; 0x68
 8004756:	4654      	mov	r4, sl
 8004758:	2205      	movs	r2, #5
 800475a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800475e:	4854      	ldr	r0, [pc, #336]	; (80048b0 <_vfiprintf_r+0x220>)
 8004760:	f000 fb82 	bl	8004e68 <memchr>
 8004764:	9a04      	ldr	r2, [sp, #16]
 8004766:	b9d8      	cbnz	r0, 80047a0 <_vfiprintf_r+0x110>
 8004768:	06d1      	lsls	r1, r2, #27
 800476a:	bf44      	itt	mi
 800476c:	2320      	movmi	r3, #32
 800476e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004772:	0713      	lsls	r3, r2, #28
 8004774:	bf44      	itt	mi
 8004776:	232b      	movmi	r3, #43	; 0x2b
 8004778:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800477c:	f89a 3000 	ldrb.w	r3, [sl]
 8004780:	2b2a      	cmp	r3, #42	; 0x2a
 8004782:	d015      	beq.n	80047b0 <_vfiprintf_r+0x120>
 8004784:	4654      	mov	r4, sl
 8004786:	2000      	movs	r0, #0
 8004788:	f04f 0c0a 	mov.w	ip, #10
 800478c:	9a07      	ldr	r2, [sp, #28]
 800478e:	4621      	mov	r1, r4
 8004790:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004794:	3b30      	subs	r3, #48	; 0x30
 8004796:	2b09      	cmp	r3, #9
 8004798:	d94d      	bls.n	8004836 <_vfiprintf_r+0x1a6>
 800479a:	b1b0      	cbz	r0, 80047ca <_vfiprintf_r+0x13a>
 800479c:	9207      	str	r2, [sp, #28]
 800479e:	e014      	b.n	80047ca <_vfiprintf_r+0x13a>
 80047a0:	eba0 0308 	sub.w	r3, r0, r8
 80047a4:	fa09 f303 	lsl.w	r3, r9, r3
 80047a8:	4313      	orrs	r3, r2
 80047aa:	46a2      	mov	sl, r4
 80047ac:	9304      	str	r3, [sp, #16]
 80047ae:	e7d2      	b.n	8004756 <_vfiprintf_r+0xc6>
 80047b0:	9b03      	ldr	r3, [sp, #12]
 80047b2:	1d19      	adds	r1, r3, #4
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	9103      	str	r1, [sp, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	bfbb      	ittet	lt
 80047bc:	425b      	neglt	r3, r3
 80047be:	f042 0202 	orrlt.w	r2, r2, #2
 80047c2:	9307      	strge	r3, [sp, #28]
 80047c4:	9307      	strlt	r3, [sp, #28]
 80047c6:	bfb8      	it	lt
 80047c8:	9204      	strlt	r2, [sp, #16]
 80047ca:	7823      	ldrb	r3, [r4, #0]
 80047cc:	2b2e      	cmp	r3, #46	; 0x2e
 80047ce:	d10c      	bne.n	80047ea <_vfiprintf_r+0x15a>
 80047d0:	7863      	ldrb	r3, [r4, #1]
 80047d2:	2b2a      	cmp	r3, #42	; 0x2a
 80047d4:	d134      	bne.n	8004840 <_vfiprintf_r+0x1b0>
 80047d6:	9b03      	ldr	r3, [sp, #12]
 80047d8:	3402      	adds	r4, #2
 80047da:	1d1a      	adds	r2, r3, #4
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	9203      	str	r2, [sp, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	bfb8      	it	lt
 80047e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80047e8:	9305      	str	r3, [sp, #20]
 80047ea:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80048b4 <_vfiprintf_r+0x224>
 80047ee:	2203      	movs	r2, #3
 80047f0:	4650      	mov	r0, sl
 80047f2:	7821      	ldrb	r1, [r4, #0]
 80047f4:	f000 fb38 	bl	8004e68 <memchr>
 80047f8:	b138      	cbz	r0, 800480a <_vfiprintf_r+0x17a>
 80047fa:	2240      	movs	r2, #64	; 0x40
 80047fc:	9b04      	ldr	r3, [sp, #16]
 80047fe:	eba0 000a 	sub.w	r0, r0, sl
 8004802:	4082      	lsls	r2, r0
 8004804:	4313      	orrs	r3, r2
 8004806:	3401      	adds	r4, #1
 8004808:	9304      	str	r3, [sp, #16]
 800480a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800480e:	2206      	movs	r2, #6
 8004810:	4829      	ldr	r0, [pc, #164]	; (80048b8 <_vfiprintf_r+0x228>)
 8004812:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004816:	f000 fb27 	bl	8004e68 <memchr>
 800481a:	2800      	cmp	r0, #0
 800481c:	d03f      	beq.n	800489e <_vfiprintf_r+0x20e>
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <_vfiprintf_r+0x22c>)
 8004820:	bb1b      	cbnz	r3, 800486a <_vfiprintf_r+0x1da>
 8004822:	9b03      	ldr	r3, [sp, #12]
 8004824:	3307      	adds	r3, #7
 8004826:	f023 0307 	bic.w	r3, r3, #7
 800482a:	3308      	adds	r3, #8
 800482c:	9303      	str	r3, [sp, #12]
 800482e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004830:	443b      	add	r3, r7
 8004832:	9309      	str	r3, [sp, #36]	; 0x24
 8004834:	e768      	b.n	8004708 <_vfiprintf_r+0x78>
 8004836:	460c      	mov	r4, r1
 8004838:	2001      	movs	r0, #1
 800483a:	fb0c 3202 	mla	r2, ip, r2, r3
 800483e:	e7a6      	b.n	800478e <_vfiprintf_r+0xfe>
 8004840:	2300      	movs	r3, #0
 8004842:	f04f 0c0a 	mov.w	ip, #10
 8004846:	4619      	mov	r1, r3
 8004848:	3401      	adds	r4, #1
 800484a:	9305      	str	r3, [sp, #20]
 800484c:	4620      	mov	r0, r4
 800484e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004852:	3a30      	subs	r2, #48	; 0x30
 8004854:	2a09      	cmp	r2, #9
 8004856:	d903      	bls.n	8004860 <_vfiprintf_r+0x1d0>
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c6      	beq.n	80047ea <_vfiprintf_r+0x15a>
 800485c:	9105      	str	r1, [sp, #20]
 800485e:	e7c4      	b.n	80047ea <_vfiprintf_r+0x15a>
 8004860:	4604      	mov	r4, r0
 8004862:	2301      	movs	r3, #1
 8004864:	fb0c 2101 	mla	r1, ip, r1, r2
 8004868:	e7f0      	b.n	800484c <_vfiprintf_r+0x1bc>
 800486a:	ab03      	add	r3, sp, #12
 800486c:	9300      	str	r3, [sp, #0]
 800486e:	462a      	mov	r2, r5
 8004870:	4630      	mov	r0, r6
 8004872:	4b13      	ldr	r3, [pc, #76]	; (80048c0 <_vfiprintf_r+0x230>)
 8004874:	a904      	add	r1, sp, #16
 8004876:	f3af 8000 	nop.w
 800487a:	4607      	mov	r7, r0
 800487c:	1c78      	adds	r0, r7, #1
 800487e:	d1d6      	bne.n	800482e <_vfiprintf_r+0x19e>
 8004880:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004882:	07d9      	lsls	r1, r3, #31
 8004884:	d405      	bmi.n	8004892 <_vfiprintf_r+0x202>
 8004886:	89ab      	ldrh	r3, [r5, #12]
 8004888:	059a      	lsls	r2, r3, #22
 800488a:	d402      	bmi.n	8004892 <_vfiprintf_r+0x202>
 800488c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800488e:	f7ff fde2 	bl	8004456 <__retarget_lock_release_recursive>
 8004892:	89ab      	ldrh	r3, [r5, #12]
 8004894:	065b      	lsls	r3, r3, #25
 8004896:	f53f af1d 	bmi.w	80046d4 <_vfiprintf_r+0x44>
 800489a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800489c:	e71c      	b.n	80046d8 <_vfiprintf_r+0x48>
 800489e:	ab03      	add	r3, sp, #12
 80048a0:	9300      	str	r3, [sp, #0]
 80048a2:	462a      	mov	r2, r5
 80048a4:	4630      	mov	r0, r6
 80048a6:	4b06      	ldr	r3, [pc, #24]	; (80048c0 <_vfiprintf_r+0x230>)
 80048a8:	a904      	add	r1, sp, #16
 80048aa:	f000 f87d 	bl	80049a8 <_printf_i>
 80048ae:	e7e4      	b.n	800487a <_vfiprintf_r+0x1ea>
 80048b0:	0800521e 	.word	0x0800521e
 80048b4:	08005224 	.word	0x08005224
 80048b8:	08005228 	.word	0x08005228
 80048bc:	00000000 	.word	0x00000000
 80048c0:	0800466b 	.word	0x0800466b

080048c4 <_printf_common>:
 80048c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c8:	4616      	mov	r6, r2
 80048ca:	4699      	mov	r9, r3
 80048cc:	688a      	ldr	r2, [r1, #8]
 80048ce:	690b      	ldr	r3, [r1, #16]
 80048d0:	4607      	mov	r7, r0
 80048d2:	4293      	cmp	r3, r2
 80048d4:	bfb8      	it	lt
 80048d6:	4613      	movlt	r3, r2
 80048d8:	6033      	str	r3, [r6, #0]
 80048da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048de:	460c      	mov	r4, r1
 80048e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048e4:	b10a      	cbz	r2, 80048ea <_printf_common+0x26>
 80048e6:	3301      	adds	r3, #1
 80048e8:	6033      	str	r3, [r6, #0]
 80048ea:	6823      	ldr	r3, [r4, #0]
 80048ec:	0699      	lsls	r1, r3, #26
 80048ee:	bf42      	ittt	mi
 80048f0:	6833      	ldrmi	r3, [r6, #0]
 80048f2:	3302      	addmi	r3, #2
 80048f4:	6033      	strmi	r3, [r6, #0]
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	f015 0506 	ands.w	r5, r5, #6
 80048fc:	d106      	bne.n	800490c <_printf_common+0x48>
 80048fe:	f104 0a19 	add.w	sl, r4, #25
 8004902:	68e3      	ldr	r3, [r4, #12]
 8004904:	6832      	ldr	r2, [r6, #0]
 8004906:	1a9b      	subs	r3, r3, r2
 8004908:	42ab      	cmp	r3, r5
 800490a:	dc2b      	bgt.n	8004964 <_printf_common+0xa0>
 800490c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004910:	1e13      	subs	r3, r2, #0
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	bf18      	it	ne
 8004916:	2301      	movne	r3, #1
 8004918:	0692      	lsls	r2, r2, #26
 800491a:	d430      	bmi.n	800497e <_printf_common+0xba>
 800491c:	4649      	mov	r1, r9
 800491e:	4638      	mov	r0, r7
 8004920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004924:	47c0      	blx	r8
 8004926:	3001      	adds	r0, #1
 8004928:	d023      	beq.n	8004972 <_printf_common+0xae>
 800492a:	6823      	ldr	r3, [r4, #0]
 800492c:	6922      	ldr	r2, [r4, #16]
 800492e:	f003 0306 	and.w	r3, r3, #6
 8004932:	2b04      	cmp	r3, #4
 8004934:	bf14      	ite	ne
 8004936:	2500      	movne	r5, #0
 8004938:	6833      	ldreq	r3, [r6, #0]
 800493a:	f04f 0600 	mov.w	r6, #0
 800493e:	bf08      	it	eq
 8004940:	68e5      	ldreq	r5, [r4, #12]
 8004942:	f104 041a 	add.w	r4, r4, #26
 8004946:	bf08      	it	eq
 8004948:	1aed      	subeq	r5, r5, r3
 800494a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800494e:	bf08      	it	eq
 8004950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004954:	4293      	cmp	r3, r2
 8004956:	bfc4      	itt	gt
 8004958:	1a9b      	subgt	r3, r3, r2
 800495a:	18ed      	addgt	r5, r5, r3
 800495c:	42b5      	cmp	r5, r6
 800495e:	d11a      	bne.n	8004996 <_printf_common+0xd2>
 8004960:	2000      	movs	r0, #0
 8004962:	e008      	b.n	8004976 <_printf_common+0xb2>
 8004964:	2301      	movs	r3, #1
 8004966:	4652      	mov	r2, sl
 8004968:	4649      	mov	r1, r9
 800496a:	4638      	mov	r0, r7
 800496c:	47c0      	blx	r8
 800496e:	3001      	adds	r0, #1
 8004970:	d103      	bne.n	800497a <_printf_common+0xb6>
 8004972:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800497a:	3501      	adds	r5, #1
 800497c:	e7c1      	b.n	8004902 <_printf_common+0x3e>
 800497e:	2030      	movs	r0, #48	; 0x30
 8004980:	18e1      	adds	r1, r4, r3
 8004982:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800498c:	4422      	add	r2, r4
 800498e:	3302      	adds	r3, #2
 8004990:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004994:	e7c2      	b.n	800491c <_printf_common+0x58>
 8004996:	2301      	movs	r3, #1
 8004998:	4622      	mov	r2, r4
 800499a:	4649      	mov	r1, r9
 800499c:	4638      	mov	r0, r7
 800499e:	47c0      	blx	r8
 80049a0:	3001      	adds	r0, #1
 80049a2:	d0e6      	beq.n	8004972 <_printf_common+0xae>
 80049a4:	3601      	adds	r6, #1
 80049a6:	e7d9      	b.n	800495c <_printf_common+0x98>

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	4691      	mov	r9, r2
 80049b0:	2f78      	cmp	r7, #120	; 0x78
 80049b2:	4680      	mov	r8, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	469a      	mov	sl, r3
 80049b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80049ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	; 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d5 	beq.w	8004b74 <_printf_i+0x1cc>
 80049ca:	2f58      	cmp	r7, #88	; 0x58
 80049cc:	f000 80c1 	beq.w	8004b52 <_printf_i+0x1aa>
 80049d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	; (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b5b 	.word	0x08004b5b
 8004a18:	08004a81 	.word	0x08004a81
 8004a1c:	08004b15 	.word	0x08004b15
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b7d 	.word	0x08004b7d
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a81 	.word	0x08004a81
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b1d 	.word	0x08004b1d
 8004a40:	682b      	ldr	r3, [r5, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	602a      	str	r2, [r5, #0]
 8004a48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0a0      	b.n	8004b96 <_printf_i+0x1ee>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	682b      	ldr	r3, [r5, #0]
 8004a58:	0607      	lsls	r7, r0, #24
 8004a5a:	f103 0104 	add.w	r1, r3, #4
 8004a5e:	6029      	str	r1, [r5, #0]
 8004a60:	d501      	bpl.n	8004a66 <_printf_i+0xbe>
 8004a62:	681e      	ldr	r6, [r3, #0]
 8004a64:	e003      	b.n	8004a6e <_printf_i+0xc6>
 8004a66:	0646      	lsls	r6, r0, #25
 8004a68:	d5fb      	bpl.n	8004a62 <_printf_i+0xba>
 8004a6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004a6e:	2e00      	cmp	r6, #0
 8004a70:	da03      	bge.n	8004a7a <_printf_i+0xd2>
 8004a72:	232d      	movs	r3, #45	; 0x2d
 8004a74:	4276      	negs	r6, r6
 8004a76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	4859      	ldr	r0, [pc, #356]	; (8004be4 <_printf_i+0x23c>)
 8004a7e:	e012      	b.n	8004aa6 <_printf_i+0xfe>
 8004a80:	682b      	ldr	r3, [r5, #0]
 8004a82:	6820      	ldr	r0, [r4, #0]
 8004a84:	1d19      	adds	r1, r3, #4
 8004a86:	6029      	str	r1, [r5, #0]
 8004a88:	0605      	lsls	r5, r0, #24
 8004a8a:	d501      	bpl.n	8004a90 <_printf_i+0xe8>
 8004a8c:	681e      	ldr	r6, [r3, #0]
 8004a8e:	e002      	b.n	8004a96 <_printf_i+0xee>
 8004a90:	0641      	lsls	r1, r0, #25
 8004a92:	d5fb      	bpl.n	8004a8c <_printf_i+0xe4>
 8004a94:	881e      	ldrh	r6, [r3, #0]
 8004a96:	2f6f      	cmp	r7, #111	; 0x6f
 8004a98:	bf0c      	ite	eq
 8004a9a:	2308      	moveq	r3, #8
 8004a9c:	230a      	movne	r3, #10
 8004a9e:	4851      	ldr	r0, [pc, #324]	; (8004be4 <_printf_i+0x23c>)
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa6:	6865      	ldr	r5, [r4, #4]
 8004aa8:	2d00      	cmp	r5, #0
 8004aaa:	bfa8      	it	ge
 8004aac:	6821      	ldrge	r1, [r4, #0]
 8004aae:	60a5      	str	r5, [r4, #8]
 8004ab0:	bfa4      	itt	ge
 8004ab2:	f021 0104 	bicge.w	r1, r1, #4
 8004ab6:	6021      	strge	r1, [r4, #0]
 8004ab8:	b90e      	cbnz	r6, 8004abe <_printf_i+0x116>
 8004aba:	2d00      	cmp	r5, #0
 8004abc:	d04b      	beq.n	8004b56 <_printf_i+0x1ae>
 8004abe:	4615      	mov	r5, r2
 8004ac0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004ac4:	fb03 6711 	mls	r7, r3, r1, r6
 8004ac8:	5dc7      	ldrb	r7, [r0, r7]
 8004aca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ace:	4637      	mov	r7, r6
 8004ad0:	42bb      	cmp	r3, r7
 8004ad2:	460e      	mov	r6, r1
 8004ad4:	d9f4      	bls.n	8004ac0 <_printf_i+0x118>
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d10b      	bne.n	8004af2 <_printf_i+0x14a>
 8004ada:	6823      	ldr	r3, [r4, #0]
 8004adc:	07de      	lsls	r6, r3, #31
 8004ade:	d508      	bpl.n	8004af2 <_printf_i+0x14a>
 8004ae0:	6923      	ldr	r3, [r4, #16]
 8004ae2:	6861      	ldr	r1, [r4, #4]
 8004ae4:	4299      	cmp	r1, r3
 8004ae6:	bfde      	ittt	le
 8004ae8:	2330      	movle	r3, #48	; 0x30
 8004aea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004aee:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004af2:	1b52      	subs	r2, r2, r5
 8004af4:	6122      	str	r2, [r4, #16]
 8004af6:	464b      	mov	r3, r9
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f8cd a000 	str.w	sl, [sp]
 8004b00:	aa03      	add	r2, sp, #12
 8004b02:	f7ff fedf 	bl	80048c4 <_printf_common>
 8004b06:	3001      	adds	r0, #1
 8004b08:	d14a      	bne.n	8004ba0 <_printf_i+0x1f8>
 8004b0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b0e:	b004      	add	sp, #16
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	f043 0320 	orr.w	r3, r3, #32
 8004b1a:	6023      	str	r3, [r4, #0]
 8004b1c:	2778      	movs	r7, #120	; 0x78
 8004b1e:	4832      	ldr	r0, [pc, #200]	; (8004be8 <_printf_i+0x240>)
 8004b20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004b24:	6823      	ldr	r3, [r4, #0]
 8004b26:	6829      	ldr	r1, [r5, #0]
 8004b28:	061f      	lsls	r7, r3, #24
 8004b2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004b2e:	d402      	bmi.n	8004b36 <_printf_i+0x18e>
 8004b30:	065f      	lsls	r7, r3, #25
 8004b32:	bf48      	it	mi
 8004b34:	b2b6      	uxthmi	r6, r6
 8004b36:	07df      	lsls	r7, r3, #31
 8004b38:	bf48      	it	mi
 8004b3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3e:	6029      	str	r1, [r5, #0]
 8004b40:	bf48      	it	mi
 8004b42:	6023      	strmi	r3, [r4, #0]
 8004b44:	b91e      	cbnz	r6, 8004b4e <_printf_i+0x1a6>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f023 0320 	bic.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	2310      	movs	r3, #16
 8004b50:	e7a6      	b.n	8004aa0 <_printf_i+0xf8>
 8004b52:	4824      	ldr	r0, [pc, #144]	; (8004be4 <_printf_i+0x23c>)
 8004b54:	e7e4      	b.n	8004b20 <_printf_i+0x178>
 8004b56:	4615      	mov	r5, r2
 8004b58:	e7bd      	b.n	8004ad6 <_printf_i+0x12e>
 8004b5a:	682b      	ldr	r3, [r5, #0]
 8004b5c:	6826      	ldr	r6, [r4, #0]
 8004b5e:	1d18      	adds	r0, r3, #4
 8004b60:	6961      	ldr	r1, [r4, #20]
 8004b62:	6028      	str	r0, [r5, #0]
 8004b64:	0635      	lsls	r5, r6, #24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	d501      	bpl.n	8004b6e <_printf_i+0x1c6>
 8004b6a:	6019      	str	r1, [r3, #0]
 8004b6c:	e002      	b.n	8004b74 <_printf_i+0x1cc>
 8004b6e:	0670      	lsls	r0, r6, #25
 8004b70:	d5fb      	bpl.n	8004b6a <_printf_i+0x1c2>
 8004b72:	8019      	strh	r1, [r3, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	4615      	mov	r5, r2
 8004b78:	6123      	str	r3, [r4, #16]
 8004b7a:	e7bc      	b.n	8004af6 <_printf_i+0x14e>
 8004b7c:	682b      	ldr	r3, [r5, #0]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	1d1a      	adds	r2, r3, #4
 8004b82:	602a      	str	r2, [r5, #0]
 8004b84:	681d      	ldr	r5, [r3, #0]
 8004b86:	6862      	ldr	r2, [r4, #4]
 8004b88:	4628      	mov	r0, r5
 8004b8a:	f000 f96d 	bl	8004e68 <memchr>
 8004b8e:	b108      	cbz	r0, 8004b94 <_printf_i+0x1ec>
 8004b90:	1b40      	subs	r0, r0, r5
 8004b92:	6060      	str	r0, [r4, #4]
 8004b94:	6863      	ldr	r3, [r4, #4]
 8004b96:	6123      	str	r3, [r4, #16]
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b9e:	e7aa      	b.n	8004af6 <_printf_i+0x14e>
 8004ba0:	462a      	mov	r2, r5
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	4640      	mov	r0, r8
 8004ba6:	6923      	ldr	r3, [r4, #16]
 8004ba8:	47d0      	blx	sl
 8004baa:	3001      	adds	r0, #1
 8004bac:	d0ad      	beq.n	8004b0a <_printf_i+0x162>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	079b      	lsls	r3, r3, #30
 8004bb2:	d413      	bmi.n	8004bdc <_printf_i+0x234>
 8004bb4:	68e0      	ldr	r0, [r4, #12]
 8004bb6:	9b03      	ldr	r3, [sp, #12]
 8004bb8:	4298      	cmp	r0, r3
 8004bba:	bfb8      	it	lt
 8004bbc:	4618      	movlt	r0, r3
 8004bbe:	e7a6      	b.n	8004b0e <_printf_i+0x166>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4632      	mov	r2, r6
 8004bc4:	4649      	mov	r1, r9
 8004bc6:	4640      	mov	r0, r8
 8004bc8:	47d0      	blx	sl
 8004bca:	3001      	adds	r0, #1
 8004bcc:	d09d      	beq.n	8004b0a <_printf_i+0x162>
 8004bce:	3501      	adds	r5, #1
 8004bd0:	68e3      	ldr	r3, [r4, #12]
 8004bd2:	9903      	ldr	r1, [sp, #12]
 8004bd4:	1a5b      	subs	r3, r3, r1
 8004bd6:	42ab      	cmp	r3, r5
 8004bd8:	dcf2      	bgt.n	8004bc0 <_printf_i+0x218>
 8004bda:	e7eb      	b.n	8004bb4 <_printf_i+0x20c>
 8004bdc:	2500      	movs	r5, #0
 8004bde:	f104 0619 	add.w	r6, r4, #25
 8004be2:	e7f5      	b.n	8004bd0 <_printf_i+0x228>
 8004be4:	0800522f 	.word	0x0800522f
 8004be8:	08005240 	.word	0x08005240

08004bec <__sflush_r>:
 8004bec:	898a      	ldrh	r2, [r1, #12]
 8004bee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf0:	4605      	mov	r5, r0
 8004bf2:	0710      	lsls	r0, r2, #28
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	d457      	bmi.n	8004ca8 <__sflush_r+0xbc>
 8004bf8:	684b      	ldr	r3, [r1, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dc04      	bgt.n	8004c08 <__sflush_r+0x1c>
 8004bfe:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dc01      	bgt.n	8004c08 <__sflush_r+0x1c>
 8004c04:	2000      	movs	r0, #0
 8004c06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	d0fa      	beq.n	8004c04 <__sflush_r+0x18>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004c14:	682f      	ldr	r7, [r5, #0]
 8004c16:	6a21      	ldr	r1, [r4, #32]
 8004c18:	602b      	str	r3, [r5, #0]
 8004c1a:	d032      	beq.n	8004c82 <__sflush_r+0x96>
 8004c1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004c1e:	89a3      	ldrh	r3, [r4, #12]
 8004c20:	075a      	lsls	r2, r3, #29
 8004c22:	d505      	bpl.n	8004c30 <__sflush_r+0x44>
 8004c24:	6863      	ldr	r3, [r4, #4]
 8004c26:	1ac0      	subs	r0, r0, r3
 8004c28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004c2a:	b10b      	cbz	r3, 8004c30 <__sflush_r+0x44>
 8004c2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c2e:	1ac0      	subs	r0, r0, r3
 8004c30:	2300      	movs	r3, #0
 8004c32:	4602      	mov	r2, r0
 8004c34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004c36:	4628      	mov	r0, r5
 8004c38:	6a21      	ldr	r1, [r4, #32]
 8004c3a:	47b0      	blx	r6
 8004c3c:	1c43      	adds	r3, r0, #1
 8004c3e:	89a3      	ldrh	r3, [r4, #12]
 8004c40:	d106      	bne.n	8004c50 <__sflush_r+0x64>
 8004c42:	6829      	ldr	r1, [r5, #0]
 8004c44:	291d      	cmp	r1, #29
 8004c46:	d82b      	bhi.n	8004ca0 <__sflush_r+0xb4>
 8004c48:	4a28      	ldr	r2, [pc, #160]	; (8004cec <__sflush_r+0x100>)
 8004c4a:	410a      	asrs	r2, r1
 8004c4c:	07d6      	lsls	r6, r2, #31
 8004c4e:	d427      	bmi.n	8004ca0 <__sflush_r+0xb4>
 8004c50:	2200      	movs	r2, #0
 8004c52:	6062      	str	r2, [r4, #4]
 8004c54:	6922      	ldr	r2, [r4, #16]
 8004c56:	04d9      	lsls	r1, r3, #19
 8004c58:	6022      	str	r2, [r4, #0]
 8004c5a:	d504      	bpl.n	8004c66 <__sflush_r+0x7a>
 8004c5c:	1c42      	adds	r2, r0, #1
 8004c5e:	d101      	bne.n	8004c64 <__sflush_r+0x78>
 8004c60:	682b      	ldr	r3, [r5, #0]
 8004c62:	b903      	cbnz	r3, 8004c66 <__sflush_r+0x7a>
 8004c64:	6560      	str	r0, [r4, #84]	; 0x54
 8004c66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c68:	602f      	str	r7, [r5, #0]
 8004c6a:	2900      	cmp	r1, #0
 8004c6c:	d0ca      	beq.n	8004c04 <__sflush_r+0x18>
 8004c6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c72:	4299      	cmp	r1, r3
 8004c74:	d002      	beq.n	8004c7c <__sflush_r+0x90>
 8004c76:	4628      	mov	r0, r5
 8004c78:	f7ff fbee 	bl	8004458 <_free_r>
 8004c7c:	2000      	movs	r0, #0
 8004c7e:	6360      	str	r0, [r4, #52]	; 0x34
 8004c80:	e7c1      	b.n	8004c06 <__sflush_r+0x1a>
 8004c82:	2301      	movs	r3, #1
 8004c84:	4628      	mov	r0, r5
 8004c86:	47b0      	blx	r6
 8004c88:	1c41      	adds	r1, r0, #1
 8004c8a:	d1c8      	bne.n	8004c1e <__sflush_r+0x32>
 8004c8c:	682b      	ldr	r3, [r5, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0c5      	beq.n	8004c1e <__sflush_r+0x32>
 8004c92:	2b1d      	cmp	r3, #29
 8004c94:	d001      	beq.n	8004c9a <__sflush_r+0xae>
 8004c96:	2b16      	cmp	r3, #22
 8004c98:	d101      	bne.n	8004c9e <__sflush_r+0xb2>
 8004c9a:	602f      	str	r7, [r5, #0]
 8004c9c:	e7b2      	b.n	8004c04 <__sflush_r+0x18>
 8004c9e:	89a3      	ldrh	r3, [r4, #12]
 8004ca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	e7ae      	b.n	8004c06 <__sflush_r+0x1a>
 8004ca8:	690f      	ldr	r7, [r1, #16]
 8004caa:	2f00      	cmp	r7, #0
 8004cac:	d0aa      	beq.n	8004c04 <__sflush_r+0x18>
 8004cae:	0793      	lsls	r3, r2, #30
 8004cb0:	bf18      	it	ne
 8004cb2:	2300      	movne	r3, #0
 8004cb4:	680e      	ldr	r6, [r1, #0]
 8004cb6:	bf08      	it	eq
 8004cb8:	694b      	ldreq	r3, [r1, #20]
 8004cba:	1bf6      	subs	r6, r6, r7
 8004cbc:	600f      	str	r7, [r1, #0]
 8004cbe:	608b      	str	r3, [r1, #8]
 8004cc0:	2e00      	cmp	r6, #0
 8004cc2:	dd9f      	ble.n	8004c04 <__sflush_r+0x18>
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	463a      	mov	r2, r7
 8004cc8:	4628      	mov	r0, r5
 8004cca:	6a21      	ldr	r1, [r4, #32]
 8004ccc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004cd0:	47e0      	blx	ip
 8004cd2:	2800      	cmp	r0, #0
 8004cd4:	dc06      	bgt.n	8004ce4 <__sflush_r+0xf8>
 8004cd6:	89a3      	ldrh	r3, [r4, #12]
 8004cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce0:	81a3      	strh	r3, [r4, #12]
 8004ce2:	e790      	b.n	8004c06 <__sflush_r+0x1a>
 8004ce4:	4407      	add	r7, r0
 8004ce6:	1a36      	subs	r6, r6, r0
 8004ce8:	e7ea      	b.n	8004cc0 <__sflush_r+0xd4>
 8004cea:	bf00      	nop
 8004cec:	dfbffffe 	.word	0xdfbffffe

08004cf0 <_fflush_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b913      	cbnz	r3, 8004d00 <_fflush_r+0x10>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	b118      	cbz	r0, 8004d0a <_fflush_r+0x1a>
 8004d02:	6a03      	ldr	r3, [r0, #32]
 8004d04:	b90b      	cbnz	r3, 8004d0a <_fflush_r+0x1a>
 8004d06:	f7ff f9b1 	bl	800406c <__sinit>
 8004d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f3      	beq.n	8004cfa <_fflush_r+0xa>
 8004d12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004d14:	07d0      	lsls	r0, r2, #31
 8004d16:	d404      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d18:	0599      	lsls	r1, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d1e:	f7ff fb99 	bl	8004454 <__retarget_lock_acquire_recursive>
 8004d22:	4628      	mov	r0, r5
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7ff ff61 	bl	8004bec <__sflush_r>
 8004d2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	07da      	lsls	r2, r3, #31
 8004d30:	d4e4      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	d4e1      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004d3a:	f7ff fb8c 	bl	8004456 <__retarget_lock_release_recursive>
 8004d3e:	e7dd      	b.n	8004cfc <_fflush_r+0xc>

08004d40 <__swhatbuf_r>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	460c      	mov	r4, r1
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	4615      	mov	r5, r2
 8004d4a:	2900      	cmp	r1, #0
 8004d4c:	461e      	mov	r6, r3
 8004d4e:	b096      	sub	sp, #88	; 0x58
 8004d50:	da0c      	bge.n	8004d6c <__swhatbuf_r+0x2c>
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	2100      	movs	r1, #0
 8004d56:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d5a:	bf0c      	ite	eq
 8004d5c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004d60:	2340      	movne	r3, #64	; 0x40
 8004d62:	2000      	movs	r0, #0
 8004d64:	6031      	str	r1, [r6, #0]
 8004d66:	602b      	str	r3, [r5, #0]
 8004d68:	b016      	add	sp, #88	; 0x58
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	466a      	mov	r2, sp
 8004d6e:	f000 f849 	bl	8004e04 <_fstat_r>
 8004d72:	2800      	cmp	r0, #0
 8004d74:	dbed      	blt.n	8004d52 <__swhatbuf_r+0x12>
 8004d76:	9901      	ldr	r1, [sp, #4]
 8004d78:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004d7c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004d80:	4259      	negs	r1, r3
 8004d82:	4159      	adcs	r1, r3
 8004d84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d88:	e7eb      	b.n	8004d62 <__swhatbuf_r+0x22>

08004d8a <__smakebuf_r>:
 8004d8a:	898b      	ldrh	r3, [r1, #12]
 8004d8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d8e:	079d      	lsls	r5, r3, #30
 8004d90:	4606      	mov	r6, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	d507      	bpl.n	8004da6 <__smakebuf_r+0x1c>
 8004d96:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	6123      	str	r3, [r4, #16]
 8004d9e:	2301      	movs	r3, #1
 8004da0:	6163      	str	r3, [r4, #20]
 8004da2:	b002      	add	sp, #8
 8004da4:	bd70      	pop	{r4, r5, r6, pc}
 8004da6:	466a      	mov	r2, sp
 8004da8:	ab01      	add	r3, sp, #4
 8004daa:	f7ff ffc9 	bl	8004d40 <__swhatbuf_r>
 8004dae:	9900      	ldr	r1, [sp, #0]
 8004db0:	4605      	mov	r5, r0
 8004db2:	4630      	mov	r0, r6
 8004db4:	f7ff fbb8 	bl	8004528 <_malloc_r>
 8004db8:	b948      	cbnz	r0, 8004dce <__smakebuf_r+0x44>
 8004dba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dbe:	059a      	lsls	r2, r3, #22
 8004dc0:	d4ef      	bmi.n	8004da2 <__smakebuf_r+0x18>
 8004dc2:	f023 0303 	bic.w	r3, r3, #3
 8004dc6:	f043 0302 	orr.w	r3, r3, #2
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	e7e3      	b.n	8004d96 <__smakebuf_r+0xc>
 8004dce:	89a3      	ldrh	r3, [r4, #12]
 8004dd0:	6020      	str	r0, [r4, #0]
 8004dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dd6:	81a3      	strh	r3, [r4, #12]
 8004dd8:	9b00      	ldr	r3, [sp, #0]
 8004dda:	6120      	str	r0, [r4, #16]
 8004ddc:	6163      	str	r3, [r4, #20]
 8004dde:	9b01      	ldr	r3, [sp, #4]
 8004de0:	b15b      	cbz	r3, 8004dfa <__smakebuf_r+0x70>
 8004de2:	4630      	mov	r0, r6
 8004de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de8:	f000 f81e 	bl	8004e28 <_isatty_r>
 8004dec:	b128      	cbz	r0, 8004dfa <__smakebuf_r+0x70>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	f023 0303 	bic.w	r3, r3, #3
 8004df4:	f043 0301 	orr.w	r3, r3, #1
 8004df8:	81a3      	strh	r3, [r4, #12]
 8004dfa:	89a3      	ldrh	r3, [r4, #12]
 8004dfc:	431d      	orrs	r5, r3
 8004dfe:	81a5      	strh	r5, [r4, #12]
 8004e00:	e7cf      	b.n	8004da2 <__smakebuf_r+0x18>
	...

08004e04 <_fstat_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	2300      	movs	r3, #0
 8004e08:	4d06      	ldr	r5, [pc, #24]	; (8004e24 <_fstat_r+0x20>)
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f7fc fd37 	bl	8001884 <_fstat>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d102      	bne.n	8004e20 <_fstat_r+0x1c>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b103      	cbz	r3, 8004e20 <_fstat_r+0x1c>
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
 8004e22:	bf00      	nop
 8004e24:	200002e4 	.word	0x200002e4

08004e28 <_isatty_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	4d05      	ldr	r5, [pc, #20]	; (8004e44 <_isatty_r+0x1c>)
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	f7fc fd35 	bl	80018a2 <_isatty>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_isatty_r+0x1a>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_isatty_r+0x1a>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	200002e4 	.word	0x200002e4

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	4d05      	ldr	r5, [pc, #20]	; (8004e64 <_sbrk_r+0x1c>)
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fc fd3c 	bl	80018d0 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	200002e4 	.word	0x200002e4

08004e68 <memchr>:
 8004e68:	4603      	mov	r3, r0
 8004e6a:	b510      	push	{r4, lr}
 8004e6c:	b2c9      	uxtb	r1, r1
 8004e6e:	4402      	add	r2, r0
 8004e70:	4293      	cmp	r3, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	d101      	bne.n	8004e7a <memchr+0x12>
 8004e76:	2000      	movs	r0, #0
 8004e78:	e003      	b.n	8004e82 <memchr+0x1a>
 8004e7a:	7804      	ldrb	r4, [r0, #0]
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	428c      	cmp	r4, r1
 8004e80:	d1f6      	bne.n	8004e70 <memchr+0x8>
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <_init>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr

08004e90 <_fini>:
 8004e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e92:	bf00      	nop
 8004e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e96:	bc08      	pop	{r3}
 8004e98:	469e      	mov	lr, r3
 8004e9a:	4770      	bx	lr
