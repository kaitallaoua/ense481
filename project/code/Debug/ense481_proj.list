
ense481_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004550  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800480c  0800480c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800480c  0800480c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800480c  0800480c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004810  08004810  00014810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004814  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000068  0800487c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  0800487c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d79f  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000212d  00000000  00000000  0002d873  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  0002f9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a94  00000000  00000000  00030738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001915f  00000000  00000000  000311cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecdc  00000000  00000000  0004a32b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f55  00000000  00000000  00059007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040d8  00000000  00000000  000e9f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ee034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004644 	.word	0x08004644

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004644 	.word	0x08004644

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2uiz>:
 8000608:	0042      	lsls	r2, r0, #1
 800060a:	d20e      	bcs.n	800062a <__aeabi_f2uiz+0x22>
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30b      	bcc.n	800062a <__aeabi_f2uiz+0x22>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d409      	bmi.n	8000630 <__aeabi_f2uiz+0x28>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	fa23 f002 	lsr.w	r0, r3, r2
 8000628:	4770      	bx	lr
 800062a:	f04f 0000 	mov.w	r0, #0
 800062e:	4770      	bx	lr
 8000630:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000634:	d101      	bne.n	800063a <__aeabi_f2uiz+0x32>
 8000636:	0242      	lsls	r2, r0, #9
 8000638:	d102      	bne.n	8000640 <__aeabi_f2uiz+0x38>
 800063a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8000650:	1d39      	adds	r1, r7, #4
 8000652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000656:	2201      	movs	r2, #1
 8000658:	4803      	ldr	r0, [pc, #12]	; (8000668 <__io_putchar+0x20>)
 800065a:	f002 feed 	bl	8003438 <HAL_UART_Transmit>
	return ch;
 800065e:	687b      	ldr	r3, [r7, #4]
}
 8000660:	4618      	mov	r0, r3
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	200000fc 	.word	0x200000fc

0800066c <select_adc_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_adc_channel(int channel) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
	//sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000680:	2301      	movs	r3, #1
 8000682:	617b      	str	r3, [r7, #20]
	switch (channel) {
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b0f      	cmp	r3, #15
 8000688:	f200 812d 	bhi.w	80008e6 <select_adc_channel+0x27a>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <select_adc_channel+0x28>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	080006d5 	.word	0x080006d5
 8000698:	080006f7 	.word	0x080006f7
 800069c:	08000719 	.word	0x08000719
 80006a0:	0800073b 	.word	0x0800073b
 80006a4:	0800075d 	.word	0x0800075d
 80006a8:	0800077f 	.word	0x0800077f
 80006ac:	080007a1 	.word	0x080007a1
 80006b0:	080007c3 	.word	0x080007c3
 80006b4:	080007e5 	.word	0x080007e5
 80006b8:	08000807 	.word	0x08000807
 80006bc:	08000827 	.word	0x08000827
 80006c0:	08000847 	.word	0x08000847
 80006c4:	08000867 	.word	0x08000867
 80006c8:	08000887 	.word	0x08000887
 80006cc:	080008a7 	.word	0x080008a7
 80006d0:	080008c7 	.word	0x080008c7
	case 0:
		sConfig.Channel = ADC_CHANNEL_0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80006d8:	2301      	movs	r3, #1
 80006da:	613b      	str	r3, [r7, #16]

		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	4619      	mov	r1, r3
 80006e2:	4893      	ldr	r0, [pc, #588]	; (8000930 <select_adc_channel+0x2c4>)
 80006e4:	f001 f8b6 	bl	8001854 <HAL_ADC_ConfigChannel>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	f000 80fd 	beq.w	80008ea <select_adc_channel+0x27e>
			Error_Handler();
 80006f0:	f000 fb60 	bl	8000db4 <Error_Handler>
		}
		break;
 80006f4:	e0f9      	b.n	80008ea <select_adc_channel+0x27e>

	case 1:
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
		sConfig.Channel = ADC_CHANNEL_1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80006fe:	f107 030c 	add.w	r3, r7, #12
 8000702:	4619      	mov	r1, r3
 8000704:	488a      	ldr	r0, [pc, #552]	; (8000930 <select_adc_channel+0x2c4>)
 8000706:	f001 f8a5 	bl	8001854 <HAL_ADC_ConfigChannel>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	f000 80ee 	beq.w	80008ee <select_adc_channel+0x282>
			Error_Handler();
 8000712:	f000 fb4f 	bl	8000db4 <Error_Handler>
		}
		break;
 8000716:	e0ea      	b.n	80008ee <select_adc_channel+0x282>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 2:
		sConfig.Channel = ADC_CHANNEL_2;
 8000718:	2302      	movs	r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	4619      	mov	r1, r3
 8000726:	4882      	ldr	r0, [pc, #520]	; (8000930 <select_adc_channel+0x2c4>)
 8000728:	f001 f894 	bl	8001854 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	f000 80df 	beq.w	80008f2 <select_adc_channel+0x286>
			Error_Handler();
 8000734:	f000 fb3e 	bl	8000db4 <Error_Handler>
		}
		break;
 8000738:	e0db      	b.n	80008f2 <select_adc_channel+0x286>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 3:
		sConfig.Channel = ADC_CHANNEL_3;
 800073a:	2303      	movs	r3, #3
 800073c:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	4879      	ldr	r0, [pc, #484]	; (8000930 <select_adc_channel+0x2c4>)
 800074a:	f001 f883 	bl	8001854 <HAL_ADC_ConfigChannel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	f000 80d0 	beq.w	80008f6 <select_adc_channel+0x28a>
			Error_Handler();
 8000756:	f000 fb2d 	bl	8000db4 <Error_Handler>
		}
		break;
 800075a:	e0cc      	b.n	80008f6 <select_adc_channel+0x28a>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 4:
		sConfig.Channel = ADC_CHANNEL_4;
 800075c:	2304      	movs	r3, #4
 800075e:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	4619      	mov	r1, r3
 800076a:	4871      	ldr	r0, [pc, #452]	; (8000930 <select_adc_channel+0x2c4>)
 800076c:	f001 f872 	bl	8001854 <HAL_ADC_ConfigChannel>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	f000 80c1 	beq.w	80008fa <select_adc_channel+0x28e>
			Error_Handler();
 8000778:	f000 fb1c 	bl	8000db4 <Error_Handler>
		}
		break;
 800077c:	e0bd      	b.n	80008fa <select_adc_channel+0x28e>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 5:
		sConfig.Channel = ADC_CHANNEL_5;
 800077e:	2305      	movs	r3, #5
 8000780:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 8000782:	2301      	movs	r3, #1
 8000784:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4868      	ldr	r0, [pc, #416]	; (8000930 <select_adc_channel+0x2c4>)
 800078e:	f001 f861 	bl	8001854 <HAL_ADC_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	f000 80b2 	beq.w	80008fe <select_adc_channel+0x292>
			Error_Handler();
 800079a:	f000 fb0b 	bl	8000db4 <Error_Handler>
		}
		break;
 800079e:	e0ae      	b.n	80008fe <select_adc_channel+0x292>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 6:
		sConfig.Channel = ADC_CHANNEL_6;
 80007a0:	2306      	movs	r3, #6
 80007a2:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	4619      	mov	r1, r3
 80007ae:	4860      	ldr	r0, [pc, #384]	; (8000930 <select_adc_channel+0x2c4>)
 80007b0:	f001 f850 	bl	8001854 <HAL_ADC_ConfigChannel>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	f000 80a3 	beq.w	8000902 <select_adc_channel+0x296>
			Error_Handler();
 80007bc:	f000 fafa 	bl	8000db4 <Error_Handler>
		}
		break;
 80007c0:	e09f      	b.n	8000902 <select_adc_channel+0x296>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 7:
		sConfig.Channel = ADC_CHANNEL_7;
 80007c2:	2307      	movs	r3, #7
 80007c4:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4619      	mov	r1, r3
 80007d0:	4857      	ldr	r0, [pc, #348]	; (8000930 <select_adc_channel+0x2c4>)
 80007d2:	f001 f83f 	bl	8001854 <HAL_ADC_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f000 8094 	beq.w	8000906 <select_adc_channel+0x29a>
			Error_Handler();
 80007de:	f000 fae9 	bl	8000db4 <Error_Handler>
		}
		break;
 80007e2:	e090      	b.n	8000906 <select_adc_channel+0x29a>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 8:
		sConfig.Channel = ADC_CHANNEL_8;
 80007e4:	2308      	movs	r3, #8
 80007e6:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 9;
 80007e8:	2309      	movs	r3, #9
 80007ea:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	4619      	mov	r1, r3
 80007f2:	484f      	ldr	r0, [pc, #316]	; (8000930 <select_adc_channel+0x2c4>)
 80007f4:	f001 f82e 	bl	8001854 <HAL_ADC_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	f000 8085 	beq.w	800090a <select_adc_channel+0x29e>
			Error_Handler();
 8000800:	f000 fad8 	bl	8000db4 <Error_Handler>
		}
		break;
 8000804:	e081      	b.n	800090a <select_adc_channel+0x29e>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 9:
		sConfig.Channel = ADC_CHANNEL_9;
 8000806:	2309      	movs	r3, #9
 8000808:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800080a:	2301      	movs	r3, #1
 800080c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	4846      	ldr	r0, [pc, #280]	; (8000930 <select_adc_channel+0x2c4>)
 8000816:	f001 f81d 	bl	8001854 <HAL_ADC_ConfigChannel>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d076      	beq.n	800090e <select_adc_channel+0x2a2>
			Error_Handler();
 8000820:	f000 fac8 	bl	8000db4 <Error_Handler>
		}
		break;
 8000824:	e073      	b.n	800090e <select_adc_channel+0x2a2>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 10:
		sConfig.Channel = ADC_CHANNEL_10;
 8000826:	230a      	movs	r3, #10
 8000828:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	4619      	mov	r1, r3
 8000834:	483e      	ldr	r0, [pc, #248]	; (8000930 <select_adc_channel+0x2c4>)
 8000836:	f001 f80d 	bl	8001854 <HAL_ADC_ConfigChannel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d068      	beq.n	8000912 <select_adc_channel+0x2a6>
			Error_Handler();
 8000840:	f000 fab8 	bl	8000db4 <Error_Handler>
		}
		break;
 8000844:	e065      	b.n	8000912 <select_adc_channel+0x2a6>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 11:
		sConfig.Channel = ADC_CHANNEL_11;
 8000846:	230b      	movs	r3, #11
 8000848:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800084a:	2301      	movs	r3, #1
 800084c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4836      	ldr	r0, [pc, #216]	; (8000930 <select_adc_channel+0x2c4>)
 8000856:	f000 fffd 	bl	8001854 <HAL_ADC_ConfigChannel>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d05a      	beq.n	8000916 <select_adc_channel+0x2aa>
			Error_Handler();
 8000860:	f000 faa8 	bl	8000db4 <Error_Handler>
		}
		break;
 8000864:	e057      	b.n	8000916 <select_adc_channel+0x2aa>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 12:
		sConfig.Channel = ADC_CHANNEL_12;
 8000866:	230c      	movs	r3, #12
 8000868:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800086a:	2301      	movs	r3, #1
 800086c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	4619      	mov	r1, r3
 8000874:	482e      	ldr	r0, [pc, #184]	; (8000930 <select_adc_channel+0x2c4>)
 8000876:	f000 ffed 	bl	8001854 <HAL_ADC_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d04c      	beq.n	800091a <select_adc_channel+0x2ae>
			Error_Handler();
 8000880:	f000 fa98 	bl	8000db4 <Error_Handler>
		}
		break;
 8000884:	e049      	b.n	800091a <select_adc_channel+0x2ae>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 13:
		sConfig.Channel = ADC_CHANNEL_13;
 8000886:	230d      	movs	r3, #13
 8000888:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800088e:	f107 030c 	add.w	r3, r7, #12
 8000892:	4619      	mov	r1, r3
 8000894:	4826      	ldr	r0, [pc, #152]	; (8000930 <select_adc_channel+0x2c4>)
 8000896:	f000 ffdd 	bl	8001854 <HAL_ADC_ConfigChannel>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d03e      	beq.n	800091e <select_adc_channel+0x2b2>
			Error_Handler();
 80008a0:	f000 fa88 	bl	8000db4 <Error_Handler>
		}
		break;
 80008a4:	e03b      	b.n	800091e <select_adc_channel+0x2b2>
		/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
		 */
	case 14:
		sConfig.Channel = ADC_CHANNEL_14;
 80008a6:	230e      	movs	r3, #14
 80008a8:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008ae:	f107 030c 	add.w	r3, r7, #12
 80008b2:	4619      	mov	r1, r3
 80008b4:	481e      	ldr	r0, [pc, #120]	; (8000930 <select_adc_channel+0x2c4>)
 80008b6:	f000 ffcd 	bl	8001854 <HAL_ADC_ConfigChannel>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d030      	beq.n	8000922 <select_adc_channel+0x2b6>
			Error_Handler();
 80008c0:	f000 fa78 	bl	8000db4 <Error_Handler>
		}
		break;
 80008c4:	e02d      	b.n	8000922 <select_adc_channel+0x2b6>
	case 15:
		sConfig.Channel = ADC_CHANNEL_15;
 80008c6:	230f      	movs	r3, #15
 80008c8:	60fb      	str	r3, [r7, #12]
		sConfig.Rank = 1;
 80008ca:	2301      	movs	r3, #1
 80008cc:	613b      	str	r3, [r7, #16]
		if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4816      	ldr	r0, [pc, #88]	; (8000930 <select_adc_channel+0x2c4>)
 80008d6:	f000 ffbd 	bl	8001854 <HAL_ADC_ConfigChannel>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d022      	beq.n	8000926 <select_adc_channel+0x2ba>
			Error_Handler();
 80008e0:	f000 fa68 	bl	8000db4 <Error_Handler>
		}
		break;
 80008e4:	e01f      	b.n	8000926 <select_adc_channel+0x2ba>
	default:
		break;
 80008e6:	bf00      	nop
 80008e8:	e01e      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008ea:	bf00      	nop
 80008ec:	e01c      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008ee:	bf00      	nop
 80008f0:	e01a      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008f2:	bf00      	nop
 80008f4:	e018      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008f6:	bf00      	nop
 80008f8:	e016      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008fa:	bf00      	nop
 80008fc:	e014      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 80008fe:	bf00      	nop
 8000900:	e012      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000902:	bf00      	nop
 8000904:	e010      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000906:	bf00      	nop
 8000908:	e00e      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 800090a:	bf00      	nop
 800090c:	e00c      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 800090e:	bf00      	nop
 8000910:	e00a      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000912:	bf00      	nop
 8000914:	e008      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000916:	bf00      	nop
 8000918:	e006      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 800091a:	bf00      	nop
 800091c:	e004      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 800091e:	bf00      	nop
 8000920:	e002      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000922:	bf00      	nop
 8000924:	e000      	b.n	8000928 <select_adc_channel+0x2bc>
		break;
 8000926:	bf00      	nop
	}
}
 8000928:	bf00      	nop
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000084 	.word	0x20000084

08000934 <unquantize_adc_val>:

float unquantize_adc_val(uint32_t quantized_val, uint32_t mcu_V_q) {
 8000934:	b590      	push	{r4, r7, lr}
 8000936:	b085      	sub	sp, #20
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	const float adc_max_val = 4095.0;
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <unquantize_adc_val+0x48>)
 8000940:	60fb      	str	r3, [r7, #12]


	// mcu_V_q expected to be around 4038 = ~3.2V
	// prob should assert this

	return ( ((float) quantized_val) / adc_max_val) * (( (float) mcu_V_q ) / adc_max_val);
 8000942:	6878      	ldr	r0, [r7, #4]
 8000944:	f7ff fcb8 	bl	80002b8 <__aeabi_ui2f>
 8000948:	4603      	mov	r3, r0
 800094a:	68f9      	ldr	r1, [r7, #12]
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff fdbf 	bl	80004d0 <__aeabi_fdiv>
 8000952:	4603      	mov	r3, r0
 8000954:	461c      	mov	r4, r3
 8000956:	6838      	ldr	r0, [r7, #0]
 8000958:	f7ff fcae 	bl	80002b8 <__aeabi_ui2f>
 800095c:	4603      	mov	r3, r0
 800095e:	68f9      	ldr	r1, [r7, #12]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff fdb5 	bl	80004d0 <__aeabi_fdiv>
 8000966:	4603      	mov	r3, r0
 8000968:	4619      	mov	r1, r3
 800096a:	4620      	mov	r0, r4
 800096c:	f7ff fcfc 	bl	8000368 <__aeabi_fmul>
 8000970:	4603      	mov	r3, r0


}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	bd90      	pop	{r4, r7, pc}
 800097a:	bf00      	nop
 800097c:	457ff000 	.word	0x457ff000

08000980 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000986:	f000 fc77 	bl	8001278 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800098a:	f000 f8bb 	bl	8000b04 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800098e:	f000 f9c5 	bl	8000d1c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000992:	f000 f999 	bl	8000cc8 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8000996:	f000 f90b 	bl	8000bb0 <MX_ADC1_Init>
	MX_TIM3_Init();
 800099a:	f000 f947 	bl	8000c2c <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	printf("fully init'ed");
 800099e:	484e      	ldr	r0, [pc, #312]	; (8000ad8 <main+0x158>)
 80009a0:	f002 ff7a 	bl	8003898 <iprintf>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		printf("-------------------------------\r\n");
 80009a4:	484d      	ldr	r0, [pc, #308]	; (8000adc <main+0x15c>)
 80009a6:	f002 ffdd 	bl	8003964 <puts>
		for (uint16_t i = 0; i < 2; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	82fb      	strh	r3, [r7, #22]
 80009ae:	e029      	b.n	8000a04 <main+0x84>

			select_adc_channel(i);
 80009b0:	8afb      	ldrh	r3, [r7, #22]
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fe5a 	bl	800066c <select_adc_channel>
			// Get each ADC value from the group (2 channels in this case)
			HAL_ADC_Start(&hadc1);
 80009b8:	4849      	ldr	r0, [pc, #292]	; (8000ae0 <main+0x160>)
 80009ba:	f000 fd8b 	bl	80014d4 <HAL_ADC_Start>
			// Wait for regular group conversion to be completed
			HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80009be:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80009c2:	4847      	ldr	r0, [pc, #284]	; (8000ae0 <main+0x160>)
 80009c4:	f000 fe34 	bl	8001630 <HAL_ADC_PollForConversion>


			// source 3.3v
			if (i == 0) {
 80009c8:	8afb      	ldrh	r3, [r7, #22]
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d10a      	bne.n	80009e4 <main+0x64>
				source_V_q = HAL_ADC_GetValue(&hadc1);
 80009ce:	4844      	ldr	r0, [pc, #272]	; (8000ae0 <main+0x160>)
 80009d0:	f000 ff34 	bl	800183c <HAL_ADC_GetValue>
 80009d4:	61f8      	str	r0, [r7, #28]
				printf("Quantized Source 3.3v [%u] value: %lu\r\n [unitless]\r\n", i, source_V_q);
 80009d6:	8afb      	ldrh	r3, [r7, #22]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	4619      	mov	r1, r3
 80009dc:	4841      	ldr	r0, [pc, #260]	; (8000ae4 <main+0x164>)
 80009de:	f002 ff5b 	bl	8003898 <iprintf>
 80009e2:	e00c      	b.n	80009fe <main+0x7e>

			// voltage mcu gets after vdrop from resistor, around 3.277V from multimeter
			} else if (i == 1) {
 80009e4:	8afb      	ldrh	r3, [r7, #22]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d109      	bne.n	80009fe <main+0x7e>
				mcu_V_q = HAL_ADC_GetValue(&hadc1);
 80009ea:	483d      	ldr	r0, [pc, #244]	; (8000ae0 <main+0x160>)
 80009ec:	f000 ff26 	bl	800183c <HAL_ADC_GetValue>
 80009f0:	61b8      	str	r0, [r7, #24]
				printf("Quantized After resistor [%u] value: %lu [unitless]\r\n", i, mcu_V_q);
 80009f2:	8afb      	ldrh	r3, [r7, #22]
 80009f4:	69ba      	ldr	r2, [r7, #24]
 80009f6:	4619      	mov	r1, r3
 80009f8:	483b      	ldr	r0, [pc, #236]	; (8000ae8 <main+0x168>)
 80009fa:	f002 ff4d 	bl	8003898 <iprintf>
		for (uint16_t i = 0; i < 2; i++) {
 80009fe:	8afb      	ldrh	r3, [r7, #22]
 8000a00:	3301      	adds	r3, #1
 8000a02:	82fb      	strh	r3, [r7, #22]
 8000a04:	8afb      	ldrh	r3, [r7, #22]
 8000a06:	2b01      	cmp	r3, #1
 8000a08:	d9d2      	bls.n	80009b0 <main+0x30>

			}
		}

		//source_V = unquantize_adc_val(source_V_q, mcu_V_q);
		mcu_V = unquantize_adc_val(mcu_V_q, mcu_V_q);
 8000a0a:	69b9      	ldr	r1, [r7, #24]
 8000a0c:	69b8      	ldr	r0, [r7, #24]
 8000a0e:	f7ff ff91 	bl	8000934 <unquantize_adc_val>
 8000a12:	6138      	str	r0, [r7, #16]

		shunt_resistor_V = unquantize_adc_val(source_V_q - mcu_V_q, mcu_V_q);
 8000a14:	69fa      	ldr	r2, [r7, #28]
 8000a16:	69bb      	ldr	r3, [r7, #24]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	69b9      	ldr	r1, [r7, #24]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff89 	bl	8000934 <unquantize_adc_val>
 8000a22:	60f8      	str	r0, [r7, #12]

		// current in circuit
		// I = V / R where R is assumed to be a (constant) 1 ohm resistor
		// therefore I = V

		circuit_I_A = shunt_resistor_V;
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	60bb      	str	r3, [r7, #8]

		shunt_resistor_W = circuit_I_A * shunt_resistor_V;
 8000a28:	68f9      	ldr	r1, [r7, #12]
 8000a2a:	68b8      	ldr	r0, [r7, #8]
 8000a2c:	f7ff fc9c 	bl	8000368 <__aeabi_fmul>
 8000a30:	4603      	mov	r3, r0
 8000a32:	607b      	str	r3, [r7, #4]
		mcu_W = mcu_V * circuit_I_A;
 8000a34:	68b9      	ldr	r1, [r7, #8]
 8000a36:	6938      	ldr	r0, [r7, #16]
 8000a38:	f7ff fc96 	bl	8000368 <__aeabi_fmul>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	603b      	str	r3, [r7, #0]





		printf("Shunt Resistor Voltage: %u [mV]\r\n", (uint16_t) (shunt_resistor_V * 1000));
 8000a40:	492a      	ldr	r1, [pc, #168]	; (8000aec <main+0x16c>)
 8000a42:	68f8      	ldr	r0, [r7, #12]
 8000a44:	f7ff fc90 	bl	8000368 <__aeabi_fmul>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f7ff fddc 	bl	8000608 <__aeabi_f2uiz>
 8000a50:	4603      	mov	r3, r0
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	4619      	mov	r1, r3
 8000a56:	4826      	ldr	r0, [pc, #152]	; (8000af0 <main+0x170>)
 8000a58:	f002 ff1e 	bl	8003898 <iprintf>
		printf("MCU Voltage: %u [mV]\r\n", (uint16_t) (mcu_V * 1000));
 8000a5c:	4923      	ldr	r1, [pc, #140]	; (8000aec <main+0x16c>)
 8000a5e:	6938      	ldr	r0, [r7, #16]
 8000a60:	f7ff fc82 	bl	8000368 <__aeabi_fmul>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fdce 	bl	8000608 <__aeabi_f2uiz>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	b29b      	uxth	r3, r3
 8000a70:	4619      	mov	r1, r3
 8000a72:	4820      	ldr	r0, [pc, #128]	; (8000af4 <main+0x174>)
 8000a74:	f002 ff10 	bl	8003898 <iprintf>
		printf("Circuit current: %u [mA]\r\n", (uint16_t) (circuit_I_A * 1000));
 8000a78:	491c      	ldr	r1, [pc, #112]	; (8000aec <main+0x16c>)
 8000a7a:	68b8      	ldr	r0, [r7, #8]
 8000a7c:	f7ff fc74 	bl	8000368 <__aeabi_fmul>
 8000a80:	4603      	mov	r3, r0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fdc0 	bl	8000608 <__aeabi_f2uiz>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	481a      	ldr	r0, [pc, #104]	; (8000af8 <main+0x178>)
 8000a90:	f002 ff02 	bl	8003898 <iprintf>
		printf("Shunt Resistor Power: %u [mW]\r\n", (uint16_t) (shunt_resistor_W * 1000));
 8000a94:	4915      	ldr	r1, [pc, #84]	; (8000aec <main+0x16c>)
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fc66 	bl	8000368 <__aeabi_fmul>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff fdb2 	bl	8000608 <__aeabi_f2uiz>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	b29b      	uxth	r3, r3
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4814      	ldr	r0, [pc, #80]	; (8000afc <main+0x17c>)
 8000aac:	f002 fef4 	bl	8003898 <iprintf>
		printf("MCU power: %u [mW]\r\n", (uint16_t) (mcu_W * 1000));
 8000ab0:	490e      	ldr	r1, [pc, #56]	; (8000aec <main+0x16c>)
 8000ab2:	6838      	ldr	r0, [r7, #0]
 8000ab4:	f7ff fc58 	bl	8000368 <__aeabi_fmul>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f7ff fda4 	bl	8000608 <__aeabi_f2uiz>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	b29b      	uxth	r3, r3
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480e      	ldr	r0, [pc, #56]	; (8000b00 <main+0x180>)
 8000ac8:	f002 fee6 	bl	8003898 <iprintf>




		HAL_Delay(1000);
 8000acc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ad0:	f000 fc04 	bl	80012dc <HAL_Delay>
		printf("-------------------------------\r\n");
 8000ad4:	e766      	b.n	80009a4 <main+0x24>
 8000ad6:	bf00      	nop
 8000ad8:	0800465c 	.word	0x0800465c
 8000adc:	0800466c 	.word	0x0800466c
 8000ae0:	20000084 	.word	0x20000084
 8000ae4:	08004690 	.word	0x08004690
 8000ae8:	080046c8 	.word	0x080046c8
 8000aec:	447a0000 	.word	0x447a0000
 8000af0:	08004700 	.word	0x08004700
 8000af4:	08004724 	.word	0x08004724
 8000af8:	0800473c 	.word	0x0800473c
 8000afc:	08004758 	.word	0x08004758
 8000b00:	08004778 	.word	0x08004778

08000b04 <SystemClock_Config>:
}
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b094      	sub	sp, #80	; 0x50
 8000b08:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b0e:	2228      	movs	r2, #40	; 0x28
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f003 f806 	bl	8003b24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8000b28:	1d3b      	adds	r3, r7, #4
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	605a      	str	r2, [r3, #4]
 8000b30:	609a      	str	r2, [r3, #8]
 8000b32:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b34:	2302      	movs	r3, #2
 8000b36:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	2310      	movs	r3, #16
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b40:	2302      	movs	r3, #2
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000b44:	2300      	movs	r3, #0
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000b48:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000b4c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b52:	4618      	mov	r0, r3
 8000b54:	f001 fa76 	bl	8002044 <HAL_RCC_OscConfig>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <SystemClock_Config+0x5e>
		Error_Handler();
 8000b5e:	f000 f929 	bl	8000db4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b62:	230f      	movs	r3, #15
 8000b64:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b66:	2302      	movs	r3, #2
 8000b68:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fce2 	bl	8002548 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0x8a>
		Error_Handler();
 8000b8a:	f000 f913 	bl	8000db4 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000b92:	2300      	movs	r3, #0
 8000b94:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8000b96:	1d3b      	adds	r3, r7, #4
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f001 fe93 	bl	80028c4 <HAL_RCCEx_PeriphCLKConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xa4>
		Error_Handler();
 8000ba4:	f000 f906 	bl	8000db4 <Error_Handler>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	; 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000bc0:	4b18      	ldr	r3, [pc, #96]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc2:	4a19      	ldr	r2, [pc, #100]	; (8000c28 <MX_ADC1_Init+0x78>)
 8000bc4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000bc6:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000bcc:	4b15      	ldr	r3, [pc, #84]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bda:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000bde:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be0:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 8000be6:	4b0f      	ldr	r3, [pc, #60]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000bee:	f000 fb99 	bl	8001324 <HAL_ADC_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_ADC1_Init+0x4c>
		Error_Handler();
 8000bf8:	f000 f8dc 	bl	8000db4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <MX_ADC1_Init+0x74>)
 8000c0e:	f000 fe21 	bl	8001854 <HAL_ADC_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_ADC1_Init+0x6c>
		Error_Handler();
 8000c18:	f000 f8cc 	bl	8000db4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	3710      	adds	r7, #16
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20000084 	.word	0x20000084
 8000c28:	40012400 	.word	0x40012400

08000c2c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c40:	463b      	mov	r3, r7
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <MX_TIM3_Init+0x98>)
 8000c4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c60:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000c6e:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c70:	f001 ff94 	bl	8002b9c <HAL_TIM_Base_Init>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM3_Init+0x52>
		Error_Handler();
 8000c7a:	f000 f89b 	bl	8000db4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c82:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8000c84:	f107 0308 	add.w	r3, r7, #8
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000c8c:	f002 f930 	bl	8002ef0 <HAL_TIM_ConfigClockSource>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM3_Init+0x6e>
		Error_Handler();
 8000c96:	f000 f88d 	bl	8000db4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <MX_TIM3_Init+0x94>)
 8000ca8:	f002 fb06 	bl	80032b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM3_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000cb2:	f000 f87f 	bl	8000db4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000b4 	.word	0x200000b4
 8000cc4:	40000400 	.word	0x40000400

08000cc8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART1_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART1_UART_Init+0x4c>)
 8000d00:	f002 fb4a 	bl	8003398 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000d0a:	f000 f853 	bl	8000db4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000fc 	.word	0x200000fc
 8000d18:	40013800 	.word	0x40013800

08000d1c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	4b1a      	ldr	r3, [pc, #104]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d24:	699b      	ldr	r3, [r3, #24]
 8000d26:	4a19      	ldr	r2, [pc, #100]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d28:	f043 0310 	orr.w	r3, r3, #16
 8000d2c:	6193      	str	r3, [r2, #24]
 8000d2e:	4b17      	ldr	r3, [pc, #92]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d30:	699b      	ldr	r3, [r3, #24]
 8000d32:	f003 0310 	and.w	r3, r3, #16
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	4b14      	ldr	r3, [pc, #80]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d3c:	699b      	ldr	r3, [r3, #24]
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d40:	f043 0320 	orr.w	r3, r3, #32
 8000d44:	6193      	str	r3, [r2, #24]
 8000d46:	4b11      	ldr	r3, [pc, #68]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d48:	699b      	ldr	r3, [r3, #24]
 8000d4a:	f003 0320 	and.w	r3, r3, #32
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b0e      	ldr	r3, [pc, #56]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d54:	699b      	ldr	r3, [r3, #24]
 8000d56:	4a0d      	ldr	r2, [pc, #52]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6193      	str	r3, [r2, #24]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d60:	699b      	ldr	r3, [r3, #24]
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d6c:	699b      	ldr	r3, [r3, #24]
 8000d6e:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6193      	str	r3, [r2, #24]
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <MX_GPIO_Init+0x70>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000d82:	bf00      	nop
 8000d84:	3714      	adds	r7, #20
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000

08000d90 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a04      	ldr	r2, [pc, #16]	; (8000db0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d101      	bne.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000da2:	f000 fa7f 	bl	80012a4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40000800 	.word	0x40000800

08000db4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		printf("Bricked");
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <Error_Handler+0x18>)
 8000dbe:	f002 fd6b 	bl	8003898 <iprintf>
		HAL_Delay(1000);
 8000dc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dc6:	f000 fa89 	bl	80012dc <HAL_Delay>
		printf("Bricked");
 8000dca:	e7f7      	b.n	8000dbc <Error_Handler+0x8>
 8000dcc:	08004790 	.word	0x08004790

08000dd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dd8:	699b      	ldr	r3, [r3, #24]
 8000dda:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <HAL_MspInit+0x5c>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	6193      	str	r3, [r2, #24]
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <HAL_MspInit+0x5c>)
 8000de4:	699b      	ldr	r3, [r3, #24]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	60bb      	str	r3, [r7, #8]
 8000dec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df0:	69db      	ldr	r3, [r3, #28]
 8000df2:	4a0e      	ldr	r2, [pc, #56]	; (8000e2c <HAL_MspInit+0x5c>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	61d3      	str	r3, [r2, #28]
 8000dfa:	4b0c      	ldr	r3, [pc, #48]	; (8000e2c <HAL_MspInit+0x5c>)
 8000dfc:	69db      	ldr	r3, [r3, #28]
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_MspInit+0x60>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_MspInit+0x60>)
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e22:	bf00      	nop
 8000e24:	3714      	adds	r7, #20
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bc80      	pop	{r7}
 8000e2a:	4770      	bx	lr
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000

08000e34 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3c:	f107 0310 	add.w	r3, r7, #16
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a14      	ldr	r2, [pc, #80]	; (8000ea0 <HAL_ADC_MspInit+0x6c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d121      	bne.n	8000e98 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e56:	699b      	ldr	r3, [r3, #24]
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e5e:	6193      	str	r3, [r2, #24]
 8000e60:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e62:	699b      	ldr	r3, [r3, #24]
 8000e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e68:	60fb      	str	r3, [r7, #12]
 8000e6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a0c      	ldr	r2, [pc, #48]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e72:	f043 0304 	orr.w	r3, r3, #4
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_ADC_MspInit+0x70>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	60bb      	str	r3, [r7, #8]
 8000e82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e84:	2303      	movs	r3, #3
 8000e86:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e88:	2303      	movs	r3, #3
 8000e8a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	f107 0310 	add.w	r3, r7, #16
 8000e90:	4619      	mov	r1, r3
 8000e92:	4805      	ldr	r0, [pc, #20]	; (8000ea8 <HAL_ADC_MspInit+0x74>)
 8000e94:	f000 ff52 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40012400 	.word	0x40012400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	40010800 	.word	0x40010800

08000eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a09      	ldr	r2, [pc, #36]	; (8000ee0 <HAL_TIM_Base_MspInit+0x34>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d10b      	bne.n	8000ed6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000ebe:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a08      	ldr	r2, [pc, #32]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ec4:	f043 0302 	orr.w	r3, r3, #2
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b06      	ldr	r3, [pc, #24]	; (8000ee4 <HAL_TIM_Base_MspInit+0x38>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40000400 	.word	0x40000400
 8000ee4:	40021000 	.word	0x40021000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1c      	ldr	r2, [pc, #112]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d131      	bne.n	8000f6c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f08:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	4a1a      	ldr	r2, [pc, #104]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f12:	6193      	str	r3, [r2, #24]
 8000f14:	4b18      	ldr	r3, [pc, #96]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a14      	ldr	r2, [pc, #80]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3e:	2302      	movs	r3, #2
 8000f40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f42:	2303      	movs	r3, #3
 8000f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	480b      	ldr	r0, [pc, #44]	; (8000f7c <HAL_UART_MspInit+0x94>)
 8000f4e:	f000 fef5 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 0310 	add.w	r3, r7, #16
 8000f64:	4619      	mov	r1, r3
 8000f66:	4805      	ldr	r0, [pc, #20]	; (8000f7c <HAL_UART_MspInit+0x94>)
 8000f68:	f000 fee8 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f6c:	bf00      	nop
 8000f6e:	3720      	adds	r7, #32
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40013800 	.word	0x40013800
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40010800 	.word	0x40010800

08000f80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08e      	sub	sp, #56	; 0x38
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8000f96:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_InitTick+0xe8>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a33      	ldr	r2, [pc, #204]	; (8001068 <HAL_InitTick+0xe8>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_InitTick+0xe8>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000fae:	f107 0210 	add.w	r2, r7, #16
 8000fb2:	f107 0314 	add.w	r3, r7, #20
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f001 fc35 	bl	8002828 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000fbe:	6a3b      	ldr	r3, [r7, #32]
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d103      	bne.n	8000fd0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000fc8:	f001 fc06 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 8000fcc:	6378      	str	r0, [r7, #52]	; 0x34
 8000fce:	e004      	b.n	8000fda <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000fd0:	f001 fc02 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fdc:	4a23      	ldr	r2, [pc, #140]	; (800106c <HAL_InitTick+0xec>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	0c9b      	lsrs	r3, r3, #18
 8000fe4:	3b01      	subs	r3, #1
 8000fe6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000fe8:	4b21      	ldr	r3, [pc, #132]	; (8001070 <HAL_InitTick+0xf0>)
 8000fea:	4a22      	ldr	r2, [pc, #136]	; (8001074 <HAL_InitTick+0xf4>)
 8000fec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_InitTick+0xf0>)
 8000ff0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ff4:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_InitTick+0xf0>)
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8000ffc:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_InitTick+0xf0>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001002:	4b1b      	ldr	r3, [pc, #108]	; (8001070 <HAL_InitTick+0xf0>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001008:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_InitTick+0xf0>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800100e:	4818      	ldr	r0, [pc, #96]	; (8001070 <HAL_InitTick+0xf0>)
 8001010:	f001 fdc4 	bl	8002b9c <HAL_TIM_Base_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800101a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800101e:	2b00      	cmp	r3, #0
 8001020:	d11b      	bne.n	800105a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001022:	4813      	ldr	r0, [pc, #76]	; (8001070 <HAL_InitTick+0xf0>)
 8001024:	f001 fe0a 	bl	8002c3c <HAL_TIM_Base_Start_IT>
 8001028:	4603      	mov	r3, r0
 800102a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800102e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001032:	2b00      	cmp	r3, #0
 8001034:	d111      	bne.n	800105a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001036:	201e      	movs	r0, #30
 8001038:	f000 fe71 	bl	8001d1e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2b0f      	cmp	r3, #15
 8001040:	d808      	bhi.n	8001054 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001042:	2200      	movs	r2, #0
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	201e      	movs	r0, #30
 8001048:	f000 fe4d 	bl	8001ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800104c:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <HAL_InitTick+0xf8>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
 8001052:	e002      	b.n	800105a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001054:	2301      	movs	r3, #1
 8001056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800105a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800105e:	4618      	mov	r0, r3
 8001060:	3738      	adds	r7, #56	; 0x38
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000
 800106c:	431bde83 	.word	0x431bde83
 8001070:	20000144 	.word	0x20000144
 8001074:	40000800 	.word	0x40000800
 8001078:	20000004 	.word	0x20000004

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b6:	bf00      	nop
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bc80      	pop	{r7}
 80010bc:	4770      	bx	lr

080010be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010be:	b480      	push	{r7}
 80010c0:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
	...

080010cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80010d0:	4802      	ldr	r0, [pc, #8]	; (80010dc <TIM4_IRQHandler+0x10>)
 80010d2:	f001 fe05 	bl	8002ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000144 	.word	0x20000144

080010e0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
 80010f0:	e00a      	b.n	8001108 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010f2:	f3af 8000 	nop.w
 80010f6:	4601      	mov	r1, r0
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	1c5a      	adds	r2, r3, #1
 80010fc:	60ba      	str	r2, [r7, #8]
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	3301      	adds	r3, #1
 8001106:	617b      	str	r3, [r7, #20]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	429a      	cmp	r2, r3
 800110e:	dbf0      	blt.n	80010f2 <_read+0x12>
  }

  return len;
 8001110:	687b      	ldr	r3, [r7, #4]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b086      	sub	sp, #24
 800111e:	af00      	add	r7, sp, #0
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	e009      	b.n	8001140 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	1c5a      	adds	r2, r3, #1
 8001130:	60ba      	str	r2, [r7, #8]
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff fa87 	bl	8000648 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	3301      	adds	r3, #1
 800113e:	617b      	str	r3, [r7, #20]
 8001140:	697a      	ldr	r2, [r7, #20]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	dbf1      	blt.n	800112c <_write+0x12>
  }
  return len;
 8001148:	687b      	ldr	r3, [r7, #4]
}
 800114a:	4618      	mov	r0, r3
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_close>:

int _close(int file)
{
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800115a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800115e:	4618      	mov	r0, r3
 8001160:	370c      	adds	r7, #12
 8001162:	46bd      	mov	sp, r7
 8001164:	bc80      	pop	{r7}
 8001166:	4770      	bx	lr

08001168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001178:	605a      	str	r2, [r3, #4]
  return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr

08001186 <_isatty>:

int _isatty(int file)
{
 8001186:	b480      	push	{r7}
 8001188:	b083      	sub	sp, #12
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800118e:	2301      	movs	r3, #1
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	bc80      	pop	{r7}
 8001198:	4770      	bx	lr

0800119a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011a6:	2300      	movs	r3, #0
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f002 fcec 	bl	8003bc0 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20005000 	.word	0x20005000
 8001214:	00000400 	.word	0x00000400
 8001218:	2000018c 	.word	0x2000018c
 800121c:	200002e0 	.word	0x200002e0

08001220 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	bc80      	pop	{r7}
 800122a:	4770      	bx	lr

0800122c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800122c:	f7ff fff8 	bl	8001220 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001232:	490c      	ldr	r1, [pc, #48]	; (8001264 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001238:	e002      	b.n	8001240 <LoopCopyDataInit>

0800123a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800123c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123e:	3304      	adds	r3, #4

08001240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001244:	d3f9      	bcc.n	800123a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001246:	4a09      	ldr	r2, [pc, #36]	; (800126c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001248:	4c09      	ldr	r4, [pc, #36]	; (8001270 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800124c:	e001      	b.n	8001252 <LoopFillZerobss>

0800124e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001250:	3204      	adds	r2, #4

08001252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001254:	d3fb      	bcc.n	800124e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001256:	f002 fcb9 	bl	8003bcc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800125a:	f7ff fb91 	bl	8000980 <main>
  bx lr
 800125e:	4770      	bx	lr
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001268:	08004814 	.word	0x08004814
  ldr r2, =_sbss
 800126c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001270:	200002e0 	.word	0x200002e0

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>
	...

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_Init+0x28>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_Init+0x28>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001288:	2003      	movs	r0, #3
 800128a:	f000 fd21 	bl	8001cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800128e:	200f      	movs	r0, #15
 8001290:	f7ff fe76 	bl	8000f80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001294:	f7ff fd9c 	bl	8000dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40022000 	.word	0x40022000

080012a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_IncTick+0x1c>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	461a      	mov	r2, r3
 80012ae:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x20>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	4a03      	ldr	r2, [pc, #12]	; (80012c4 <HAL_IncTick+0x20>)
 80012b6:	6013      	str	r3, [r2, #0]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000190 	.word	0x20000190

080012c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bc80      	pop	{r7}
 80012d6:	4770      	bx	lr
 80012d8:	20000190 	.word	0x20000190

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff fff0 	bl	80012c8 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffe0 	bl	80012c8 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800132c:	2300      	movs	r3, #0
 800132e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001330:	2300      	movs	r3, #0
 8001332:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d101      	bne.n	8001346 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e0be      	b.n	80014c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001350:	2b00      	cmp	r3, #0
 8001352:	d109      	bne.n	8001368 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd66 	bl	8000e34 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f000 fbc5 	bl	8001af8 <ADC_ConversionStop_Disable>
 800136e:	4603      	mov	r3, r0
 8001370:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	2b00      	cmp	r3, #0
 800137c:	f040 8099 	bne.w	80014b2 <HAL_ADC_Init+0x18e>
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b00      	cmp	r3, #0
 8001384:	f040 8095 	bne.w	80014b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001390:	f023 0302 	bic.w	r3, r3, #2
 8001394:	f043 0202 	orr.w	r2, r3, #2
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	7b1b      	ldrb	r3, [r3, #12]
 80013aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80013ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013bc:	d003      	beq.n	80013c6 <HAL_ADC_Init+0xa2>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d102      	bne.n	80013cc <HAL_ADC_Init+0xa8>
 80013c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ca:	e000      	b.n	80013ce <HAL_ADC_Init+0xaa>
 80013cc:	2300      	movs	r3, #0
 80013ce:	693a      	ldr	r2, [r7, #16]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7d1b      	ldrb	r3, [r3, #20]
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d119      	bne.n	8001410 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7b1b      	ldrb	r3, [r3, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d109      	bne.n	80013f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	3b01      	subs	r3, #1
 80013ea:	035a      	lsls	r2, r3, #13
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	e00b      	b.n	8001410 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fc:	f043 0220 	orr.w	r2, r3, #32
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001408:	f043 0201 	orr.w	r2, r3, #1
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	430a      	orrs	r2, r1
 8001422:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <HAL_ADC_Init+0x1a8>)
 800142c:	4013      	ands	r3, r2
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	6812      	ldr	r2, [r2, #0]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	430b      	orrs	r3, r1
 8001436:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001440:	d003      	beq.n	800144a <HAL_ADC_Init+0x126>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	2b01      	cmp	r3, #1
 8001448:	d104      	bne.n	8001454 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	691b      	ldr	r3, [r3, #16]
 800144e:	3b01      	subs	r3, #1
 8001450:	051b      	lsls	r3, r3, #20
 8001452:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68fa      	ldr	r2, [r7, #12]
 8001464:	430a      	orrs	r2, r1
 8001466:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <HAL_ADC_Init+0x1ac>)
 8001470:	4013      	ands	r3, r2
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	429a      	cmp	r2, r3
 8001476:	d10b      	bne.n	8001490 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2200      	movs	r2, #0
 800147c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001482:	f023 0303 	bic.w	r3, r3, #3
 8001486:	f043 0201 	orr.w	r2, r3, #1
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800148e:	e018      	b.n	80014c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	f023 0312 	bic.w	r3, r3, #18
 8001498:	f043 0210 	orr.w	r2, r3, #16
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	f043 0201 	orr.w	r2, r3, #1
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80014b0:	e007      	b.n	80014c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b6:	f043 0210 	orr.w	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80014c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	ffe1f7fd 	.word	0xffe1f7fd
 80014d0:	ff1f0efe 	.word	0xff1f0efe

080014d4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014dc:	2300      	movs	r3, #0
 80014de:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d101      	bne.n	80014ee <HAL_ADC_Start+0x1a>
 80014ea:	2302      	movs	r3, #2
 80014ec:	e098      	b.n	8001620 <HAL_ADC_Start+0x14c>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2201      	movs	r2, #1
 80014f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f000 faa4 	bl	8001a44 <ADC_Enable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	2b00      	cmp	r3, #0
 8001504:	f040 8087 	bne.w	8001616 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800150c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a41      	ldr	r2, [pc, #260]	; (8001628 <HAL_ADC_Start+0x154>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d105      	bne.n	8001532 <HAL_ADC_Start+0x5e>
 8001526:	4b41      	ldr	r3, [pc, #260]	; (800162c <HAL_ADC_Start+0x158>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d115      	bne.n	800155e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	2b00      	cmp	r3, #0
 800154a:	d026      	beq.n	800159a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001554:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800155c:	e01d      	b.n	800159a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001562:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2f      	ldr	r2, [pc, #188]	; (800162c <HAL_ADC_Start+0x158>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d004      	beq.n	800157e <HAL_ADC_Start+0xaa>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2b      	ldr	r2, [pc, #172]	; (8001628 <HAL_ADC_Start+0x154>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d10d      	bne.n	800159a <HAL_ADC_Start+0xc6>
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <HAL_ADC_Start+0x158>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001586:	2b00      	cmp	r3, #0
 8001588:	d007      	beq.n	800159a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001592:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015aa:	f023 0206 	bic.w	r2, r3, #6
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80015b2:	e002      	b.n	80015ba <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f06f 0202 	mvn.w	r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80015d6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80015da:	d113      	bne.n	8001604 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_ADC_Start+0x154>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d105      	bne.n	80015f2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <HAL_ADC_Start+0x158>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d108      	bne.n	8001604 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001600:	609a      	str	r2, [r3, #8]
 8001602:	e00c      	b.n	800161e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	689a      	ldr	r2, [r3, #8]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001612:	609a      	str	r2, [r3, #8]
 8001614:	e003      	b.n	800161e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800161e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40012800 	.word	0x40012800
 800162c:	40012400 	.word	0x40012400

08001630 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800163a:	2300      	movs	r3, #0
 800163c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001646:	f7ff fe3f 	bl	80012c8 <HAL_GetTick>
 800164a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00b      	beq.n	8001672 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165e:	f043 0220 	orr.w	r2, r3, #32
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e0d3      	b.n	800181a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800167c:	2b00      	cmp	r3, #0
 800167e:	d131      	bne.n	80016e4 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001686:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800168a:	2b00      	cmp	r3, #0
 800168c:	d12a      	bne.n	80016e4 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800168e:	e021      	b.n	80016d4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001696:	d01d      	beq.n	80016d4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d007      	beq.n	80016ae <HAL_ADC_PollForConversion+0x7e>
 800169e:	f7ff fe13 	bl	80012c8 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d212      	bcs.n	80016d4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10b      	bne.n	80016d4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	f043 0204 	orr.w	r2, r3, #4
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e0a2      	b.n	800181a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0d6      	beq.n	8001690 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80016e2:	e070      	b.n	80017c6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016e4:	4b4f      	ldr	r3, [pc, #316]	; (8001824 <HAL_ADC_PollForConversion+0x1f4>)
 80016e6:	681c      	ldr	r4, [r3, #0]
 80016e8:	2002      	movs	r0, #2
 80016ea:	f001 f9a1 	bl	8002a30 <HAL_RCCEx_GetPeriphCLKFreq>
 80016ee:	4603      	mov	r3, r0
 80016f0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	4b4b      	ldr	r3, [pc, #300]	; (8001828 <HAL_ADC_PollForConversion+0x1f8>)
 80016fc:	400b      	ands	r3, r1
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d118      	bne.n	8001734 <HAL_ADC_PollForConversion+0x104>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	68d9      	ldr	r1, [r3, #12]
 8001708:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_ADC_PollForConversion+0x1fc>)
 800170a:	400b      	ands	r3, r1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d111      	bne.n	8001734 <HAL_ADC_PollForConversion+0x104>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6919      	ldr	r1, [r3, #16]
 8001716:	4b46      	ldr	r3, [pc, #280]	; (8001830 <HAL_ADC_PollForConversion+0x200>)
 8001718:	400b      	ands	r3, r1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d108      	bne.n	8001730 <HAL_ADC_PollForConversion+0x100>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	68d9      	ldr	r1, [r3, #12]
 8001724:	4b43      	ldr	r3, [pc, #268]	; (8001834 <HAL_ADC_PollForConversion+0x204>)
 8001726:	400b      	ands	r3, r1
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_ADC_PollForConversion+0x100>
 800172c:	2314      	movs	r3, #20
 800172e:	e020      	b.n	8001772 <HAL_ADC_PollForConversion+0x142>
 8001730:	2329      	movs	r3, #41	; 0x29
 8001732:	e01e      	b.n	8001772 <HAL_ADC_PollForConversion+0x142>
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6919      	ldr	r1, [r3, #16]
 800173a:	4b3d      	ldr	r3, [pc, #244]	; (8001830 <HAL_ADC_PollForConversion+0x200>)
 800173c:	400b      	ands	r3, r1
 800173e:	2b00      	cmp	r3, #0
 8001740:	d106      	bne.n	8001750 <HAL_ADC_PollForConversion+0x120>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68d9      	ldr	r1, [r3, #12]
 8001748:	4b3a      	ldr	r3, [pc, #232]	; (8001834 <HAL_ADC_PollForConversion+0x204>)
 800174a:	400b      	ands	r3, r1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00d      	beq.n	800176c <HAL_ADC_PollForConversion+0x13c>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6919      	ldr	r1, [r3, #16]
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_ADC_PollForConversion+0x208>)
 8001758:	400b      	ands	r3, r1
 800175a:	2b00      	cmp	r3, #0
 800175c:	d108      	bne.n	8001770 <HAL_ADC_PollForConversion+0x140>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68d9      	ldr	r1, [r3, #12]
 8001764:	4b34      	ldr	r3, [pc, #208]	; (8001838 <HAL_ADC_PollForConversion+0x208>)
 8001766:	400b      	ands	r3, r1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d101      	bne.n	8001770 <HAL_ADC_PollForConversion+0x140>
 800176c:	2354      	movs	r3, #84	; 0x54
 800176e:	e000      	b.n	8001772 <HAL_ADC_PollForConversion+0x142>
 8001770:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001772:	fb02 f303 	mul.w	r3, r2, r3
 8001776:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001778:	e021      	b.n	80017be <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001780:	d01a      	beq.n	80017b8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d007      	beq.n	8001798 <HAL_ADC_PollForConversion+0x168>
 8001788:	f7ff fd9e 	bl	80012c8 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d20f      	bcs.n	80017b8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	429a      	cmp	r2, r3
 800179e:	d90b      	bls.n	80017b8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	f043 0204 	orr.w	r2, r3, #4
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2200      	movs	r2, #0
 80017b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e030      	b.n	800181a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	3301      	adds	r3, #1
 80017bc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d8d9      	bhi.n	800177a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f06f 0212 	mvn.w	r2, #18
 80017ce:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80017e6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80017ea:	d115      	bne.n	8001818 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d111      	bne.n	8001818 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001804:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d105      	bne.n	8001818 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001810:	f043 0201 	orr.w	r2, r3, #1
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	bd90      	pop	{r4, r7, pc}
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000
 8001828:	24924924 	.word	0x24924924
 800182c:	00924924 	.word	0x00924924
 8001830:	12492492 	.word	0x12492492
 8001834:	00492492 	.word	0x00492492
 8001838:	00249249 	.word	0x00249249

0800183c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800186c:	2b01      	cmp	r3, #1
 800186e:	d101      	bne.n	8001874 <HAL_ADC_ConfigChannel+0x20>
 8001870:	2302      	movs	r3, #2
 8001872:	e0dc      	b.n	8001a2e <HAL_ADC_ConfigChannel+0x1da>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	2b06      	cmp	r3, #6
 8001882:	d81c      	bhi.n	80018be <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	4613      	mov	r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	4413      	add	r3, r2
 8001894:	3b05      	subs	r3, #5
 8001896:	221f      	movs	r2, #31
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	4019      	ands	r1, r3
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	4613      	mov	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	4413      	add	r3, r2
 80018ae:	3b05      	subs	r3, #5
 80018b0:	fa00 f203 	lsl.w	r2, r0, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	430a      	orrs	r2, r1
 80018ba:	635a      	str	r2, [r3, #52]	; 0x34
 80018bc:	e03c      	b.n	8001938 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	2b0c      	cmp	r3, #12
 80018c4:	d81c      	bhi.n	8001900 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685a      	ldr	r2, [r3, #4]
 80018d0:	4613      	mov	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4413      	add	r3, r2
 80018d6:	3b23      	subs	r3, #35	; 0x23
 80018d8:	221f      	movs	r2, #31
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	4019      	ands	r1, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	6818      	ldr	r0, [r3, #0]
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685a      	ldr	r2, [r3, #4]
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	3b23      	subs	r3, #35	; 0x23
 80018f2:	fa00 f203 	lsl.w	r2, r0, r3
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	430a      	orrs	r2, r1
 80018fc:	631a      	str	r2, [r3, #48]	; 0x30
 80018fe:	e01b      	b.n	8001938 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685a      	ldr	r2, [r3, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	4413      	add	r3, r2
 8001910:	3b41      	subs	r3, #65	; 0x41
 8001912:	221f      	movs	r2, #31
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	4019      	ands	r1, r3
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	6818      	ldr	r0, [r3, #0]
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	3b41      	subs	r3, #65	; 0x41
 800192c:	fa00 f203 	lsl.w	r2, r0, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	430a      	orrs	r2, r1
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d91c      	bls.n	800197a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4613      	mov	r3, r2
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	4413      	add	r3, r2
 8001950:	3b1e      	subs	r3, #30
 8001952:	2207      	movs	r2, #7
 8001954:	fa02 f303 	lsl.w	r3, r2, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	4019      	ands	r1, r3
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6898      	ldr	r0, [r3, #8]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	3b1e      	subs	r3, #30
 800196c:	fa00 f203 	lsl.w	r2, r0, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	430a      	orrs	r2, r1
 8001976:	60da      	str	r2, [r3, #12]
 8001978:	e019      	b.n	80019ae <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6919      	ldr	r1, [r3, #16]
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4613      	mov	r3, r2
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4413      	add	r3, r2
 800198a:	2207      	movs	r2, #7
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	4019      	ands	r1, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	6898      	ldr	r0, [r3, #8]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	4613      	mov	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	fa00 f203 	lsl.w	r2, r0, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d003      	beq.n	80019be <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80019ba:	2b11      	cmp	r3, #17
 80019bc:	d132      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1d      	ldr	r2, [pc, #116]	; (8001a38 <HAL_ADC_ConfigChannel+0x1e4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d125      	bne.n	8001a14 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d126      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019e4:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b10      	cmp	r3, #16
 80019ec:	d11a      	bne.n	8001a24 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019ee:	4b13      	ldr	r3, [pc, #76]	; (8001a3c <HAL_ADC_ConfigChannel+0x1e8>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a13      	ldr	r2, [pc, #76]	; (8001a40 <HAL_ADC_ConfigChannel+0x1ec>)
 80019f4:	fba2 2303 	umull	r2, r3, r2, r3
 80019f8:	0c9a      	lsrs	r2, r3, #18
 80019fa:	4613      	mov	r3, r2
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	4413      	add	r3, r2
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a04:	e002      	b.n	8001a0c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f9      	bne.n	8001a06 <HAL_ADC_ConfigChannel+0x1b2>
 8001a12:	e007      	b.n	8001a24 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a18:	f043 0220 	orr.w	r2, r3, #32
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bc80      	pop	{r7}
 8001a36:	4770      	bx	lr
 8001a38:	40012400 	.word	0x40012400
 8001a3c:	20000000 	.word	0x20000000
 8001a40:	431bde83 	.word	0x431bde83

08001a44 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d040      	beq.n	8001ae4 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f042 0201 	orr.w	r2, r2, #1
 8001a70:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a72:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <ADC_Enable+0xac>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a1f      	ldr	r2, [pc, #124]	; (8001af4 <ADC_Enable+0xb0>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9b      	lsrs	r3, r3, #18
 8001a7e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a80:	e002      	b.n	8001a88 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	3b01      	subs	r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1f9      	bne.n	8001a82 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001a8e:	f7ff fc1b 	bl	80012c8 <HAL_GetTick>
 8001a92:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a94:	e01f      	b.n	8001ad6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a96:	f7ff fc17 	bl	80012c8 <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d918      	bls.n	8001ad6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d011      	beq.n	8001ad6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	f043 0210 	orr.w	r2, r3, #16
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac2:	f043 0201 	orr.w	r2, r3, #1
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e007      	b.n	8001ae6 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b01      	cmp	r3, #1
 8001ae2:	d1d8      	bne.n	8001a96 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000
 8001af4:	431bde83 	.word	0x431bde83

08001af8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b084      	sub	sp, #16
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d12e      	bne.n	8001b70 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0201 	bic.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b22:	f7ff fbd1 	bl	80012c8 <HAL_GetTick>
 8001b26:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b28:	e01b      	b.n	8001b62 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b2a:	f7ff fbcd 	bl	80012c8 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d914      	bls.n	8001b62 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10d      	bne.n	8001b62 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f043 0210 	orr.w	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	f043 0201 	orr.w	r2, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e007      	b.n	8001b72 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d0dc      	beq.n	8001b2a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
	...

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	db0b      	blt.n	8001c0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf2:	79fb      	ldrb	r3, [r7, #7]
 8001bf4:	f003 021f 	and.w	r2, r3, #31
 8001bf8:	4906      	ldr	r1, [pc, #24]	; (8001c14 <__NVIC_EnableIRQ+0x34>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	095b      	lsrs	r3, r3, #5
 8001c00:	2001      	movs	r0, #1
 8001c02:	fa00 f202 	lsl.w	r2, r0, r2
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100

08001c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	db0a      	blt.n	8001c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	490c      	ldr	r1, [pc, #48]	; (8001c64 <__NVIC_SetPriority+0x4c>)
 8001c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c36:	0112      	lsls	r2, r2, #4
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	440b      	add	r3, r1
 8001c3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c40:	e00a      	b.n	8001c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4908      	ldr	r1, [pc, #32]	; (8001c68 <__NVIC_SetPriority+0x50>)
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	f003 030f 	and.w	r3, r3, #15
 8001c4e:	3b04      	subs	r3, #4
 8001c50:	0112      	lsls	r2, r2, #4
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	440b      	add	r3, r1
 8001c56:	761a      	strb	r2, [r3, #24]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	e000e100 	.word	0xe000e100
 8001c68:	e000ed00 	.word	0xe000ed00

08001c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b089      	sub	sp, #36	; 0x24
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	f1c3 0307 	rsb	r3, r3, #7
 8001c86:	2b04      	cmp	r3, #4
 8001c88:	bf28      	it	cs
 8001c8a:	2304      	movcs	r3, #4
 8001c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3304      	adds	r3, #4
 8001c92:	2b06      	cmp	r3, #6
 8001c94:	d902      	bls.n	8001c9c <NVIC_EncodePriority+0x30>
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3b03      	subs	r3, #3
 8001c9a:	e000      	b.n	8001c9e <NVIC_EncodePriority+0x32>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	43da      	mvns	r2, r3
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	401a      	ands	r2, r3
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbe:	43d9      	mvns	r1, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc4:	4313      	orrs	r3, r2
         );
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3724      	adds	r7, #36	; 0x24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr

08001cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f7ff ff4f 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b086      	sub	sp, #24
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	4603      	mov	r3, r0
 8001cee:	60b9      	str	r1, [r7, #8]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf8:	f7ff ff64 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001cfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	68b9      	ldr	r1, [r7, #8]
 8001d02:	6978      	ldr	r0, [r7, #20]
 8001d04:	f7ff ffb2 	bl	8001c6c <NVIC_EncodePriority>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7ff ff81 	bl	8001c18 <__NVIC_SetPriority>
}
 8001d16:	bf00      	nop
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b082      	sub	sp, #8
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	4603      	mov	r3, r0
 8001d26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff57 	bl	8001be0 <__NVIC_EnableIRQ>
}
 8001d32:	bf00      	nop
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b08b      	sub	sp, #44	; 0x2c
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d46:	2300      	movs	r3, #0
 8001d48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d4e:	e169      	b.n	8002024 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d50:	2201      	movs	r2, #1
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	69fa      	ldr	r2, [r7, #28]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f040 8158 	bne.w	800201e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	4a9a      	ldr	r2, [pc, #616]	; (8001fdc <HAL_GPIO_Init+0x2a0>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d05e      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d78:	4a98      	ldr	r2, [pc, #608]	; (8001fdc <HAL_GPIO_Init+0x2a0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d875      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d7e:	4a98      	ldr	r2, [pc, #608]	; (8001fe0 <HAL_GPIO_Init+0x2a4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d058      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d84:	4a96      	ldr	r2, [pc, #600]	; (8001fe0 <HAL_GPIO_Init+0x2a4>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d86f      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d8a:	4a96      	ldr	r2, [pc, #600]	; (8001fe4 <HAL_GPIO_Init+0x2a8>)
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d052      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d90:	4a94      	ldr	r2, [pc, #592]	; (8001fe4 <HAL_GPIO_Init+0x2a8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d869      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001d96:	4a94      	ldr	r2, [pc, #592]	; (8001fe8 <HAL_GPIO_Init+0x2ac>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d04c      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001d9c:	4a92      	ldr	r2, [pc, #584]	; (8001fe8 <HAL_GPIO_Init+0x2ac>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d863      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001da2:	4a92      	ldr	r2, [pc, #584]	; (8001fec <HAL_GPIO_Init+0x2b0>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d046      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
 8001da8:	4a90      	ldr	r2, [pc, #576]	; (8001fec <HAL_GPIO_Init+0x2b0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d85d      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	d82a      	bhi.n	8001e08 <HAL_GPIO_Init+0xcc>
 8001db2:	2b12      	cmp	r3, #18
 8001db4:	d859      	bhi.n	8001e6a <HAL_GPIO_Init+0x12e>
 8001db6:	a201      	add	r2, pc, #4	; (adr r2, 8001dbc <HAL_GPIO_Init+0x80>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001e37 	.word	0x08001e37
 8001dc0:	08001e11 	.word	0x08001e11
 8001dc4:	08001e23 	.word	0x08001e23
 8001dc8:	08001e65 	.word	0x08001e65
 8001dcc:	08001e6b 	.word	0x08001e6b
 8001dd0:	08001e6b 	.word	0x08001e6b
 8001dd4:	08001e6b 	.word	0x08001e6b
 8001dd8:	08001e6b 	.word	0x08001e6b
 8001ddc:	08001e6b 	.word	0x08001e6b
 8001de0:	08001e6b 	.word	0x08001e6b
 8001de4:	08001e6b 	.word	0x08001e6b
 8001de8:	08001e6b 	.word	0x08001e6b
 8001dec:	08001e6b 	.word	0x08001e6b
 8001df0:	08001e6b 	.word	0x08001e6b
 8001df4:	08001e6b 	.word	0x08001e6b
 8001df8:	08001e6b 	.word	0x08001e6b
 8001dfc:	08001e6b 	.word	0x08001e6b
 8001e00:	08001e19 	.word	0x08001e19
 8001e04:	08001e2d 	.word	0x08001e2d
 8001e08:	4a79      	ldr	r2, [pc, #484]	; (8001ff0 <HAL_GPIO_Init+0x2b4>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d013      	beq.n	8001e36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e0e:	e02c      	b.n	8001e6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	623b      	str	r3, [r7, #32]
          break;
 8001e16:	e029      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	623b      	str	r3, [r7, #32]
          break;
 8001e20:	e024      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	3308      	adds	r3, #8
 8001e28:	623b      	str	r3, [r7, #32]
          break;
 8001e2a:	e01f      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	330c      	adds	r3, #12
 8001e32:	623b      	str	r3, [r7, #32]
          break;
 8001e34:	e01a      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e3e:	2304      	movs	r3, #4
 8001e40:	623b      	str	r3, [r7, #32]
          break;
 8001e42:	e013      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e4c:	2308      	movs	r3, #8
 8001e4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	611a      	str	r2, [r3, #16]
          break;
 8001e56:	e009      	b.n	8001e6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e58:	2308      	movs	r3, #8
 8001e5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	69fa      	ldr	r2, [r7, #28]
 8001e60:	615a      	str	r2, [r3, #20]
          break;
 8001e62:	e003      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
          break;
 8001e68:	e000      	b.n	8001e6c <HAL_GPIO_Init+0x130>
          break;
 8001e6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2bff      	cmp	r3, #255	; 0xff
 8001e70:	d801      	bhi.n	8001e76 <HAL_GPIO_Init+0x13a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	e001      	b.n	8001e7a <HAL_GPIO_Init+0x13e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	2bff      	cmp	r3, #255	; 0xff
 8001e80:	d802      	bhi.n	8001e88 <HAL_GPIO_Init+0x14c>
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	e002      	b.n	8001e8e <HAL_GPIO_Init+0x152>
 8001e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8a:	3b08      	subs	r3, #8
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	210f      	movs	r1, #15
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	401a      	ands	r2, r3
 8001ea0:	6a39      	ldr	r1, [r7, #32]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea8:	431a      	orrs	r2, r3
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80b1 	beq.w	800201e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ebc:	4b4d      	ldr	r3, [pc, #308]	; (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	4a4c      	ldr	r2, [pc, #304]	; (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001ec2:	f043 0301 	orr.w	r3, r3, #1
 8001ec6:	6193      	str	r3, [r2, #24]
 8001ec8:	4b4a      	ldr	r3, [pc, #296]	; (8001ff4 <HAL_GPIO_Init+0x2b8>)
 8001eca:	699b      	ldr	r3, [r3, #24]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	60bb      	str	r3, [r7, #8]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ed4:	4a48      	ldr	r2, [pc, #288]	; (8001ff8 <HAL_GPIO_Init+0x2bc>)
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	089b      	lsrs	r3, r3, #2
 8001eda:	3302      	adds	r3, #2
 8001edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	f003 0303 	and.w	r3, r3, #3
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	220f      	movs	r2, #15
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	4a40      	ldr	r2, [pc, #256]	; (8001ffc <HAL_GPIO_Init+0x2c0>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d013      	beq.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a3f      	ldr	r2, [pc, #252]	; (8002000 <HAL_GPIO_Init+0x2c4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d00d      	beq.n	8001f24 <HAL_GPIO_Init+0x1e8>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3e      	ldr	r2, [pc, #248]	; (8002004 <HAL_GPIO_Init+0x2c8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x1e4>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3d      	ldr	r2, [pc, #244]	; (8002008 <HAL_GPIO_Init+0x2cc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d101      	bne.n	8001f1c <HAL_GPIO_Init+0x1e0>
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e006      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f1c:	2304      	movs	r3, #4
 8001f1e:	e004      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f20:	2302      	movs	r3, #2
 8001f22:	e002      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f24:	2301      	movs	r3, #1
 8001f26:	e000      	b.n	8001f2a <HAL_GPIO_Init+0x1ee>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2c:	f002 0203 	and.w	r2, r2, #3
 8001f30:	0092      	lsls	r2, r2, #2
 8001f32:	4093      	lsls	r3, r2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	4313      	orrs	r3, r2
 8001f38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f3a:	492f      	ldr	r1, [pc, #188]	; (8001ff8 <HAL_GPIO_Init+0x2bc>)
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	089b      	lsrs	r3, r3, #2
 8001f40:	3302      	adds	r3, #2
 8001f42:	68fa      	ldr	r2, [r7, #12]
 8001f44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d006      	beq.n	8001f62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f54:	4b2d      	ldr	r3, [pc, #180]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	492c      	ldr	r1, [pc, #176]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	608b      	str	r3, [r1, #8]
 8001f60:	e006      	b.n	8001f70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f62:	4b2a      	ldr	r3, [pc, #168]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f64:	689a      	ldr	r2, [r3, #8]
 8001f66:	69bb      	ldr	r3, [r7, #24]
 8001f68:	43db      	mvns	r3, r3
 8001f6a:	4928      	ldr	r1, [pc, #160]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d006      	beq.n	8001f8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f7c:	4b23      	ldr	r3, [pc, #140]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f7e:	68da      	ldr	r2, [r3, #12]
 8001f80:	4922      	ldr	r1, [pc, #136]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
 8001f88:	e006      	b.n	8001f98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f8a:	4b20      	ldr	r3, [pc, #128]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	43db      	mvns	r3, r3
 8001f92:	491e      	ldr	r1, [pc, #120]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001f94:	4013      	ands	r3, r2
 8001f96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d006      	beq.n	8001fb2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fa4:	4b19      	ldr	r3, [pc, #100]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	4918      	ldr	r1, [pc, #96]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	604b      	str	r3, [r1, #4]
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fb2:	4b16      	ldr	r3, [pc, #88]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	4914      	ldr	r1, [pc, #80]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d021      	beq.n	8002010 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fcc:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	490e      	ldr	r1, [pc, #56]	; (800200c <HAL_GPIO_Init+0x2d0>)
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	600b      	str	r3, [r1, #0]
 8001fd8:	e021      	b.n	800201e <HAL_GPIO_Init+0x2e2>
 8001fda:	bf00      	nop
 8001fdc:	10320000 	.word	0x10320000
 8001fe0:	10310000 	.word	0x10310000
 8001fe4:	10220000 	.word	0x10220000
 8001fe8:	10210000 	.word	0x10210000
 8001fec:	10120000 	.word	0x10120000
 8001ff0:	10110000 	.word	0x10110000
 8001ff4:	40021000 	.word	0x40021000
 8001ff8:	40010000 	.word	0x40010000
 8001ffc:	40010800 	.word	0x40010800
 8002000:	40010c00 	.word	0x40010c00
 8002004:	40011000 	.word	0x40011000
 8002008:	40011400 	.word	0x40011400
 800200c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_GPIO_Init+0x304>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	43db      	mvns	r3, r3
 8002018:	4909      	ldr	r1, [pc, #36]	; (8002040 <HAL_GPIO_Init+0x304>)
 800201a:	4013      	ands	r3, r2
 800201c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800201e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002020:	3301      	adds	r3, #1
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	fa22 f303 	lsr.w	r3, r2, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	f47f ae8e 	bne.w	8001d50 <HAL_GPIO_Init+0x14>
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	372c      	adds	r7, #44	; 0x2c
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr
 8002040:	40010400 	.word	0x40010400

08002044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e272      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0301 	and.w	r3, r3, #1
 800205e:	2b00      	cmp	r3, #0
 8002060:	f000 8087 	beq.w	8002172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002064:	4b92      	ldr	r3, [pc, #584]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 030c 	and.w	r3, r3, #12
 800206c:	2b04      	cmp	r3, #4
 800206e:	d00c      	beq.n	800208a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002070:	4b8f      	ldr	r3, [pc, #572]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f003 030c 	and.w	r3, r3, #12
 8002078:	2b08      	cmp	r3, #8
 800207a:	d112      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
 800207c:	4b8c      	ldr	r3, [pc, #560]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002088:	d10b      	bne.n	80020a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208a:	4b89      	ldr	r3, [pc, #548]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06c      	beq.n	8002170 <HAL_RCC_OscConfig+0x12c>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d168      	bne.n	8002170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e24c      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x76>
 80020ac:	4b80      	ldr	r3, [pc, #512]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a7f      	ldr	r2, [pc, #508]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e02e      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x98>
 80020c2:	4b7b      	ldr	r3, [pc, #492]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a7a      	ldr	r2, [pc, #488]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b78      	ldr	r3, [pc, #480]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a77      	ldr	r2, [pc, #476]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0xbc>
 80020e6:	4b72      	ldr	r3, [pc, #456]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a71      	ldr	r2, [pc, #452]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b6f      	ldr	r3, [pc, #444]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a6e      	ldr	r2, [pc, #440]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xd4>
 8002100:	4b6b      	ldr	r3, [pc, #428]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a6a      	ldr	r2, [pc, #424]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b68      	ldr	r3, [pc, #416]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a67      	ldr	r2, [pc, #412]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff f8d2 	bl	80012c8 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff f8ce 	bl	80012c8 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e200      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213a:	4b5d      	ldr	r3, [pc, #372]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xe4>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7ff f8be 	bl	80012c8 <HAL_GetTick>
 800214c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7ff f8ba 	bl	80012c8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e1ec      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002162:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x10c>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	d063      	beq.n	8002246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800217e:	4b4c      	ldr	r3, [pc, #304]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 030c 	and.w	r3, r3, #12
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00b      	beq.n	80021a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800218a:	4b49      	ldr	r3, [pc, #292]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 030c 	and.w	r3, r3, #12
 8002192:	2b08      	cmp	r3, #8
 8002194:	d11c      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
 8002196:	4b46      	ldr	r3, [pc, #280]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d116      	bne.n	80021d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a2:	4b43      	ldr	r3, [pc, #268]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d005      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691b      	ldr	r3, [r3, #16]
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e1c0      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	00db      	lsls	r3, r3, #3
 80021c8:	4939      	ldr	r1, [pc, #228]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ce:	e03a      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d020      	beq.n	800221a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021d8:	4b36      	ldr	r3, [pc, #216]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021da:	2201      	movs	r2, #1
 80021dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021de:	f7ff f873 	bl	80012c8 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e6:	f7ff f86f 	bl	80012c8 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e1a1      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021f8:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d0f0      	beq.n	80021e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002204:	4b2a      	ldr	r3, [pc, #168]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	4927      	ldr	r1, [pc, #156]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	600b      	str	r3, [r1, #0]
 8002218:	e015      	b.n	8002246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221a:	4b26      	ldr	r3, [pc, #152]	; (80022b4 <HAL_RCC_OscConfig+0x270>)
 800221c:	2200      	movs	r2, #0
 800221e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002220:	f7ff f852 	bl	80012c8 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002228:	f7ff f84e 	bl	80012c8 <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e180      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0308 	and.w	r3, r3, #8
 800224e:	2b00      	cmp	r3, #0
 8002250:	d03a      	beq.n	80022c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d019      	beq.n	800228e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 800225c:	2201      	movs	r2, #1
 800225e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002260:	f7ff f832 	bl	80012c8 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002268:	f7ff f82e 	bl	80012c8 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e160      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227a:	4b0d      	ldr	r3, [pc, #52]	; (80022b0 <HAL_RCC_OscConfig+0x26c>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002286:	2001      	movs	r0, #1
 8002288:	f000 fafe 	bl	8002888 <RCC_Delay>
 800228c:	e01c      	b.n	80022c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002294:	f7ff f818 	bl	80012c8 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229a:	e00f      	b.n	80022bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800229c:	f7ff f814 	bl	80012c8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d908      	bls.n	80022bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e146      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
 80022ae:	bf00      	nop
 80022b0:	40021000 	.word	0x40021000
 80022b4:	42420000 	.word	0x42420000
 80022b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022bc:	4b92      	ldr	r3, [pc, #584]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e9      	bne.n	800229c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0304 	and.w	r3, r3, #4
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a6 	beq.w	8002422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022d6:	2300      	movs	r3, #0
 80022d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022da:	4b8b      	ldr	r3, [pc, #556]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10d      	bne.n	8002302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e6:	4b88      	ldr	r3, [pc, #544]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a87      	ldr	r2, [pc, #540]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]
 80022f2:	4b85      	ldr	r3, [pc, #532]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fe:	2301      	movs	r3, #1
 8002300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002302:	4b82      	ldr	r3, [pc, #520]	; (800250c <HAL_RCC_OscConfig+0x4c8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230a:	2b00      	cmp	r3, #0
 800230c:	d118      	bne.n	8002340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800230e:	4b7f      	ldr	r3, [pc, #508]	; (800250c <HAL_RCC_OscConfig+0x4c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a7e      	ldr	r2, [pc, #504]	; (800250c <HAL_RCC_OscConfig+0x4c8>)
 8002314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231a:	f7fe ffd5 	bl	80012c8 <HAL_GetTick>
 800231e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002320:	e008      	b.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002322:	f7fe ffd1 	bl	80012c8 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b64      	cmp	r3, #100	; 0x64
 800232e:	d901      	bls.n	8002334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e103      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCC_OscConfig+0x4c8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233c:	2b00      	cmp	r3, #0
 800233e:	d0f0      	beq.n	8002322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d106      	bne.n	8002356 <HAL_RCC_OscConfig+0x312>
 8002348:	4b6f      	ldr	r3, [pc, #444]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	4a6e      	ldr	r2, [pc, #440]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800234e:	f043 0301 	orr.w	r3, r3, #1
 8002352:	6213      	str	r3, [r2, #32]
 8002354:	e02d      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10c      	bne.n	8002378 <HAL_RCC_OscConfig+0x334>
 800235e:	4b6a      	ldr	r3, [pc, #424]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	4a69      	ldr	r2, [pc, #420]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	6213      	str	r3, [r2, #32]
 800236a:	4b67      	ldr	r3, [pc, #412]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a66      	ldr	r2, [pc, #408]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	f023 0304 	bic.w	r3, r3, #4
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	e01c      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b05      	cmp	r3, #5
 800237e:	d10c      	bne.n	800239a <HAL_RCC_OscConfig+0x356>
 8002380:	4b61      	ldr	r3, [pc, #388]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a60      	ldr	r2, [pc, #384]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	f043 0304 	orr.w	r3, r3, #4
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	4b5e      	ldr	r3, [pc, #376]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	4a5d      	ldr	r2, [pc, #372]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6213      	str	r3, [r2, #32]
 8002398:	e00b      	b.n	80023b2 <HAL_RCC_OscConfig+0x36e>
 800239a:	4b5b      	ldr	r3, [pc, #364]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a5a      	ldr	r2, [pc, #360]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 0301 	bic.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	4b58      	ldr	r3, [pc, #352]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	4a57      	ldr	r2, [pc, #348]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	f023 0304 	bic.w	r3, r3, #4
 80023b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d015      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ba:	f7fe ff85 	bl	80012c8 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c2:	f7fe ff81 	bl	80012c8 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d901      	bls.n	80023d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e0b1      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d8:	4b4b      	ldr	r3, [pc, #300]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	f003 0302 	and.w	r3, r3, #2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d0ee      	beq.n	80023c2 <HAL_RCC_OscConfig+0x37e>
 80023e4:	e014      	b.n	8002410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e6:	f7fe ff6f 	bl	80012c8 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023ec:	e00a      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ee:	f7fe ff6b 	bl	80012c8 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e09b      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002404:	4b40      	ldr	r3, [pc, #256]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	6a1b      	ldr	r3, [r3, #32]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1ee      	bne.n	80023ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d105      	bne.n	8002422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002416:	4b3c      	ldr	r3, [pc, #240]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	4a3b      	ldr	r2, [pc, #236]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800241c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	2b00      	cmp	r3, #0
 8002428:	f000 8087 	beq.w	800253a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800242c:	4b36      	ldr	r3, [pc, #216]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 030c 	and.w	r3, r3, #12
 8002434:	2b08      	cmp	r3, #8
 8002436:	d061      	beq.n	80024fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d146      	bne.n	80024ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002440:	4b33      	ldr	r3, [pc, #204]	; (8002510 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	2200      	movs	r2, #0
 8002444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002446:	f7fe ff3f 	bl	80012c8 <HAL_GetTick>
 800244a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800244c:	e008      	b.n	8002460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800244e:	f7fe ff3b 	bl	80012c8 <HAL_GetTick>
 8002452:	4602      	mov	r2, r0
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	2b02      	cmp	r3, #2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e06d      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002460:	4b29      	ldr	r3, [pc, #164]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1f0      	bne.n	800244e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002474:	d108      	bne.n	8002488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002476:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4921      	ldr	r1, [pc, #132]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a19      	ldr	r1, [r3, #32]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002498:	430b      	orrs	r3, r1
 800249a:	491b      	ldr	r1, [pc, #108]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a0:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_OscConfig+0x4cc>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a6:	f7fe ff0f 	bl	80012c8 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ae:	f7fe ff0b 	bl	80012c8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e03d      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c0:	4b11      	ldr	r3, [pc, #68]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x46a>
 80024cc:	e035      	b.n	800253a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024ce:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_RCC_OscConfig+0x4cc>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7fe fef8 	bl	80012c8 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024dc:	f7fe fef4 	bl	80012c8 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e026      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_OscConfig+0x4c4>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0x498>
 80024fa:	e01e      	b.n	800253a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d107      	bne.n	8002514 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e019      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
 8002510:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_RCC_OscConfig+0x500>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d106      	bne.n	8002536 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d001      	beq.n	800253a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e000      	b.n	800253c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3718      	adds	r7, #24
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40021000 	.word	0x40021000

08002548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0d0      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800255c:	4b6a      	ldr	r3, [pc, #424]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d910      	bls.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b67      	ldr	r3, [pc, #412]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 0207 	bic.w	r2, r3, #7
 8002572:	4965      	ldr	r1, [pc, #404]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	4313      	orrs	r3, r2
 8002578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257a:	4b63      	ldr	r3, [pc, #396]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	683a      	ldr	r2, [r7, #0]
 8002584:	429a      	cmp	r2, r3
 8002586:	d001      	beq.n	800258c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0b8      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d020      	beq.n	80025da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b59      	ldr	r3, [pc, #356]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	4a58      	ldr	r2, [pc, #352]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025bc:	4b53      	ldr	r3, [pc, #332]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	4a52      	ldr	r2, [pc, #328]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c8:	4b50      	ldr	r3, [pc, #320]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	494d      	ldr	r1, [pc, #308]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d040      	beq.n	8002668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ee:	4b47      	ldr	r3, [pc, #284]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d115      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e07f      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d107      	bne.n	8002616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002606:	4b41      	ldr	r3, [pc, #260]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e073      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002616:	4b3d      	ldr	r3, [pc, #244]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e06b      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002626:	4b39      	ldr	r3, [pc, #228]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f023 0203 	bic.w	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4936      	ldr	r1, [pc, #216]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002638:	f7fe fe46 	bl	80012c8 <HAL_GetTick>
 800263c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	e00a      	b.n	8002656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002640:	f7fe fe42 	bl	80012c8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e053      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002656:	4b2d      	ldr	r3, [pc, #180]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f003 020c 	and.w	r2, r3, #12
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	429a      	cmp	r2, r3
 8002666:	d1eb      	bne.n	8002640 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002668:	4b27      	ldr	r3, [pc, #156]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0307 	and.w	r3, r3, #7
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	429a      	cmp	r2, r3
 8002674:	d210      	bcs.n	8002698 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002676:	4b24      	ldr	r3, [pc, #144]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 0207 	bic.w	r2, r3, #7
 800267e:	4922      	ldr	r1, [pc, #136]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	4313      	orrs	r3, r2
 8002684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002686:	4b20      	ldr	r3, [pc, #128]	; (8002708 <HAL_RCC_ClockConfig+0x1c0>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	429a      	cmp	r2, r3
 8002692:	d001      	beq.n	8002698 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e032      	b.n	80026fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d008      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a4:	4b19      	ldr	r3, [pc, #100]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4916      	ldr	r1, [pc, #88]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c2:	4b12      	ldr	r3, [pc, #72]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	490e      	ldr	r1, [pc, #56]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026d6:	f000 f821 	bl	800271c <HAL_RCC_GetSysClockFreq>
 80026da:	4602      	mov	r2, r0
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	091b      	lsrs	r3, r3, #4
 80026e2:	f003 030f 	and.w	r3, r3, #15
 80026e6:	490a      	ldr	r1, [pc, #40]	; (8002710 <HAL_RCC_ClockConfig+0x1c8>)
 80026e8:	5ccb      	ldrb	r3, [r1, r3]
 80026ea:	fa22 f303 	lsr.w	r3, r2, r3
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_ClockConfig+0x1cc>)
 80026f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026f2:	4b09      	ldr	r3, [pc, #36]	; (8002718 <HAL_RCC_ClockConfig+0x1d0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fc42 	bl	8000f80 <HAL_InitTick>

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40022000 	.word	0x40022000
 800270c:	40021000 	.word	0x40021000
 8002710:	08004798 	.word	0x08004798
 8002714:	20000000 	.word	0x20000000
 8002718:	20000004 	.word	0x20000004

0800271c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800271c:	b480      	push	{r7}
 800271e:	b087      	sub	sp, #28
 8002720:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002722:	2300      	movs	r3, #0
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	2300      	movs	r3, #0
 8002728:	60bb      	str	r3, [r7, #8]
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002736:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 030c 	and.w	r3, r3, #12
 8002742:	2b04      	cmp	r3, #4
 8002744:	d002      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x30>
 8002746:	2b08      	cmp	r3, #8
 8002748:	d003      	beq.n	8002752 <HAL_RCC_GetSysClockFreq+0x36>
 800274a:	e027      	b.n	800279c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800274c:	4b19      	ldr	r3, [pc, #100]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800274e:	613b      	str	r3, [r7, #16]
      break;
 8002750:	e027      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	0c9b      	lsrs	r3, r3, #18
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800275c:	5cd3      	ldrb	r3, [r2, r3]
 800275e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0c5b      	lsrs	r3, r3, #17
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	4a11      	ldr	r2, [pc, #68]	; (80027bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002776:	5cd3      	ldrb	r3, [r2, r3]
 8002778:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a0d      	ldr	r2, [pc, #52]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800277e:	fb03 f202 	mul.w	r2, r3, r2
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	fbb2 f3f3 	udiv	r3, r2, r3
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e004      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a0c      	ldr	r2, [pc, #48]	; (80027c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	613b      	str	r3, [r7, #16]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	693b      	ldr	r3, [r7, #16]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	371c      	adds	r7, #28
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	080047b0 	.word	0x080047b0
 80027bc:	080047c0 	.word	0x080047c0
 80027c0:	003d0900 	.word	0x003d0900

080027c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c8:	4b02      	ldr	r3, [pc, #8]	; (80027d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bc80      	pop	{r7}
 80027d2:	4770      	bx	lr
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027dc:	f7ff fff2 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 80027e0:	4602      	mov	r2, r0
 80027e2:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	4903      	ldr	r1, [pc, #12]	; (80027fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80027ee:	5ccb      	ldrb	r3, [r1, r3]
 80027f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40021000 	.word	0x40021000
 80027fc:	080047a8 	.word	0x080047a8

08002800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002804:	f7ff ffde 	bl	80027c4 <HAL_RCC_GetHCLKFreq>
 8002808:	4602      	mov	r2, r0
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <HAL_RCC_GetPCLK2Freq+0x20>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0adb      	lsrs	r3, r3, #11
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	4903      	ldr	r1, [pc, #12]	; (8002824 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002816:	5ccb      	ldrb	r3, [r1, r3]
 8002818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800281c:	4618      	mov	r0, r3
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40021000 	.word	0x40021000
 8002824:	080047a8 	.word	0x080047a8

08002828 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	220f      	movs	r2, #15
 8002836:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <HAL_RCC_GetClockConfig+0x58>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0203 	and.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <HAL_RCC_GetClockConfig+0x58>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <HAL_RCC_GetClockConfig+0x58>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCC_GetClockConfig+0x58>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	08db      	lsrs	r3, r3, #3
 8002862:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800286a:	4b06      	ldr	r3, [pc, #24]	; (8002884 <HAL_RCC_GetClockConfig+0x5c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0207 	and.w	r2, r3, #7
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr
 8002880:	40021000 	.word	0x40021000
 8002884:	40022000 	.word	0x40022000

08002888 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002888:	b480      	push	{r7}
 800288a:	b085      	sub	sp, #20
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <RCC_Delay+0x34>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a0a      	ldr	r2, [pc, #40]	; (80028c0 <RCC_Delay+0x38>)
 8002896:	fba2 2303 	umull	r2, r3, r2, r3
 800289a:	0a5b      	lsrs	r3, r3, #9
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	fb02 f303 	mul.w	r3, r2, r3
 80028a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028a4:	bf00      	nop
  }
  while (Delay --);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	60fa      	str	r2, [r7, #12]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f9      	bne.n	80028a4 <RCC_Delay+0x1c>
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3714      	adds	r7, #20
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000000 	.word	0x20000000
 80028c0:	10624dd3 	.word	0x10624dd3

080028c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	613b      	str	r3, [r7, #16]
 80028d0:	2300      	movs	r3, #0
 80028d2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d07d      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10d      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f0:	4b4c      	ldr	r3, [pc, #304]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f2:	69db      	ldr	r3, [r3, #28]
 80028f4:	4a4b      	ldr	r2, [pc, #300]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028fa:	61d3      	str	r3, [r2, #28]
 80028fc:	4b49      	ldr	r3, [pc, #292]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002908:	2301      	movs	r3, #1
 800290a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290c:	4b46      	ldr	r3, [pc, #280]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002918:	4b43      	ldr	r3, [pc, #268]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a42      	ldr	r2, [pc, #264]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800291e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002922:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002924:	f7fe fcd0 	bl	80012c8 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800292a:	e008      	b.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800292c:	f7fe fccc 	bl	80012c8 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e06d      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800293e:	4b3a      	ldr	r3, [pc, #232]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800294c:	6a1b      	ldr	r3, [r3, #32]
 800294e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002952:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d02e      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	429a      	cmp	r2, r3
 8002966:	d027      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002968:	4b2e      	ldr	r3, [pc, #184]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002970:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002972:	4b2e      	ldr	r3, [pc, #184]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002974:	2201      	movs	r2, #1
 8002976:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002978:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800297e:	4a29      	ldr	r2, [pc, #164]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d014      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800298e:	f7fe fc9b 	bl	80012c8 <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	e00a      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002996:	f7fe fc97 	bl	80012c8 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e036      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	f003 0302 	and.w	r3, r3, #2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ee      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b8:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	4917      	ldr	r1, [pc, #92]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d105      	bne.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d2:	69db      	ldr	r3, [r3, #28]
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029da:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029e8:	4b0e      	ldr	r3, [pc, #56]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	490b      	ldr	r1, [pc, #44]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0310 	and.w	r3, r3, #16
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	40007000 	.word	0x40007000
 8002a2c:	42420440 	.word	0x42420440

08002a30 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b088      	sub	sp, #32
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	61fb      	str	r3, [r7, #28]
 8002a40:	2300      	movs	r3, #0
 8002a42:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	2300      	movs	r3, #0
 8002a4a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b10      	cmp	r3, #16
 8002a50:	d00a      	beq.n	8002a68 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	f200 808a 	bhi.w	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d045      	beq.n	8002aec <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d075      	beq.n	8002b52 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002a66:	e082      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002a68:	4b46      	ldr	r3, [pc, #280]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a6e:	4b45      	ldr	r3, [pc, #276]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d07b      	beq.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	0c9b      	lsrs	r3, r3, #18
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4a41      	ldr	r2, [pc, #260]	; (8002b88 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002a84:	5cd3      	ldrb	r3, [r2, r3]
 8002a86:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d015      	beq.n	8002abe <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a92:	4b3c      	ldr	r3, [pc, #240]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	0c5b      	lsrs	r3, r3, #17
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	4a3b      	ldr	r2, [pc, #236]	; (8002b8c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002a9e:	5cd3      	ldrb	r3, [r2, r3]
 8002aa0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00d      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	61fb      	str	r3, [r7, #28]
 8002abc:	e004      	b.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4a34      	ldr	r2, [pc, #208]	; (8002b94 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ad0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ad4:	d102      	bne.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	61bb      	str	r3, [r7, #24]
      break;
 8002ada:	e04a      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	61bb      	str	r3, [r7, #24]
      break;
 8002aea:	e042      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002aec:	4b25      	ldr	r3, [pc, #148]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002aee:	6a1b      	ldr	r3, [r3, #32]
 8002af0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d108      	bne.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b08:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	e01f      	b.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b1a:	d109      	bne.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002b28:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b2c:	61bb      	str	r3, [r7, #24]
 8002b2e:	e00f      	b.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b3a:	d11c      	bne.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b3c:	4b11      	ldr	r3, [pc, #68]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d016      	beq.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002b48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b4c:	61bb      	str	r3, [r7, #24]
      break;
 8002b4e:	e012      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002b50:	e011      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b52:	f7ff fe55 	bl	8002800 <HAL_RCC_GetPCLK2Freq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0a      	ldr	r3, [pc, #40]	; (8002b84 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	0b9b      	lsrs	r3, r3, #14
 8002b5e:	f003 0303 	and.w	r3, r3, #3
 8002b62:	3301      	adds	r3, #1
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b6a:	61bb      	str	r3, [r7, #24]
      break;
 8002b6c:	e004      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b6e:	bf00      	nop
 8002b70:	e002      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b72:	bf00      	nop
 8002b74:	e000      	b.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002b76:	bf00      	nop
    }
  }
  return (frequency);
 8002b78:	69bb      	ldr	r3, [r7, #24]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40021000 	.word	0x40021000
 8002b88:	080047c4 	.word	0x080047c4
 8002b8c:	080047d4 	.word	0x080047d4
 8002b90:	007a1200 	.word	0x007a1200
 8002b94:	003d0900 	.word	0x003d0900
 8002b98:	aaaaaaab 	.word	0xaaaaaaab

08002b9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e041      	b.n	8002c32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d106      	bne.n	8002bc8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7fe f972 	bl	8000eac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4610      	mov	r0, r2
 8002bdc:	f000 fa74 	bl	80030c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2201      	movs	r2, #1
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d001      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e03a      	b.n	8002cca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <HAL_TIM_Base_Start_IT+0x98>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d00e      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x58>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c7e:	d009      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x58>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a14      	ldr	r2, [pc, #80]	; (8002cd8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0x58>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a13      	ldr	r2, [pc, #76]	; (8002cdc <HAL_TIM_Base_Start_IT+0xa0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d111      	bne.n	8002cb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2b06      	cmp	r3, #6
 8002ca4:	d010      	beq.n	8002cc8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f042 0201 	orr.w	r2, r2, #1
 8002cb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb6:	e007      	b.n	8002cc8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	40012c00 	.word	0x40012c00
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40000800 	.word	0x40000800

08002ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d122      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f003 0302 	and.w	r3, r3, #2
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d11b      	bne.n	8002d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0202 	mvn.w	r2, #2
 8002d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0303 	and.w	r3, r3, #3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f9b4 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002d28:	e005      	b.n	8002d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f000 f9a7 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f9b6 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d122      	bne.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b04      	cmp	r3, #4
 8002d56:	d11b      	bne.n	8002d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f06f 0204 	mvn.w	r2, #4
 8002d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2202      	movs	r2, #2
 8002d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d003      	beq.n	8002d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f98a 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002d7c:	e005      	b.n	8002d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f97d 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f98c 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	f003 0308 	and.w	r3, r3, #8
 8002d9a:	2b08      	cmp	r3, #8
 8002d9c:	d122      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	f003 0308 	and.w	r3, r3, #8
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d11b      	bne.n	8002de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f06f 0208 	mvn.w	r2, #8
 8002db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2204      	movs	r2, #4
 8002dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	69db      	ldr	r3, [r3, #28]
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f960 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002dd0:	e005      	b.n	8002dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f953 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f962 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d122      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b10      	cmp	r3, #16
 8002dfe:	d11b      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f06f 0210 	mvn.w	r2, #16
 8002e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2208      	movs	r2, #8
 8002e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d003      	beq.n	8002e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	f000 f936 	bl	8003090 <HAL_TIM_IC_CaptureCallback>
 8002e24:	e005      	b.n	8002e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f929 	bl	800307e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f938 	bl	80030a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0301 	and.w	r3, r3, #1
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0201 	mvn.w	r2, #1
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f7fd ff96 	bl	8000d90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6e:	2b80      	cmp	r3, #128	; 0x80
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b80      	cmp	r3, #128	; 0x80
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fa7b 	bl	8003386 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea8:	2b40      	cmp	r3, #64	; 0x40
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8fc 	bl	80030b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d10e      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	f003 0320 	and.w	r3, r3, #32
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d107      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0220 	mvn.w	r2, #32
 8002ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f000 fa46 	bl	8003374 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ee8:	bf00      	nop
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002efa:	2300      	movs	r3, #0
 8002efc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d101      	bne.n	8002f0c <HAL_TIM_ConfigClockSource+0x1c>
 8002f08:	2302      	movs	r3, #2
 8002f0a:	e0b4      	b.n	8003076 <HAL_TIM_ConfigClockSource+0x186>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2202      	movs	r2, #2
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f44:	d03e      	beq.n	8002fc4 <HAL_TIM_ConfigClockSource+0xd4>
 8002f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f4a:	f200 8087 	bhi.w	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f52:	f000 8086 	beq.w	8003062 <HAL_TIM_ConfigClockSource+0x172>
 8002f56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f5a:	d87f      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f5c:	2b70      	cmp	r3, #112	; 0x70
 8002f5e:	d01a      	beq.n	8002f96 <HAL_TIM_ConfigClockSource+0xa6>
 8002f60:	2b70      	cmp	r3, #112	; 0x70
 8002f62:	d87b      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f64:	2b60      	cmp	r3, #96	; 0x60
 8002f66:	d050      	beq.n	800300a <HAL_TIM_ConfigClockSource+0x11a>
 8002f68:	2b60      	cmp	r3, #96	; 0x60
 8002f6a:	d877      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f6c:	2b50      	cmp	r3, #80	; 0x50
 8002f6e:	d03c      	beq.n	8002fea <HAL_TIM_ConfigClockSource+0xfa>
 8002f70:	2b50      	cmp	r3, #80	; 0x50
 8002f72:	d873      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f74:	2b40      	cmp	r3, #64	; 0x40
 8002f76:	d058      	beq.n	800302a <HAL_TIM_ConfigClockSource+0x13a>
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d86f      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f7c:	2b30      	cmp	r3, #48	; 0x30
 8002f7e:	d064      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x15a>
 8002f80:	2b30      	cmp	r3, #48	; 0x30
 8002f82:	d86b      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f84:	2b20      	cmp	r3, #32
 8002f86:	d060      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x15a>
 8002f88:	2b20      	cmp	r3, #32
 8002f8a:	d867      	bhi.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d05c      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x15a>
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d05a      	beq.n	800304a <HAL_TIM_ConfigClockSource+0x15a>
 8002f94:	e062      	b.n	800305c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fa6:	f000 f968 	bl	800327a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	609a      	str	r2, [r3, #8]
      break;
 8002fc2:	e04f      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002fd4:	f000 f951 	bl	800327a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fe6:	609a      	str	r2, [r3, #8]
      break;
 8002fe8:	e03c      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f000 f8c8 	bl	800318c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2150      	movs	r1, #80	; 0x50
 8003002:	4618      	mov	r0, r3
 8003004:	f000 f91f 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8003008:	e02c      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003016:	461a      	mov	r2, r3
 8003018:	f000 f8e6 	bl	80031e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2160      	movs	r1, #96	; 0x60
 8003022:	4618      	mov	r0, r3
 8003024:	f000 f90f 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8003028:	e01c      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003036:	461a      	mov	r2, r3
 8003038:	f000 f8a8 	bl	800318c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2140      	movs	r1, #64	; 0x40
 8003042:	4618      	mov	r0, r3
 8003044:	f000 f8ff 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 8003048:	e00c      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4619      	mov	r1, r3
 8003054:	4610      	mov	r0, r2
 8003056:	f000 f8f6 	bl	8003246 <TIM_ITRx_SetConfig>
      break;
 800305a:	e003      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	73fb      	strb	r3, [r7, #15]
      break;
 8003060:	e000      	b.n	8003064 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003062:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003074:	7bfb      	ldrb	r3, [r7, #15]
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}

0800307e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030aa:	bf00      	nop
 80030ac:	370c      	adds	r7, #12
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr
	...

080030c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a29      	ldr	r2, [pc, #164]	; (8003180 <TIM_Base_SetConfig+0xb8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x30>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x30>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a26      	ldr	r2, [pc, #152]	; (8003184 <TIM_Base_SetConfig+0xbc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x30>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a25      	ldr	r2, [pc, #148]	; (8003188 <TIM_Base_SetConfig+0xc0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <TIM_Base_SetConfig+0xb8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d00b      	beq.n	800312a <TIM_Base_SetConfig+0x62>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d007      	beq.n	800312a <TIM_Base_SetConfig+0x62>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a19      	ldr	r2, [pc, #100]	; (8003184 <TIM_Base_SetConfig+0xbc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d003      	beq.n	800312a <TIM_Base_SetConfig+0x62>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a18      	ldr	r2, [pc, #96]	; (8003188 <TIM_Base_SetConfig+0xc0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d108      	bne.n	800313c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	4313      	orrs	r3, r2
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	4313      	orrs	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a07      	ldr	r2, [pc, #28]	; (8003180 <TIM_Base_SetConfig+0xb8>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d103      	bne.n	8003170 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691a      	ldr	r2, [r3, #16]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	615a      	str	r2, [r3, #20]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	bc80      	pop	{r7}
 800317e:	4770      	bx	lr
 8003180:	40012c00 	.word	0x40012c00
 8003184:	40000400 	.word	0x40000400
 8003188:	40000800 	.word	0x40000800

0800318c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6a1b      	ldr	r3, [r3, #32]
 800319c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f023 0201 	bic.w	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80031b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	4313      	orrs	r3, r2
 80031c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f023 030a 	bic.w	r3, r3, #10
 80031c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	693a      	ldr	r2, [r7, #16]
 80031d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	621a      	str	r2, [r3, #32]
}
 80031de:	bf00      	nop
 80031e0:	371c      	adds	r7, #28
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	f023 0210 	bic.w	r2, r3, #16
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003212:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	031b      	lsls	r3, r3, #12
 8003218:	693a      	ldr	r2, [r7, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003224:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	621a      	str	r2, [r3, #32]
}
 800323c:	bf00      	nop
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bc80      	pop	{r7}
 8003244:	4770      	bx	lr

08003246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003246:	b480      	push	{r7}
 8003248:	b085      	sub	sp, #20
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
 800324e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4313      	orrs	r3, r2
 8003264:	f043 0307 	orr.w	r3, r3, #7
 8003268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	609a      	str	r2, [r3, #8]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800327a:	b480      	push	{r7}
 800327c:	b087      	sub	sp, #28
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003294:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	021a      	lsls	r2, r3, #8
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	431a      	orrs	r2, r3
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	609a      	str	r2, [r3, #8]
}
 80032ae:	bf00      	nop
 80032b0:	371c      	adds	r7, #28
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d101      	bne.n	80032d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032cc:	2302      	movs	r3, #2
 80032ce:	e046      	b.n	800335e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4313      	orrs	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a16      	ldr	r2, [pc, #88]	; (8003368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800331c:	d009      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a12      	ldr	r2, [pc, #72]	; (800336c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d10c      	bne.n	800334c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	4313      	orrs	r3, r2
 8003342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3714      	adds	r7, #20
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr
 8003368:	40012c00 	.word	0x40012c00
 800336c:	40000400 	.word	0x40000400
 8003370:	40000800 	.word	0x40000800

08003374 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e042      	b.n	8003430 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d106      	bne.n	80033c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7fd fd92 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f91d 	bl	800361c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	695a      	ldr	r2, [r3, #20]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3708      	adds	r7, #8
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b08a      	sub	sp, #40	; 0x28
 800343c:	af02      	add	r7, sp, #8
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003452:	b2db      	uxtb	r3, r3
 8003454:	2b20      	cmp	r3, #32
 8003456:	d16d      	bne.n	8003534 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <HAL_UART_Transmit+0x2c>
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e066      	b.n	8003536 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2221      	movs	r2, #33	; 0x21
 8003472:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003476:	f7fd ff27 	bl	80012c8 <HAL_GetTick>
 800347a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	88fa      	ldrh	r2, [r7, #6]
 8003480:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	88fa      	ldrh	r2, [r7, #6]
 8003486:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003490:	d108      	bne.n	80034a4 <HAL_UART_Transmit+0x6c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d104      	bne.n	80034a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	61bb      	str	r3, [r7, #24]
 80034a2:	e003      	b.n	80034ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034ac:	e02a      	b.n	8003504 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2200      	movs	r2, #0
 80034b6:	2180      	movs	r1, #128	; 0x80
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f840 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e036      	b.n	8003536 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10b      	bne.n	80034e6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	3302      	adds	r3, #2
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e007      	b.n	80034f6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	781a      	ldrb	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	3301      	adds	r3, #1
 80034f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	3b01      	subs	r3, #1
 80034fe:	b29a      	uxth	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003508:	b29b      	uxth	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d1cf      	bne.n	80034ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	2200      	movs	r2, #0
 8003516:	2140      	movs	r1, #64	; 0x40
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f810 	bl	800353e <UART_WaitOnFlagUntilTimeout>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e006      	b.n	8003536 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3720      	adds	r7, #32
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b090      	sub	sp, #64	; 0x40
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	603b      	str	r3, [r7, #0]
 800354a:	4613      	mov	r3, r2
 800354c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354e:	e050      	b.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003552:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003556:	d04c      	beq.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355a:	2b00      	cmp	r3, #0
 800355c:	d007      	beq.n	800356e <UART_WaitOnFlagUntilTimeout+0x30>
 800355e:	f7fd feb3 	bl	80012c8 <HAL_GetTick>
 8003562:	4602      	mov	r2, r0
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800356a:	429a      	cmp	r2, r3
 800356c:	d241      	bcs.n	80035f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	e853 3f00 	ldrex	r3, [r3]
 800357c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800358e:	637a      	str	r2, [r7, #52]	; 0x34
 8003590:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003594:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003596:	e841 2300 	strex	r3, r2, [r1]
 800359a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1e5      	bne.n	800356e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	613b      	str	r3, [r7, #16]
   return(result);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3314      	adds	r3, #20
 80035c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035c2:	623a      	str	r2, [r7, #32]
 80035c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035c6:	69f9      	ldr	r1, [r7, #28]
 80035c8:	6a3a      	ldr	r2, [r7, #32]
 80035ca:	e841 2300 	strex	r3, r2, [r1]
 80035ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1e5      	bne.n	80035a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2220      	movs	r2, #32
 80035e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e00f      	b.n	8003612 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4013      	ands	r3, r2
 80035fc:	68ba      	ldr	r2, [r7, #8]
 80035fe:	429a      	cmp	r2, r3
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	429a      	cmp	r2, r3
 800360e:	d09f      	beq.n	8003550 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3740      	adds	r7, #64	; 0x40
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
	...

0800361c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b084      	sub	sp, #16
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	68da      	ldr	r2, [r3, #12]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	4313      	orrs	r3, r2
 800364a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003656:	f023 030c 	bic.w	r3, r3, #12
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6812      	ldr	r2, [r2, #0]
 800365e:	68b9      	ldr	r1, [r7, #8]
 8003660:	430b      	orrs	r3, r1
 8003662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a2c      	ldr	r2, [pc, #176]	; (8003730 <UART_SetConfig+0x114>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d103      	bne.n	800368c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003684:	f7ff f8bc 	bl	8002800 <HAL_RCC_GetPCLK2Freq>
 8003688:	60f8      	str	r0, [r7, #12]
 800368a:	e002      	b.n	8003692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800368c:	f7ff f8a4 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 8003690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4613      	mov	r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4413      	add	r3, r2
 800369a:	009a      	lsls	r2, r3, #2
 800369c:	441a      	add	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <UART_SetConfig+0x118>)
 80036aa:	fba2 2303 	umull	r2, r3, r2, r3
 80036ae:	095b      	lsrs	r3, r3, #5
 80036b0:	0119      	lsls	r1, r3, #4
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4613      	mov	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	009a      	lsls	r2, r3, #2
 80036bc:	441a      	add	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	4b1a      	ldr	r3, [pc, #104]	; (8003734 <UART_SetConfig+0x118>)
 80036ca:	fba3 0302 	umull	r0, r3, r3, r2
 80036ce:	095b      	lsrs	r3, r3, #5
 80036d0:	2064      	movs	r0, #100	; 0x64
 80036d2:	fb00 f303 	mul.w	r3, r0, r3
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	3332      	adds	r3, #50	; 0x32
 80036dc:	4a15      	ldr	r2, [pc, #84]	; (8003734 <UART_SetConfig+0x118>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	095b      	lsrs	r3, r3, #5
 80036e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036e8:	4419      	add	r1, r3
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009a      	lsls	r2, r3, #2
 80036f4:	441a      	add	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <UART_SetConfig+0x118>)
 8003702:	fba3 0302 	umull	r0, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2064      	movs	r0, #100	; 0x64
 800370a:	fb00 f303 	mul.w	r3, r0, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	3332      	adds	r3, #50	; 0x32
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <UART_SetConfig+0x118>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 020f 	and.w	r2, r3, #15
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	440a      	add	r2, r1
 8003726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40013800 	.word	0x40013800
 8003734:	51eb851f 	.word	0x51eb851f

08003738 <std>:
 8003738:	2300      	movs	r3, #0
 800373a:	b510      	push	{r4, lr}
 800373c:	4604      	mov	r4, r0
 800373e:	e9c0 3300 	strd	r3, r3, [r0]
 8003742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003746:	6083      	str	r3, [r0, #8]
 8003748:	8181      	strh	r1, [r0, #12]
 800374a:	6643      	str	r3, [r0, #100]	; 0x64
 800374c:	81c2      	strh	r2, [r0, #14]
 800374e:	6183      	str	r3, [r0, #24]
 8003750:	4619      	mov	r1, r3
 8003752:	2208      	movs	r2, #8
 8003754:	305c      	adds	r0, #92	; 0x5c
 8003756:	f000 f9e5 	bl	8003b24 <memset>
 800375a:	4b05      	ldr	r3, [pc, #20]	; (8003770 <std+0x38>)
 800375c:	6224      	str	r4, [r4, #32]
 800375e:	6263      	str	r3, [r4, #36]	; 0x24
 8003760:	4b04      	ldr	r3, [pc, #16]	; (8003774 <std+0x3c>)
 8003762:	62a3      	str	r3, [r4, #40]	; 0x28
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <std+0x40>)
 8003766:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <std+0x44>)
 800376a:	6323      	str	r3, [r4, #48]	; 0x30
 800376c:	bd10      	pop	{r4, pc}
 800376e:	bf00      	nop
 8003770:	08003975 	.word	0x08003975
 8003774:	08003997 	.word	0x08003997
 8003778:	080039cf 	.word	0x080039cf
 800377c:	080039f3 	.word	0x080039f3

08003780 <stdio_exit_handler>:
 8003780:	4a02      	ldr	r2, [pc, #8]	; (800378c <stdio_exit_handler+0xc>)
 8003782:	4903      	ldr	r1, [pc, #12]	; (8003790 <stdio_exit_handler+0x10>)
 8003784:	4803      	ldr	r0, [pc, #12]	; (8003794 <stdio_exit_handler+0x14>)
 8003786:	f000 b869 	b.w	800385c <_fwalk_sglue>
 800378a:	bf00      	nop
 800378c:	2000000c 	.word	0x2000000c
 8003790:	080044b1 	.word	0x080044b1
 8003794:	20000018 	.word	0x20000018

08003798 <cleanup_stdio>:
 8003798:	6841      	ldr	r1, [r0, #4]
 800379a:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <cleanup_stdio+0x34>)
 800379c:	b510      	push	{r4, lr}
 800379e:	4299      	cmp	r1, r3
 80037a0:	4604      	mov	r4, r0
 80037a2:	d001      	beq.n	80037a8 <cleanup_stdio+0x10>
 80037a4:	f000 fe84 	bl	80044b0 <_fflush_r>
 80037a8:	68a1      	ldr	r1, [r4, #8]
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <cleanup_stdio+0x38>)
 80037ac:	4299      	cmp	r1, r3
 80037ae:	d002      	beq.n	80037b6 <cleanup_stdio+0x1e>
 80037b0:	4620      	mov	r0, r4
 80037b2:	f000 fe7d 	bl	80044b0 <_fflush_r>
 80037b6:	68e1      	ldr	r1, [r4, #12]
 80037b8:	4b06      	ldr	r3, [pc, #24]	; (80037d4 <cleanup_stdio+0x3c>)
 80037ba:	4299      	cmp	r1, r3
 80037bc:	d004      	beq.n	80037c8 <cleanup_stdio+0x30>
 80037be:	4620      	mov	r0, r4
 80037c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037c4:	f000 be74 	b.w	80044b0 <_fflush_r>
 80037c8:	bd10      	pop	{r4, pc}
 80037ca:	bf00      	nop
 80037cc:	20000194 	.word	0x20000194
 80037d0:	200001fc 	.word	0x200001fc
 80037d4:	20000264 	.word	0x20000264

080037d8 <global_stdio_init.part.0>:
 80037d8:	b510      	push	{r4, lr}
 80037da:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <global_stdio_init.part.0+0x30>)
 80037dc:	4c0b      	ldr	r4, [pc, #44]	; (800380c <global_stdio_init.part.0+0x34>)
 80037de:	4a0c      	ldr	r2, [pc, #48]	; (8003810 <global_stdio_init.part.0+0x38>)
 80037e0:	4620      	mov	r0, r4
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	2104      	movs	r1, #4
 80037e6:	2200      	movs	r2, #0
 80037e8:	f7ff ffa6 	bl	8003738 <std>
 80037ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80037f0:	2201      	movs	r2, #1
 80037f2:	2109      	movs	r1, #9
 80037f4:	f7ff ffa0 	bl	8003738 <std>
 80037f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80037fc:	2202      	movs	r2, #2
 80037fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003802:	2112      	movs	r1, #18
 8003804:	f7ff bf98 	b.w	8003738 <std>
 8003808:	200002cc 	.word	0x200002cc
 800380c:	20000194 	.word	0x20000194
 8003810:	08003781 	.word	0x08003781

08003814 <__sfp_lock_acquire>:
 8003814:	4801      	ldr	r0, [pc, #4]	; (800381c <__sfp_lock_acquire+0x8>)
 8003816:	f000 b9fd 	b.w	8003c14 <__retarget_lock_acquire_recursive>
 800381a:	bf00      	nop
 800381c:	200002d5 	.word	0x200002d5

08003820 <__sfp_lock_release>:
 8003820:	4801      	ldr	r0, [pc, #4]	; (8003828 <__sfp_lock_release+0x8>)
 8003822:	f000 b9f8 	b.w	8003c16 <__retarget_lock_release_recursive>
 8003826:	bf00      	nop
 8003828:	200002d5 	.word	0x200002d5

0800382c <__sinit>:
 800382c:	b510      	push	{r4, lr}
 800382e:	4604      	mov	r4, r0
 8003830:	f7ff fff0 	bl	8003814 <__sfp_lock_acquire>
 8003834:	6a23      	ldr	r3, [r4, #32]
 8003836:	b11b      	cbz	r3, 8003840 <__sinit+0x14>
 8003838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800383c:	f7ff bff0 	b.w	8003820 <__sfp_lock_release>
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <__sinit+0x28>)
 8003842:	6223      	str	r3, [r4, #32]
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__sinit+0x2c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1f5      	bne.n	8003838 <__sinit+0xc>
 800384c:	f7ff ffc4 	bl	80037d8 <global_stdio_init.part.0>
 8003850:	e7f2      	b.n	8003838 <__sinit+0xc>
 8003852:	bf00      	nop
 8003854:	08003799 	.word	0x08003799
 8003858:	200002cc 	.word	0x200002cc

0800385c <_fwalk_sglue>:
 800385c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003860:	4607      	mov	r7, r0
 8003862:	4688      	mov	r8, r1
 8003864:	4614      	mov	r4, r2
 8003866:	2600      	movs	r6, #0
 8003868:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800386c:	f1b9 0901 	subs.w	r9, r9, #1
 8003870:	d505      	bpl.n	800387e <_fwalk_sglue+0x22>
 8003872:	6824      	ldr	r4, [r4, #0]
 8003874:	2c00      	cmp	r4, #0
 8003876:	d1f7      	bne.n	8003868 <_fwalk_sglue+0xc>
 8003878:	4630      	mov	r0, r6
 800387a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800387e:	89ab      	ldrh	r3, [r5, #12]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d907      	bls.n	8003894 <_fwalk_sglue+0x38>
 8003884:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003888:	3301      	adds	r3, #1
 800388a:	d003      	beq.n	8003894 <_fwalk_sglue+0x38>
 800388c:	4629      	mov	r1, r5
 800388e:	4638      	mov	r0, r7
 8003890:	47c0      	blx	r8
 8003892:	4306      	orrs	r6, r0
 8003894:	3568      	adds	r5, #104	; 0x68
 8003896:	e7e9      	b.n	800386c <_fwalk_sglue+0x10>

08003898 <iprintf>:
 8003898:	b40f      	push	{r0, r1, r2, r3}
 800389a:	b507      	push	{r0, r1, r2, lr}
 800389c:	4906      	ldr	r1, [pc, #24]	; (80038b8 <iprintf+0x20>)
 800389e:	ab04      	add	r3, sp, #16
 80038a0:	6808      	ldr	r0, [r1, #0]
 80038a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80038a6:	6881      	ldr	r1, [r0, #8]
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	f000 fad1 	bl	8003e50 <_vfiprintf_r>
 80038ae:	b003      	add	sp, #12
 80038b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80038b4:	b004      	add	sp, #16
 80038b6:	4770      	bx	lr
 80038b8:	20000064 	.word	0x20000064

080038bc <_puts_r>:
 80038bc:	6a03      	ldr	r3, [r0, #32]
 80038be:	b570      	push	{r4, r5, r6, lr}
 80038c0:	4605      	mov	r5, r0
 80038c2:	460e      	mov	r6, r1
 80038c4:	6884      	ldr	r4, [r0, #8]
 80038c6:	b90b      	cbnz	r3, 80038cc <_puts_r+0x10>
 80038c8:	f7ff ffb0 	bl	800382c <__sinit>
 80038cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80038ce:	07db      	lsls	r3, r3, #31
 80038d0:	d405      	bmi.n	80038de <_puts_r+0x22>
 80038d2:	89a3      	ldrh	r3, [r4, #12]
 80038d4:	0598      	lsls	r0, r3, #22
 80038d6:	d402      	bmi.n	80038de <_puts_r+0x22>
 80038d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80038da:	f000 f99b 	bl	8003c14 <__retarget_lock_acquire_recursive>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	0719      	lsls	r1, r3, #28
 80038e2:	d513      	bpl.n	800390c <_puts_r+0x50>
 80038e4:	6923      	ldr	r3, [r4, #16]
 80038e6:	b18b      	cbz	r3, 800390c <_puts_r+0x50>
 80038e8:	3e01      	subs	r6, #1
 80038ea:	68a3      	ldr	r3, [r4, #8]
 80038ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80038f0:	3b01      	subs	r3, #1
 80038f2:	60a3      	str	r3, [r4, #8]
 80038f4:	b9e9      	cbnz	r1, 8003932 <_puts_r+0x76>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	da2e      	bge.n	8003958 <_puts_r+0x9c>
 80038fa:	4622      	mov	r2, r4
 80038fc:	210a      	movs	r1, #10
 80038fe:	4628      	mov	r0, r5
 8003900:	f000 f87b 	bl	80039fa <__swbuf_r>
 8003904:	3001      	adds	r0, #1
 8003906:	d007      	beq.n	8003918 <_puts_r+0x5c>
 8003908:	250a      	movs	r5, #10
 800390a:	e007      	b.n	800391c <_puts_r+0x60>
 800390c:	4621      	mov	r1, r4
 800390e:	4628      	mov	r0, r5
 8003910:	f000 f8b0 	bl	8003a74 <__swsetup_r>
 8003914:	2800      	cmp	r0, #0
 8003916:	d0e7      	beq.n	80038e8 <_puts_r+0x2c>
 8003918:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800391c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800391e:	07da      	lsls	r2, r3, #31
 8003920:	d405      	bmi.n	800392e <_puts_r+0x72>
 8003922:	89a3      	ldrh	r3, [r4, #12]
 8003924:	059b      	lsls	r3, r3, #22
 8003926:	d402      	bmi.n	800392e <_puts_r+0x72>
 8003928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800392a:	f000 f974 	bl	8003c16 <__retarget_lock_release_recursive>
 800392e:	4628      	mov	r0, r5
 8003930:	bd70      	pop	{r4, r5, r6, pc}
 8003932:	2b00      	cmp	r3, #0
 8003934:	da04      	bge.n	8003940 <_puts_r+0x84>
 8003936:	69a2      	ldr	r2, [r4, #24]
 8003938:	429a      	cmp	r2, r3
 800393a:	dc06      	bgt.n	800394a <_puts_r+0x8e>
 800393c:	290a      	cmp	r1, #10
 800393e:	d004      	beq.n	800394a <_puts_r+0x8e>
 8003940:	6823      	ldr	r3, [r4, #0]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	6022      	str	r2, [r4, #0]
 8003946:	7019      	strb	r1, [r3, #0]
 8003948:	e7cf      	b.n	80038ea <_puts_r+0x2e>
 800394a:	4622      	mov	r2, r4
 800394c:	4628      	mov	r0, r5
 800394e:	f000 f854 	bl	80039fa <__swbuf_r>
 8003952:	3001      	adds	r0, #1
 8003954:	d1c9      	bne.n	80038ea <_puts_r+0x2e>
 8003956:	e7df      	b.n	8003918 <_puts_r+0x5c>
 8003958:	250a      	movs	r5, #10
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	6022      	str	r2, [r4, #0]
 8003960:	701d      	strb	r5, [r3, #0]
 8003962:	e7db      	b.n	800391c <_puts_r+0x60>

08003964 <puts>:
 8003964:	4b02      	ldr	r3, [pc, #8]	; (8003970 <puts+0xc>)
 8003966:	4601      	mov	r1, r0
 8003968:	6818      	ldr	r0, [r3, #0]
 800396a:	f7ff bfa7 	b.w	80038bc <_puts_r>
 800396e:	bf00      	nop
 8003970:	20000064 	.word	0x20000064

08003974 <__sread>:
 8003974:	b510      	push	{r4, lr}
 8003976:	460c      	mov	r4, r1
 8003978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800397c:	f000 f8fc 	bl	8003b78 <_read_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	bfab      	itete	ge
 8003984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003986:	89a3      	ldrhlt	r3, [r4, #12]
 8003988:	181b      	addge	r3, r3, r0
 800398a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800398e:	bfac      	ite	ge
 8003990:	6563      	strge	r3, [r4, #84]	; 0x54
 8003992:	81a3      	strhlt	r3, [r4, #12]
 8003994:	bd10      	pop	{r4, pc}

08003996 <__swrite>:
 8003996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399a:	461f      	mov	r7, r3
 800399c:	898b      	ldrh	r3, [r1, #12]
 800399e:	4605      	mov	r5, r0
 80039a0:	05db      	lsls	r3, r3, #23
 80039a2:	460c      	mov	r4, r1
 80039a4:	4616      	mov	r6, r2
 80039a6:	d505      	bpl.n	80039b4 <__swrite+0x1e>
 80039a8:	2302      	movs	r3, #2
 80039aa:	2200      	movs	r2, #0
 80039ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039b0:	f000 f8d0 	bl	8003b54 <_lseek_r>
 80039b4:	89a3      	ldrh	r3, [r4, #12]
 80039b6:	4632      	mov	r2, r6
 80039b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039bc:	81a3      	strh	r3, [r4, #12]
 80039be:	4628      	mov	r0, r5
 80039c0:	463b      	mov	r3, r7
 80039c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80039c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80039ca:	f000 b8e7 	b.w	8003b9c <_write_r>

080039ce <__sseek>:
 80039ce:	b510      	push	{r4, lr}
 80039d0:	460c      	mov	r4, r1
 80039d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039d6:	f000 f8bd 	bl	8003b54 <_lseek_r>
 80039da:	1c43      	adds	r3, r0, #1
 80039dc:	89a3      	ldrh	r3, [r4, #12]
 80039de:	bf15      	itete	ne
 80039e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80039e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80039e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80039ea:	81a3      	strheq	r3, [r4, #12]
 80039ec:	bf18      	it	ne
 80039ee:	81a3      	strhne	r3, [r4, #12]
 80039f0:	bd10      	pop	{r4, pc}

080039f2 <__sclose>:
 80039f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80039f6:	f000 b89d 	b.w	8003b34 <_close_r>

080039fa <__swbuf_r>:
 80039fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039fc:	460e      	mov	r6, r1
 80039fe:	4614      	mov	r4, r2
 8003a00:	4605      	mov	r5, r0
 8003a02:	b118      	cbz	r0, 8003a0c <__swbuf_r+0x12>
 8003a04:	6a03      	ldr	r3, [r0, #32]
 8003a06:	b90b      	cbnz	r3, 8003a0c <__swbuf_r+0x12>
 8003a08:	f7ff ff10 	bl	800382c <__sinit>
 8003a0c:	69a3      	ldr	r3, [r4, #24]
 8003a0e:	60a3      	str	r3, [r4, #8]
 8003a10:	89a3      	ldrh	r3, [r4, #12]
 8003a12:	071a      	lsls	r2, r3, #28
 8003a14:	d525      	bpl.n	8003a62 <__swbuf_r+0x68>
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	b31b      	cbz	r3, 8003a62 <__swbuf_r+0x68>
 8003a1a:	6823      	ldr	r3, [r4, #0]
 8003a1c:	6922      	ldr	r2, [r4, #16]
 8003a1e:	b2f6      	uxtb	r6, r6
 8003a20:	1a98      	subs	r0, r3, r2
 8003a22:	6963      	ldr	r3, [r4, #20]
 8003a24:	4637      	mov	r7, r6
 8003a26:	4283      	cmp	r3, r0
 8003a28:	dc04      	bgt.n	8003a34 <__swbuf_r+0x3a>
 8003a2a:	4621      	mov	r1, r4
 8003a2c:	4628      	mov	r0, r5
 8003a2e:	f000 fd3f 	bl	80044b0 <_fflush_r>
 8003a32:	b9e0      	cbnz	r0, 8003a6e <__swbuf_r+0x74>
 8003a34:	68a3      	ldr	r3, [r4, #8]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	60a3      	str	r3, [r4, #8]
 8003a3a:	6823      	ldr	r3, [r4, #0]
 8003a3c:	1c5a      	adds	r2, r3, #1
 8003a3e:	6022      	str	r2, [r4, #0]
 8003a40:	701e      	strb	r6, [r3, #0]
 8003a42:	6962      	ldr	r2, [r4, #20]
 8003a44:	1c43      	adds	r3, r0, #1
 8003a46:	429a      	cmp	r2, r3
 8003a48:	d004      	beq.n	8003a54 <__swbuf_r+0x5a>
 8003a4a:	89a3      	ldrh	r3, [r4, #12]
 8003a4c:	07db      	lsls	r3, r3, #31
 8003a4e:	d506      	bpl.n	8003a5e <__swbuf_r+0x64>
 8003a50:	2e0a      	cmp	r6, #10
 8003a52:	d104      	bne.n	8003a5e <__swbuf_r+0x64>
 8003a54:	4621      	mov	r1, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 fd2a 	bl	80044b0 <_fflush_r>
 8003a5c:	b938      	cbnz	r0, 8003a6e <__swbuf_r+0x74>
 8003a5e:	4638      	mov	r0, r7
 8003a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003a62:	4621      	mov	r1, r4
 8003a64:	4628      	mov	r0, r5
 8003a66:	f000 f805 	bl	8003a74 <__swsetup_r>
 8003a6a:	2800      	cmp	r0, #0
 8003a6c:	d0d5      	beq.n	8003a1a <__swbuf_r+0x20>
 8003a6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003a72:	e7f4      	b.n	8003a5e <__swbuf_r+0x64>

08003a74 <__swsetup_r>:
 8003a74:	b538      	push	{r3, r4, r5, lr}
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <__swsetup_r+0xac>)
 8003a78:	4605      	mov	r5, r0
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	460c      	mov	r4, r1
 8003a7e:	b118      	cbz	r0, 8003a88 <__swsetup_r+0x14>
 8003a80:	6a03      	ldr	r3, [r0, #32]
 8003a82:	b90b      	cbnz	r3, 8003a88 <__swsetup_r+0x14>
 8003a84:	f7ff fed2 	bl	800382c <__sinit>
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a8e:	0718      	lsls	r0, r3, #28
 8003a90:	d422      	bmi.n	8003ad8 <__swsetup_r+0x64>
 8003a92:	06d9      	lsls	r1, r3, #27
 8003a94:	d407      	bmi.n	8003aa6 <__swsetup_r+0x32>
 8003a96:	2309      	movs	r3, #9
 8003a98:	602b      	str	r3, [r5, #0]
 8003a9a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003aa2:	81a3      	strh	r3, [r4, #12]
 8003aa4:	e034      	b.n	8003b10 <__swsetup_r+0x9c>
 8003aa6:	0758      	lsls	r0, r3, #29
 8003aa8:	d512      	bpl.n	8003ad0 <__swsetup_r+0x5c>
 8003aaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003aac:	b141      	cbz	r1, 8003ac0 <__swsetup_r+0x4c>
 8003aae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003ab2:	4299      	cmp	r1, r3
 8003ab4:	d002      	beq.n	8003abc <__swsetup_r+0x48>
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 f8ae 	bl	8003c18 <_free_r>
 8003abc:	2300      	movs	r3, #0
 8003abe:	6363      	str	r3, [r4, #52]	; 0x34
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	6063      	str	r3, [r4, #4]
 8003acc:	6923      	ldr	r3, [r4, #16]
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	89a3      	ldrh	r3, [r4, #12]
 8003ad2:	f043 0308 	orr.w	r3, r3, #8
 8003ad6:	81a3      	strh	r3, [r4, #12]
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	b94b      	cbnz	r3, 8003af0 <__swsetup_r+0x7c>
 8003adc:	89a3      	ldrh	r3, [r4, #12]
 8003ade:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae6:	d003      	beq.n	8003af0 <__swsetup_r+0x7c>
 8003ae8:	4621      	mov	r1, r4
 8003aea:	4628      	mov	r0, r5
 8003aec:	f000 fd2d 	bl	800454a <__smakebuf_r>
 8003af0:	89a0      	ldrh	r0, [r4, #12]
 8003af2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003af6:	f010 0301 	ands.w	r3, r0, #1
 8003afa:	d00a      	beq.n	8003b12 <__swsetup_r+0x9e>
 8003afc:	2300      	movs	r3, #0
 8003afe:	60a3      	str	r3, [r4, #8]
 8003b00:	6963      	ldr	r3, [r4, #20]
 8003b02:	425b      	negs	r3, r3
 8003b04:	61a3      	str	r3, [r4, #24]
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	b943      	cbnz	r3, 8003b1c <__swsetup_r+0xa8>
 8003b0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003b0e:	d1c4      	bne.n	8003a9a <__swsetup_r+0x26>
 8003b10:	bd38      	pop	{r3, r4, r5, pc}
 8003b12:	0781      	lsls	r1, r0, #30
 8003b14:	bf58      	it	pl
 8003b16:	6963      	ldrpl	r3, [r4, #20]
 8003b18:	60a3      	str	r3, [r4, #8]
 8003b1a:	e7f4      	b.n	8003b06 <__swsetup_r+0x92>
 8003b1c:	2000      	movs	r0, #0
 8003b1e:	e7f7      	b.n	8003b10 <__swsetup_r+0x9c>
 8003b20:	20000064 	.word	0x20000064

08003b24 <memset>:
 8003b24:	4603      	mov	r3, r0
 8003b26:	4402      	add	r2, r0
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d100      	bne.n	8003b2e <memset+0xa>
 8003b2c:	4770      	bx	lr
 8003b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b32:	e7f9      	b.n	8003b28 <memset+0x4>

08003b34 <_close_r>:
 8003b34:	b538      	push	{r3, r4, r5, lr}
 8003b36:	2300      	movs	r3, #0
 8003b38:	4d05      	ldr	r5, [pc, #20]	; (8003b50 <_close_r+0x1c>)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	4608      	mov	r0, r1
 8003b3e:	602b      	str	r3, [r5, #0]
 8003b40:	f7fd fb07 	bl	8001152 <_close>
 8003b44:	1c43      	adds	r3, r0, #1
 8003b46:	d102      	bne.n	8003b4e <_close_r+0x1a>
 8003b48:	682b      	ldr	r3, [r5, #0]
 8003b4a:	b103      	cbz	r3, 8003b4e <_close_r+0x1a>
 8003b4c:	6023      	str	r3, [r4, #0]
 8003b4e:	bd38      	pop	{r3, r4, r5, pc}
 8003b50:	200002d0 	.word	0x200002d0

08003b54 <_lseek_r>:
 8003b54:	b538      	push	{r3, r4, r5, lr}
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4d05      	ldr	r5, [pc, #20]	; (8003b74 <_lseek_r+0x20>)
 8003b60:	602a      	str	r2, [r5, #0]
 8003b62:	461a      	mov	r2, r3
 8003b64:	f7fd fb19 	bl	800119a <_lseek>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_lseek_r+0x1e>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_lseek_r+0x1e>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	200002d0 	.word	0x200002d0

08003b78 <_read_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	4d05      	ldr	r5, [pc, #20]	; (8003b98 <_read_r+0x20>)
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fd faaa 	bl	80010e0 <_read>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_read_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_read_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	200002d0 	.word	0x200002d0

08003b9c <_write_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4d05      	ldr	r5, [pc, #20]	; (8003bbc <_write_r+0x20>)
 8003ba8:	602a      	str	r2, [r5, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fd fab5 	bl	800111a <_write>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_write_r+0x1e>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_write_r+0x1e>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	200002d0 	.word	0x200002d0

08003bc0 <__errno>:
 8003bc0:	4b01      	ldr	r3, [pc, #4]	; (8003bc8 <__errno+0x8>)
 8003bc2:	6818      	ldr	r0, [r3, #0]
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	20000064 	.word	0x20000064

08003bcc <__libc_init_array>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	2600      	movs	r6, #0
 8003bd0:	4d0c      	ldr	r5, [pc, #48]	; (8003c04 <__libc_init_array+0x38>)
 8003bd2:	4c0d      	ldr	r4, [pc, #52]	; (8003c08 <__libc_init_array+0x3c>)
 8003bd4:	1b64      	subs	r4, r4, r5
 8003bd6:	10a4      	asrs	r4, r4, #2
 8003bd8:	42a6      	cmp	r6, r4
 8003bda:	d109      	bne.n	8003bf0 <__libc_init_array+0x24>
 8003bdc:	f000 fd32 	bl	8004644 <_init>
 8003be0:	2600      	movs	r6, #0
 8003be2:	4d0a      	ldr	r5, [pc, #40]	; (8003c0c <__libc_init_array+0x40>)
 8003be4:	4c0a      	ldr	r4, [pc, #40]	; (8003c10 <__libc_init_array+0x44>)
 8003be6:	1b64      	subs	r4, r4, r5
 8003be8:	10a4      	asrs	r4, r4, #2
 8003bea:	42a6      	cmp	r6, r4
 8003bec:	d105      	bne.n	8003bfa <__libc_init_array+0x2e>
 8003bee:	bd70      	pop	{r4, r5, r6, pc}
 8003bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf4:	4798      	blx	r3
 8003bf6:	3601      	adds	r6, #1
 8003bf8:	e7ee      	b.n	8003bd8 <__libc_init_array+0xc>
 8003bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bfe:	4798      	blx	r3
 8003c00:	3601      	adds	r6, #1
 8003c02:	e7f2      	b.n	8003bea <__libc_init_array+0x1e>
 8003c04:	0800480c 	.word	0x0800480c
 8003c08:	0800480c 	.word	0x0800480c
 8003c0c:	0800480c 	.word	0x0800480c
 8003c10:	08004810 	.word	0x08004810

08003c14 <__retarget_lock_acquire_recursive>:
 8003c14:	4770      	bx	lr

08003c16 <__retarget_lock_release_recursive>:
 8003c16:	4770      	bx	lr

08003c18 <_free_r>:
 8003c18:	b538      	push	{r3, r4, r5, lr}
 8003c1a:	4605      	mov	r5, r0
 8003c1c:	2900      	cmp	r1, #0
 8003c1e:	d040      	beq.n	8003ca2 <_free_r+0x8a>
 8003c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c24:	1f0c      	subs	r4, r1, #4
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	bfb8      	it	lt
 8003c2a:	18e4      	addlt	r4, r4, r3
 8003c2c:	f000 f8dc 	bl	8003de8 <__malloc_lock>
 8003c30:	4a1c      	ldr	r2, [pc, #112]	; (8003ca4 <_free_r+0x8c>)
 8003c32:	6813      	ldr	r3, [r2, #0]
 8003c34:	b933      	cbnz	r3, 8003c44 <_free_r+0x2c>
 8003c36:	6063      	str	r3, [r4, #4]
 8003c38:	6014      	str	r4, [r2, #0]
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c40:	f000 b8d8 	b.w	8003df4 <__malloc_unlock>
 8003c44:	42a3      	cmp	r3, r4
 8003c46:	d908      	bls.n	8003c5a <_free_r+0x42>
 8003c48:	6820      	ldr	r0, [r4, #0]
 8003c4a:	1821      	adds	r1, r4, r0
 8003c4c:	428b      	cmp	r3, r1
 8003c4e:	bf01      	itttt	eq
 8003c50:	6819      	ldreq	r1, [r3, #0]
 8003c52:	685b      	ldreq	r3, [r3, #4]
 8003c54:	1809      	addeq	r1, r1, r0
 8003c56:	6021      	streq	r1, [r4, #0]
 8003c58:	e7ed      	b.n	8003c36 <_free_r+0x1e>
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	b10b      	cbz	r3, 8003c64 <_free_r+0x4c>
 8003c60:	42a3      	cmp	r3, r4
 8003c62:	d9fa      	bls.n	8003c5a <_free_r+0x42>
 8003c64:	6811      	ldr	r1, [r2, #0]
 8003c66:	1850      	adds	r0, r2, r1
 8003c68:	42a0      	cmp	r0, r4
 8003c6a:	d10b      	bne.n	8003c84 <_free_r+0x6c>
 8003c6c:	6820      	ldr	r0, [r4, #0]
 8003c6e:	4401      	add	r1, r0
 8003c70:	1850      	adds	r0, r2, r1
 8003c72:	4283      	cmp	r3, r0
 8003c74:	6011      	str	r1, [r2, #0]
 8003c76:	d1e0      	bne.n	8003c3a <_free_r+0x22>
 8003c78:	6818      	ldr	r0, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	4408      	add	r0, r1
 8003c7e:	6010      	str	r0, [r2, #0]
 8003c80:	6053      	str	r3, [r2, #4]
 8003c82:	e7da      	b.n	8003c3a <_free_r+0x22>
 8003c84:	d902      	bls.n	8003c8c <_free_r+0x74>
 8003c86:	230c      	movs	r3, #12
 8003c88:	602b      	str	r3, [r5, #0]
 8003c8a:	e7d6      	b.n	8003c3a <_free_r+0x22>
 8003c8c:	6820      	ldr	r0, [r4, #0]
 8003c8e:	1821      	adds	r1, r4, r0
 8003c90:	428b      	cmp	r3, r1
 8003c92:	bf01      	itttt	eq
 8003c94:	6819      	ldreq	r1, [r3, #0]
 8003c96:	685b      	ldreq	r3, [r3, #4]
 8003c98:	1809      	addeq	r1, r1, r0
 8003c9a:	6021      	streq	r1, [r4, #0]
 8003c9c:	6063      	str	r3, [r4, #4]
 8003c9e:	6054      	str	r4, [r2, #4]
 8003ca0:	e7cb      	b.n	8003c3a <_free_r+0x22>
 8003ca2:	bd38      	pop	{r3, r4, r5, pc}
 8003ca4:	200002d8 	.word	0x200002d8

08003ca8 <sbrk_aligned>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	4e0e      	ldr	r6, [pc, #56]	; (8003ce4 <sbrk_aligned+0x3c>)
 8003cac:	460c      	mov	r4, r1
 8003cae:	6831      	ldr	r1, [r6, #0]
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	b911      	cbnz	r1, 8003cba <sbrk_aligned+0x12>
 8003cb4:	f000 fca8 	bl	8004608 <_sbrk_r>
 8003cb8:	6030      	str	r0, [r6, #0]
 8003cba:	4621      	mov	r1, r4
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	f000 fca3 	bl	8004608 <_sbrk_r>
 8003cc2:	1c43      	adds	r3, r0, #1
 8003cc4:	d00a      	beq.n	8003cdc <sbrk_aligned+0x34>
 8003cc6:	1cc4      	adds	r4, r0, #3
 8003cc8:	f024 0403 	bic.w	r4, r4, #3
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d007      	beq.n	8003ce0 <sbrk_aligned+0x38>
 8003cd0:	1a21      	subs	r1, r4, r0
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	f000 fc98 	bl	8004608 <_sbrk_r>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d101      	bne.n	8003ce0 <sbrk_aligned+0x38>
 8003cdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ce0:	4620      	mov	r0, r4
 8003ce2:	bd70      	pop	{r4, r5, r6, pc}
 8003ce4:	200002dc 	.word	0x200002dc

08003ce8 <_malloc_r>:
 8003ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003cec:	1ccd      	adds	r5, r1, #3
 8003cee:	f025 0503 	bic.w	r5, r5, #3
 8003cf2:	3508      	adds	r5, #8
 8003cf4:	2d0c      	cmp	r5, #12
 8003cf6:	bf38      	it	cc
 8003cf8:	250c      	movcc	r5, #12
 8003cfa:	2d00      	cmp	r5, #0
 8003cfc:	4607      	mov	r7, r0
 8003cfe:	db01      	blt.n	8003d04 <_malloc_r+0x1c>
 8003d00:	42a9      	cmp	r1, r5
 8003d02:	d905      	bls.n	8003d10 <_malloc_r+0x28>
 8003d04:	230c      	movs	r3, #12
 8003d06:	2600      	movs	r6, #0
 8003d08:	603b      	str	r3, [r7, #0]
 8003d0a:	4630      	mov	r0, r6
 8003d0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003de4 <_malloc_r+0xfc>
 8003d14:	f000 f868 	bl	8003de8 <__malloc_lock>
 8003d18:	f8d8 3000 	ldr.w	r3, [r8]
 8003d1c:	461c      	mov	r4, r3
 8003d1e:	bb5c      	cbnz	r4, 8003d78 <_malloc_r+0x90>
 8003d20:	4629      	mov	r1, r5
 8003d22:	4638      	mov	r0, r7
 8003d24:	f7ff ffc0 	bl	8003ca8 <sbrk_aligned>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	4604      	mov	r4, r0
 8003d2c:	d155      	bne.n	8003dda <_malloc_r+0xf2>
 8003d2e:	f8d8 4000 	ldr.w	r4, [r8]
 8003d32:	4626      	mov	r6, r4
 8003d34:	2e00      	cmp	r6, #0
 8003d36:	d145      	bne.n	8003dc4 <_malloc_r+0xdc>
 8003d38:	2c00      	cmp	r4, #0
 8003d3a:	d048      	beq.n	8003dce <_malloc_r+0xe6>
 8003d3c:	6823      	ldr	r3, [r4, #0]
 8003d3e:	4631      	mov	r1, r6
 8003d40:	4638      	mov	r0, r7
 8003d42:	eb04 0903 	add.w	r9, r4, r3
 8003d46:	f000 fc5f 	bl	8004608 <_sbrk_r>
 8003d4a:	4581      	cmp	r9, r0
 8003d4c:	d13f      	bne.n	8003dce <_malloc_r+0xe6>
 8003d4e:	6821      	ldr	r1, [r4, #0]
 8003d50:	4638      	mov	r0, r7
 8003d52:	1a6d      	subs	r5, r5, r1
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7ff ffa7 	bl	8003ca8 <sbrk_aligned>
 8003d5a:	3001      	adds	r0, #1
 8003d5c:	d037      	beq.n	8003dce <_malloc_r+0xe6>
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	442b      	add	r3, r5
 8003d62:	6023      	str	r3, [r4, #0]
 8003d64:	f8d8 3000 	ldr.w	r3, [r8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d038      	beq.n	8003dde <_malloc_r+0xf6>
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	42a2      	cmp	r2, r4
 8003d70:	d12b      	bne.n	8003dca <_malloc_r+0xe2>
 8003d72:	2200      	movs	r2, #0
 8003d74:	605a      	str	r2, [r3, #4]
 8003d76:	e00f      	b.n	8003d98 <_malloc_r+0xb0>
 8003d78:	6822      	ldr	r2, [r4, #0]
 8003d7a:	1b52      	subs	r2, r2, r5
 8003d7c:	d41f      	bmi.n	8003dbe <_malloc_r+0xd6>
 8003d7e:	2a0b      	cmp	r2, #11
 8003d80:	d917      	bls.n	8003db2 <_malloc_r+0xca>
 8003d82:	1961      	adds	r1, r4, r5
 8003d84:	42a3      	cmp	r3, r4
 8003d86:	6025      	str	r5, [r4, #0]
 8003d88:	bf18      	it	ne
 8003d8a:	6059      	strne	r1, [r3, #4]
 8003d8c:	6863      	ldr	r3, [r4, #4]
 8003d8e:	bf08      	it	eq
 8003d90:	f8c8 1000 	streq.w	r1, [r8]
 8003d94:	5162      	str	r2, [r4, r5]
 8003d96:	604b      	str	r3, [r1, #4]
 8003d98:	4638      	mov	r0, r7
 8003d9a:	f104 060b 	add.w	r6, r4, #11
 8003d9e:	f000 f829 	bl	8003df4 <__malloc_unlock>
 8003da2:	f026 0607 	bic.w	r6, r6, #7
 8003da6:	1d23      	adds	r3, r4, #4
 8003da8:	1af2      	subs	r2, r6, r3
 8003daa:	d0ae      	beq.n	8003d0a <_malloc_r+0x22>
 8003dac:	1b9b      	subs	r3, r3, r6
 8003dae:	50a3      	str	r3, [r4, r2]
 8003db0:	e7ab      	b.n	8003d0a <_malloc_r+0x22>
 8003db2:	42a3      	cmp	r3, r4
 8003db4:	6862      	ldr	r2, [r4, #4]
 8003db6:	d1dd      	bne.n	8003d74 <_malloc_r+0x8c>
 8003db8:	f8c8 2000 	str.w	r2, [r8]
 8003dbc:	e7ec      	b.n	8003d98 <_malloc_r+0xb0>
 8003dbe:	4623      	mov	r3, r4
 8003dc0:	6864      	ldr	r4, [r4, #4]
 8003dc2:	e7ac      	b.n	8003d1e <_malloc_r+0x36>
 8003dc4:	4634      	mov	r4, r6
 8003dc6:	6876      	ldr	r6, [r6, #4]
 8003dc8:	e7b4      	b.n	8003d34 <_malloc_r+0x4c>
 8003dca:	4613      	mov	r3, r2
 8003dcc:	e7cc      	b.n	8003d68 <_malloc_r+0x80>
 8003dce:	230c      	movs	r3, #12
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	603b      	str	r3, [r7, #0]
 8003dd4:	f000 f80e 	bl	8003df4 <__malloc_unlock>
 8003dd8:	e797      	b.n	8003d0a <_malloc_r+0x22>
 8003dda:	6025      	str	r5, [r4, #0]
 8003ddc:	e7dc      	b.n	8003d98 <_malloc_r+0xb0>
 8003dde:	605b      	str	r3, [r3, #4]
 8003de0:	deff      	udf	#255	; 0xff
 8003de2:	bf00      	nop
 8003de4:	200002d8 	.word	0x200002d8

08003de8 <__malloc_lock>:
 8003de8:	4801      	ldr	r0, [pc, #4]	; (8003df0 <__malloc_lock+0x8>)
 8003dea:	f7ff bf13 	b.w	8003c14 <__retarget_lock_acquire_recursive>
 8003dee:	bf00      	nop
 8003df0:	200002d4 	.word	0x200002d4

08003df4 <__malloc_unlock>:
 8003df4:	4801      	ldr	r0, [pc, #4]	; (8003dfc <__malloc_unlock+0x8>)
 8003df6:	f7ff bf0e 	b.w	8003c16 <__retarget_lock_release_recursive>
 8003dfa:	bf00      	nop
 8003dfc:	200002d4 	.word	0x200002d4

08003e00 <__sfputc_r>:
 8003e00:	6893      	ldr	r3, [r2, #8]
 8003e02:	b410      	push	{r4}
 8003e04:	3b01      	subs	r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	6093      	str	r3, [r2, #8]
 8003e0a:	da07      	bge.n	8003e1c <__sfputc_r+0x1c>
 8003e0c:	6994      	ldr	r4, [r2, #24]
 8003e0e:	42a3      	cmp	r3, r4
 8003e10:	db01      	blt.n	8003e16 <__sfputc_r+0x16>
 8003e12:	290a      	cmp	r1, #10
 8003e14:	d102      	bne.n	8003e1c <__sfputc_r+0x1c>
 8003e16:	bc10      	pop	{r4}
 8003e18:	f7ff bdef 	b.w	80039fa <__swbuf_r>
 8003e1c:	6813      	ldr	r3, [r2, #0]
 8003e1e:	1c58      	adds	r0, r3, #1
 8003e20:	6010      	str	r0, [r2, #0]
 8003e22:	7019      	strb	r1, [r3, #0]
 8003e24:	4608      	mov	r0, r1
 8003e26:	bc10      	pop	{r4}
 8003e28:	4770      	bx	lr

08003e2a <__sfputs_r>:
 8003e2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2c:	4606      	mov	r6, r0
 8003e2e:	460f      	mov	r7, r1
 8003e30:	4614      	mov	r4, r2
 8003e32:	18d5      	adds	r5, r2, r3
 8003e34:	42ac      	cmp	r4, r5
 8003e36:	d101      	bne.n	8003e3c <__sfputs_r+0x12>
 8003e38:	2000      	movs	r0, #0
 8003e3a:	e007      	b.n	8003e4c <__sfputs_r+0x22>
 8003e3c:	463a      	mov	r2, r7
 8003e3e:	4630      	mov	r0, r6
 8003e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e44:	f7ff ffdc 	bl	8003e00 <__sfputc_r>
 8003e48:	1c43      	adds	r3, r0, #1
 8003e4a:	d1f3      	bne.n	8003e34 <__sfputs_r+0xa>
 8003e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e50 <_vfiprintf_r>:
 8003e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e54:	460d      	mov	r5, r1
 8003e56:	4614      	mov	r4, r2
 8003e58:	4698      	mov	r8, r3
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	b09d      	sub	sp, #116	; 0x74
 8003e5e:	b118      	cbz	r0, 8003e68 <_vfiprintf_r+0x18>
 8003e60:	6a03      	ldr	r3, [r0, #32]
 8003e62:	b90b      	cbnz	r3, 8003e68 <_vfiprintf_r+0x18>
 8003e64:	f7ff fce2 	bl	800382c <__sinit>
 8003e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e6a:	07d9      	lsls	r1, r3, #31
 8003e6c:	d405      	bmi.n	8003e7a <_vfiprintf_r+0x2a>
 8003e6e:	89ab      	ldrh	r3, [r5, #12]
 8003e70:	059a      	lsls	r2, r3, #22
 8003e72:	d402      	bmi.n	8003e7a <_vfiprintf_r+0x2a>
 8003e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003e76:	f7ff fecd 	bl	8003c14 <__retarget_lock_acquire_recursive>
 8003e7a:	89ab      	ldrh	r3, [r5, #12]
 8003e7c:	071b      	lsls	r3, r3, #28
 8003e7e:	d501      	bpl.n	8003e84 <_vfiprintf_r+0x34>
 8003e80:	692b      	ldr	r3, [r5, #16]
 8003e82:	b99b      	cbnz	r3, 8003eac <_vfiprintf_r+0x5c>
 8003e84:	4629      	mov	r1, r5
 8003e86:	4630      	mov	r0, r6
 8003e88:	f7ff fdf4 	bl	8003a74 <__swsetup_r>
 8003e8c:	b170      	cbz	r0, 8003eac <_vfiprintf_r+0x5c>
 8003e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003e90:	07dc      	lsls	r4, r3, #31
 8003e92:	d504      	bpl.n	8003e9e <_vfiprintf_r+0x4e>
 8003e94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e98:	b01d      	add	sp, #116	; 0x74
 8003e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e9e:	89ab      	ldrh	r3, [r5, #12]
 8003ea0:	0598      	lsls	r0, r3, #22
 8003ea2:	d4f7      	bmi.n	8003e94 <_vfiprintf_r+0x44>
 8003ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ea6:	f7ff feb6 	bl	8003c16 <__retarget_lock_release_recursive>
 8003eaa:	e7f3      	b.n	8003e94 <_vfiprintf_r+0x44>
 8003eac:	2300      	movs	r3, #0
 8003eae:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb0:	2320      	movs	r3, #32
 8003eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003eb6:	2330      	movs	r3, #48	; 0x30
 8003eb8:	f04f 0901 	mov.w	r9, #1
 8003ebc:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ec0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004070 <_vfiprintf_r+0x220>
 8003ec4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ec8:	4623      	mov	r3, r4
 8003eca:	469a      	mov	sl, r3
 8003ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ed0:	b10a      	cbz	r2, 8003ed6 <_vfiprintf_r+0x86>
 8003ed2:	2a25      	cmp	r2, #37	; 0x25
 8003ed4:	d1f9      	bne.n	8003eca <_vfiprintf_r+0x7a>
 8003ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8003eda:	d00b      	beq.n	8003ef4 <_vfiprintf_r+0xa4>
 8003edc:	465b      	mov	r3, fp
 8003ede:	4622      	mov	r2, r4
 8003ee0:	4629      	mov	r1, r5
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f7ff ffa1 	bl	8003e2a <__sfputs_r>
 8003ee8:	3001      	adds	r0, #1
 8003eea:	f000 80a9 	beq.w	8004040 <_vfiprintf_r+0x1f0>
 8003eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003ef0:	445a      	add	r2, fp
 8003ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8003ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	f000 80a1 	beq.w	8004040 <_vfiprintf_r+0x1f0>
 8003efe:	2300      	movs	r3, #0
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f08:	f10a 0a01 	add.w	sl, sl, #1
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f14:	931a      	str	r3, [sp, #104]	; 0x68
 8003f16:	4654      	mov	r4, sl
 8003f18:	2205      	movs	r2, #5
 8003f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f1e:	4854      	ldr	r0, [pc, #336]	; (8004070 <_vfiprintf_r+0x220>)
 8003f20:	f000 fb82 	bl	8004628 <memchr>
 8003f24:	9a04      	ldr	r2, [sp, #16]
 8003f26:	b9d8      	cbnz	r0, 8003f60 <_vfiprintf_r+0x110>
 8003f28:	06d1      	lsls	r1, r2, #27
 8003f2a:	bf44      	itt	mi
 8003f2c:	2320      	movmi	r3, #32
 8003f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f32:	0713      	lsls	r3, r2, #28
 8003f34:	bf44      	itt	mi
 8003f36:	232b      	movmi	r3, #43	; 0x2b
 8003f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8003f40:	2b2a      	cmp	r3, #42	; 0x2a
 8003f42:	d015      	beq.n	8003f70 <_vfiprintf_r+0x120>
 8003f44:	4654      	mov	r4, sl
 8003f46:	2000      	movs	r0, #0
 8003f48:	f04f 0c0a 	mov.w	ip, #10
 8003f4c:	9a07      	ldr	r2, [sp, #28]
 8003f4e:	4621      	mov	r1, r4
 8003f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f54:	3b30      	subs	r3, #48	; 0x30
 8003f56:	2b09      	cmp	r3, #9
 8003f58:	d94d      	bls.n	8003ff6 <_vfiprintf_r+0x1a6>
 8003f5a:	b1b0      	cbz	r0, 8003f8a <_vfiprintf_r+0x13a>
 8003f5c:	9207      	str	r2, [sp, #28]
 8003f5e:	e014      	b.n	8003f8a <_vfiprintf_r+0x13a>
 8003f60:	eba0 0308 	sub.w	r3, r0, r8
 8003f64:	fa09 f303 	lsl.w	r3, r9, r3
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	46a2      	mov	sl, r4
 8003f6c:	9304      	str	r3, [sp, #16]
 8003f6e:	e7d2      	b.n	8003f16 <_vfiprintf_r+0xc6>
 8003f70:	9b03      	ldr	r3, [sp, #12]
 8003f72:	1d19      	adds	r1, r3, #4
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	9103      	str	r1, [sp, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	bfbb      	ittet	lt
 8003f7c:	425b      	neglt	r3, r3
 8003f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8003f82:	9307      	strge	r3, [sp, #28]
 8003f84:	9307      	strlt	r3, [sp, #28]
 8003f86:	bfb8      	it	lt
 8003f88:	9204      	strlt	r2, [sp, #16]
 8003f8a:	7823      	ldrb	r3, [r4, #0]
 8003f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8003f8e:	d10c      	bne.n	8003faa <_vfiprintf_r+0x15a>
 8003f90:	7863      	ldrb	r3, [r4, #1]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d134      	bne.n	8004000 <_vfiprintf_r+0x1b0>
 8003f96:	9b03      	ldr	r3, [sp, #12]
 8003f98:	3402      	adds	r4, #2
 8003f9a:	1d1a      	adds	r2, r3, #4
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	9203      	str	r2, [sp, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	bfb8      	it	lt
 8003fa4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003fa8:	9305      	str	r3, [sp, #20]
 8003faa:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004074 <_vfiprintf_r+0x224>
 8003fae:	2203      	movs	r2, #3
 8003fb0:	4650      	mov	r0, sl
 8003fb2:	7821      	ldrb	r1, [r4, #0]
 8003fb4:	f000 fb38 	bl	8004628 <memchr>
 8003fb8:	b138      	cbz	r0, 8003fca <_vfiprintf_r+0x17a>
 8003fba:	2240      	movs	r2, #64	; 0x40
 8003fbc:	9b04      	ldr	r3, [sp, #16]
 8003fbe:	eba0 000a 	sub.w	r0, r0, sl
 8003fc2:	4082      	lsls	r2, r0
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	3401      	adds	r4, #1
 8003fc8:	9304      	str	r3, [sp, #16]
 8003fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fce:	2206      	movs	r2, #6
 8003fd0:	4829      	ldr	r0, [pc, #164]	; (8004078 <_vfiprintf_r+0x228>)
 8003fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003fd6:	f000 fb27 	bl	8004628 <memchr>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d03f      	beq.n	800405e <_vfiprintf_r+0x20e>
 8003fde:	4b27      	ldr	r3, [pc, #156]	; (800407c <_vfiprintf_r+0x22c>)
 8003fe0:	bb1b      	cbnz	r3, 800402a <_vfiprintf_r+0x1da>
 8003fe2:	9b03      	ldr	r3, [sp, #12]
 8003fe4:	3307      	adds	r3, #7
 8003fe6:	f023 0307 	bic.w	r3, r3, #7
 8003fea:	3308      	adds	r3, #8
 8003fec:	9303      	str	r3, [sp, #12]
 8003fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ff0:	443b      	add	r3, r7
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	e768      	b.n	8003ec8 <_vfiprintf_r+0x78>
 8003ff6:	460c      	mov	r4, r1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ffe:	e7a6      	b.n	8003f4e <_vfiprintf_r+0xfe>
 8004000:	2300      	movs	r3, #0
 8004002:	f04f 0c0a 	mov.w	ip, #10
 8004006:	4619      	mov	r1, r3
 8004008:	3401      	adds	r4, #1
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	4620      	mov	r0, r4
 800400e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004012:	3a30      	subs	r2, #48	; 0x30
 8004014:	2a09      	cmp	r2, #9
 8004016:	d903      	bls.n	8004020 <_vfiprintf_r+0x1d0>
 8004018:	2b00      	cmp	r3, #0
 800401a:	d0c6      	beq.n	8003faa <_vfiprintf_r+0x15a>
 800401c:	9105      	str	r1, [sp, #20]
 800401e:	e7c4      	b.n	8003faa <_vfiprintf_r+0x15a>
 8004020:	4604      	mov	r4, r0
 8004022:	2301      	movs	r3, #1
 8004024:	fb0c 2101 	mla	r1, ip, r1, r2
 8004028:	e7f0      	b.n	800400c <_vfiprintf_r+0x1bc>
 800402a:	ab03      	add	r3, sp, #12
 800402c:	9300      	str	r3, [sp, #0]
 800402e:	462a      	mov	r2, r5
 8004030:	4630      	mov	r0, r6
 8004032:	4b13      	ldr	r3, [pc, #76]	; (8004080 <_vfiprintf_r+0x230>)
 8004034:	a904      	add	r1, sp, #16
 8004036:	f3af 8000 	nop.w
 800403a:	4607      	mov	r7, r0
 800403c:	1c78      	adds	r0, r7, #1
 800403e:	d1d6      	bne.n	8003fee <_vfiprintf_r+0x19e>
 8004040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004042:	07d9      	lsls	r1, r3, #31
 8004044:	d405      	bmi.n	8004052 <_vfiprintf_r+0x202>
 8004046:	89ab      	ldrh	r3, [r5, #12]
 8004048:	059a      	lsls	r2, r3, #22
 800404a:	d402      	bmi.n	8004052 <_vfiprintf_r+0x202>
 800404c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800404e:	f7ff fde2 	bl	8003c16 <__retarget_lock_release_recursive>
 8004052:	89ab      	ldrh	r3, [r5, #12]
 8004054:	065b      	lsls	r3, r3, #25
 8004056:	f53f af1d 	bmi.w	8003e94 <_vfiprintf_r+0x44>
 800405a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800405c:	e71c      	b.n	8003e98 <_vfiprintf_r+0x48>
 800405e:	ab03      	add	r3, sp, #12
 8004060:	9300      	str	r3, [sp, #0]
 8004062:	462a      	mov	r2, r5
 8004064:	4630      	mov	r0, r6
 8004066:	4b06      	ldr	r3, [pc, #24]	; (8004080 <_vfiprintf_r+0x230>)
 8004068:	a904      	add	r1, sp, #16
 800406a:	f000 f87d 	bl	8004168 <_printf_i>
 800406e:	e7e4      	b.n	800403a <_vfiprintf_r+0x1ea>
 8004070:	080047d6 	.word	0x080047d6
 8004074:	080047dc 	.word	0x080047dc
 8004078:	080047e0 	.word	0x080047e0
 800407c:	00000000 	.word	0x00000000
 8004080:	08003e2b 	.word	0x08003e2b

08004084 <_printf_common>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	4616      	mov	r6, r2
 800408a:	4699      	mov	r9, r3
 800408c:	688a      	ldr	r2, [r1, #8]
 800408e:	690b      	ldr	r3, [r1, #16]
 8004090:	4607      	mov	r7, r0
 8004092:	4293      	cmp	r3, r2
 8004094:	bfb8      	it	lt
 8004096:	4613      	movlt	r3, r2
 8004098:	6033      	str	r3, [r6, #0]
 800409a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800409e:	460c      	mov	r4, r1
 80040a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040a4:	b10a      	cbz	r2, 80040aa <_printf_common+0x26>
 80040a6:	3301      	adds	r3, #1
 80040a8:	6033      	str	r3, [r6, #0]
 80040aa:	6823      	ldr	r3, [r4, #0]
 80040ac:	0699      	lsls	r1, r3, #26
 80040ae:	bf42      	ittt	mi
 80040b0:	6833      	ldrmi	r3, [r6, #0]
 80040b2:	3302      	addmi	r3, #2
 80040b4:	6033      	strmi	r3, [r6, #0]
 80040b6:	6825      	ldr	r5, [r4, #0]
 80040b8:	f015 0506 	ands.w	r5, r5, #6
 80040bc:	d106      	bne.n	80040cc <_printf_common+0x48>
 80040be:	f104 0a19 	add.w	sl, r4, #25
 80040c2:	68e3      	ldr	r3, [r4, #12]
 80040c4:	6832      	ldr	r2, [r6, #0]
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	42ab      	cmp	r3, r5
 80040ca:	dc2b      	bgt.n	8004124 <_printf_common+0xa0>
 80040cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80040d0:	1e13      	subs	r3, r2, #0
 80040d2:	6822      	ldr	r2, [r4, #0]
 80040d4:	bf18      	it	ne
 80040d6:	2301      	movne	r3, #1
 80040d8:	0692      	lsls	r2, r2, #26
 80040da:	d430      	bmi.n	800413e <_printf_common+0xba>
 80040dc:	4649      	mov	r1, r9
 80040de:	4638      	mov	r0, r7
 80040e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d023      	beq.n	8004132 <_printf_common+0xae>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	6922      	ldr	r2, [r4, #16]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	bf14      	ite	ne
 80040f6:	2500      	movne	r5, #0
 80040f8:	6833      	ldreq	r3, [r6, #0]
 80040fa:	f04f 0600 	mov.w	r6, #0
 80040fe:	bf08      	it	eq
 8004100:	68e5      	ldreq	r5, [r4, #12]
 8004102:	f104 041a 	add.w	r4, r4, #26
 8004106:	bf08      	it	eq
 8004108:	1aed      	subeq	r5, r5, r3
 800410a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800410e:	bf08      	it	eq
 8004110:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004114:	4293      	cmp	r3, r2
 8004116:	bfc4      	itt	gt
 8004118:	1a9b      	subgt	r3, r3, r2
 800411a:	18ed      	addgt	r5, r5, r3
 800411c:	42b5      	cmp	r5, r6
 800411e:	d11a      	bne.n	8004156 <_printf_common+0xd2>
 8004120:	2000      	movs	r0, #0
 8004122:	e008      	b.n	8004136 <_printf_common+0xb2>
 8004124:	2301      	movs	r3, #1
 8004126:	4652      	mov	r2, sl
 8004128:	4649      	mov	r1, r9
 800412a:	4638      	mov	r0, r7
 800412c:	47c0      	blx	r8
 800412e:	3001      	adds	r0, #1
 8004130:	d103      	bne.n	800413a <_printf_common+0xb6>
 8004132:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800413a:	3501      	adds	r5, #1
 800413c:	e7c1      	b.n	80040c2 <_printf_common+0x3e>
 800413e:	2030      	movs	r0, #48	; 0x30
 8004140:	18e1      	adds	r1, r4, r3
 8004142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800414c:	4422      	add	r2, r4
 800414e:	3302      	adds	r3, #2
 8004150:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004154:	e7c2      	b.n	80040dc <_printf_common+0x58>
 8004156:	2301      	movs	r3, #1
 8004158:	4622      	mov	r2, r4
 800415a:	4649      	mov	r1, r9
 800415c:	4638      	mov	r0, r7
 800415e:	47c0      	blx	r8
 8004160:	3001      	adds	r0, #1
 8004162:	d0e6      	beq.n	8004132 <_printf_common+0xae>
 8004164:	3601      	adds	r6, #1
 8004166:	e7d9      	b.n	800411c <_printf_common+0x98>

08004168 <_printf_i>:
 8004168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800416c:	7e0f      	ldrb	r7, [r1, #24]
 800416e:	4691      	mov	r9, r2
 8004170:	2f78      	cmp	r7, #120	; 0x78
 8004172:	4680      	mov	r8, r0
 8004174:	460c      	mov	r4, r1
 8004176:	469a      	mov	sl, r3
 8004178:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800417a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800417e:	d807      	bhi.n	8004190 <_printf_i+0x28>
 8004180:	2f62      	cmp	r7, #98	; 0x62
 8004182:	d80a      	bhi.n	800419a <_printf_i+0x32>
 8004184:	2f00      	cmp	r7, #0
 8004186:	f000 80d5 	beq.w	8004334 <_printf_i+0x1cc>
 800418a:	2f58      	cmp	r7, #88	; 0x58
 800418c:	f000 80c1 	beq.w	8004312 <_printf_i+0x1aa>
 8004190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004198:	e03a      	b.n	8004210 <_printf_i+0xa8>
 800419a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800419e:	2b15      	cmp	r3, #21
 80041a0:	d8f6      	bhi.n	8004190 <_printf_i+0x28>
 80041a2:	a101      	add	r1, pc, #4	; (adr r1, 80041a8 <_printf_i+0x40>)
 80041a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80041a8:	08004201 	.word	0x08004201
 80041ac:	08004215 	.word	0x08004215
 80041b0:	08004191 	.word	0x08004191
 80041b4:	08004191 	.word	0x08004191
 80041b8:	08004191 	.word	0x08004191
 80041bc:	08004191 	.word	0x08004191
 80041c0:	08004215 	.word	0x08004215
 80041c4:	08004191 	.word	0x08004191
 80041c8:	08004191 	.word	0x08004191
 80041cc:	08004191 	.word	0x08004191
 80041d0:	08004191 	.word	0x08004191
 80041d4:	0800431b 	.word	0x0800431b
 80041d8:	08004241 	.word	0x08004241
 80041dc:	080042d5 	.word	0x080042d5
 80041e0:	08004191 	.word	0x08004191
 80041e4:	08004191 	.word	0x08004191
 80041e8:	0800433d 	.word	0x0800433d
 80041ec:	08004191 	.word	0x08004191
 80041f0:	08004241 	.word	0x08004241
 80041f4:	08004191 	.word	0x08004191
 80041f8:	08004191 	.word	0x08004191
 80041fc:	080042dd 	.word	0x080042dd
 8004200:	682b      	ldr	r3, [r5, #0]
 8004202:	1d1a      	adds	r2, r3, #4
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	602a      	str	r2, [r5, #0]
 8004208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800420c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004210:	2301      	movs	r3, #1
 8004212:	e0a0      	b.n	8004356 <_printf_i+0x1ee>
 8004214:	6820      	ldr	r0, [r4, #0]
 8004216:	682b      	ldr	r3, [r5, #0]
 8004218:	0607      	lsls	r7, r0, #24
 800421a:	f103 0104 	add.w	r1, r3, #4
 800421e:	6029      	str	r1, [r5, #0]
 8004220:	d501      	bpl.n	8004226 <_printf_i+0xbe>
 8004222:	681e      	ldr	r6, [r3, #0]
 8004224:	e003      	b.n	800422e <_printf_i+0xc6>
 8004226:	0646      	lsls	r6, r0, #25
 8004228:	d5fb      	bpl.n	8004222 <_printf_i+0xba>
 800422a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800422e:	2e00      	cmp	r6, #0
 8004230:	da03      	bge.n	800423a <_printf_i+0xd2>
 8004232:	232d      	movs	r3, #45	; 0x2d
 8004234:	4276      	negs	r6, r6
 8004236:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800423a:	230a      	movs	r3, #10
 800423c:	4859      	ldr	r0, [pc, #356]	; (80043a4 <_printf_i+0x23c>)
 800423e:	e012      	b.n	8004266 <_printf_i+0xfe>
 8004240:	682b      	ldr	r3, [r5, #0]
 8004242:	6820      	ldr	r0, [r4, #0]
 8004244:	1d19      	adds	r1, r3, #4
 8004246:	6029      	str	r1, [r5, #0]
 8004248:	0605      	lsls	r5, r0, #24
 800424a:	d501      	bpl.n	8004250 <_printf_i+0xe8>
 800424c:	681e      	ldr	r6, [r3, #0]
 800424e:	e002      	b.n	8004256 <_printf_i+0xee>
 8004250:	0641      	lsls	r1, r0, #25
 8004252:	d5fb      	bpl.n	800424c <_printf_i+0xe4>
 8004254:	881e      	ldrh	r6, [r3, #0]
 8004256:	2f6f      	cmp	r7, #111	; 0x6f
 8004258:	bf0c      	ite	eq
 800425a:	2308      	moveq	r3, #8
 800425c:	230a      	movne	r3, #10
 800425e:	4851      	ldr	r0, [pc, #324]	; (80043a4 <_printf_i+0x23c>)
 8004260:	2100      	movs	r1, #0
 8004262:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004266:	6865      	ldr	r5, [r4, #4]
 8004268:	2d00      	cmp	r5, #0
 800426a:	bfa8      	it	ge
 800426c:	6821      	ldrge	r1, [r4, #0]
 800426e:	60a5      	str	r5, [r4, #8]
 8004270:	bfa4      	itt	ge
 8004272:	f021 0104 	bicge.w	r1, r1, #4
 8004276:	6021      	strge	r1, [r4, #0]
 8004278:	b90e      	cbnz	r6, 800427e <_printf_i+0x116>
 800427a:	2d00      	cmp	r5, #0
 800427c:	d04b      	beq.n	8004316 <_printf_i+0x1ae>
 800427e:	4615      	mov	r5, r2
 8004280:	fbb6 f1f3 	udiv	r1, r6, r3
 8004284:	fb03 6711 	mls	r7, r3, r1, r6
 8004288:	5dc7      	ldrb	r7, [r0, r7]
 800428a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800428e:	4637      	mov	r7, r6
 8004290:	42bb      	cmp	r3, r7
 8004292:	460e      	mov	r6, r1
 8004294:	d9f4      	bls.n	8004280 <_printf_i+0x118>
 8004296:	2b08      	cmp	r3, #8
 8004298:	d10b      	bne.n	80042b2 <_printf_i+0x14a>
 800429a:	6823      	ldr	r3, [r4, #0]
 800429c:	07de      	lsls	r6, r3, #31
 800429e:	d508      	bpl.n	80042b2 <_printf_i+0x14a>
 80042a0:	6923      	ldr	r3, [r4, #16]
 80042a2:	6861      	ldr	r1, [r4, #4]
 80042a4:	4299      	cmp	r1, r3
 80042a6:	bfde      	ittt	le
 80042a8:	2330      	movle	r3, #48	; 0x30
 80042aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80042ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80042b2:	1b52      	subs	r2, r2, r5
 80042b4:	6122      	str	r2, [r4, #16]
 80042b6:	464b      	mov	r3, r9
 80042b8:	4621      	mov	r1, r4
 80042ba:	4640      	mov	r0, r8
 80042bc:	f8cd a000 	str.w	sl, [sp]
 80042c0:	aa03      	add	r2, sp, #12
 80042c2:	f7ff fedf 	bl	8004084 <_printf_common>
 80042c6:	3001      	adds	r0, #1
 80042c8:	d14a      	bne.n	8004360 <_printf_i+0x1f8>
 80042ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042ce:	b004      	add	sp, #16
 80042d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d4:	6823      	ldr	r3, [r4, #0]
 80042d6:	f043 0320 	orr.w	r3, r3, #32
 80042da:	6023      	str	r3, [r4, #0]
 80042dc:	2778      	movs	r7, #120	; 0x78
 80042de:	4832      	ldr	r0, [pc, #200]	; (80043a8 <_printf_i+0x240>)
 80042e0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80042e4:	6823      	ldr	r3, [r4, #0]
 80042e6:	6829      	ldr	r1, [r5, #0]
 80042e8:	061f      	lsls	r7, r3, #24
 80042ea:	f851 6b04 	ldr.w	r6, [r1], #4
 80042ee:	d402      	bmi.n	80042f6 <_printf_i+0x18e>
 80042f0:	065f      	lsls	r7, r3, #25
 80042f2:	bf48      	it	mi
 80042f4:	b2b6      	uxthmi	r6, r6
 80042f6:	07df      	lsls	r7, r3, #31
 80042f8:	bf48      	it	mi
 80042fa:	f043 0320 	orrmi.w	r3, r3, #32
 80042fe:	6029      	str	r1, [r5, #0]
 8004300:	bf48      	it	mi
 8004302:	6023      	strmi	r3, [r4, #0]
 8004304:	b91e      	cbnz	r6, 800430e <_printf_i+0x1a6>
 8004306:	6823      	ldr	r3, [r4, #0]
 8004308:	f023 0320 	bic.w	r3, r3, #32
 800430c:	6023      	str	r3, [r4, #0]
 800430e:	2310      	movs	r3, #16
 8004310:	e7a6      	b.n	8004260 <_printf_i+0xf8>
 8004312:	4824      	ldr	r0, [pc, #144]	; (80043a4 <_printf_i+0x23c>)
 8004314:	e7e4      	b.n	80042e0 <_printf_i+0x178>
 8004316:	4615      	mov	r5, r2
 8004318:	e7bd      	b.n	8004296 <_printf_i+0x12e>
 800431a:	682b      	ldr	r3, [r5, #0]
 800431c:	6826      	ldr	r6, [r4, #0]
 800431e:	1d18      	adds	r0, r3, #4
 8004320:	6961      	ldr	r1, [r4, #20]
 8004322:	6028      	str	r0, [r5, #0]
 8004324:	0635      	lsls	r5, r6, #24
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	d501      	bpl.n	800432e <_printf_i+0x1c6>
 800432a:	6019      	str	r1, [r3, #0]
 800432c:	e002      	b.n	8004334 <_printf_i+0x1cc>
 800432e:	0670      	lsls	r0, r6, #25
 8004330:	d5fb      	bpl.n	800432a <_printf_i+0x1c2>
 8004332:	8019      	strh	r1, [r3, #0]
 8004334:	2300      	movs	r3, #0
 8004336:	4615      	mov	r5, r2
 8004338:	6123      	str	r3, [r4, #16]
 800433a:	e7bc      	b.n	80042b6 <_printf_i+0x14e>
 800433c:	682b      	ldr	r3, [r5, #0]
 800433e:	2100      	movs	r1, #0
 8004340:	1d1a      	adds	r2, r3, #4
 8004342:	602a      	str	r2, [r5, #0]
 8004344:	681d      	ldr	r5, [r3, #0]
 8004346:	6862      	ldr	r2, [r4, #4]
 8004348:	4628      	mov	r0, r5
 800434a:	f000 f96d 	bl	8004628 <memchr>
 800434e:	b108      	cbz	r0, 8004354 <_printf_i+0x1ec>
 8004350:	1b40      	subs	r0, r0, r5
 8004352:	6060      	str	r0, [r4, #4]
 8004354:	6863      	ldr	r3, [r4, #4]
 8004356:	6123      	str	r3, [r4, #16]
 8004358:	2300      	movs	r3, #0
 800435a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800435e:	e7aa      	b.n	80042b6 <_printf_i+0x14e>
 8004360:	462a      	mov	r2, r5
 8004362:	4649      	mov	r1, r9
 8004364:	4640      	mov	r0, r8
 8004366:	6923      	ldr	r3, [r4, #16]
 8004368:	47d0      	blx	sl
 800436a:	3001      	adds	r0, #1
 800436c:	d0ad      	beq.n	80042ca <_printf_i+0x162>
 800436e:	6823      	ldr	r3, [r4, #0]
 8004370:	079b      	lsls	r3, r3, #30
 8004372:	d413      	bmi.n	800439c <_printf_i+0x234>
 8004374:	68e0      	ldr	r0, [r4, #12]
 8004376:	9b03      	ldr	r3, [sp, #12]
 8004378:	4298      	cmp	r0, r3
 800437a:	bfb8      	it	lt
 800437c:	4618      	movlt	r0, r3
 800437e:	e7a6      	b.n	80042ce <_printf_i+0x166>
 8004380:	2301      	movs	r3, #1
 8004382:	4632      	mov	r2, r6
 8004384:	4649      	mov	r1, r9
 8004386:	4640      	mov	r0, r8
 8004388:	47d0      	blx	sl
 800438a:	3001      	adds	r0, #1
 800438c:	d09d      	beq.n	80042ca <_printf_i+0x162>
 800438e:	3501      	adds	r5, #1
 8004390:	68e3      	ldr	r3, [r4, #12]
 8004392:	9903      	ldr	r1, [sp, #12]
 8004394:	1a5b      	subs	r3, r3, r1
 8004396:	42ab      	cmp	r3, r5
 8004398:	dcf2      	bgt.n	8004380 <_printf_i+0x218>
 800439a:	e7eb      	b.n	8004374 <_printf_i+0x20c>
 800439c:	2500      	movs	r5, #0
 800439e:	f104 0619 	add.w	r6, r4, #25
 80043a2:	e7f5      	b.n	8004390 <_printf_i+0x228>
 80043a4:	080047e7 	.word	0x080047e7
 80043a8:	080047f8 	.word	0x080047f8

080043ac <__sflush_r>:
 80043ac:	898a      	ldrh	r2, [r1, #12]
 80043ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b0:	4605      	mov	r5, r0
 80043b2:	0710      	lsls	r0, r2, #28
 80043b4:	460c      	mov	r4, r1
 80043b6:	d457      	bmi.n	8004468 <__sflush_r+0xbc>
 80043b8:	684b      	ldr	r3, [r1, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	dc04      	bgt.n	80043c8 <__sflush_r+0x1c>
 80043be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	dc01      	bgt.n	80043c8 <__sflush_r+0x1c>
 80043c4:	2000      	movs	r0, #0
 80043c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	d0fa      	beq.n	80043c4 <__sflush_r+0x18>
 80043ce:	2300      	movs	r3, #0
 80043d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043d4:	682f      	ldr	r7, [r5, #0]
 80043d6:	6a21      	ldr	r1, [r4, #32]
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	d032      	beq.n	8004442 <__sflush_r+0x96>
 80043dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043de:	89a3      	ldrh	r3, [r4, #12]
 80043e0:	075a      	lsls	r2, r3, #29
 80043e2:	d505      	bpl.n	80043f0 <__sflush_r+0x44>
 80043e4:	6863      	ldr	r3, [r4, #4]
 80043e6:	1ac0      	subs	r0, r0, r3
 80043e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043ea:	b10b      	cbz	r3, 80043f0 <__sflush_r+0x44>
 80043ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ee:	1ac0      	subs	r0, r0, r3
 80043f0:	2300      	movs	r3, #0
 80043f2:	4602      	mov	r2, r0
 80043f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043f6:	4628      	mov	r0, r5
 80043f8:	6a21      	ldr	r1, [r4, #32]
 80043fa:	47b0      	blx	r6
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	89a3      	ldrh	r3, [r4, #12]
 8004400:	d106      	bne.n	8004410 <__sflush_r+0x64>
 8004402:	6829      	ldr	r1, [r5, #0]
 8004404:	291d      	cmp	r1, #29
 8004406:	d82b      	bhi.n	8004460 <__sflush_r+0xb4>
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <__sflush_r+0x100>)
 800440a:	410a      	asrs	r2, r1
 800440c:	07d6      	lsls	r6, r2, #31
 800440e:	d427      	bmi.n	8004460 <__sflush_r+0xb4>
 8004410:	2200      	movs	r2, #0
 8004412:	6062      	str	r2, [r4, #4]
 8004414:	6922      	ldr	r2, [r4, #16]
 8004416:	04d9      	lsls	r1, r3, #19
 8004418:	6022      	str	r2, [r4, #0]
 800441a:	d504      	bpl.n	8004426 <__sflush_r+0x7a>
 800441c:	1c42      	adds	r2, r0, #1
 800441e:	d101      	bne.n	8004424 <__sflush_r+0x78>
 8004420:	682b      	ldr	r3, [r5, #0]
 8004422:	b903      	cbnz	r3, 8004426 <__sflush_r+0x7a>
 8004424:	6560      	str	r0, [r4, #84]	; 0x54
 8004426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004428:	602f      	str	r7, [r5, #0]
 800442a:	2900      	cmp	r1, #0
 800442c:	d0ca      	beq.n	80043c4 <__sflush_r+0x18>
 800442e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004432:	4299      	cmp	r1, r3
 8004434:	d002      	beq.n	800443c <__sflush_r+0x90>
 8004436:	4628      	mov	r0, r5
 8004438:	f7ff fbee 	bl	8003c18 <_free_r>
 800443c:	2000      	movs	r0, #0
 800443e:	6360      	str	r0, [r4, #52]	; 0x34
 8004440:	e7c1      	b.n	80043c6 <__sflush_r+0x1a>
 8004442:	2301      	movs	r3, #1
 8004444:	4628      	mov	r0, r5
 8004446:	47b0      	blx	r6
 8004448:	1c41      	adds	r1, r0, #1
 800444a:	d1c8      	bne.n	80043de <__sflush_r+0x32>
 800444c:	682b      	ldr	r3, [r5, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0c5      	beq.n	80043de <__sflush_r+0x32>
 8004452:	2b1d      	cmp	r3, #29
 8004454:	d001      	beq.n	800445a <__sflush_r+0xae>
 8004456:	2b16      	cmp	r3, #22
 8004458:	d101      	bne.n	800445e <__sflush_r+0xb2>
 800445a:	602f      	str	r7, [r5, #0]
 800445c:	e7b2      	b.n	80043c4 <__sflush_r+0x18>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004464:	81a3      	strh	r3, [r4, #12]
 8004466:	e7ae      	b.n	80043c6 <__sflush_r+0x1a>
 8004468:	690f      	ldr	r7, [r1, #16]
 800446a:	2f00      	cmp	r7, #0
 800446c:	d0aa      	beq.n	80043c4 <__sflush_r+0x18>
 800446e:	0793      	lsls	r3, r2, #30
 8004470:	bf18      	it	ne
 8004472:	2300      	movne	r3, #0
 8004474:	680e      	ldr	r6, [r1, #0]
 8004476:	bf08      	it	eq
 8004478:	694b      	ldreq	r3, [r1, #20]
 800447a:	1bf6      	subs	r6, r6, r7
 800447c:	600f      	str	r7, [r1, #0]
 800447e:	608b      	str	r3, [r1, #8]
 8004480:	2e00      	cmp	r6, #0
 8004482:	dd9f      	ble.n	80043c4 <__sflush_r+0x18>
 8004484:	4633      	mov	r3, r6
 8004486:	463a      	mov	r2, r7
 8004488:	4628      	mov	r0, r5
 800448a:	6a21      	ldr	r1, [r4, #32]
 800448c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004490:	47e0      	blx	ip
 8004492:	2800      	cmp	r0, #0
 8004494:	dc06      	bgt.n	80044a4 <__sflush_r+0xf8>
 8004496:	89a3      	ldrh	r3, [r4, #12]
 8004498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800449c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	e790      	b.n	80043c6 <__sflush_r+0x1a>
 80044a4:	4407      	add	r7, r0
 80044a6:	1a36      	subs	r6, r6, r0
 80044a8:	e7ea      	b.n	8004480 <__sflush_r+0xd4>
 80044aa:	bf00      	nop
 80044ac:	dfbffffe 	.word	0xdfbffffe

080044b0 <_fflush_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	690b      	ldr	r3, [r1, #16]
 80044b4:	4605      	mov	r5, r0
 80044b6:	460c      	mov	r4, r1
 80044b8:	b913      	cbnz	r3, 80044c0 <_fflush_r+0x10>
 80044ba:	2500      	movs	r5, #0
 80044bc:	4628      	mov	r0, r5
 80044be:	bd38      	pop	{r3, r4, r5, pc}
 80044c0:	b118      	cbz	r0, 80044ca <_fflush_r+0x1a>
 80044c2:	6a03      	ldr	r3, [r0, #32]
 80044c4:	b90b      	cbnz	r3, 80044ca <_fflush_r+0x1a>
 80044c6:	f7ff f9b1 	bl	800382c <__sinit>
 80044ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d0f3      	beq.n	80044ba <_fflush_r+0xa>
 80044d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80044d4:	07d0      	lsls	r0, r2, #31
 80044d6:	d404      	bmi.n	80044e2 <_fflush_r+0x32>
 80044d8:	0599      	lsls	r1, r3, #22
 80044da:	d402      	bmi.n	80044e2 <_fflush_r+0x32>
 80044dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044de:	f7ff fb99 	bl	8003c14 <__retarget_lock_acquire_recursive>
 80044e2:	4628      	mov	r0, r5
 80044e4:	4621      	mov	r1, r4
 80044e6:	f7ff ff61 	bl	80043ac <__sflush_r>
 80044ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80044ec:	4605      	mov	r5, r0
 80044ee:	07da      	lsls	r2, r3, #31
 80044f0:	d4e4      	bmi.n	80044bc <_fflush_r+0xc>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	059b      	lsls	r3, r3, #22
 80044f6:	d4e1      	bmi.n	80044bc <_fflush_r+0xc>
 80044f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80044fa:	f7ff fb8c 	bl	8003c16 <__retarget_lock_release_recursive>
 80044fe:	e7dd      	b.n	80044bc <_fflush_r+0xc>

08004500 <__swhatbuf_r>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	460c      	mov	r4, r1
 8004504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004508:	4615      	mov	r5, r2
 800450a:	2900      	cmp	r1, #0
 800450c:	461e      	mov	r6, r3
 800450e:	b096      	sub	sp, #88	; 0x58
 8004510:	da0c      	bge.n	800452c <__swhatbuf_r+0x2c>
 8004512:	89a3      	ldrh	r3, [r4, #12]
 8004514:	2100      	movs	r1, #0
 8004516:	f013 0f80 	tst.w	r3, #128	; 0x80
 800451a:	bf0c      	ite	eq
 800451c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004520:	2340      	movne	r3, #64	; 0x40
 8004522:	2000      	movs	r0, #0
 8004524:	6031      	str	r1, [r6, #0]
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	b016      	add	sp, #88	; 0x58
 800452a:	bd70      	pop	{r4, r5, r6, pc}
 800452c:	466a      	mov	r2, sp
 800452e:	f000 f849 	bl	80045c4 <_fstat_r>
 8004532:	2800      	cmp	r0, #0
 8004534:	dbed      	blt.n	8004512 <__swhatbuf_r+0x12>
 8004536:	9901      	ldr	r1, [sp, #4]
 8004538:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800453c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004540:	4259      	negs	r1, r3
 8004542:	4159      	adcs	r1, r3
 8004544:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004548:	e7eb      	b.n	8004522 <__swhatbuf_r+0x22>

0800454a <__smakebuf_r>:
 800454a:	898b      	ldrh	r3, [r1, #12]
 800454c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800454e:	079d      	lsls	r5, r3, #30
 8004550:	4606      	mov	r6, r0
 8004552:	460c      	mov	r4, r1
 8004554:	d507      	bpl.n	8004566 <__smakebuf_r+0x1c>
 8004556:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	6123      	str	r3, [r4, #16]
 800455e:	2301      	movs	r3, #1
 8004560:	6163      	str	r3, [r4, #20]
 8004562:	b002      	add	sp, #8
 8004564:	bd70      	pop	{r4, r5, r6, pc}
 8004566:	466a      	mov	r2, sp
 8004568:	ab01      	add	r3, sp, #4
 800456a:	f7ff ffc9 	bl	8004500 <__swhatbuf_r>
 800456e:	9900      	ldr	r1, [sp, #0]
 8004570:	4605      	mov	r5, r0
 8004572:	4630      	mov	r0, r6
 8004574:	f7ff fbb8 	bl	8003ce8 <_malloc_r>
 8004578:	b948      	cbnz	r0, 800458e <__smakebuf_r+0x44>
 800457a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800457e:	059a      	lsls	r2, r3, #22
 8004580:	d4ef      	bmi.n	8004562 <__smakebuf_r+0x18>
 8004582:	f023 0303 	bic.w	r3, r3, #3
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	81a3      	strh	r3, [r4, #12]
 800458c:	e7e3      	b.n	8004556 <__smakebuf_r+0xc>
 800458e:	89a3      	ldrh	r3, [r4, #12]
 8004590:	6020      	str	r0, [r4, #0]
 8004592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004596:	81a3      	strh	r3, [r4, #12]
 8004598:	9b00      	ldr	r3, [sp, #0]
 800459a:	6120      	str	r0, [r4, #16]
 800459c:	6163      	str	r3, [r4, #20]
 800459e:	9b01      	ldr	r3, [sp, #4]
 80045a0:	b15b      	cbz	r3, 80045ba <__smakebuf_r+0x70>
 80045a2:	4630      	mov	r0, r6
 80045a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045a8:	f000 f81e 	bl	80045e8 <_isatty_r>
 80045ac:	b128      	cbz	r0, 80045ba <__smakebuf_r+0x70>
 80045ae:	89a3      	ldrh	r3, [r4, #12]
 80045b0:	f023 0303 	bic.w	r3, r3, #3
 80045b4:	f043 0301 	orr.w	r3, r3, #1
 80045b8:	81a3      	strh	r3, [r4, #12]
 80045ba:	89a3      	ldrh	r3, [r4, #12]
 80045bc:	431d      	orrs	r5, r3
 80045be:	81a5      	strh	r5, [r4, #12]
 80045c0:	e7cf      	b.n	8004562 <__smakebuf_r+0x18>
	...

080045c4 <_fstat_r>:
 80045c4:	b538      	push	{r3, r4, r5, lr}
 80045c6:	2300      	movs	r3, #0
 80045c8:	4d06      	ldr	r5, [pc, #24]	; (80045e4 <_fstat_r+0x20>)
 80045ca:	4604      	mov	r4, r0
 80045cc:	4608      	mov	r0, r1
 80045ce:	4611      	mov	r1, r2
 80045d0:	602b      	str	r3, [r5, #0]
 80045d2:	f7fc fdc9 	bl	8001168 <_fstat>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	d102      	bne.n	80045e0 <_fstat_r+0x1c>
 80045da:	682b      	ldr	r3, [r5, #0]
 80045dc:	b103      	cbz	r3, 80045e0 <_fstat_r+0x1c>
 80045de:	6023      	str	r3, [r4, #0]
 80045e0:	bd38      	pop	{r3, r4, r5, pc}
 80045e2:	bf00      	nop
 80045e4:	200002d0 	.word	0x200002d0

080045e8 <_isatty_r>:
 80045e8:	b538      	push	{r3, r4, r5, lr}
 80045ea:	2300      	movs	r3, #0
 80045ec:	4d05      	ldr	r5, [pc, #20]	; (8004604 <_isatty_r+0x1c>)
 80045ee:	4604      	mov	r4, r0
 80045f0:	4608      	mov	r0, r1
 80045f2:	602b      	str	r3, [r5, #0]
 80045f4:	f7fc fdc7 	bl	8001186 <_isatty>
 80045f8:	1c43      	adds	r3, r0, #1
 80045fa:	d102      	bne.n	8004602 <_isatty_r+0x1a>
 80045fc:	682b      	ldr	r3, [r5, #0]
 80045fe:	b103      	cbz	r3, 8004602 <_isatty_r+0x1a>
 8004600:	6023      	str	r3, [r4, #0]
 8004602:	bd38      	pop	{r3, r4, r5, pc}
 8004604:	200002d0 	.word	0x200002d0

08004608 <_sbrk_r>:
 8004608:	b538      	push	{r3, r4, r5, lr}
 800460a:	2300      	movs	r3, #0
 800460c:	4d05      	ldr	r5, [pc, #20]	; (8004624 <_sbrk_r+0x1c>)
 800460e:	4604      	mov	r4, r0
 8004610:	4608      	mov	r0, r1
 8004612:	602b      	str	r3, [r5, #0]
 8004614:	f7fc fdce 	bl	80011b4 <_sbrk>
 8004618:	1c43      	adds	r3, r0, #1
 800461a:	d102      	bne.n	8004622 <_sbrk_r+0x1a>
 800461c:	682b      	ldr	r3, [r5, #0]
 800461e:	b103      	cbz	r3, 8004622 <_sbrk_r+0x1a>
 8004620:	6023      	str	r3, [r4, #0]
 8004622:	bd38      	pop	{r3, r4, r5, pc}
 8004624:	200002d0 	.word	0x200002d0

08004628 <memchr>:
 8004628:	4603      	mov	r3, r0
 800462a:	b510      	push	{r4, lr}
 800462c:	b2c9      	uxtb	r1, r1
 800462e:	4402      	add	r2, r0
 8004630:	4293      	cmp	r3, r2
 8004632:	4618      	mov	r0, r3
 8004634:	d101      	bne.n	800463a <memchr+0x12>
 8004636:	2000      	movs	r0, #0
 8004638:	e003      	b.n	8004642 <memchr+0x1a>
 800463a:	7804      	ldrb	r4, [r0, #0]
 800463c:	3301      	adds	r3, #1
 800463e:	428c      	cmp	r4, r1
 8004640:	d1f6      	bne.n	8004630 <memchr+0x8>
 8004642:	bd10      	pop	{r4, pc}

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	bf00      	nop
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
