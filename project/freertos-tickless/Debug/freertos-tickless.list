
freertos-tickless.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fec  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000760  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800885c  0800885c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800885c  0800885c  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800885c  0800885c  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800885c  0800885c  0001885c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  2000006c  080088d0  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015c4  080088d0  000215c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020095  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a900  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b14  00000000  00000000  0003a9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  0003e4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001400  00000000  00000000  0003fe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bf26  00000000  00000000  00041288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b694  00000000  00000000  0005d1ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a08b4  00000000  00000000  00078842  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007570  00000000  00000000  001190f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00120668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	080080e4 	.word	0x080080e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	080080e4 	.word	0x080080e4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	3a01      	subs	r2, #1
 80009fa:	bf28      	it	cs
 80009fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a00:	d2ed      	bcs.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <PreSleepProcessing>:
/* GetIdleTaskMemory prototype (linked to static allocation support) */
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize );

/* USER CODE BEGIN PREPOSTSLEEP */
__weak void PreSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <PostSleepProcessing>:

__weak void PostSleepProcessing(uint32_t *ulExpectedIdleTime)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
/* place for user code */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000b80:	b480      	push	{r7}
 8000b82:	b085      	sub	sp, #20
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <vApplicationGetIdleTaskMemory+0x28>)
 8000b90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	4a05      	ldr	r2, [pc, #20]	; (8000bac <vApplicationGetIdleTaskMemory+0x2c>)
 8000b96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2280      	movs	r2, #128	; 0x80
 8000b9c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b9e:	bf00      	nop
 8000ba0:	3714      	adds	r7, #20
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	20000088 	.word	0x20000088
 8000bac:	20000128 	.word	0x20000128

08000bb0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000bb8:	1d39      	adds	r1, r7, #4
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4803      	ldr	r0, [pc, #12]	; (8000bd0 <__io_putchar+0x20>)
 8000bc2:	f004 fde9 	bl	8005798 <HAL_UART_Transmit>
  return ch;
 8000bc6:	687b      	ldr	r3, [r7, #4]
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200005e0 	.word	0x200005e0

08000bd4 <HAL_GPIO_EXTI_Callback>:
const uint32_t CLI_timeout_ms = 100*1000;
const uint32_t delay_in_test_for_ms = 10*1000;
const uint32_t time_per_periph_ms = 5* 1000;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]
  HAL_ResumeTick();
 8000bde:	f001 fde7 	bl	80027b0 <HAL_ResumeTick>
}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <select_adc_channel>:
  * @brief Select ADC1 channel function
  * @param None
  * @retval None
  */
void select_adc_channel(int channel)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000bf4:	f107 030c 	add.w	r3, r7, #12
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
    //sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c00:	2301      	movs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
    switch (channel)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2b0f      	cmp	r3, #15
 8000c08:	f200 812d 	bhi.w	8000e66 <select_adc_channel+0x27a>
 8000c0c:	a201      	add	r2, pc, #4	; (adr r2, 8000c14 <select_adc_channel+0x28>)
 8000c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c12:	bf00      	nop
 8000c14:	08000c55 	.word	0x08000c55
 8000c18:	08000c77 	.word	0x08000c77
 8000c1c:	08000c99 	.word	0x08000c99
 8000c20:	08000cbb 	.word	0x08000cbb
 8000c24:	08000cdd 	.word	0x08000cdd
 8000c28:	08000cff 	.word	0x08000cff
 8000c2c:	08000d21 	.word	0x08000d21
 8000c30:	08000d43 	.word	0x08000d43
 8000c34:	08000d65 	.word	0x08000d65
 8000c38:	08000d87 	.word	0x08000d87
 8000c3c:	08000da7 	.word	0x08000da7
 8000c40:	08000dc7 	.word	0x08000dc7
 8000c44:	08000de7 	.word	0x08000de7
 8000c48:	08000e07 	.word	0x08000e07
 8000c4c:	08000e27 	.word	0x08000e27
 8000c50:	08000e47 	.word	0x08000e47
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c58:	2301      	movs	r3, #1
 8000c5a:	613b      	str	r3, [r7, #16]

              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	4893      	ldr	r0, [pc, #588]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000c64:	f002 fa58 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 80fd 	beq.w	8000e6a <select_adc_channel+0x27e>
              {
                Error_Handler();
 8000c70:	f001 f8c4 	bl	8001dfc <Error_Handler>
              }
              break;
 8000c74:	e0f9      	b.n	8000e6a <select_adc_channel+0x27e>

        case 1:
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
              sConfig.Channel = ADC_CHANNEL_1;
 8000c76:	2301      	movs	r3, #1
 8000c78:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	488a      	ldr	r0, [pc, #552]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000c86:	f002 fa47 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	f000 80ee 	beq.w	8000e6e <select_adc_channel+0x282>
              {
                Error_Handler();
 8000c92:	f001 f8b3 	bl	8001dfc <Error_Handler>
              }
              break;
 8000c96:	e0ea      	b.n	8000e6e <select_adc_channel+0x282>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 2:
              sConfig.Channel = ADC_CHANNEL_2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4882      	ldr	r0, [pc, #520]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000ca8:	f002 fa36 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	f000 80df 	beq.w	8000e72 <select_adc_channel+0x286>
              {
                Error_Handler();
 8000cb4:	f001 f8a2 	bl	8001dfc <Error_Handler>
              }
              break;
 8000cb8:	e0db      	b.n	8000e72 <select_adc_channel+0x286>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 3:
              sConfig.Channel = ADC_CHANNEL_3;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc2:	f107 030c 	add.w	r3, r7, #12
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4879      	ldr	r0, [pc, #484]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000cca:	f002 fa25 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80d0 	beq.w	8000e76 <select_adc_channel+0x28a>
              {
                Error_Handler();
 8000cd6:	f001 f891 	bl	8001dfc <Error_Handler>
              }
              break;
 8000cda:	e0cc      	b.n	8000e76 <select_adc_channel+0x28a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 4:
              sConfig.Channel = ADC_CHANNEL_4;
 8000cdc:	2304      	movs	r3, #4
 8000cde:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4871      	ldr	r0, [pc, #452]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000cec:	f002 fa14 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f000 80c1 	beq.w	8000e7a <select_adc_channel+0x28e>
              {
                Error_Handler();
 8000cf8:	f001 f880 	bl	8001dfc <Error_Handler>
              }
              break;
 8000cfc:	e0bd      	b.n	8000e7a <select_adc_channel+0x28e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 5:
              sConfig.Channel = ADC_CHANNEL_5;
 8000cfe:	2305      	movs	r3, #5
 8000d00:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d02:	2301      	movs	r3, #1
 8000d04:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	f107 030c 	add.w	r3, r7, #12
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4868      	ldr	r0, [pc, #416]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000d0e:	f002 fa03 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	f000 80b2 	beq.w	8000e7e <select_adc_channel+0x292>
              {
                Error_Handler();
 8000d1a:	f001 f86f 	bl	8001dfc <Error_Handler>
              }
              break;
 8000d1e:	e0ae      	b.n	8000e7e <select_adc_channel+0x292>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 6:
              sConfig.Channel = ADC_CHANNEL_6;
 8000d20:	2306      	movs	r3, #6
 8000d22:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4860      	ldr	r0, [pc, #384]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000d30:	f002 f9f2 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	f000 80a3 	beq.w	8000e82 <select_adc_channel+0x296>
              {
                Error_Handler();
 8000d3c:	f001 f85e 	bl	8001dfc <Error_Handler>
              }
              break;
 8000d40:	e09f      	b.n	8000e82 <select_adc_channel+0x296>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 7:
              sConfig.Channel = ADC_CHANNEL_7;
 8000d42:	2307      	movs	r3, #7
 8000d44:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4857      	ldr	r0, [pc, #348]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000d52:	f002 f9e1 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	f000 8094 	beq.w	8000e86 <select_adc_channel+0x29a>
              {
                Error_Handler();
 8000d5e:	f001 f84d 	bl	8001dfc <Error_Handler>
              }
              break;
 8000d62:	e090      	b.n	8000e86 <select_adc_channel+0x29a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 8:
              sConfig.Channel = ADC_CHANNEL_8;
 8000d64:	2308      	movs	r3, #8
 8000d66:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 9;
 8000d68:	2309      	movs	r3, #9
 8000d6a:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	4619      	mov	r1, r3
 8000d72:	484f      	ldr	r0, [pc, #316]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000d74:	f002 f9d0 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8085 	beq.w	8000e8a <select_adc_channel+0x29e>
              {
                Error_Handler();
 8000d80:	f001 f83c 	bl	8001dfc <Error_Handler>
              }
              break;
 8000d84:	e081      	b.n	8000e8a <select_adc_channel+0x29e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 9:
              sConfig.Channel = ADC_CHANNEL_9;
 8000d86:	2309      	movs	r3, #9
 8000d88:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4846      	ldr	r0, [pc, #280]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000d96:	f002 f9bf 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d076      	beq.n	8000e8e <select_adc_channel+0x2a2>
              {
                Error_Handler();
 8000da0:	f001 f82c 	bl	8001dfc <Error_Handler>
              }
              break;
 8000da4:	e073      	b.n	8000e8e <select_adc_channel+0x2a2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 10:
              sConfig.Channel = ADC_CHANNEL_10;
 8000da6:	230a      	movs	r3, #10
 8000da8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	483e      	ldr	r0, [pc, #248]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000db6:	f002 f9af 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d068      	beq.n	8000e92 <select_adc_channel+0x2a6>
              {
                Error_Handler();
 8000dc0:	f001 f81c 	bl	8001dfc <Error_Handler>
              }
              break;
 8000dc4:	e065      	b.n	8000e92 <select_adc_channel+0x2a6>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 11:
              sConfig.Channel = ADC_CHANNEL_11;
 8000dc6:	230b      	movs	r3, #11
 8000dc8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4836      	ldr	r0, [pc, #216]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000dd6:	f002 f99f 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d05a      	beq.n	8000e96 <select_adc_channel+0x2aa>
              {
                Error_Handler();
 8000de0:	f001 f80c 	bl	8001dfc <Error_Handler>
              }
              break;
 8000de4:	e057      	b.n	8000e96 <select_adc_channel+0x2aa>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 12:
              sConfig.Channel = ADC_CHANNEL_12;
 8000de6:	230c      	movs	r3, #12
 8000de8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dea:	2301      	movs	r3, #1
 8000dec:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	4619      	mov	r1, r3
 8000df4:	482e      	ldr	r0, [pc, #184]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000df6:	f002 f98f 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d04c      	beq.n	8000e9a <select_adc_channel+0x2ae>
              {
                Error_Handler();
 8000e00:	f000 fffc 	bl	8001dfc <Error_Handler>
              }
              break;
 8000e04:	e049      	b.n	8000e9a <select_adc_channel+0x2ae>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 13:
              sConfig.Channel = ADC_CHANNEL_13;
 8000e06:	230d      	movs	r3, #13
 8000e08:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	4619      	mov	r1, r3
 8000e14:	4826      	ldr	r0, [pc, #152]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000e16:	f002 f97f 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d03e      	beq.n	8000e9e <select_adc_channel+0x2b2>
              {
                Error_Handler();
 8000e20:	f000 ffec 	bl	8001dfc <Error_Handler>
              }
              break;
 8000e24:	e03b      	b.n	8000e9e <select_adc_channel+0x2b2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 14:
              sConfig.Channel = ADC_CHANNEL_14;
 8000e26:	230e      	movs	r3, #14
 8000e28:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	481e      	ldr	r0, [pc, #120]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000e36:	f002 f96f 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d030      	beq.n	8000ea2 <select_adc_channel+0x2b6>
              {
                Error_Handler();
 8000e40:	f000 ffdc 	bl	8001dfc <Error_Handler>
              }
              break;
 8000e44:	e02d      	b.n	8000ea2 <select_adc_channel+0x2b6>
        case 15:
              sConfig.Channel = ADC_CHANNEL_15;
 8000e46:	230f      	movs	r3, #15
 8000e48:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e4e:	f107 030c 	add.w	r3, r7, #12
 8000e52:	4619      	mov	r1, r3
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <select_adc_channel+0x2c4>)
 8000e56:	f002 f95f 	bl	8003118 <HAL_ADC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d022      	beq.n	8000ea6 <select_adc_channel+0x2ba>
              {
                Error_Handler();
 8000e60:	f000 ffcc 	bl	8001dfc <Error_Handler>
              }
              break;
 8000e64:	e01f      	b.n	8000ea6 <select_adc_channel+0x2ba>
        default:
            break;
 8000e66:	bf00      	nop
 8000e68:	e01e      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e6a:	bf00      	nop
 8000e6c:	e01c      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e6e:	bf00      	nop
 8000e70:	e01a      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e72:	bf00      	nop
 8000e74:	e018      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e76:	bf00      	nop
 8000e78:	e016      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e7a:	bf00      	nop
 8000e7c:	e014      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e7e:	bf00      	nop
 8000e80:	e012      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e82:	bf00      	nop
 8000e84:	e010      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e86:	bf00      	nop
 8000e88:	e00e      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e8a:	bf00      	nop
 8000e8c:	e00c      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e8e:	bf00      	nop
 8000e90:	e00a      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e92:	bf00      	nop
 8000e94:	e008      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e96:	bf00      	nop
 8000e98:	e006      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e9a:	bf00      	nop
 8000e9c:	e004      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000e9e:	bf00      	nop
 8000ea0:	e002      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000ea2:	bf00      	nop
 8000ea4:	e000      	b.n	8000ea8 <select_adc_channel+0x2bc>
              break;
 8000ea6:	bf00      	nop
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000328 	.word	0x20000328
 8000eb4:	00000000 	.word	0x00000000

08000eb8 <print_pwr>:

void print_pwr(void) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0

	  printf("-------------------------------\r\n");
 8000ebe:	4872      	ldr	r0, [pc, #456]	; (8001088 <print_pwr+0x1d0>)
 8000ec0:	f006 fa4a 	bl	8007358 <puts>
	  for (uint16_t i = 0; i < 2; i++) {
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	80fb      	strh	r3, [r7, #6]
 8000ec8:	e031      	b.n	8000f2e <print_pwr+0x76>



			  select_adc_channel(i);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe8d 	bl	8000bec <select_adc_channel>
			  // Get each ADC value from the group (2 channels in this case)
			  HAL_ADC_Start(&hadc1);
 8000ed2:	486e      	ldr	r0, [pc, #440]	; (800108c <print_pwr+0x1d4>)
 8000ed4:	f001 ff60 	bl	8002d98 <HAL_ADC_Start>
			  // Wait for regular group conversion to be completed
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000edc:	486b      	ldr	r0, [pc, #428]	; (800108c <print_pwr+0x1d4>)
 8000ede:	f002 f809 	bl	8002ef4 <HAL_ADC_PollForConversion>

			  if (i == 0) {
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d10e      	bne.n	8000f06 <print_pwr+0x4e>
				  source_V_q = HAL_ADC_GetValue(&hadc1);
 8000ee8:	4868      	ldr	r0, [pc, #416]	; (800108c <print_pwr+0x1d4>)
 8000eea:	f002 f909 	bl	8003100 <HAL_ADC_GetValue>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	4b67      	ldr	r3, [pc, #412]	; (8001090 <print_pwr+0x1d8>)
 8000ef4:	801a      	strh	r2, [r3, #0]
				  printf("Quantized Source Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) source_V_q);
 8000ef6:	88fb      	ldrh	r3, [r7, #6]
 8000ef8:	4a65      	ldr	r2, [pc, #404]	; (8001090 <print_pwr+0x1d8>)
 8000efa:	8812      	ldrh	r2, [r2, #0]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4865      	ldr	r0, [pc, #404]	; (8001094 <print_pwr+0x1dc>)
 8000f00:	f006 f9c4 	bl	800728c <iprintf>
 8000f04:	e010      	b.n	8000f28 <print_pwr+0x70>
			  } else if (i == 1) {
 8000f06:	88fb      	ldrh	r3, [r7, #6]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d10d      	bne.n	8000f28 <print_pwr+0x70>
				  mcu_V_q = HAL_ADC_GetValue(&hadc1);
 8000f0c:	485f      	ldr	r0, [pc, #380]	; (800108c <print_pwr+0x1d4>)
 8000f0e:	f002 f8f7 	bl	8003100 <HAL_ADC_GetValue>
 8000f12:	4603      	mov	r3, r0
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <print_pwr+0x1e0>)
 8000f18:	801a      	strh	r2, [r3, #0]
				  printf("Quantized MCU Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) mcu_V_q);
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	4a5e      	ldr	r2, [pc, #376]	; (8001098 <print_pwr+0x1e0>)
 8000f1e:	8812      	ldrh	r2, [r2, #0]
 8000f20:	4619      	mov	r1, r3
 8000f22:	485e      	ldr	r0, [pc, #376]	; (800109c <print_pwr+0x1e4>)
 8000f24:	f006 f9b2 	bl	800728c <iprintf>
	  for (uint16_t i = 0; i < 2; i++) {
 8000f28:	88fb      	ldrh	r3, [r7, #6]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	80fb      	strh	r3, [r7, #6]
 8000f2e:	88fb      	ldrh	r3, [r7, #6]
 8000f30:	2b01      	cmp	r3, #1
 8000f32:	d9ca      	bls.n	8000eca <print_pwr+0x12>
			  }
		  }

		  shunt_resistor_V_q = source_V_q - mcu_V_q;
 8000f34:	4b56      	ldr	r3, [pc, #344]	; (8001090 <print_pwr+0x1d8>)
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	4b57      	ldr	r3, [pc, #348]	; (8001098 <print_pwr+0x1e0>)
 8000f3a:	881b      	ldrh	r3, [r3, #0]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <print_pwr+0x1e8>)
 8000f42:	801a      	strh	r2, [r3, #0]
		  shunt_resistor_mV = (uint16_t) (((float) (shunt_resistor_V_q * 1000)) / 4095.0) * 3.3;
 8000f44:	4b56      	ldr	r3, [pc, #344]	; (80010a0 <print_pwr+0x1e8>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fb02 f303 	mul.w	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fdae 	bl	8000ab4 <__aeabi_i2f>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fa66 	bl	800042c <__aeabi_f2d>
 8000f60:	a345      	add	r3, pc, #276	; (adr r3, 8001078 <print_pwr+0x1c0>)
 8000f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f66:	f7ff fbe3 	bl	8000730 <__aeabi_ddiv>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fcc5 	bl	8000900 <__aeabi_d2uiz>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f7ff fa44 	bl	8000408 <__aeabi_i2d>
 8000f80:	a33f      	add	r3, pc, #252	; (adr r3, 8001080 <print_pwr+0x1c8>)
 8000f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f86:	f7ff faa9 	bl	80004dc <__aeabi_dmul>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	4610      	mov	r0, r2
 8000f90:	4619      	mov	r1, r3
 8000f92:	f7ff fcb5 	bl	8000900 <__aeabi_d2uiz>
 8000f96:	4603      	mov	r3, r0
 8000f98:	b29a      	uxth	r2, r3
 8000f9a:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <print_pwr+0x1ec>)
 8000f9c:	801a      	strh	r2, [r3, #0]
		  mcu_mV = (uint16_t) (((float) (mcu_V_q * 1000)) / 4095.0) * 3.3;
 8000f9e:	4b3e      	ldr	r3, [pc, #248]	; (8001098 <print_pwr+0x1e0>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fd81 	bl	8000ab4 <__aeabi_i2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa39 	bl	800042c <__aeabi_f2d>
 8000fba:	a32f      	add	r3, pc, #188	; (adr r3, 8001078 <print_pwr+0x1c0>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fbb6 	bl	8000730 <__aeabi_ddiv>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f7ff fc98 	bl	8000900 <__aeabi_d2uiz>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff fa17 	bl	8000408 <__aeabi_i2d>
 8000fda:	a329      	add	r3, pc, #164	; (adr r3, 8001080 <print_pwr+0x1c8>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fa7c 	bl	80004dc <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f7ff fc88 	bl	8000900 <__aeabi_d2uiz>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	4b2c      	ldr	r3, [pc, #176]	; (80010a8 <print_pwr+0x1f0>)
 8000ff6:	801a      	strh	r2, [r3, #0]


		  printf("shunt resistor voltage: %u [mV]\r\n", shunt_resistor_mV);
 8000ff8:	4b2a      	ldr	r3, [pc, #168]	; (80010a4 <print_pwr+0x1ec>)
 8000ffa:	881b      	ldrh	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	482b      	ldr	r0, [pc, #172]	; (80010ac <print_pwr+0x1f4>)
 8001000:	f006 f944 	bl	800728c <iprintf>
		  printf("mcu voltage: %u [mV]\r\n", mcu_mV);
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <print_pwr+0x1f0>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	4829      	ldr	r0, [pc, #164]	; (80010b0 <print_pwr+0x1f8>)
 800100c:	f006 f93e 	bl	800728c <iprintf>

		  // since 1 ohm (assumed constant) shunt resistor
		  // I = V / R
		  // I = V
		  circuit_mA = shunt_resistor_mV;
 8001010:	4b24      	ldr	r3, [pc, #144]	; (80010a4 <print_pwr+0x1ec>)
 8001012:	881a      	ldrh	r2, [r3, #0]
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <print_pwr+0x1fc>)
 8001016:	801a      	strh	r2, [r3, #0]
		  printf("Circuit current: %u [mA]\r\n", circuit_mA);
 8001018:	4b26      	ldr	r3, [pc, #152]	; (80010b4 <print_pwr+0x1fc>)
 800101a:	881b      	ldrh	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	4826      	ldr	r0, [pc, #152]	; (80010b8 <print_pwr+0x200>)
 8001020:	f006 f934 	bl	800728c <iprintf>

		  mcu_mW = circuit_mA * (mcu_mV / 1000);
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <print_pwr+0x1f0>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	4a24      	ldr	r2, [pc, #144]	; (80010bc <print_pwr+0x204>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	099b      	lsrs	r3, r3, #6
 8001030:	b29b      	uxth	r3, r3
 8001032:	4a20      	ldr	r2, [pc, #128]	; (80010b4 <print_pwr+0x1fc>)
 8001034:	8812      	ldrh	r2, [r2, #0]
 8001036:	fb02 f303 	mul.w	r3, r2, r3
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b20      	ldr	r3, [pc, #128]	; (80010c0 <print_pwr+0x208>)
 800103e:	801a      	strh	r2, [r3, #0]

		  shunt_resistor_uW = circuit_mA * (shunt_resistor_mV);
 8001040:	4b1c      	ldr	r3, [pc, #112]	; (80010b4 <print_pwr+0x1fc>)
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <print_pwr+0x1ec>)
 8001046:	8812      	ldrh	r2, [r2, #0]
 8001048:	fb02 f303 	mul.w	r3, r2, r3
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <print_pwr+0x20c>)
 8001050:	801a      	strh	r2, [r3, #0]

		  printf("shunt resistor power: %u [uW]\r\n", shunt_resistor_uW);
 8001052:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <print_pwr+0x20c>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	4619      	mov	r1, r3
 8001058:	481b      	ldr	r0, [pc, #108]	; (80010c8 <print_pwr+0x210>)
 800105a:	f006 f917 	bl	800728c <iprintf>
		  printf("mcu power: %u [mW]\r\n", mcu_mW);
 800105e:	4b18      	ldr	r3, [pc, #96]	; (80010c0 <print_pwr+0x208>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	4619      	mov	r1, r3
 8001064:	4819      	ldr	r0, [pc, #100]	; (80010cc <print_pwr+0x214>)
 8001066:	f006 f911 	bl	800728c <iprintf>



}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	f3af 8000 	nop.w
 8001078:	00000000 	.word	0x00000000
 800107c:	40affe00 	.word	0x40affe00
 8001080:	66666666 	.word	0x66666666
 8001084:	400a6666 	.word	0x400a6666
 8001088:	080080fc 	.word	0x080080fc
 800108c:	20000328 	.word	0x20000328
 8001090:	200006bc 	.word	0x200006bc
 8001094:	08008120 	.word	0x08008120
 8001098:	200006be 	.word	0x200006be
 800109c:	08008158 	.word	0x08008158
 80010a0:	200006c0 	.word	0x200006c0
 80010a4:	200006c2 	.word	0x200006c2
 80010a8:	200006c4 	.word	0x200006c4
 80010ac:	0800818c 	.word	0x0800818c
 80010b0:	080081b0 	.word	0x080081b0
 80010b4:	200006c6 	.word	0x200006c6
 80010b8:	080081c8 	.word	0x080081c8
 80010bc:	10624dd3 	.word	0x10624dd3
 80010c0:	200006c8 	.word	0x200006c8
 80010c4:	200006ca 	.word	0x200006ca
 80010c8:	080081e4 	.word	0x080081e4
 80010cc:	08008204 	.word	0x08008204

080010d0 <print_help>:

void print_help(void) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	printf("Help: \r\n");
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <print_help+0x44>)
 80010d6:	f006 f93f 	bl	8007358 <puts>
	printf("    max : power consumption test enabling all clocks and peripherals\r\n");
 80010da:	480f      	ldr	r0, [pc, #60]	; (8001118 <print_help+0x48>)
 80010dc:	f006 f93c 	bl	8007358 <puts>
	printf("    typ : power consumption test for this program: USART1, ADC1, TIM3\r\n");
 80010e0:	480e      	ldr	r0, [pc, #56]	; (800111c <print_help+0x4c>)
 80010e2:	f006 f939 	bl	8007358 <puts>
	printf("    min : power consumption test all peripherals disabled (except TIM4), only CPU enabled CANNOT GATHER INFO IN THIS MODE\r\n");
 80010e6:	480e      	ldr	r0, [pc, #56]	; (8001120 <print_help+0x50>)
 80010e8:	f006 f936 	bl	8007358 <puts>
	printf("    pwr : free-running print of power readings\r\n");
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <print_help+0x54>)
 80010ee:	f006 f933 	bl	8007358 <puts>
	printf("    ver : print version info\r\n");
 80010f2:	480d      	ldr	r0, [pc, #52]	; (8001128 <print_help+0x58>)
 80010f4:	f006 f930 	bl	8007358 <puts>
	printf("    hel : this message\r\n");
 80010f8:	480c      	ldr	r0, [pc, #48]	; (800112c <print_help+0x5c>)
 80010fa:	f006 f92d 	bl	8007358 <puts>
	printf("    sle : enter sleep mode\r\n");
 80010fe:	480c      	ldr	r0, [pc, #48]	; (8001130 <print_help+0x60>)
 8001100:	f006 f92a 	bl	8007358 <puts>
	printf("    sto : enter stop mode\r\n");
 8001104:	480b      	ldr	r0, [pc, #44]	; (8001134 <print_help+0x64>)
 8001106:	f006 f927 	bl	8007358 <puts>
	printf("    sta : enter standby mode\r\n");
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <print_help+0x68>)
 800110c:	f006 f924 	bl	8007358 <puts>

}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	0800821c 	.word	0x0800821c
 8001118:	08008224 	.word	0x08008224
 800111c:	0800826c 	.word	0x0800826c
 8001120:	080082b4 	.word	0x080082b4
 8001124:	08008330 	.word	0x08008330
 8001128:	08008360 	.word	0x08008360
 800112c:	08008380 	.word	0x08008380
 8001130:	08008398 	.word	0x08008398
 8001134:	080083b4 	.word	0x080083b4
 8001138:	080083d0 	.word	0x080083d0

0800113c <print_version>:

void print_version(void) {
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	printf("Version: REV B April 1th, 2024\r\n");
 8001140:	4802      	ldr	r0, [pc, #8]	; (800114c <print_version+0x10>)
 8001142:	f006 f909 	bl	8007358 <puts>
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	080083f0 	.word	0x080083f0

08001150 <test_max>:

// power consumption test enabling all clocks and peripherals
void test_max(void) {
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 8001154:	f241 3388 	movw	r3, #5000	; 0x1388
 8001158:	4619      	mov	r1, r3
 800115a:	485e      	ldr	r0, [pc, #376]	; (80012d4 <test_max+0x184>)
 800115c:	f006 f896 	bl	800728c <iprintf>

	MX_GPIO_Init();
 8001160:	f000 fdd8 	bl	8001d14 <MX_GPIO_Init>
	printf("GPIO INIT\r\n");
 8001164:	485c      	ldr	r0, [pc, #368]	; (80012d8 <test_max+0x188>)
 8001166:	f006 f8f7 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800116a:	f241 3388 	movw	r3, #5000	; 0x1388
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fc54 	bl	8002a1c <HAL_Delay>

	MX_USART1_UART_Init();
 8001174:	f000 fd50 	bl	8001c18 <MX_USART1_UART_Init>
	printf("USART1 INIT\r\n");
 8001178:	4858      	ldr	r0, [pc, #352]	; (80012dc <test_max+0x18c>)
 800117a:	f006 f8ed 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800117e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fc4a 	bl	8002a1c <HAL_Delay>

	MX_ADC1_Init();
 8001188:	f000 fae4 	bl	8001754 <MX_ADC1_Init>
	printf("ADC1 INIT\r\n");
 800118c:	4854      	ldr	r0, [pc, #336]	; (80012e0 <test_max+0x190>)
 800118e:	f006 f8e3 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 8001192:	f241 3388 	movw	r3, #5000	; 0x1388
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fc40 	bl	8002a1c <HAL_Delay>

	MX_ADC2_Init();
 800119c:	f000 fb18 	bl	80017d0 <MX_ADC2_Init>
	printf("ADC2 INIT\r\n");
 80011a0:	4850      	ldr	r0, [pc, #320]	; (80012e4 <test_max+0x194>)
 80011a2:	f006 f8d9 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 80011a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fc36 	bl	8002a1c <HAL_Delay>

	MX_CAN_Init();
 80011b0:	f000 fb4c 	bl	800184c <MX_CAN_Init>
	printf("CANBUS INIT\r\n");
 80011b4:	484c      	ldr	r0, [pc, #304]	; (80012e8 <test_max+0x198>)
 80011b6:	f006 f8cf 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 80011ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fc2c 	bl	8002a1c <HAL_Delay>

	MX_I2C1_Init();
 80011c4:	f000 fb76 	bl	80018b4 <MX_I2C1_Init>
	printf("I2C1 INIT\r\n");
 80011c8:	4848      	ldr	r0, [pc, #288]	; (80012ec <test_max+0x19c>)
 80011ca:	f006 f8c5 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 80011ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fc22 	bl	8002a1c <HAL_Delay>

	MX_I2C2_Init();
 80011d8:	f000 fb9a 	bl	8001910 <MX_I2C2_Init>
	printf("I2C2 INIT\r\n");
 80011dc:	4844      	ldr	r0, [pc, #272]	; (80012f0 <test_max+0x1a0>)
 80011de:	f006 f8bb 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 80011e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fc18 	bl	8002a1c <HAL_Delay>

	MX_SPI1_Init();
 80011ec:	f000 fbbe 	bl	800196c <MX_SPI1_Init>
	printf("SPI1 INIT\r\n");
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <test_max+0x1a4>)
 80011f2:	f006 f8b1 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 80011f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011fa:	4618      	mov	r0, r3
 80011fc:	f001 fc0e 	bl	8002a1c <HAL_Delay>

	MX_SPI2_Init();
 8001200:	f000 fbea 	bl	80019d8 <MX_SPI2_Init>
	printf("SPI2 INIT\r\n");
 8001204:	483c      	ldr	r0, [pc, #240]	; (80012f8 <test_max+0x1a8>)
 8001206:	f006 f8a7 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800120a:	f241 3388 	movw	r3, #5000	; 0x1388
 800120e:	4618      	mov	r0, r3
 8001210:	f001 fc04 	bl	8002a1c <HAL_Delay>

	MX_TIM1_Init();
 8001214:	f000 fc16 	bl	8001a44 <MX_TIM1_Init>
	printf("TIM1 INIT\r\n");
 8001218:	4838      	ldr	r0, [pc, #224]	; (80012fc <test_max+0x1ac>)
 800121a:	f006 f89d 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800121e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001222:	4618      	mov	r0, r3
 8001224:	f001 fbfa 	bl	8002a1c <HAL_Delay>

	MX_TIM2_Init();
 8001228:	f000 fc5c 	bl	8001ae4 <MX_TIM2_Init>
	printf("TIM2 INIT\r\n");
 800122c:	4834      	ldr	r0, [pc, #208]	; (8001300 <test_max+0x1b0>)
 800122e:	f006 f893 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 8001232:	f241 3388 	movw	r3, #5000	; 0x1388
 8001236:	4618      	mov	r0, r3
 8001238:	f001 fbf0 	bl	8002a1c <HAL_Delay>

	MX_TIM3_Init();
 800123c:	f000 fc9e 	bl	8001b7c <MX_TIM3_Init>
	printf("TIM3 INIT\r\n");
 8001240:	4830      	ldr	r0, [pc, #192]	; (8001304 <test_max+0x1b4>)
 8001242:	f006 f889 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 8001246:	f241 3388 	movw	r3, #5000	; 0x1388
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fbe6 	bl	8002a1c <HAL_Delay>

	MX_USART2_UART_Init();
 8001250:	f000 fd0c 	bl	8001c6c <MX_USART2_UART_Init>
	printf("USART2 INIT\r\n");
 8001254:	482c      	ldr	r0, [pc, #176]	; (8001308 <test_max+0x1b8>)
 8001256:	f006 f87f 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800125a:	f241 3388 	movw	r3, #5000	; 0x1388
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fbdc 	bl	8002a1c <HAL_Delay>

	MX_USART3_UART_Init();
 8001264:	f000 fd2c 	bl	8001cc0 <MX_USART3_UART_Init>
	printf("USART3 INIT\r\n");
 8001268:	4828      	ldr	r0, [pc, #160]	; (800130c <test_max+0x1bc>)
 800126a:	f006 f875 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800126e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001272:	4618      	mov	r0, r3
 8001274:	f001 fbd2 	bl	8002a1c <HAL_Delay>


	printf("DeINIT non typical periph\r\n");
 8001278:	4825      	ldr	r0, [pc, #148]	; (8001310 <test_max+0x1c0>)
 800127a:	f006 f86d 	bl	8007358 <puts>
	HAL_Delay(time_per_periph_ms);
 800127e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001282:	4618      	mov	r0, r3
 8001284:	f001 fbca 	bl	8002a1c <HAL_Delay>

	HAL_ADC_DeInit(&hadc2);
 8001288:	4822      	ldr	r0, [pc, #136]	; (8001314 <test_max+0x1c4>)
 800128a:	f001 fcc3 	bl	8002c14 <HAL_ADC_DeInit>
	HAL_CAN_DeInit(&hcan);
 800128e:	4822      	ldr	r0, [pc, #136]	; (8001318 <test_max+0x1c8>)
 8001290:	f002 f9d0 	bl	8003634 <HAL_CAN_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 8001294:	4821      	ldr	r0, [pc, #132]	; (800131c <test_max+0x1cc>)
 8001296:	f002 feb5 	bl	8004004 <HAL_I2C_DeInit>
	HAL_I2C_DeInit(&hi2c2);
 800129a:	4821      	ldr	r0, [pc, #132]	; (8001320 <test_max+0x1d0>)
 800129c:	f002 feb2 	bl	8004004 <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 80012a0:	4820      	ldr	r0, [pc, #128]	; (8001324 <test_max+0x1d4>)
 80012a2:	f003 fd7d 	bl	8004da0 <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 80012a6:	4820      	ldr	r0, [pc, #128]	; (8001328 <test_max+0x1d8>)
 80012a8:	f003 fd7a 	bl	8004da0 <HAL_SPI_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 80012ac:	481f      	ldr	r0, [pc, #124]	; (800132c <test_max+0x1dc>)
 80012ae:	f003 fdee 	bl	8004e8e <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 80012b2:	481f      	ldr	r0, [pc, #124]	; (8001330 <test_max+0x1e0>)
 80012b4:	f003 fdeb 	bl	8004e8e <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 80012b8:	481e      	ldr	r0, [pc, #120]	; (8001334 <test_max+0x1e4>)
 80012ba:	f003 fde8 	bl	8004e8e <HAL_TIM_Base_DeInit>
	HAL_UART_DeInit(&huart2);
 80012be:	481e      	ldr	r0, [pc, #120]	; (8001338 <test_max+0x1e8>)
 80012c0:	f004 fa38 	bl	8005734 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 80012c4:	481d      	ldr	r0, [pc, #116]	; (800133c <test_max+0x1ec>)
 80012c6:	f004 fa35 	bl	8005734 <HAL_UART_DeInit>

	printf("Max Test Done\r\n");
 80012ca:	481d      	ldr	r0, [pc, #116]	; (8001340 <test_max+0x1f0>)
 80012cc:	f006 f844 	bl	8007358 <puts>
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08008410 	.word	0x08008410
 80012d8:	08008478 	.word	0x08008478
 80012dc:	08008484 	.word	0x08008484
 80012e0:	08008494 	.word	0x08008494
 80012e4:	080084a0 	.word	0x080084a0
 80012e8:	080084ac 	.word	0x080084ac
 80012ec:	080084bc 	.word	0x080084bc
 80012f0:	080084c8 	.word	0x080084c8
 80012f4:	080084d4 	.word	0x080084d4
 80012f8:	080084e0 	.word	0x080084e0
 80012fc:	080084ec 	.word	0x080084ec
 8001300:	080084f8 	.word	0x080084f8
 8001304:	08008504 	.word	0x08008504
 8001308:	08008510 	.word	0x08008510
 800130c:	08008520 	.word	0x08008520
 8001310:	08008530 	.word	0x08008530
 8001314:	20000358 	.word	0x20000358
 8001318:	20000388 	.word	0x20000388
 800131c:	200003b0 	.word	0x200003b0
 8001320:	20000404 	.word	0x20000404
 8001324:	20000458 	.word	0x20000458
 8001328:	200004b0 	.word	0x200004b0
 800132c:	20000508 	.word	0x20000508
 8001330:	20000550 	.word	0x20000550
 8001334:	20000598 	.word	0x20000598
 8001338:	20000628 	.word	0x20000628
 800133c:	20000670 	.word	0x20000670
 8001340:	0800854c 	.word	0x0800854c

08001344 <test_typ>:

// power consumption test for this program: USART1, ADC1, TIM3
void test_typ(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 8001348:	f241 3388 	movw	r3, #5000	; 0x1388
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <test_typ+0x24>)
 8001350:	f005 ff9c 	bl	800728c <iprintf>
	HAL_Delay(time_per_periph_ms);
 8001354:	f241 3388 	movw	r3, #5000	; 0x1388
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fb5f 	bl	8002a1c <HAL_Delay>

	printf("Typical Test Done\r\n");
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <test_typ+0x28>)
 8001360:	f005 fffa 	bl	8007358 <puts>

}
 8001364:	bf00      	nop
 8001366:	bd80      	pop	{r7, pc}
 8001368:	08008410 	.word	0x08008410
 800136c:	0800855c 	.word	0x0800855c

08001370 <test_min>:

// power consumption test all peripherals disabled, only CPU enabled
void test_min(void) {
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
	printf("Entering typical minimum mode, ensure external power meter connected. Will auto exit in %lu ms\r\n", delay_in_test_for_ms);
 8001374:	f242 7310 	movw	r3, #10000	; 0x2710
 8001378:	4619      	mov	r1, r3
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <test_min+0x50>)
 800137c:	f005 ff86 	bl	800728c <iprintf>
	HAL_Delay(delay_in_test_for_ms);
 8001380:	f242 7310 	movw	r3, #10000	; 0x2710
 8001384:	4618      	mov	r0, r3
 8001386:	f001 fb49 	bl	8002a1c <HAL_Delay>

	HAL_UART_DeInit(&huart1);
 800138a:	480e      	ldr	r0, [pc, #56]	; (80013c4 <test_min+0x54>)
 800138c:	f004 f9d2 	bl	8005734 <HAL_UART_DeInit>
	// printf's wont work..
	HAL_Delay(delay_in_test_for_ms);
 8001390:	f242 7310 	movw	r3, #10000	; 0x2710
 8001394:	4618      	mov	r0, r3
 8001396:	f001 fb41 	bl	8002a1c <HAL_Delay>

	HAL_ADC_DeInit(&hadc1);
 800139a:	480b      	ldr	r0, [pc, #44]	; (80013c8 <test_min+0x58>)
 800139c:	f001 fc3a 	bl	8002c14 <HAL_ADC_DeInit>
	HAL_Delay(10*1000);
 80013a0:	f242 7010 	movw	r0, #10000	; 0x2710
 80013a4:	f001 fb3a 	bl	8002a1c <HAL_Delay>

	MX_GPIO_Init();
 80013a8:	f000 fcb4 	bl	8001d14 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80013ac:	f000 fc34 	bl	8001c18 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 80013b0:	f000 f9d0 	bl	8001754 <MX_ADC1_Init>

	printf("Minimum Test Done\r\n");
 80013b4:	4805      	ldr	r0, [pc, #20]	; (80013cc <test_min+0x5c>)
 80013b6:	f005 ffcf 	bl	8007358 <puts>

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	08008570 	.word	0x08008570
 80013c4:	200005e0 	.word	0x200005e0
 80013c8:	20000328 	.word	0x20000328
 80013cc:	080085d4 	.word	0x080085d4

080013d0 <test_pwr>:

void test_pwr(void) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	printf("Entering free-running power mode, press `q` three times quickly to exit\r\n");
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <test_pwr+0x34>)
 80013d6:	f005 ffbf 	bl	8007358 <puts>
	while (1) {

		print_pwr();
 80013da:	f7ff fd6d 	bl	8000eb8 <print_pwr>
		HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, 2000);
 80013de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80013e2:	2203      	movs	r2, #3
 80013e4:	4908      	ldr	r1, [pc, #32]	; (8001408 <test_pwr+0x38>)
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <test_pwr+0x3c>)
 80013e8:	f004 fa59 	bl	800589e <HAL_UART_Receive>

		if (strcmp(UART1_rxBuffer, "qqq") == 0) {
 80013ec:	4908      	ldr	r1, [pc, #32]	; (8001410 <test_pwr+0x40>)
 80013ee:	4806      	ldr	r0, [pc, #24]	; (8001408 <test_pwr+0x38>)
 80013f0:	f7fe feae 	bl	8000150 <strcmp>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1ef      	bne.n	80013da <test_pwr+0xa>
			printf("Exiting `pwr` mode\r\n");
 80013fa:	4806      	ldr	r0, [pc, #24]	; (8001414 <test_pwr+0x44>)
 80013fc:	f005 ffac 	bl	8007358 <puts>
			return;
 8001400:	bf00      	nop

		}
	}


}
 8001402:	bd80      	pop	{r7, pc}
 8001404:	080085e8 	.word	0x080085e8
 8001408:	200006cc 	.word	0x200006cc
 800140c:	200005e0 	.word	0x200005e0
 8001410:	08008634 	.word	0x08008634
 8001414:	08008638 	.word	0x08008638

08001418 <test_sleep>:


// sleep mode implementation details from:
// https://controllerstech.com/low-power-modes-in-stm32/
void test_sleep(void) {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	printf("Entering sleep mode, press blue user button to awake. \r\n\r\n");
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <test_sleep+0x20>)
 800141e:	f005 ff9b 	bl	8007358 <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 8001422:	f001 f9b5 	bl	8002790 <HAL_SuspendTick>

	// enter sleep
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001426:	2101      	movs	r1, #1
 8001428:	2000      	movs	r0, #0
 800142a:	f002 fe23 	bl	8004074 <HAL_PWR_EnterSLEEPMode>

	// Any interrupt from NVIC will awake MCU, we use EXTI on blue button
	// After servicing that ISR, which re-enabled the HAL tick, we resume here where we left off

	printf("Awoke from sleep\r\n");
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <test_sleep+0x24>)
 8001430:	f005 ff92 	bl	8007358 <puts>

}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}
 8001438:	0800864c 	.word	0x0800864c
 800143c:	08008688 	.word	0x08008688

08001440 <test_stop>:

void test_stop(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
	printf("Entering stop mode, press blue user button to awake. \r\n\r\n");
 8001444:	4807      	ldr	r0, [pc, #28]	; (8001464 <test_stop+0x24>)
 8001446:	f005 ff87 	bl	8007358 <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 800144a:	f001 f9a1 	bl	8002790 <HAL_SuspendTick>

	// enter stop
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800144e:	2101      	movs	r1, #1
 8001450:	2001      	movs	r0, #1
 8001452:	f002 fe2b 	bl	80040ac <HAL_PWR_EnterSTOPMode>
	// Any interrupt from NVIC will awake MCU, we use EXTI on blue button
	// After servicing that ISR, which re-enabled the HAL tick, we resume here where we left off

	// Must reconfigure system clocks as they were disabled
	SystemClock_Config();
 8001456:	f000 f927 	bl	80016a8 <SystemClock_Config>

	printf("Awoke from sleep\r\n");
 800145a:	4803      	ldr	r0, [pc, #12]	; (8001468 <test_stop+0x28>)
 800145c:	f005 ff7c 	bl	8007358 <puts>

}
 8001460:	bf00      	nop
 8001462:	bd80      	pop	{r7, pc}
 8001464:	0800869c 	.word	0x0800869c
 8001468:	08008688 	.word	0x08008688

0800146c <test_standby>:

void test_standby(void) {
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
	printf("Entering standby mode, WKUP pin rising edge, RTC alarm, tamper event, NRST, or IWDG used to reset MCU. \r\n\r\n");
 8001470:	4807      	ldr	r0, [pc, #28]	; (8001490 <test_standby+0x24>)
 8001472:	f005 ff71 	bl	8007358 <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 8001476:	f001 f98b 	bl	8002790 <HAL_SuspendTick>

	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <test_standby+0x28>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <test_standby+0x28>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6013      	str	r3, [r2, #0]

	 // consider RTC or wakeup pin config if desired

	// enter standby
	// there is no recovery, think of standby as `shutdown` on a computer. The `wakeup` is a cpu reset
	HAL_PWR_EnterSTANDBYMode();
 8001486:	f002 fe43 	bl	8004110 <HAL_PWR_EnterSTANDBYMode>



}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	080086d8 	.word	0x080086d8
 8001494:	40007000 	.word	0x40007000

08001498 <read_cli>:
// CLI commands
// max, typ, min, pwr
void read_cli(void) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	71fb      	strb	r3, [r7, #7]
 80014a2:	e005      	b.n	80014b0 <read_cli+0x18>
		UART1_rxBuffer[0] = 0;
 80014a4:	4b35      	ldr	r3, [pc, #212]	; (800157c <read_cli+0xe4>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	3301      	adds	r3, #1
 80014ae:	71fb      	strb	r3, [r7, #7]
 80014b0:	79fb      	ldrb	r3, [r7, #7]
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d9f6      	bls.n	80014a4 <read_cli+0xc>
	}
	// need to type the command in the timeout
	while(HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, CLI_timeout_ms) != HAL_OK);
 80014b6:	bf00      	nop
 80014b8:	4b31      	ldr	r3, [pc, #196]	; (8001580 <read_cli+0xe8>)
 80014ba:	2203      	movs	r2, #3
 80014bc:	492f      	ldr	r1, [pc, #188]	; (800157c <read_cli+0xe4>)
 80014be:	4831      	ldr	r0, [pc, #196]	; (8001584 <read_cli+0xec>)
 80014c0:	f004 f9ed 	bl	800589e <HAL_UART_Receive>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f6      	bne.n	80014b8 <read_cli+0x20>
	printf("Your command: %s\r\n", UART1_rxBuffer);
 80014ca:	492c      	ldr	r1, [pc, #176]	; (800157c <read_cli+0xe4>)
 80014cc:	482e      	ldr	r0, [pc, #184]	; (8001588 <read_cli+0xf0>)
 80014ce:	f005 fedd 	bl	800728c <iprintf>

	if (strcmp(UART1_rxBuffer, "max") == 0) {
 80014d2:	492e      	ldr	r1, [pc, #184]	; (800158c <read_cli+0xf4>)
 80014d4:	4829      	ldr	r0, [pc, #164]	; (800157c <read_cli+0xe4>)
 80014d6:	f7fe fe3b 	bl	8000150 <strcmp>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <read_cli+0x4c>
		test_max();
 80014e0:	f7ff fe36 	bl	8001150 <test_max>

	}

	if (strcmp(UART1_rxBuffer, "typ") == 0) {
 80014e4:	492a      	ldr	r1, [pc, #168]	; (8001590 <read_cli+0xf8>)
 80014e6:	4825      	ldr	r0, [pc, #148]	; (800157c <read_cli+0xe4>)
 80014e8:	f7fe fe32 	bl	8000150 <strcmp>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d101      	bne.n	80014f6 <read_cli+0x5e>
		test_typ();
 80014f2:	f7ff ff27 	bl	8001344 <test_typ>
	}

	if (strcmp(UART1_rxBuffer, "min") == 0) {
 80014f6:	4927      	ldr	r1, [pc, #156]	; (8001594 <read_cli+0xfc>)
 80014f8:	4820      	ldr	r0, [pc, #128]	; (800157c <read_cli+0xe4>)
 80014fa:	f7fe fe29 	bl	8000150 <strcmp>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d101      	bne.n	8001508 <read_cli+0x70>
		test_min();
 8001504:	f7ff ff34 	bl	8001370 <test_min>

	}

	if (strcmp(UART1_rxBuffer, "pwr") == 0) {
 8001508:	4923      	ldr	r1, [pc, #140]	; (8001598 <read_cli+0x100>)
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <read_cli+0xe4>)
 800150c:	f7fe fe20 	bl	8000150 <strcmp>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <read_cli+0x82>
		test_pwr();
 8001516:	f7ff ff5b 	bl	80013d0 <test_pwr>

	}

	if (strcmp(UART1_rxBuffer, "ver") == 0) {
 800151a:	4920      	ldr	r1, [pc, #128]	; (800159c <read_cli+0x104>)
 800151c:	4817      	ldr	r0, [pc, #92]	; (800157c <read_cli+0xe4>)
 800151e:	f7fe fe17 	bl	8000150 <strcmp>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d101      	bne.n	800152c <read_cli+0x94>
		print_version();
 8001528:	f7ff fe08 	bl	800113c <print_version>

	}

	if (strcmp(UART1_rxBuffer, "hel") == 0) {
 800152c:	491c      	ldr	r1, [pc, #112]	; (80015a0 <read_cli+0x108>)
 800152e:	4813      	ldr	r0, [pc, #76]	; (800157c <read_cli+0xe4>)
 8001530:	f7fe fe0e 	bl	8000150 <strcmp>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <read_cli+0xa6>
		print_help();
 800153a:	f7ff fdc9 	bl	80010d0 <print_help>

	}

	if (strcmp(UART1_rxBuffer, "sle") == 0) {
 800153e:	4919      	ldr	r1, [pc, #100]	; (80015a4 <read_cli+0x10c>)
 8001540:	480e      	ldr	r0, [pc, #56]	; (800157c <read_cli+0xe4>)
 8001542:	f7fe fe05 	bl	8000150 <strcmp>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <read_cli+0xb8>
		test_sleep();
 800154c:	f7ff ff64 	bl	8001418 <test_sleep>

	}

	if (strcmp(UART1_rxBuffer, "sto") == 0) {
 8001550:	4915      	ldr	r1, [pc, #84]	; (80015a8 <read_cli+0x110>)
 8001552:	480a      	ldr	r0, [pc, #40]	; (800157c <read_cli+0xe4>)
 8001554:	f7fe fdfc 	bl	8000150 <strcmp>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <read_cli+0xca>
		test_stop();
 800155e:	f7ff ff6f 	bl	8001440 <test_stop>

	}

	if (strcmp(UART1_rxBuffer, "sta") == 0) {
 8001562:	4912      	ldr	r1, [pc, #72]	; (80015ac <read_cli+0x114>)
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <read_cli+0xe4>)
 8001566:	f7fe fdf3 	bl	8000150 <strcmp>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <read_cli+0xdc>
		test_standby();
 8001570:	f7ff ff7c 	bl	800146c <test_standby>

	}

}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200006cc 	.word	0x200006cc
 8001580:	000186a0 	.word	0x000186a0
 8001584:	200005e0 	.word	0x200005e0
 8001588:	08008744 	.word	0x08008744
 800158c:	08008758 	.word	0x08008758
 8001590:	0800875c 	.word	0x0800875c
 8001594:	08008760 	.word	0x08008760
 8001598:	08008764 	.word	0x08008764
 800159c:	08008768 	.word	0x08008768
 80015a0:	0800876c 	.word	0x0800876c
 80015a4:	08008770 	.word	0x08008770
 80015a8:	08008774 	.word	0x08008774
 80015ac:	08008778 	.word	0x08008778

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b6:	f001 f9ff 	bl	80029b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ba:	f000 f875 	bl	80016a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015be:	f000 fba9 	bl	8001d14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015c2:	f000 fb29 	bl	8001c18 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80015c6:	f000 f8c5 	bl	8001754 <MX_ADC1_Init>
  MX_ADC2_Init();
 80015ca:	f000 f901 	bl	80017d0 <MX_ADC2_Init>
  MX_CAN_Init();
 80015ce:	f000 f93d 	bl	800184c <MX_CAN_Init>
  MX_I2C1_Init();
 80015d2:	f000 f96f 	bl	80018b4 <MX_I2C1_Init>
  MX_I2C2_Init();
 80015d6:	f000 f99b 	bl	8001910 <MX_I2C2_Init>
  MX_SPI1_Init();
 80015da:	f000 f9c7 	bl	800196c <MX_SPI1_Init>
  MX_SPI2_Init();
 80015de:	f000 f9fb 	bl	80019d8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80015e2:	f000 fa2f 	bl	8001a44 <MX_TIM1_Init>
  MX_TIM2_Init();
 80015e6:	f000 fa7d 	bl	8001ae4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015ea:	f000 fac7 	bl	8001b7c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80015ee:	f000 fb3d 	bl	8001c6c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80015f2:	f000 fb65 	bl	8001cc0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  // above autogenerated code should not be modified, it will be overwritten on changes
  // for consistency, disable the non-typical periphrials
  HAL_ADC_DeInit(&hadc2);
 80015f6:	481d      	ldr	r0, [pc, #116]	; (800166c <main+0xbc>)
 80015f8:	f001 fb0c 	bl	8002c14 <HAL_ADC_DeInit>
  HAL_CAN_DeInit(&hcan);
 80015fc:	481c      	ldr	r0, [pc, #112]	; (8001670 <main+0xc0>)
 80015fe:	f002 f819 	bl	8003634 <HAL_CAN_DeInit>
  HAL_I2C_DeInit(&hi2c1);
 8001602:	481c      	ldr	r0, [pc, #112]	; (8001674 <main+0xc4>)
 8001604:	f002 fcfe 	bl	8004004 <HAL_I2C_DeInit>
  HAL_I2C_DeInit(&hi2c2);
 8001608:	481b      	ldr	r0, [pc, #108]	; (8001678 <main+0xc8>)
 800160a:	f002 fcfb 	bl	8004004 <HAL_I2C_DeInit>
  HAL_SPI_DeInit(&hspi1);
 800160e:	481b      	ldr	r0, [pc, #108]	; (800167c <main+0xcc>)
 8001610:	f003 fbc6 	bl	8004da0 <HAL_SPI_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8001614:	481a      	ldr	r0, [pc, #104]	; (8001680 <main+0xd0>)
 8001616:	f003 fbc3 	bl	8004da0 <HAL_SPI_DeInit>
  HAL_TIM_Base_DeInit(&htim1);
 800161a:	481a      	ldr	r0, [pc, #104]	; (8001684 <main+0xd4>)
 800161c:	f003 fc37 	bl	8004e8e <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim2);
 8001620:	4819      	ldr	r0, [pc, #100]	; (8001688 <main+0xd8>)
 8001622:	f003 fc34 	bl	8004e8e <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim3);
 8001626:	4819      	ldr	r0, [pc, #100]	; (800168c <main+0xdc>)
 8001628:	f003 fc31 	bl	8004e8e <HAL_TIM_Base_DeInit>
  HAL_UART_DeInit(&huart2);
 800162c:	4818      	ldr	r0, [pc, #96]	; (8001690 <main+0xe0>)
 800162e:	f004 f881 	bl	8005734 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart3);
 8001632:	4818      	ldr	r0, [pc, #96]	; (8001694 <main+0xe4>)
 8001634:	f004 f87e 	bl	8005734 <HAL_UART_DeInit>




  // display firmware version+build info
  printf("REV B April 1th, 2024\r\n\r\n");
 8001638:	4817      	ldr	r0, [pc, #92]	; (8001698 <main+0xe8>)
 800163a:	f005 fe8d 	bl	8007358 <puts>
  printf("Power Consumption CLI\r\n");
 800163e:	4817      	ldr	r0, [pc, #92]	; (800169c <main+0xec>)
 8001640:	f005 fe8a 	bl	8007358 <puts>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001644:	4b16      	ldr	r3, [pc, #88]	; (80016a0 <main+0xf0>)
 8001646:	1d3c      	adds	r4, r7, #4
 8001648:	461d      	mov	r5, r3
 800164a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800164c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800164e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f004 facc 	bl	8005bf8 <osThreadCreate>
 8001660:	4603      	mov	r3, r0
 8001662:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <main+0xf4>)
 8001664:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001666:	f004 fac0 	bl	8005bea <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  // should not get here
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0xba>
 800166c:	20000358 	.word	0x20000358
 8001670:	20000388 	.word	0x20000388
 8001674:	200003b0 	.word	0x200003b0
 8001678:	20000404 	.word	0x20000404
 800167c:	20000458 	.word	0x20000458
 8001680:	200004b0 	.word	0x200004b0
 8001684:	20000508 	.word	0x20000508
 8001688:	20000550 	.word	0x20000550
 800168c:	20000598 	.word	0x20000598
 8001690:	20000628 	.word	0x20000628
 8001694:	20000670 	.word	0x20000670
 8001698:	0800877c 	.word	0x0800877c
 800169c:	08008798 	.word	0x08008798
 80016a0:	080087bc 	.word	0x080087bc
 80016a4:	200006b8 	.word	0x200006b8

080016a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b094      	sub	sp, #80	; 0x50
 80016ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b2:	2228      	movs	r2, #40	; 0x28
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f005 ff2e 	bl	8007518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]
 80016c4:	605a      	str	r2, [r3, #4]
 80016c6:	609a      	str	r2, [r3, #8]
 80016c8:	60da      	str	r2, [r3, #12]
 80016ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016cc:	1d3b      	adds	r3, r7, #4
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016dc:	2301      	movs	r3, #1
 80016de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016e0:	2310      	movs	r3, #16
 80016e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
 80016e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016e8:	2300      	movs	r3, #0
 80016ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80016ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80016f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f6:	4618      	mov	r0, r3
 80016f8:	f002 fd22 	bl	8004140 <HAL_RCC_OscConfig>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001702:	f000 fb7b 	bl	8001dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001706:	230f      	movs	r3, #15
 8001708:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001716:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2100      	movs	r1, #0
 8001722:	4618      	mov	r0, r3
 8001724:	f002 ff8e 	bl	8004644 <HAL_RCC_ClockConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800172e:	f000 fb65 	bl	8001dfc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001732:	2302      	movs	r3, #2
 8001734:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	4618      	mov	r0, r3
 800173e:	f003 f93f 	bl	80049c0 <HAL_RCCEx_PeriphCLKConfig>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001748:	f000 fb58 	bl	8001dfc <Error_Handler>
  }
}
 800174c:	bf00      	nop
 800174e:	3750      	adds	r7, #80	; 0x50
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001764:	4b18      	ldr	r3, [pc, #96]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001766:	4a19      	ldr	r2, [pc, #100]	; (80017cc <MX_ADC1_Init+0x78>)
 8001768:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <MX_ADC1_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001770:	4b15      	ldr	r3, [pc, #84]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001776:	4b14      	ldr	r3, [pc, #80]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800177c:	4b12      	ldr	r3, [pc, #72]	; (80017c8 <MX_ADC1_Init+0x74>)
 800177e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001782:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001784:	4b10      	ldr	r3, [pc, #64]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001786:	2200      	movs	r2, #0
 8001788:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <MX_ADC1_Init+0x74>)
 800178c:	2201      	movs	r2, #1
 800178e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001790:	480d      	ldr	r0, [pc, #52]	; (80017c8 <MX_ADC1_Init+0x74>)
 8001792:	f001 f967 	bl	8002a64 <HAL_ADC_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800179c:	f000 fb2e 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80017a8:	2301      	movs	r3, #1
 80017aa:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_ADC1_Init+0x74>)
 80017b2:	f001 fcb1 	bl	8003118 <HAL_ADC_ConfigChannel>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80017bc:	f000 fb1e 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000328 	.word	0x20000328
 80017cc:	40012400 	.word	0x40012400

080017d0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
 80017de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80017e0:	4b18      	ldr	r3, [pc, #96]	; (8001844 <MX_ADC2_Init+0x74>)
 80017e2:	4a19      	ldr	r2, [pc, #100]	; (8001848 <MX_ADC2_Init+0x78>)
 80017e4:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80017e6:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_ADC2_Init+0x74>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80017ec:	4b15      	ldr	r3, [pc, #84]	; (8001844 <MX_ADC2_Init+0x74>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_ADC2_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017f8:	4b12      	ldr	r3, [pc, #72]	; (8001844 <MX_ADC2_Init+0x74>)
 80017fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80017fe:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001800:	4b10      	ldr	r3, [pc, #64]	; (8001844 <MX_ADC2_Init+0x74>)
 8001802:	2200      	movs	r2, #0
 8001804:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001806:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_ADC2_Init+0x74>)
 8001808:	2201      	movs	r2, #1
 800180a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800180c:	480d      	ldr	r0, [pc, #52]	; (8001844 <MX_ADC2_Init+0x74>)
 800180e:	f001 f929 	bl	8002a64 <HAL_ADC_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001818:	f000 faf0 	bl	8001dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800181c:	230f      	movs	r3, #15
 800181e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001820:	2301      	movs	r3, #1
 8001822:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001828:	1d3b      	adds	r3, r7, #4
 800182a:	4619      	mov	r1, r3
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <MX_ADC2_Init+0x74>)
 800182e:	f001 fc73 	bl	8003118 <HAL_ADC_ConfigChannel>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d001      	beq.n	800183c <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8001838:	f000 fae0 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000358 	.word	0x20000358
 8001848:	40012800 	.word	0x40012800

0800184c <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8001850:	4b16      	ldr	r3, [pc, #88]	; (80018ac <MX_CAN_Init+0x60>)
 8001852:	4a17      	ldr	r2, [pc, #92]	; (80018b0 <MX_CAN_Init+0x64>)
 8001854:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_CAN_Init+0x60>)
 8001858:	2210      	movs	r2, #16
 800185a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800185c:	4b13      	ldr	r3, [pc, #76]	; (80018ac <MX_CAN_Init+0x60>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001862:	4b12      	ldr	r3, [pc, #72]	; (80018ac <MX_CAN_Init+0x60>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001868:	4b10      	ldr	r3, [pc, #64]	; (80018ac <MX_CAN_Init+0x60>)
 800186a:	2200      	movs	r2, #0
 800186c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <MX_CAN_Init+0x60>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8001874:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <MX_CAN_Init+0x60>)
 8001876:	2200      	movs	r2, #0
 8001878:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <MX_CAN_Init+0x60>)
 800187c:	2200      	movs	r2, #0
 800187e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001880:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <MX_CAN_Init+0x60>)
 8001882:	2200      	movs	r2, #0
 8001884:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <MX_CAN_Init+0x60>)
 8001888:	2200      	movs	r2, #0
 800188a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <MX_CAN_Init+0x60>)
 800188e:	2200      	movs	r2, #0
 8001890:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <MX_CAN_Init+0x60>)
 8001894:	2200      	movs	r2, #0
 8001896:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001898:	4804      	ldr	r0, [pc, #16]	; (80018ac <MX_CAN_Init+0x60>)
 800189a:	f001 fdd0 	bl	800343e <HAL_CAN_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80018a4:	f000 faaa 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000388 	.word	0x20000388
 80018b0:	40006400 	.word	0x40006400

080018b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_I2C1_Init+0x50>)
 80018ba:	4a13      	ldr	r2, [pc, #76]	; (8001908 <MX_I2C1_Init+0x54>)
 80018bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_I2C1_Init+0x50>)
 80018c0:	4a12      	ldr	r2, [pc, #72]	; (800190c <MX_I2C1_Init+0x58>)
 80018c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_I2C1_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_I2C1_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_I2C1_Init+0x50>)
 80018d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_I2C1_Init+0x50>)
 80018da:	2200      	movs	r2, #0
 80018dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_I2C1_Init+0x50>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_I2C1_Init+0x50>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_I2C1_Init+0x50>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_I2C1_Init+0x50>)
 80018f2:	f002 fa43 	bl	8003d7c <HAL_I2C_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018fc:	f000 fa7e 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200003b0 	.word	0x200003b0
 8001908:	40005400 	.word	0x40005400
 800190c:	000186a0 	.word	0x000186a0

08001910 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_I2C2_Init+0x50>)
 8001916:	4a13      	ldr	r2, [pc, #76]	; (8001964 <MX_I2C2_Init+0x54>)
 8001918:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_I2C2_Init+0x50>)
 800191c:	4a12      	ldr	r2, [pc, #72]	; (8001968 <MX_I2C2_Init+0x58>)
 800191e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_I2C2_Init+0x50>)
 8001922:	2200      	movs	r2, #0
 8001924:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_I2C2_Init+0x50>)
 8001928:	2200      	movs	r2, #0
 800192a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_I2C2_Init+0x50>)
 800192e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001932:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001934:	4b0a      	ldr	r3, [pc, #40]	; (8001960 <MX_I2C2_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <MX_I2C2_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <MX_I2C2_Init+0x50>)
 8001942:	2200      	movs	r2, #0
 8001944:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <MX_I2C2_Init+0x50>)
 8001948:	2200      	movs	r2, #0
 800194a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800194c:	4804      	ldr	r0, [pc, #16]	; (8001960 <MX_I2C2_Init+0x50>)
 800194e:	f002 fa15 	bl	8003d7c <HAL_I2C_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001958:	f000 fa50 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20000404 	.word	0x20000404
 8001964:	40005800 	.word	0x40005800
 8001968:	000186a0 	.word	0x000186a0

0800196c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001970:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001972:	4a18      	ldr	r2, [pc, #96]	; (80019d4 <MX_SPI1_Init+0x68>)
 8001974:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001976:	4b16      	ldr	r3, [pc, #88]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800197c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001980:	2200      	movs	r2, #0
 8001982:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001986:	2200      	movs	r2, #0
 8001988:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_SPI1_Init+0x64>)
 800198c:	2200      	movs	r2, #0
 800198e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001992:	2200      	movs	r2, #0
 8001994:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001996:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <MX_SPI1_Init+0x64>)
 8001998:	f44f 7200 	mov.w	r2, #512	; 0x200
 800199c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800199e:	4b0c      	ldr	r3, [pc, #48]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019a4:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019aa:	4b09      	ldr	r3, [pc, #36]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019b0:	4b07      	ldr	r3, [pc, #28]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019b8:	220a      	movs	r2, #10
 80019ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019bc:	4804      	ldr	r0, [pc, #16]	; (80019d0 <MX_SPI1_Init+0x64>)
 80019be:	f003 f96b 	bl	8004c98 <HAL_SPI_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019c8:	f000 fa18 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019cc:	bf00      	nop
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	20000458 	.word	0x20000458
 80019d4:	40013000 	.word	0x40013000

080019d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019dc:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019de:	4a18      	ldr	r2, [pc, #96]	; (8001a40 <MX_SPI2_Init+0x68>)
 80019e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019e2:	4b16      	ldr	r3, [pc, #88]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019ea:	4b14      	ldr	r3, [pc, #80]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80019f0:	4b12      	ldr	r3, [pc, #72]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019fc:	4b0f      	ldr	r3, [pc, #60]	; (8001a3c <MX_SPI2_Init+0x64>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001a02:	4b0e      	ldr	r3, [pc, #56]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a04:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a0a:	4b0c      	ldr	r3, [pc, #48]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a16:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a1c:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001a22:	4b06      	ldr	r3, [pc, #24]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a24:	220a      	movs	r2, #10
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a28:	4804      	ldr	r0, [pc, #16]	; (8001a3c <MX_SPI2_Init+0x64>)
 8001a2a:	f003 f935 	bl	8004c98 <HAL_SPI_Init>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001a34:	f000 f9e2 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	200004b0 	.word	0x200004b0
 8001a40:	40003800 	.word	0x40003800

08001a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a4a:	f107 0308 	add.w	r3, r7, #8
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a58:	463b      	mov	r3, r7
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a60:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a62:	4a1f      	ldr	r2, [pc, #124]	; (8001ae0 <MX_TIM1_Init+0x9c>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a66:	4b1d      	ldr	r3, [pc, #116]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6c:	4b1b      	ldr	r3, [pc, #108]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a72:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7a:	4b18      	ldr	r3, [pc, #96]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a88:	2280      	movs	r2, #128	; 0x80
 8001a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8c:	4813      	ldr	r0, [pc, #76]	; (8001adc <MX_TIM1_Init+0x98>)
 8001a8e:	f003 f9af 	bl	8004df0 <HAL_TIM_Base_Init>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a98:	f000 f9b0 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_TIM1_Init+0x98>)
 8001aaa:	f003 fb9f 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001ab4:	f000 f9a2 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ac0:	463b      	mov	r3, r7
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4805      	ldr	r0, [pc, #20]	; (8001adc <MX_TIM1_Init+0x98>)
 8001ac6:	f003 fd75 	bl	80055b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ad0:	f000 f994 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001ad4:	bf00      	nop
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000508 	.word	0x20000508
 8001ae0:	40012c00 	.word	0x40012c00

08001ae4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aea:	f107 0308 	add.w	r3, r7, #8
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af8:	463b      	mov	r3, r7
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
 8001afe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b00:	4b1d      	ldr	r3, [pc, #116]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b08:	4b1b      	ldr	r3, [pc, #108]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0e:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b1c:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b22:	4b15      	ldr	r3, [pc, #84]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b24:	2280      	movs	r2, #128	; 0x80
 8001b26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b28:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b2a:	f003 f961 	bl	8004df0 <HAL_TIM_Base_Init>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b34:	f000 f962 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4619      	mov	r1, r3
 8001b44:	480c      	ldr	r0, [pc, #48]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b46:	f003 fb51 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b50:	f000 f954 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4805      	ldr	r0, [pc, #20]	; (8001b78 <MX_TIM2_Init+0x94>)
 8001b62:	f003 fd27 	bl	80055b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b6c:	f000 f946 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b70:	bf00      	nop
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000550 	.word	0x20000550

08001b7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b82:	f107 0308 	add.w	r3, r7, #8
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
 8001b8a:	605a      	str	r2, [r3, #4]
 8001b8c:	609a      	str	r2, [r3, #8]
 8001b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b98:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001b9a:	4a1e      	ldr	r2, [pc, #120]	; (8001c14 <MX_TIM3_Init+0x98>)
 8001b9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b9e:	4b1c      	ldr	r3, [pc, #112]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001baa:	4b19      	ldr	r3, [pc, #100]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb2:	4b17      	ldr	r3, [pc, #92]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bb8:	4b15      	ldr	r3, [pc, #84]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bba:	2280      	movs	r2, #128	; 0x80
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bbe:	4814      	ldr	r0, [pc, #80]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bc0:	f003 f916 	bl	8004df0 <HAL_TIM_Base_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001bca:	f000 f917 	bl	8001dfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bd4:	f107 0308 	add.w	r3, r7, #8
 8001bd8:	4619      	mov	r1, r3
 8001bda:	480d      	ldr	r0, [pc, #52]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bdc:	f003 fb06 	bl	80051ec <HAL_TIM_ConfigClockSource>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001be6:	f000 f909 	bl	8001dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4806      	ldr	r0, [pc, #24]	; (8001c10 <MX_TIM3_Init+0x94>)
 8001bf8:	f003 fcdc 	bl	80055b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001c02:	f000 f8fb 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c06:	bf00      	nop
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	20000598 	.word	0x20000598
 8001c14:	40000400 	.word	0x40000400

08001c18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c1e:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <MX_USART1_UART_Init+0x50>)
 8001c20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c30:	4b0c      	ldr	r3, [pc, #48]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c3c:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c3e:	220c      	movs	r2, #12
 8001c40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c4e:	4805      	ldr	r0, [pc, #20]	; (8001c64 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f003 fd20 	bl	8005694 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c5a:	f000 f8cf 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c5e:	bf00      	nop
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200005e0 	.word	0x200005e0
 8001c68:	40013800 	.word	0x40013800

08001c6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_USART2_UART_Init+0x50>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	f003 fcf6 	bl	8005694 <HAL_UART_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cae:	f000 f8a5 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000628 	.word	0x20000628
 8001cbc:	40004400 	.word	0x40004400

08001cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART3_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART3_UART_Init+0x4c>)
 8001cf8:	f003 fccc 	bl	8005694 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f000 f87b 	bl	8001dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000670 	.word	0x20000670
 8001d10:	40004800 	.word	0x40004800

08001d14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b088      	sub	sp, #32
 8001d18:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	2200      	movs	r2, #0
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	605a      	str	r2, [r3, #4]
 8001d24:	609a      	str	r2, [r3, #8]
 8001d26:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	4a23      	ldr	r2, [pc, #140]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d2e:	f043 0310 	orr.w	r3, r3, #16
 8001d32:	6193      	str	r3, [r2, #24]
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d42:	699b      	ldr	r3, [r3, #24]
 8001d44:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d46:	f043 0320 	orr.w	r3, r3, #32
 8001d4a:	6193      	str	r3, [r2, #24]
 8001d4c:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	f003 0320 	and.w	r3, r3, #32
 8001d54:	60bb      	str	r3, [r7, #8]
 8001d56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d58:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d5a:	699b      	ldr	r3, [r3, #24]
 8001d5c:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d5e:	f043 0304 	orr.w	r3, r3, #4
 8001d62:	6193      	str	r3, [r2, #24]
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	607b      	str	r3, [r7, #4]
 8001d6e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d70:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d76:	f043 0308 	orr.w	r3, r3, #8
 8001d7a:	6193      	str	r3, [r2, #24]
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <MX_GPIO_Init+0xa8>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	603b      	str	r3, [r7, #0]
 8001d86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d8e:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <MX_GPIO_Init+0xac>)
 8001d90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d96:	f107 0310 	add.w	r3, r7, #16
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4809      	ldr	r0, [pc, #36]	; (8001dc4 <MX_GPIO_Init+0xb0>)
 8001d9e:	f001 fd95 	bl	80038cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001da2:	2200      	movs	r2, #0
 8001da4:	2105      	movs	r1, #5
 8001da6:	2028      	movs	r0, #40	; 0x28
 8001da8:	f001 fd65 	bl	8003876 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001dac:	2028      	movs	r0, #40	; 0x28
 8001dae:	f001 fd7e 	bl	80038ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001db2:	bf00      	nop
 8001db4:	3720      	adds	r7, #32
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	10110000 	.word	0x10110000
 8001dc4:	40011000 	.word	0x40011000

08001dc8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  read_cli();
 8001dd0:	f7ff fb62 	bl	8001498 <read_cli>
 8001dd4:	e7fc      	b.n	8001dd0 <StartDefaultTask+0x8>
	...

08001dd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a04      	ldr	r2, [pc, #16]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001dea:	f000 fdfb 	bl	80029e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001dee:	bf00      	nop
 8001df0:	3708      	adds	r7, #8
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	40000800 	.word	0x40000800

08001dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e00:	b672      	cpsid	i
}
 8001e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Bricked");
 8001e04:	4803      	ldr	r0, [pc, #12]	; (8001e14 <Error_Handler+0x18>)
 8001e06:	f005 fa41 	bl	800728c <iprintf>
	  HAL_Delay(1000);
 8001e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e0e:	f000 fe05 	bl	8002a1c <HAL_Delay>
	  printf("Bricked");
 8001e12:	e7f7      	b.n	8001e04 <Error_Handler+0x8>
 8001e14:	080087d8 	.word	0x080087d8

08001e18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b084      	sub	sp, #16
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e1e:	4b18      	ldr	r3, [pc, #96]	; (8001e80 <HAL_MspInit+0x68>)
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <HAL_MspInit+0x68>)
 8001e24:	f043 0301 	orr.w	r3, r3, #1
 8001e28:	6193      	str	r3, [r2, #24]
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <HAL_MspInit+0x68>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	60bb      	str	r3, [r7, #8]
 8001e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <HAL_MspInit+0x68>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <HAL_MspInit+0x68>)
 8001e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_MspInit+0x68>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4a:	607b      	str	r3, [r7, #4]
 8001e4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	210f      	movs	r1, #15
 8001e52:	f06f 0001 	mvn.w	r0, #1
 8001e56:	f001 fd0e 	bl	8003876 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_MspInit+0x6c>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4a04      	ldr	r2, [pc, #16]	; (8001e84 <HAL_MspInit+0x6c>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a28      	ldr	r2, [pc, #160]	; (8001f44 <HAL_ADC_MspInit+0xbc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d122      	bne.n	8001eee <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea8:	4b27      	ldr	r3, [pc, #156]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a26      	ldr	r2, [pc, #152]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
 8001ebe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a20      	ldr	r2, [pc, #128]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001edc:	2303      	movs	r3, #3
 8001ede:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0318 	add.w	r3, r7, #24
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4819      	ldr	r0, [pc, #100]	; (8001f4c <HAL_ADC_MspInit+0xc4>)
 8001ee8:	f001 fcf0 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001eec:	e026      	b.n	8001f3c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a17      	ldr	r2, [pc, #92]	; (8001f50 <HAL_ADC_MspInit+0xc8>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d121      	bne.n	8001f3c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	4a12      	ldr	r2, [pc, #72]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f02:	6193      	str	r3, [r2, #24]
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	60fb      	str	r3, [r7, #12]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f10:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	4a0c      	ldr	r2, [pc, #48]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001f16:	f043 0310 	orr.w	r3, r3, #16
 8001f1a:	6193      	str	r3, [r2, #24]
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_ADC_MspInit+0xc0>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	f003 0310 	and.w	r3, r3, #16
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f30:	f107 0318 	add.w	r3, r7, #24
 8001f34:	4619      	mov	r1, r3
 8001f36:	4807      	ldr	r0, [pc, #28]	; (8001f54 <HAL_ADC_MspInit+0xcc>)
 8001f38:	f001 fcc8 	bl	80038cc <HAL_GPIO_Init>
}
 8001f3c:	bf00      	nop
 8001f3e:	3728      	adds	r7, #40	; 0x28
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40012400 	.word	0x40012400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010800 	.word	0x40010800
 8001f50:	40012800 	.word	0x40012800
 8001f54:	40011000 	.word	0x40011000

08001f58 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <HAL_ADC_MspDeInit+0x50>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d10a      	bne.n	8001f80 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <HAL_ADC_MspDeInit+0x54>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <HAL_ADC_MspDeInit+0x54>)
 8001f70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001f74:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001f76:	2103      	movs	r1, #3
 8001f78:	480d      	ldr	r0, [pc, #52]	; (8001fb0 <HAL_ADC_MspDeInit+0x58>)
 8001f7a:	f001 fe2b 	bl	8003bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001f7e:	e00e      	b.n	8001f9e <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <HAL_ADC_MspDeInit+0x5c>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d109      	bne.n	8001f9e <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_ADC_MspDeInit+0x54>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4a07      	ldr	r2, [pc, #28]	; (8001fac <HAL_ADC_MspDeInit+0x54>)
 8001f90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001f94:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8001f96:	2120      	movs	r1, #32
 8001f98:	4807      	ldr	r0, [pc, #28]	; (8001fb8 <HAL_ADC_MspDeInit+0x60>)
 8001f9a:	f001 fe1b 	bl	8003bd4 <HAL_GPIO_DeInit>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40012400 	.word	0x40012400
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	40010800 	.word	0x40010800
 8001fb4:	40012800 	.word	0x40012800
 8001fb8:	40011000 	.word	0x40011000

08001fbc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b08a      	sub	sp, #40	; 0x28
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc4:	f107 0314 	add.w	r3, r7, #20
 8001fc8:	2200      	movs	r2, #0
 8001fca:	601a      	str	r2, [r3, #0]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	609a      	str	r2, [r3, #8]
 8001fd0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_CAN_MspInit+0xb0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d143      	bne.n	8002064 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001fdc:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	4a23      	ldr	r2, [pc, #140]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8001fe2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	61d3      	str	r3, [r2, #28]
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	613b      	str	r3, [r7, #16]
 8001ff2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8001ff6:	699b      	ldr	r3, [r3, #24]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8001ffa:	f043 0308 	orr.w	r3, r3, #8
 8001ffe:	6193      	str	r3, [r2, #24]
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <HAL_CAN_MspInit+0xb4>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800200c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002012:	2300      	movs	r3, #0
 8002014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002016:	2300      	movs	r3, #0
 8002018:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800201a:	f107 0314 	add.w	r3, r7, #20
 800201e:	4619      	mov	r1, r3
 8002020:	4814      	ldr	r0, [pc, #80]	; (8002074 <HAL_CAN_MspInit+0xb8>)
 8002022:	f001 fc53 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800202a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202c:	2302      	movs	r3, #2
 800202e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002030:	2303      	movs	r3, #3
 8002032:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 0314 	add.w	r3, r7, #20
 8002038:	4619      	mov	r1, r3
 800203a:	480e      	ldr	r0, [pc, #56]	; (8002074 <HAL_CAN_MspInit+0xb8>)
 800203c:	f001 fc46 	bl	80038cc <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8002040:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_CAN_MspInit+0xbc>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	627b      	str	r3, [r7, #36]	; 0x24
 8002046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002048:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
 800205e:	4a06      	ldr	r2, [pc, #24]	; (8002078 <HAL_CAN_MspInit+0xbc>)
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002064:	bf00      	nop
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40006400 	.word	0x40006400
 8002070:	40021000 	.word	0x40021000
 8002074:	40010c00 	.word	0x40010c00
 8002078:	40010000 	.word	0x40010000

0800207c <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a08      	ldr	r2, [pc, #32]	; (80020ac <HAL_CAN_MspDeInit+0x30>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d10a      	bne.n	80020a4 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_CAN_MspDeInit+0x34>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	4a07      	ldr	r2, [pc, #28]	; (80020b0 <HAL_CAN_MspDeInit+0x34>)
 8002094:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8002098:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 800209a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800209e:	4805      	ldr	r0, [pc, #20]	; (80020b4 <HAL_CAN_MspDeInit+0x38>)
 80020a0:	f001 fd98 	bl	8003bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 80020a4:	bf00      	nop
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40006400 	.word	0x40006400
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010c00 	.word	0x40010c00

080020b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2b      	ldr	r2, [pc, #172]	; (8002180 <HAL_I2C_MspInit+0xc8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d124      	bne.n	8002122 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a29      	ldr	r2, [pc, #164]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 80020de:	f043 0308 	orr.w	r3, r3, #8
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b27      	ldr	r3, [pc, #156]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f003 0308 	and.w	r3, r3, #8
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020f0:	23c0      	movs	r3, #192	; 0xc0
 80020f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f4:	2312      	movs	r3, #18
 80020f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020fc:	f107 0318 	add.w	r3, r7, #24
 8002100:	4619      	mov	r1, r3
 8002102:	4821      	ldr	r0, [pc, #132]	; (8002188 <HAL_I2C_MspInit+0xd0>)
 8002104:	f001 fbe2 	bl	80038cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002108:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 800210e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002112:	61d3      	str	r3, [r2, #28]
 8002114:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 8002116:	69db      	ldr	r3, [r3, #28]
 8002118:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002120:	e029      	b.n	8002176 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_I2C_MspInit+0xd4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d124      	bne.n	8002176 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a14      	ldr	r2, [pc, #80]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 8002132:	f043 0308 	orr.w	r3, r3, #8
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0308 	and.w	r3, r3, #8
 8002140:	60fb      	str	r3, [r7, #12]
 8002142:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002144:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800214a:	2312      	movs	r3, #18
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002152:	f107 0318 	add.w	r3, r7, #24
 8002156:	4619      	mov	r1, r3
 8002158:	480b      	ldr	r0, [pc, #44]	; (8002188 <HAL_I2C_MspInit+0xd0>)
 800215a:	f001 fbb7 	bl	80038cc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800215e:	4b09      	ldr	r3, [pc, #36]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	4a08      	ldr	r2, [pc, #32]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 8002164:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002168:	61d3      	str	r3, [r2, #28]
 800216a:	4b06      	ldr	r3, [pc, #24]	; (8002184 <HAL_I2C_MspInit+0xcc>)
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
}
 8002176:	bf00      	nop
 8002178:	3728      	adds	r7, #40	; 0x28
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	40005400 	.word	0x40005400
 8002184:	40021000 	.word	0x40021000
 8002188:	40010c00 	.word	0x40010c00
 800218c:	40005800 	.word	0x40005800

08002190 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_I2C_MspDeInit+0x64>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d10e      	bne.n	80021c0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80021a2:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021a4:	69db      	ldr	r3, [r3, #28]
 80021a6:	4a14      	ldr	r2, [pc, #80]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80021ac:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 80021ae:	2140      	movs	r1, #64	; 0x40
 80021b0:	4812      	ldr	r0, [pc, #72]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021b2:	f001 fd0f 	bl	8003bd4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	4810      	ldr	r0, [pc, #64]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021ba:	f001 fd0b 	bl	8003bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80021be:	e014      	b.n	80021ea <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_I2C_MspDeInit+0x70>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d10f      	bne.n	80021ea <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80021ca:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	4a0a      	ldr	r2, [pc, #40]	; (80021f8 <HAL_I2C_MspDeInit+0x68>)
 80021d0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021d4:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80021d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021da:	4808      	ldr	r0, [pc, #32]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021dc:	f001 fcfa 	bl	8003bd4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80021e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <HAL_I2C_MspDeInit+0x6c>)
 80021e6:	f001 fcf5 	bl	8003bd4 <HAL_GPIO_DeInit>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40005400 	.word	0x40005400
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40010c00 	.word	0x40010c00
 8002200:	40005800 	.word	0x40005800

08002204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08a      	sub	sp, #40	; 0x28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 0318 	add.w	r3, r7, #24
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a37      	ldr	r2, [pc, #220]	; (80022fc <HAL_SPI_MspInit+0xf8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d130      	bne.n	8002286 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002224:	4b36      	ldr	r3, [pc, #216]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 800222a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800222e:	6193      	str	r3, [r2, #24]
 8002230:	4b33      	ldr	r3, [pc, #204]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	617b      	str	r3, [r7, #20]
 800223a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	4a2f      	ldr	r2, [pc, #188]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 8002242:	f043 0304 	orr.w	r3, r3, #4
 8002246:	6193      	str	r3, [r2, #24]
 8002248:	4b2d      	ldr	r3, [pc, #180]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 800224a:	699b      	ldr	r3, [r3, #24]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002254:	23a0      	movs	r3, #160	; 0xa0
 8002256:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800225c:	2303      	movs	r3, #3
 800225e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4619      	mov	r1, r3
 8002266:	4827      	ldr	r0, [pc, #156]	; (8002304 <HAL_SPI_MspInit+0x100>)
 8002268:	f001 fb30 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002278:	f107 0318 	add.w	r3, r7, #24
 800227c:	4619      	mov	r1, r3
 800227e:	4821      	ldr	r0, [pc, #132]	; (8002304 <HAL_SPI_MspInit+0x100>)
 8002280:	f001 fb24 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002284:	e036      	b.n	80022f4 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a1f      	ldr	r2, [pc, #124]	; (8002308 <HAL_SPI_MspInit+0x104>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d131      	bne.n	80022f4 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	4a1a      	ldr	r2, [pc, #104]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 8002296:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229a:	61d3      	str	r3, [r2, #28]
 800229c:	4b18      	ldr	r3, [pc, #96]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022a4:	60fb      	str	r3, [r7, #12]
 80022a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a8:	4b15      	ldr	r3, [pc, #84]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a14      	ldr	r2, [pc, #80]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 80022ae:	f043 0308 	orr.w	r3, r3, #8
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_SPI_MspInit+0xfc>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0308 	and.w	r3, r3, #8
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80022c0:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80022c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ce:	f107 0318 	add.w	r3, r7, #24
 80022d2:	4619      	mov	r1, r3
 80022d4:	480d      	ldr	r0, [pc, #52]	; (800230c <HAL_SPI_MspInit+0x108>)
 80022d6:	f001 faf9 	bl	80038cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80022da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e4:	2300      	movs	r3, #0
 80022e6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	4619      	mov	r1, r3
 80022ee:	4807      	ldr	r0, [pc, #28]	; (800230c <HAL_SPI_MspInit+0x108>)
 80022f0:	f001 faec 	bl	80038cc <HAL_GPIO_Init>
}
 80022f4:	bf00      	nop
 80022f6:	3728      	adds	r7, #40	; 0x28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40013000 	.word	0x40013000
 8002300:	40021000 	.word	0x40021000
 8002304:	40010800 	.word	0x40010800
 8002308:	40003800 	.word	0x40003800
 800230c:	40010c00 	.word	0x40010c00

08002310 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_SPI_MspDeInit+0x50>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d10a      	bne.n	8002338 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002322:	4b10      	ldr	r3, [pc, #64]	; (8002364 <HAL_SPI_MspDeInit+0x54>)
 8002324:	699b      	ldr	r3, [r3, #24]
 8002326:	4a0f      	ldr	r2, [pc, #60]	; (8002364 <HAL_SPI_MspDeInit+0x54>)
 8002328:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800232c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800232e:	21e0      	movs	r1, #224	; 0xe0
 8002330:	480d      	ldr	r0, [pc, #52]	; (8002368 <HAL_SPI_MspDeInit+0x58>)
 8002332:	f001 fc4f 	bl	8003bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002336:	e00f      	b.n	8002358 <HAL_SPI_MspDeInit+0x48>
  else if(hspi->Instance==SPI2)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0b      	ldr	r2, [pc, #44]	; (800236c <HAL_SPI_MspDeInit+0x5c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d10a      	bne.n	8002358 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_SPI_MspDeInit+0x54>)
 8002344:	69db      	ldr	r3, [r3, #28]
 8002346:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_SPI_MspDeInit+0x54>)
 8002348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800234c:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 800234e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8002352:	4807      	ldr	r0, [pc, #28]	; (8002370 <HAL_SPI_MspDeInit+0x60>)
 8002354:	f001 fc3e 	bl	8003bd4 <HAL_GPIO_DeInit>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40013000 	.word	0x40013000
 8002364:	40021000 	.word	0x40021000
 8002368:	40010800 	.word	0x40010800
 800236c:	40003800 	.word	0x40003800
 8002370:	40010c00 	.word	0x40010c00

08002374 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a1b      	ldr	r2, [pc, #108]	; (80023f0 <HAL_TIM_Base_MspInit+0x7c>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10c      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002386:	4b1b      	ldr	r3, [pc, #108]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	4a1a      	ldr	r2, [pc, #104]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 800238c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002390:	6193      	str	r3, [r2, #24]
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 8002394:	699b      	ldr	r3, [r3, #24]
 8002396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800239a:	617b      	str	r3, [r7, #20]
 800239c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800239e:	e022      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a8:	d10c      	bne.n	80023c4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	4a11      	ldr	r2, [pc, #68]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	61d3      	str	r3, [r2, #28]
 80023b6:	4b0f      	ldr	r3, [pc, #60]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
}
 80023c2:	e010      	b.n	80023e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0b      	ldr	r2, [pc, #44]	; (80023f8 <HAL_TIM_Base_MspInit+0x84>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d10b      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023ce:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a08      	ldr	r2, [pc, #32]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b06      	ldr	r3, [pc, #24]	; (80023f4 <HAL_TIM_Base_MspInit+0x80>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
}
 80023e6:	bf00      	nop
 80023e8:	371c      	adds	r7, #28
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bc80      	pop	{r7}
 80023ee:	4770      	bx	lr
 80023f0:	40012c00 	.word	0x40012c00
 80023f4:	40021000 	.word	0x40021000
 80023f8:	40000400 	.word	0x40000400

080023fc <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a12      	ldr	r2, [pc, #72]	; (8002454 <HAL_TIM_Base_MspDeInit+0x58>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d106      	bne.n	800241c <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	4a11      	ldr	r2, [pc, #68]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002414:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002418:	6193      	str	r3, [r2, #24]
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 800241a:	e016      	b.n	800244a <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002424:	d106      	bne.n	8002434 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a0b      	ldr	r2, [pc, #44]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 800242c:	f023 0301 	bic.w	r3, r3, #1
 8002430:	61d3      	str	r3, [r2, #28]
}
 8002432:	e00a      	b.n	800244a <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_TIM_Base_MspDeInit+0x60>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d105      	bne.n	800244a <HAL_TIM_Base_MspDeInit+0x4e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	4a05      	ldr	r2, [pc, #20]	; (8002458 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002444:	f023 0302 	bic.w	r3, r3, #2
 8002448:	61d3      	str	r3, [r2, #28]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40000400 	.word	0x40000400

08002460 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b08e      	sub	sp, #56	; 0x38
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
 8002470:	605a      	str	r2, [r3, #4]
 8002472:	609a      	str	r2, [r3, #8]
 8002474:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a5c      	ldr	r2, [pc, #368]	; (80025ec <HAL_UART_MspInit+0x18c>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d132      	bne.n	80024e6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002480:	4b5b      	ldr	r3, [pc, #364]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a5a      	ldr	r2, [pc, #360]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b58      	ldr	r3, [pc, #352]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b55      	ldr	r3, [pc, #340]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a54      	ldr	r2, [pc, #336]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b52      	ldr	r3, [pc, #328]	; (80025f0 <HAL_UART_MspInit+0x190>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	61fb      	str	r3, [r7, #28]
 80024ae:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80024b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ba:	2303      	movs	r3, #3
 80024bc:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024c2:	4619      	mov	r1, r3
 80024c4:	484b      	ldr	r0, [pc, #300]	; (80025f4 <HAL_UART_MspInit+0x194>)
 80024c6:	f001 fa01 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d4:	2300      	movs	r3, #0
 80024d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4845      	ldr	r0, [pc, #276]	; (80025f4 <HAL_UART_MspInit+0x194>)
 80024e0:	f001 f9f4 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80024e4:	e07e      	b.n	80025e4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a43      	ldr	r2, [pc, #268]	; (80025f8 <HAL_UART_MspInit+0x198>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d130      	bne.n	8002552 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024f0:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_UART_MspInit+0x190>)
 80024f2:	69db      	ldr	r3, [r3, #28]
 80024f4:	4a3e      	ldr	r2, [pc, #248]	; (80025f0 <HAL_UART_MspInit+0x190>)
 80024f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024fa:	61d3      	str	r3, [r2, #28]
 80024fc:	4b3c      	ldr	r3, [pc, #240]	; (80025f0 <HAL_UART_MspInit+0x190>)
 80024fe:	69db      	ldr	r3, [r3, #28]
 8002500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002504:	61bb      	str	r3, [r7, #24]
 8002506:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	4b39      	ldr	r3, [pc, #228]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	4a38      	ldr	r2, [pc, #224]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800250e:	f043 0304 	orr.w	r3, r3, #4
 8002512:	6193      	str	r3, [r2, #24]
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	f003 0304 	and.w	r3, r3, #4
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002520:	2304      	movs	r3, #4
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002524:	2302      	movs	r3, #2
 8002526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002528:	2303      	movs	r3, #3
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002530:	4619      	mov	r1, r3
 8002532:	4830      	ldr	r0, [pc, #192]	; (80025f4 <HAL_UART_MspInit+0x194>)
 8002534:	f001 f9ca 	bl	80038cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002538:	2308      	movs	r3, #8
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253c:	2300      	movs	r3, #0
 800253e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002548:	4619      	mov	r1, r3
 800254a:	482a      	ldr	r0, [pc, #168]	; (80025f4 <HAL_UART_MspInit+0x194>)
 800254c:	f001 f9be 	bl	80038cc <HAL_GPIO_Init>
}
 8002550:	e048      	b.n	80025e4 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a29      	ldr	r2, [pc, #164]	; (80025fc <HAL_UART_MspInit+0x19c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d143      	bne.n	80025e4 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 800255c:	4b24      	ldr	r3, [pc, #144]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800255e:	69db      	ldr	r3, [r3, #28]
 8002560:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002566:	61d3      	str	r3, [r2, #28]
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002574:	4b1e      	ldr	r3, [pc, #120]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002576:	699b      	ldr	r3, [r3, #24]
 8002578:	4a1d      	ldr	r2, [pc, #116]	; (80025f0 <HAL_UART_MspInit+0x190>)
 800257a:	f043 0310 	orr.w	r3, r3, #16
 800257e:	6193      	str	r3, [r2, #24]
 8002580:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_UART_MspInit+0x190>)
 8002582:	699b      	ldr	r3, [r3, #24]
 8002584:	f003 0310 	and.w	r3, r3, #16
 8002588:	60fb      	str	r3, [r7, #12]
 800258a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800258c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002590:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002592:	2302      	movs	r3, #2
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800259a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259e:	4619      	mov	r1, r3
 80025a0:	4817      	ldr	r0, [pc, #92]	; (8002600 <HAL_UART_MspInit+0x1a0>)
 80025a2:	f001 f993 	bl	80038cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b8:	4619      	mov	r1, r3
 80025ba:	4811      	ldr	r0, [pc, #68]	; (8002600 <HAL_UART_MspInit+0x1a0>)
 80025bc:	f001 f986 	bl	80038cc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 80025c0:	4b10      	ldr	r3, [pc, #64]	; (8002604 <HAL_UART_MspInit+0x1a4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025cc:	637b      	str	r3, [r7, #52]	; 0x34
 80025ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80025d4:	637b      	str	r3, [r7, #52]	; 0x34
 80025d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d8:	f043 0310 	orr.w	r3, r3, #16
 80025dc:	637b      	str	r3, [r7, #52]	; 0x34
 80025de:	4a09      	ldr	r2, [pc, #36]	; (8002604 <HAL_UART_MspInit+0x1a4>)
 80025e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025e2:	6053      	str	r3, [r2, #4]
}
 80025e4:	bf00      	nop
 80025e6:	3738      	adds	r7, #56	; 0x38
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40013800 	.word	0x40013800
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010800 	.word	0x40010800
 80025f8:	40004400 	.word	0x40004400
 80025fc:	40004800 	.word	0x40004800
 8002600:	40011000 	.word	0x40011000
 8002604:	40010000 	.word	0x40010000

08002608 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a19      	ldr	r2, [pc, #100]	; (800267c <HAL_UART_MspDeInit+0x74>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d10b      	bne.n	8002632 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800261a:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	4a18      	ldr	r2, [pc, #96]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 8002620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002624:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002626:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800262a:	4816      	ldr	r0, [pc, #88]	; (8002684 <HAL_UART_MspDeInit+0x7c>)
 800262c:	f001 fad2 	bl	8003bd4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002630:	e01f      	b.n	8002672 <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART2)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a14      	ldr	r2, [pc, #80]	; (8002688 <HAL_UART_MspDeInit+0x80>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d10a      	bne.n	8002652 <HAL_UART_MspDeInit+0x4a>
    __HAL_RCC_USART2_CLK_DISABLE();
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 800263e:	69db      	ldr	r3, [r3, #28]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 8002642:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002646:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002648:	210c      	movs	r1, #12
 800264a:	480e      	ldr	r0, [pc, #56]	; (8002684 <HAL_UART_MspDeInit+0x7c>)
 800264c:	f001 fac2 	bl	8003bd4 <HAL_GPIO_DeInit>
}
 8002650:	e00f      	b.n	8002672 <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART3)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0d      	ldr	r2, [pc, #52]	; (800268c <HAL_UART_MspDeInit+0x84>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d10a      	bne.n	8002672 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART3_CLK_DISABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 800265e:	69db      	ldr	r3, [r3, #28]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_UART_MspDeInit+0x78>)
 8002662:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002666:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 8002668:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800266c:	4808      	ldr	r0, [pc, #32]	; (8002690 <HAL_UART_MspDeInit+0x88>)
 800266e:	f001 fab1 	bl	8003bd4 <HAL_GPIO_DeInit>
}
 8002672:	bf00      	nop
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40013800 	.word	0x40013800
 8002680:	40021000 	.word	0x40021000
 8002684:	40010800 	.word	0x40010800
 8002688:	40004400 	.word	0x40004400
 800268c:	40004800 	.word	0x40004800
 8002690:	40011000 	.word	0x40011000

08002694 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08e      	sub	sp, #56	; 0x38
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_InitTick+0xe8>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_InitTick+0xe8>)
 80026b0:	f043 0304 	orr.w	r3, r3, #4
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_InitTick+0xe8>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80026c2:	f107 0210 	add.w	r2, r7, #16
 80026c6:	f107 0314 	add.w	r3, r7, #20
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f002 f929 	bl	8004924 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80026d2:	6a3b      	ldr	r3, [r7, #32]
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d103      	bne.n	80026e4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80026dc:	f002 f8fa 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80026e0:	6378      	str	r0, [r7, #52]	; 0x34
 80026e2:	e004      	b.n	80026ee <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80026e4:	f002 f8f6 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 80026e8:	4603      	mov	r3, r0
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80026ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f0:	4a23      	ldr	r2, [pc, #140]	; (8002780 <HAL_InitTick+0xec>)
 80026f2:	fba2 2303 	umull	r2, r3, r2, r3
 80026f6:	0c9b      	lsrs	r3, r3, #18
 80026f8:	3b01      	subs	r3, #1
 80026fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80026fc:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_InitTick+0xf0>)
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_InitTick+0xf4>)
 8002700:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002702:	4b20      	ldr	r3, [pc, #128]	; (8002784 <HAL_InitTick+0xf0>)
 8002704:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002708:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_InitTick+0xf0>)
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002710:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_InitTick+0xf0>)
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_InitTick+0xf0>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_InitTick+0xf0>)
 800271e:	2200      	movs	r2, #0
 8002720:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002722:	4818      	ldr	r0, [pc, #96]	; (8002784 <HAL_InitTick+0xf0>)
 8002724:	f002 fb64 	bl	8004df0 <HAL_TIM_Base_Init>
 8002728:	4603      	mov	r3, r0
 800272a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800272e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002732:	2b00      	cmp	r3, #0
 8002734:	d11b      	bne.n	800276e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002736:	4813      	ldr	r0, [pc, #76]	; (8002784 <HAL_InitTick+0xf0>)
 8002738:	f002 fbfe 	bl	8004f38 <HAL_TIM_Base_Start_IT>
 800273c:	4603      	mov	r3, r0
 800273e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002742:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002746:	2b00      	cmp	r3, #0
 8002748:	d111      	bne.n	800276e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800274a:	201e      	movs	r0, #30
 800274c:	f001 f8af 	bl	80038ae <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	d808      	bhi.n	8002768 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002756:	2200      	movs	r2, #0
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	201e      	movs	r0, #30
 800275c:	f001 f88b 	bl	8003876 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <HAL_InitTick+0xf8>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	e002      	b.n	800276e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800276e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002772:	4618      	mov	r0, r3
 8002774:	3738      	adds	r7, #56	; 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	431bde83 	.word	0x431bde83
 8002784:	200006d0 	.word	0x200006d0
 8002788:	40000800 	.word	0x40000800
 800278c:	20000004 	.word	0x20000004

08002790 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  /* Disable TIM4 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 8002794:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_SuspendTick+0x1c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	68da      	ldr	r2, [r3, #12]
 800279a:	4b04      	ldr	r3, [pc, #16]	; (80027ac <HAL_SuspendTick+0x1c>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	60da      	str	r2, [r3, #12]
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr
 80027ac:	200006d0 	.word	0x200006d0

080027b0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  /* Enable TIM4 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 80027b4:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_ResumeTick+0x1c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68da      	ldr	r2, [r3, #12]
 80027ba:	4b04      	ldr	r3, [pc, #16]	; (80027cc <HAL_ResumeTick+0x1c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	60da      	str	r2, [r3, #12]
}
 80027c4:	bf00      	nop
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bc80      	pop	{r7}
 80027ca:	4770      	bx	lr
 80027cc:	200006d0 	.word	0x200006d0

080027d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <NMI_Handler+0x4>

080027d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027da:	e7fe      	b.n	80027da <HardFault_Handler+0x4>

080027dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e0:	e7fe      	b.n	80027e0 <MemManage_Handler+0x4>

080027e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027e2:	b480      	push	{r7}
 80027e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027e6:	e7fe      	b.n	80027e6 <BusFault_Handler+0x4>

080027e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027ec:	e7fe      	b.n	80027ec <UsageFault_Handler+0x4>

080027ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f2:	bf00      	nop
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
	...

080027fc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002800:	4802      	ldr	r0, [pc, #8]	; (800280c <TIM4_IRQHandler+0x10>)
 8002802:	f002 fbeb 	bl	8004fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200006d0 	.word	0x200006d0

08002810 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002814:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002818:	f001 fa98 	bl	8003d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800281c:	bf00      	nop
 800281e:	bd80      	pop	{r7, pc}

08002820 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	60b9      	str	r1, [r7, #8]
 800282a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
 8002830:	e00a      	b.n	8002848 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002832:	f3af 8000 	nop.w
 8002836:	4601      	mov	r1, r0
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	60ba      	str	r2, [r7, #8]
 800283e:	b2ca      	uxtb	r2, r1
 8002840:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	3301      	adds	r3, #1
 8002846:	617b      	str	r3, [r7, #20]
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	429a      	cmp	r2, r3
 800284e:	dbf0      	blt.n	8002832 <_read+0x12>
  }

  return len;
 8002850:	687b      	ldr	r3, [r7, #4]
}
 8002852:	4618      	mov	r0, r3
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b086      	sub	sp, #24
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
 800286a:	e009      	b.n	8002880 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	1c5a      	adds	r2, r3, #1
 8002870:	60ba      	str	r2, [r7, #8]
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fe f99b 	bl	8000bb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	3301      	adds	r3, #1
 800287e:	617b      	str	r3, [r7, #20]
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	429a      	cmp	r2, r3
 8002886:	dbf1      	blt.n	800286c <_write+0x12>
  }
  return len;
 8002888:	687b      	ldr	r3, [r7, #4]
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_close>:

int _close(int file)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800289e:	4618      	mov	r0, r3
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bc80      	pop	{r7}
 80028a6:	4770      	bx	lr

080028a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028b8:	605a      	str	r2, [r3, #4]
  return 0;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <_isatty>:

int _isatty(int file)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80028ce:	2301      	movs	r3, #1
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bc80      	pop	{r7}
 80028d8:	4770      	bx	lr

080028da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028da:	b480      	push	{r7}
 80028dc:	b085      	sub	sp, #20
 80028de:	af00      	add	r7, sp, #0
 80028e0:	60f8      	str	r0, [r7, #12]
 80028e2:	60b9      	str	r1, [r7, #8]
 80028e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028e6:	2300      	movs	r3, #0
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028fc:	4a14      	ldr	r2, [pc, #80]	; (8002950 <_sbrk+0x5c>)
 80028fe:	4b15      	ldr	r3, [pc, #84]	; (8002954 <_sbrk+0x60>)
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <_sbrk+0x64>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d102      	bne.n	8002916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002910:	4b11      	ldr	r3, [pc, #68]	; (8002958 <_sbrk+0x64>)
 8002912:	4a12      	ldr	r2, [pc, #72]	; (800295c <_sbrk+0x68>)
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002916:	4b10      	ldr	r3, [pc, #64]	; (8002958 <_sbrk+0x64>)
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4413      	add	r3, r2
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	429a      	cmp	r2, r3
 8002922:	d207      	bcs.n	8002934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002924:	f004 fe9c 	bl	8007660 <__errno>
 8002928:	4603      	mov	r3, r0
 800292a:	220c      	movs	r2, #12
 800292c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800292e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002932:	e009      	b.n	8002948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002934:	4b08      	ldr	r3, [pc, #32]	; (8002958 <_sbrk+0x64>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_sbrk+0x64>)
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <_sbrk+0x64>)
 8002944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	20005000 	.word	0x20005000
 8002954:	00000400 	.word	0x00000400
 8002958:	20000718 	.word	0x20000718
 800295c:	200015c8 	.word	0x200015c8

08002960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800296c:	f7ff fff8 	bl	8002960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002972:	490c      	ldr	r1, [pc, #48]	; (80029a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002974:	4a0c      	ldr	r2, [pc, #48]	; (80029a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a09      	ldr	r2, [pc, #36]	; (80029ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002988:	4c09      	ldr	r4, [pc, #36]	; (80029b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f004 fe69 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299a:	f7fe fe09 	bl	80015b0 <main>
  bx lr
 800299e:	4770      	bx	lr
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80029a8:	08008864 	.word	0x08008864
  ldr r2, =_sbss
 80029ac:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80029b0:	200015c4 	.word	0x200015c4

080029b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC1_2_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_Init+0x28>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_Init+0x28>)
 80029c2:	f043 0310 	orr.w	r3, r3, #16
 80029c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 ff49 	bl	8003860 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ce:	200f      	movs	r0, #15
 80029d0:	f7ff fe60 	bl	8002694 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d4:	f7ff fa20 	bl	8001e18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <HAL_IncTick+0x1c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	4b05      	ldr	r3, [pc, #20]	; (8002a04 <HAL_IncTick+0x20>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4413      	add	r3, r2
 80029f4:	4a03      	ldr	r2, [pc, #12]	; (8002a04 <HAL_IncTick+0x20>)
 80029f6:	6013      	str	r3, [r2, #0]
}
 80029f8:	bf00      	nop
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	20000008 	.word	0x20000008
 8002a04:	2000071c 	.word	0x2000071c

08002a08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_GetTick+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	2000071c 	.word	0x2000071c

08002a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a34:	d005      	beq.n	8002a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a36:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <HAL_Delay+0x44>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	4413      	add	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a42:	bf00      	nop
 8002a44:	f7ff ffe0 	bl	8002a08 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d8f7      	bhi.n	8002a44 <HAL_Delay+0x28>
  {
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000008 	.word	0x20000008

08002a64 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0be      	b.n	8002c04 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d109      	bne.n	8002aa8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7ff f9f0 	bl	8001e88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fc87 	bl	80033bc <ADC_ConversionStop_Disable>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 8099 	bne.w	8002bf2 <HAL_ADC_Init+0x18e>
 8002ac0:	7dfb      	ldrb	r3, [r7, #23]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f040 8095 	bne.w	8002bf2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002acc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ad0:	f023 0302 	bic.w	r3, r3, #2
 8002ad4:	f043 0202 	orr.w	r2, r3, #2
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ae4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7b1b      	ldrb	r3, [r3, #12]
 8002aea:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002aec:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d003      	beq.n	8002b06 <HAL_ADC_Init+0xa2>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d102      	bne.n	8002b0c <HAL_ADC_Init+0xa8>
 8002b06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b0a:	e000      	b.n	8002b0e <HAL_ADC_Init+0xaa>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	7d1b      	ldrb	r3, [r3, #20]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d119      	bne.n	8002b50 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	7b1b      	ldrb	r3, [r3, #12]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d109      	bne.n	8002b38 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	035a      	lsls	r2, r3, #13
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e00b      	b.n	8002b50 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b3c:	f043 0220 	orr.w	r2, r3, #32
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f043 0201 	orr.w	r2, r3, #1
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	693a      	ldr	r2, [r7, #16]
 8002b60:	430a      	orrs	r2, r1
 8002b62:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_ADC_Init+0x1a8>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	6812      	ldr	r2, [r2, #0]
 8002b72:	68b9      	ldr	r1, [r7, #8]
 8002b74:	430b      	orrs	r3, r1
 8002b76:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b80:	d003      	beq.n	8002b8a <HAL_ADC_Init+0x126>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d104      	bne.n	8002b94 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	051b      	lsls	r3, r3, #20
 8002b92:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <HAL_ADC_Init+0x1ac>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d10b      	bne.n	8002bd0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bce:	e018      	b.n	8002c02 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd4:	f023 0312 	bic.w	r3, r3, #18
 8002bd8:	f043 0210 	orr.w	r2, r3, #16
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	f043 0201 	orr.w	r2, r3, #1
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002bf0:	e007      	b.n	8002c02 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f043 0210 	orr.w	r2, r3, #16
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3718      	adds	r7, #24
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	ffe1f7fd 	.word	0xffe1f7fd
 8002c10:	ff1f0efe 	.word	0xff1f0efe

08002c14 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d101      	bne.n	8002c2a <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e0ad      	b.n	8002d86 <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c2e:	f043 0202 	orr.w	r2, r3, #2
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fbc0 	bl	80033bc <ADC_ConversionStop_Disable>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f040 809a 	bne.w	8002d7c <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f06f 021f 	mvn.w	r2, #31
 8002c50:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6859      	ldr	r1, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b4c      	ldr	r3, [pc, #304]	; (8002d90 <HAL_ADC_DeInit+0x17c>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6899      	ldr	r1, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	4b49      	ldr	r3, [pc, #292]	; (8002d94 <HAL_ADC_DeInit+0x180>)
 8002c6e:	400b      	ands	r3, r1
 8002c70:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c80:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	691a      	ldr	r2, [r3, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002c90:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6812      	ldr	r2, [r2, #0]
 8002c9c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002ca0:	f023 030f 	bic.w	r3, r3, #15
 8002ca4:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6812      	ldr	r2, [r2, #0]
 8002cb0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cb4:	f023 030f 	bic.w	r3, r3, #15
 8002cb8:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	69db      	ldr	r3, [r3, #28]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6812      	ldr	r2, [r2, #0]
 8002cc4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cc8:	f023 030f 	bic.w	r3, r3, #15
 8002ccc:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cdc:	f023 030f 	bic.w	r3, r3, #15
 8002ce0:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	6812      	ldr	r2, [r2, #0]
 8002cec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002cf0:	f023 030f 	bic.w	r3, r3, #15
 8002cf4:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002d04:	f023 030f 	bic.w	r3, r3, #15
 8002d08:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d18:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002d28:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002d48:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	0d9b      	lsrs	r3, r3, #22
 8002d56:	059b      	lsls	r3, r3, #22
 8002d58:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	6812      	ldr	r2, [r2, #0]
 8002d64:	0d9b      	lsrs	r3, r3, #22
 8002d66:	059b      	lsls	r3, r3, #22
 8002d68:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff f8f4 	bl	8001f58 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	ff3f0000 	.word	0xff3f0000
 8002d94:	ff0106f0 	.word	0xff0106f0

08002d98 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d101      	bne.n	8002db2 <HAL_ADC_Start+0x1a>
 8002dae:	2302      	movs	r3, #2
 8002db0:	e098      	b.n	8002ee4 <HAL_ADC_Start+0x14c>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 faa4 	bl	8003308 <ADC_Enable>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f040 8087 	bne.w	8002eda <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd4:	f023 0301 	bic.w	r3, r3, #1
 8002dd8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a41      	ldr	r2, [pc, #260]	; (8002eec <HAL_ADC_Start+0x154>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d105      	bne.n	8002df6 <HAL_ADC_Start+0x5e>
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_ADC_Start+0x158>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d115      	bne.n	8002e22 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d026      	beq.n	8002e5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002e20:	e01d      	b.n	8002e5e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <HAL_ADC_Start+0x158>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d004      	beq.n	8002e42 <HAL_ADC_Start+0xaa>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a2b      	ldr	r2, [pc, #172]	; (8002eec <HAL_ADC_Start+0x154>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d10d      	bne.n	8002e5e <HAL_ADC_Start+0xc6>
 8002e42:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_ADC_Start+0x158>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e56:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d006      	beq.n	8002e78 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6e:	f023 0206 	bic.w	r2, r3, #6
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8002e76:	e002      	b.n	8002e7e <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0202 	mvn.w	r2, #2
 8002e8e:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e9a:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e9e:	d113      	bne.n	8002ec8 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ea4:	4a11      	ldr	r2, [pc, #68]	; (8002eec <HAL_ADC_Start+0x154>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d105      	bne.n	8002eb6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002eaa:	4b11      	ldr	r3, [pc, #68]	; (8002ef0 <HAL_ADC_Start+0x158>)
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d108      	bne.n	8002ec8 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002ec4:	609a      	str	r2, [r3, #8]
 8002ec6:	e00c      	b.n	8002ee2 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002ed6:	609a      	str	r2, [r3, #8]
 8002ed8:	e003      	b.n	8002ee2 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012800 	.word	0x40012800
 8002ef0:	40012400 	.word	0x40012400

08002ef4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ef4:	b590      	push	{r4, r7, lr}
 8002ef6:	b087      	sub	sp, #28
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002efe:	2300      	movs	r3, #0
 8002f00:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002f02:	2300      	movs	r3, #0
 8002f04:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002f0a:	f7ff fd7d 	bl	8002a08 <HAL_GetTick>
 8002f0e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e0d3      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d131      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d12a      	bne.n	8002fa8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f52:	e021      	b.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f5a:	d01d      	beq.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d007      	beq.n	8002f72 <HAL_ADC_PollForConversion+0x7e>
 8002f62:	f7ff fd51 	bl	8002a08 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d212      	bcs.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0302 	and.w	r3, r3, #2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10b      	bne.n	8002f98 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f043 0204 	orr.w	r2, r3, #4
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0a2      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0d6      	beq.n	8002f54 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002fa6:	e070      	b.n	800308a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002fa8:	4b4f      	ldr	r3, [pc, #316]	; (80030e8 <HAL_ADC_PollForConversion+0x1f4>)
 8002faa:	681c      	ldr	r4, [r3, #0]
 8002fac:	2002      	movs	r0, #2
 8002fae:	f001 fdbd 	bl	8004b2c <HAL_RCCEx_GetPeriphCLKFreq>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6919      	ldr	r1, [r3, #16]
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_ADC_PollForConversion+0x1f8>)
 8002fc0:	400b      	ands	r3, r1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x104>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68d9      	ldr	r1, [r3, #12]
 8002fcc:	4b48      	ldr	r3, [pc, #288]	; (80030f0 <HAL_ADC_PollForConversion+0x1fc>)
 8002fce:	400b      	ands	r3, r1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d111      	bne.n	8002ff8 <HAL_ADC_PollForConversion+0x104>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	6919      	ldr	r1, [r3, #16]
 8002fda:	4b46      	ldr	r3, [pc, #280]	; (80030f4 <HAL_ADC_PollForConversion+0x200>)
 8002fdc:	400b      	ands	r3, r1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d108      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x100>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68d9      	ldr	r1, [r3, #12]
 8002fe8:	4b43      	ldr	r3, [pc, #268]	; (80030f8 <HAL_ADC_PollForConversion+0x204>)
 8002fea:	400b      	ands	r3, r1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_ADC_PollForConversion+0x100>
 8002ff0:	2314      	movs	r3, #20
 8002ff2:	e020      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8002ff4:	2329      	movs	r3, #41	; 0x29
 8002ff6:	e01e      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6919      	ldr	r1, [r3, #16]
 8002ffe:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_ADC_PollForConversion+0x200>)
 8003000:	400b      	ands	r3, r1
 8003002:	2b00      	cmp	r3, #0
 8003004:	d106      	bne.n	8003014 <HAL_ADC_PollForConversion+0x120>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68d9      	ldr	r1, [r3, #12]
 800300c:	4b3a      	ldr	r3, [pc, #232]	; (80030f8 <HAL_ADC_PollForConversion+0x204>)
 800300e:	400b      	ands	r3, r1
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00d      	beq.n	8003030 <HAL_ADC_PollForConversion+0x13c>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6919      	ldr	r1, [r3, #16]
 800301a:	4b38      	ldr	r3, [pc, #224]	; (80030fc <HAL_ADC_PollForConversion+0x208>)
 800301c:	400b      	ands	r3, r1
 800301e:	2b00      	cmp	r3, #0
 8003020:	d108      	bne.n	8003034 <HAL_ADC_PollForConversion+0x140>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	4b34      	ldr	r3, [pc, #208]	; (80030fc <HAL_ADC_PollForConversion+0x208>)
 800302a:	400b      	ands	r3, r1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_PollForConversion+0x140>
 8003030:	2354      	movs	r3, #84	; 0x54
 8003032:	e000      	b.n	8003036 <HAL_ADC_PollForConversion+0x142>
 8003034:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800303c:	e021      	b.n	8003082 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003044:	d01a      	beq.n	800307c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d007      	beq.n	800305c <HAL_ADC_PollForConversion+0x168>
 800304c:	f7ff fcdc 	bl	8002a08 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	683a      	ldr	r2, [r7, #0]
 8003058:	429a      	cmp	r2, r3
 800305a:	d20f      	bcs.n	800307c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	429a      	cmp	r2, r3
 8003062:	d90b      	bls.n	800307c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003068:	f043 0204 	orr.w	r2, r3, #4
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e030      	b.n	80030de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	3301      	adds	r3, #1
 8003080:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	429a      	cmp	r2, r3
 8003088:	d8d9      	bhi.n	800303e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f06f 0212 	mvn.w	r2, #18
 8003092:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003098:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80030aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80030ae:	d115      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d111      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d105      	bne.n	80030dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}
 80030e6:	bf00      	nop
 80030e8:	20000000 	.word	0x20000000
 80030ec:	24924924 	.word	0x24924924
 80030f0:	00924924 	.word	0x00924924
 80030f4:	12492492 	.word	0x12492492
 80030f8:	00492492 	.word	0x00492492
 80030fc:	00249249 	.word	0x00249249

08003100 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bc80      	pop	{r7}
 8003116:	4770      	bx	lr

08003118 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x20>
 8003134:	2302      	movs	r3, #2
 8003136:	e0dc      	b.n	80032f2 <HAL_ADC_ConfigChannel+0x1da>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	2b06      	cmp	r3, #6
 8003146:	d81c      	bhi.n	8003182 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b05      	subs	r3, #5
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b05      	subs	r3, #5
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	635a      	str	r2, [r3, #52]	; 0x34
 8003180:	e03c      	b.n	80031fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b0c      	cmp	r3, #12
 8003188:	d81c      	bhi.n	80031c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	3b23      	subs	r3, #35	; 0x23
 800319c:	221f      	movs	r2, #31
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	43db      	mvns	r3, r3
 80031a4:	4019      	ands	r1, r3
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b23      	subs	r3, #35	; 0x23
 80031b6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	631a      	str	r2, [r3, #48]	; 0x30
 80031c2:	e01b      	b.n	80031fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b41      	subs	r3, #65	; 0x41
 80031d6:	221f      	movs	r2, #31
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	4019      	ands	r1, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	3b41      	subs	r3, #65	; 0x41
 80031f0:	fa00 f203 	lsl.w	r2, r0, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	430a      	orrs	r2, r1
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2b09      	cmp	r3, #9
 8003202:	d91c      	bls.n	800323e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68d9      	ldr	r1, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4613      	mov	r3, r2
 8003210:	005b      	lsls	r3, r3, #1
 8003212:	4413      	add	r3, r2
 8003214:	3b1e      	subs	r3, #30
 8003216:	2207      	movs	r2, #7
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	4019      	ands	r1, r3
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	6898      	ldr	r0, [r3, #8]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	3b1e      	subs	r3, #30
 8003230:	fa00 f203 	lsl.w	r2, r0, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]
 800323c:	e019      	b.n	8003272 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6919      	ldr	r1, [r3, #16]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4613      	mov	r3, r2
 800324a:	005b      	lsls	r3, r3, #1
 800324c:	4413      	add	r3, r2
 800324e:	2207      	movs	r2, #7
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	43db      	mvns	r3, r3
 8003256:	4019      	ands	r1, r3
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	6898      	ldr	r0, [r3, #8]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4613      	mov	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	4413      	add	r3, r2
 8003266:	fa00 f203 	lsl.w	r2, r0, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	430a      	orrs	r2, r1
 8003270:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d003      	beq.n	8003282 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800327e:	2b11      	cmp	r3, #17
 8003280:	d132      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a1d      	ldr	r2, [pc, #116]	; (80032fc <HAL_ADC_ConfigChannel+0x1e4>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d125      	bne.n	80032d8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d126      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80032a8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b10      	cmp	r3, #16
 80032b0:	d11a      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <HAL_ADC_ConfigChannel+0x1e8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a13      	ldr	r2, [pc, #76]	; (8003304 <HAL_ADC_ConfigChannel+0x1ec>)
 80032b8:	fba2 2303 	umull	r2, r3, r2, r3
 80032bc:	0c9a      	lsrs	r2, r3, #18
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	005b      	lsls	r3, r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032c8:	e002      	b.n	80032d0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x1b2>
 80032d6:	e007      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bc80      	pop	{r7}
 80032fa:	4770      	bx	lr
 80032fc:	40012400 	.word	0x40012400
 8003300:	20000000 	.word	0x20000000
 8003304:	431bde83 	.word	0x431bde83

08003308 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003314:	2300      	movs	r3, #0
 8003316:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b01      	cmp	r3, #1
 8003324:	d040      	beq.n	80033a8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0201 	orr.w	r2, r2, #1
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003336:	4b1f      	ldr	r3, [pc, #124]	; (80033b4 <ADC_Enable+0xac>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a1f      	ldr	r2, [pc, #124]	; (80033b8 <ADC_Enable+0xb0>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	0c9b      	lsrs	r3, r3, #18
 8003342:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003344:	e002      	b.n	800334c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	3b01      	subs	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1f9      	bne.n	8003346 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003352:	f7ff fb59 	bl	8002a08 <HAL_GetTick>
 8003356:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003358:	e01f      	b.n	800339a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800335a:	f7ff fb55 	bl	8002a08 <HAL_GetTick>
 800335e:	4602      	mov	r2, r0
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	2b02      	cmp	r3, #2
 8003366:	d918      	bls.n	800339a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b01      	cmp	r3, #1
 8003374:	d011      	beq.n	800339a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337a:	f043 0210 	orr.w	r2, r3, #16
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003386:	f043 0201 	orr.w	r2, r3, #1
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e007      	b.n	80033aa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d1d8      	bne.n	800335a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	20000000 	.word	0x20000000
 80033b8:	431bde83 	.word	0x431bde83

080033bc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d12e      	bne.n	8003434 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033e6:	f7ff fb0f 	bl	8002a08 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033ec:	e01b      	b.n	8003426 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033ee:	f7ff fb0b 	bl	8002a08 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d914      	bls.n	8003426 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10d      	bne.n	8003426 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800340e:	f043 0210 	orr.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800341a:	f043 0201 	orr.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e007      	b.n	8003436 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b01      	cmp	r3, #1
 8003432:	d0dc      	beq.n	80033ee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3710      	adds	r7, #16
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}

0800343e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800343e:	b580      	push	{r7, lr}
 8003440:	b084      	sub	sp, #16
 8003442:	af00      	add	r7, sp, #0
 8003444:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e0ed      	b.n	800362c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d102      	bne.n	8003462 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7fe fdad 	bl	8001fbc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003472:	f7ff fac9 	bl	8002a08 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003478:	e012      	b.n	80034a0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800347a:	f7ff fac5 	bl	8002a08 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b0a      	cmp	r3, #10
 8003486:	d90b      	bls.n	80034a0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2205      	movs	r2, #5
 8003498:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e0c5      	b.n	800362c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0e5      	beq.n	800347a <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f022 0202 	bic.w	r2, r2, #2
 80034bc:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034be:	f7ff faa3 	bl	8002a08 <HAL_GetTick>
 80034c2:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034c4:	e012      	b.n	80034ec <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034c6:	f7ff fa9f 	bl	8002a08 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b0a      	cmp	r3, #10
 80034d2:	d90b      	bls.n	80034ec <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2205      	movs	r2, #5
 80034e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e09f      	b.n	800362c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1e5      	bne.n	80034c6 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7e1b      	ldrb	r3, [r3, #24]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d108      	bne.n	8003514 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e007      	b.n	8003524 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003522:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7e5b      	ldrb	r3, [r3, #25]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d108      	bne.n	800353e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	e007      	b.n	800354e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800354c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	7e9b      	ldrb	r3, [r3, #26]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d108      	bne.n	8003568 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 0220 	orr.w	r2, r2, #32
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e007      	b.n	8003578 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0220 	bic.w	r2, r2, #32
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	7edb      	ldrb	r3, [r3, #27]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d108      	bne.n	8003592 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0210 	bic.w	r2, r2, #16
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e007      	b.n	80035a2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f042 0210 	orr.w	r2, r2, #16
 80035a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7f1b      	ldrb	r3, [r3, #28]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d108      	bne.n	80035bc <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f042 0208 	orr.w	r2, r2, #8
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	e007      	b.n	80035cc <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f022 0208 	bic.w	r2, r2, #8
 80035ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	7f5b      	ldrb	r3, [r3, #29]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d108      	bne.n	80035e6 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f042 0204 	orr.w	r2, r2, #4
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e007      	b.n	80035f6 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0204 	bic.w	r2, r2, #4
 80035f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689a      	ldr	r2, [r3, #8]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	431a      	orrs	r2, r3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	ea42 0103 	orr.w	r1, r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	1e5a      	subs	r2, r3, #1
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e015      	b.n	8003672 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f000 f817 	bl	800367a <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800364c:	6878      	ldr	r0, [r7, #4]
 800364e:	f7fe fd15 	bl	800207c <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003660:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d133      	bne.n	80036f6 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f042 0201 	orr.w	r2, r2, #1
 800369c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800369e:	f7ff f9b3 	bl	8002a08 <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036a4:	e012      	b.n	80036cc <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036a6:	f7ff f9af 	bl	8002a08 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b0a      	cmp	r3, #10
 80036b2:	d90b      	bls.n	80036cc <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2205      	movs	r2, #5
 80036c4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e01b      	b.n	8003704 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0e5      	beq.n	80036a6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0202 	bic.w	r2, r2, #2
 80036e8:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	e006      	b.n	8003704 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3710      	adds	r7, #16
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800371c:	4b0c      	ldr	r3, [pc, #48]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003728:	4013      	ands	r3, r2
 800372a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003734:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800373c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800373e:	4a04      	ldr	r2, [pc, #16]	; (8003750 <__NVIC_SetPriorityGrouping+0x44>)
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	60d3      	str	r3, [r2, #12]
}
 8003744:	bf00      	nop
 8003746:	3714      	adds	r7, #20
 8003748:	46bd      	mov	sp, r7
 800374a:	bc80      	pop	{r7}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003758:	4b04      	ldr	r3, [pc, #16]	; (800376c <__NVIC_GetPriorityGrouping+0x18>)
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	0a1b      	lsrs	r3, r3, #8
 800375e:	f003 0307 	and.w	r3, r3, #7
}
 8003762:	4618      	mov	r0, r3
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000ed00 	.word	0xe000ed00

08003770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377e:	2b00      	cmp	r3, #0
 8003780:	db0b      	blt.n	800379a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	f003 021f 	and.w	r2, r3, #31
 8003788:	4906      	ldr	r1, [pc, #24]	; (80037a4 <__NVIC_EnableIRQ+0x34>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	2001      	movs	r0, #1
 8003792:	fa00 f202 	lsl.w	r2, r0, r2
 8003796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	bc80      	pop	{r7}
 80037a2:	4770      	bx	lr
 80037a4:	e000e100 	.word	0xe000e100

080037a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	4603      	mov	r3, r0
 80037b0:	6039      	str	r1, [r7, #0]
 80037b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	db0a      	blt.n	80037d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	b2da      	uxtb	r2, r3
 80037c0:	490c      	ldr	r1, [pc, #48]	; (80037f4 <__NVIC_SetPriority+0x4c>)
 80037c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c6:	0112      	lsls	r2, r2, #4
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	440b      	add	r3, r1
 80037cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037d0:	e00a      	b.n	80037e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	b2da      	uxtb	r2, r3
 80037d6:	4908      	ldr	r1, [pc, #32]	; (80037f8 <__NVIC_SetPriority+0x50>)
 80037d8:	79fb      	ldrb	r3, [r7, #7]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	3b04      	subs	r3, #4
 80037e0:	0112      	lsls	r2, r2, #4
 80037e2:	b2d2      	uxtb	r2, r2
 80037e4:	440b      	add	r3, r1
 80037e6:	761a      	strb	r2, [r3, #24]
}
 80037e8:	bf00      	nop
 80037ea:	370c      	adds	r7, #12
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bc80      	pop	{r7}
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	e000e100 	.word	0xe000e100
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b089      	sub	sp, #36	; 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	f1c3 0307 	rsb	r3, r3, #7
 8003816:	2b04      	cmp	r3, #4
 8003818:	bf28      	it	cs
 800381a:	2304      	movcs	r3, #4
 800381c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	3304      	adds	r3, #4
 8003822:	2b06      	cmp	r3, #6
 8003824:	d902      	bls.n	800382c <NVIC_EncodePriority+0x30>
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	3b03      	subs	r3, #3
 800382a:	e000      	b.n	800382e <NVIC_EncodePriority+0x32>
 800382c:	2300      	movs	r3, #0
 800382e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	fa02 f303 	lsl.w	r3, r2, r3
 800383a:	43da      	mvns	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	401a      	ands	r2, r3
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003844:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	fa01 f303 	lsl.w	r3, r1, r3
 800384e:	43d9      	mvns	r1, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003854:	4313      	orrs	r3, r2
         );
}
 8003856:	4618      	mov	r0, r3
 8003858:	3724      	adds	r7, #36	; 0x24
 800385a:	46bd      	mov	sp, r7
 800385c:	bc80      	pop	{r7}
 800385e:	4770      	bx	lr

08003860 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b082      	sub	sp, #8
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff4f 	bl	800370c <__NVIC_SetPriorityGrouping>
}
 800386e:	bf00      	nop
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	4603      	mov	r3, r0
 800387e:	60b9      	str	r1, [r7, #8]
 8003880:	607a      	str	r2, [r7, #4]
 8003882:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003884:	2300      	movs	r3, #0
 8003886:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003888:	f7ff ff64 	bl	8003754 <__NVIC_GetPriorityGrouping>
 800388c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68b9      	ldr	r1, [r7, #8]
 8003892:	6978      	ldr	r0, [r7, #20]
 8003894:	f7ff ffb2 	bl	80037fc <NVIC_EncodePriority>
 8003898:	4602      	mov	r2, r0
 800389a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7ff ff81 	bl	80037a8 <__NVIC_SetPriority>
}
 80038a6:	bf00      	nop
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b082      	sub	sp, #8
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	4603      	mov	r3, r0
 80038b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038bc:	4618      	mov	r0, r3
 80038be:	f7ff ff57 	bl	8003770 <__NVIC_EnableIRQ>
}
 80038c2:	bf00      	nop
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b08b      	sub	sp, #44	; 0x2c
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80038da:	2300      	movs	r3, #0
 80038dc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038de:	e169      	b.n	8003bb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80038e0:	2201      	movs	r2, #1
 80038e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	69fa      	ldr	r2, [r7, #28]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	f040 8158 	bne.w	8003bae <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	4a9a      	ldr	r2, [pc, #616]	; (8003b6c <HAL_GPIO_Init+0x2a0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d05e      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003908:	4a98      	ldr	r2, [pc, #608]	; (8003b6c <HAL_GPIO_Init+0x2a0>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d875      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800390e:	4a98      	ldr	r2, [pc, #608]	; (8003b70 <HAL_GPIO_Init+0x2a4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d058      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003914:	4a96      	ldr	r2, [pc, #600]	; (8003b70 <HAL_GPIO_Init+0x2a4>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d86f      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800391a:	4a96      	ldr	r2, [pc, #600]	; (8003b74 <HAL_GPIO_Init+0x2a8>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d052      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003920:	4a94      	ldr	r2, [pc, #592]	; (8003b74 <HAL_GPIO_Init+0x2a8>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d869      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003926:	4a94      	ldr	r2, [pc, #592]	; (8003b78 <HAL_GPIO_Init+0x2ac>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04c      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 800392c:	4a92      	ldr	r2, [pc, #584]	; (8003b78 <HAL_GPIO_Init+0x2ac>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d863      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003932:	4a92      	ldr	r2, [pc, #584]	; (8003b7c <HAL_GPIO_Init+0x2b0>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d046      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
 8003938:	4a90      	ldr	r2, [pc, #576]	; (8003b7c <HAL_GPIO_Init+0x2b0>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d85d      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 800393e:	2b12      	cmp	r3, #18
 8003940:	d82a      	bhi.n	8003998 <HAL_GPIO_Init+0xcc>
 8003942:	2b12      	cmp	r3, #18
 8003944:	d859      	bhi.n	80039fa <HAL_GPIO_Init+0x12e>
 8003946:	a201      	add	r2, pc, #4	; (adr r2, 800394c <HAL_GPIO_Init+0x80>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	080039c7 	.word	0x080039c7
 8003950:	080039a1 	.word	0x080039a1
 8003954:	080039b3 	.word	0x080039b3
 8003958:	080039f5 	.word	0x080039f5
 800395c:	080039fb 	.word	0x080039fb
 8003960:	080039fb 	.word	0x080039fb
 8003964:	080039fb 	.word	0x080039fb
 8003968:	080039fb 	.word	0x080039fb
 800396c:	080039fb 	.word	0x080039fb
 8003970:	080039fb 	.word	0x080039fb
 8003974:	080039fb 	.word	0x080039fb
 8003978:	080039fb 	.word	0x080039fb
 800397c:	080039fb 	.word	0x080039fb
 8003980:	080039fb 	.word	0x080039fb
 8003984:	080039fb 	.word	0x080039fb
 8003988:	080039fb 	.word	0x080039fb
 800398c:	080039fb 	.word	0x080039fb
 8003990:	080039a9 	.word	0x080039a9
 8003994:	080039bd 	.word	0x080039bd
 8003998:	4a79      	ldr	r2, [pc, #484]	; (8003b80 <HAL_GPIO_Init+0x2b4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d013      	beq.n	80039c6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800399e:	e02c      	b.n	80039fa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	623b      	str	r3, [r7, #32]
          break;
 80039a6:	e029      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	3304      	adds	r3, #4
 80039ae:	623b      	str	r3, [r7, #32]
          break;
 80039b0:	e024      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	3308      	adds	r3, #8
 80039b8:	623b      	str	r3, [r7, #32]
          break;
 80039ba:	e01f      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	330c      	adds	r3, #12
 80039c2:	623b      	str	r3, [r7, #32]
          break;
 80039c4:	e01a      	b.n	80039fc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d102      	bne.n	80039d4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ce:	2304      	movs	r3, #4
 80039d0:	623b      	str	r3, [r7, #32]
          break;
 80039d2:	e013      	b.n	80039fc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039dc:	2308      	movs	r3, #8
 80039de:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69fa      	ldr	r2, [r7, #28]
 80039e4:	611a      	str	r2, [r3, #16]
          break;
 80039e6:	e009      	b.n	80039fc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039e8:	2308      	movs	r3, #8
 80039ea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69fa      	ldr	r2, [r7, #28]
 80039f0:	615a      	str	r2, [r3, #20]
          break;
 80039f2:	e003      	b.n	80039fc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039f4:	2300      	movs	r3, #0
 80039f6:	623b      	str	r3, [r7, #32]
          break;
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x130>
          break;
 80039fa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2bff      	cmp	r3, #255	; 0xff
 8003a00:	d801      	bhi.n	8003a06 <HAL_GPIO_Init+0x13a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	e001      	b.n	8003a0a <HAL_GPIO_Init+0x13e>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2bff      	cmp	r3, #255	; 0xff
 8003a10:	d802      	bhi.n	8003a18 <HAL_GPIO_Init+0x14c>
 8003a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	e002      	b.n	8003a1e <HAL_GPIO_Init+0x152>
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	3b08      	subs	r3, #8
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	210f      	movs	r1, #15
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	6a39      	ldr	r1, [r7, #32]
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	fa01 f303 	lsl.w	r3, r1, r3
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80b1 	beq.w	8003bae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a4c:	4b4d      	ldr	r3, [pc, #308]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	4a4c      	ldr	r2, [pc, #304]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a52:	f043 0301 	orr.w	r3, r3, #1
 8003a56:	6193      	str	r3, [r2, #24]
 8003a58:	4b4a      	ldr	r3, [pc, #296]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	60bb      	str	r3, [r7, #8]
 8003a62:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a64:	4a48      	ldr	r2, [pc, #288]	; (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a70:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	220f      	movs	r2, #15
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	4013      	ands	r3, r2
 8003a86:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a40      	ldr	r2, [pc, #256]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d013      	beq.n	8003ab8 <HAL_GPIO_Init+0x1ec>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3f      	ldr	r2, [pc, #252]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00d      	beq.n	8003ab4 <HAL_GPIO_Init+0x1e8>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3e      	ldr	r2, [pc, #248]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d007      	beq.n	8003ab0 <HAL_GPIO_Init+0x1e4>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3d      	ldr	r2, [pc, #244]	; (8003b98 <HAL_GPIO_Init+0x2cc>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_GPIO_Init+0x1e0>
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e006      	b.n	8003aba <HAL_GPIO_Init+0x1ee>
 8003aac:	2304      	movs	r3, #4
 8003aae:	e004      	b.n	8003aba <HAL_GPIO_Init+0x1ee>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e002      	b.n	8003aba <HAL_GPIO_Init+0x1ee>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_GPIO_Init+0x1ee>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003abc:	f002 0203 	and.w	r2, r2, #3
 8003ac0:	0092      	lsls	r2, r2, #2
 8003ac2:	4093      	lsls	r3, r2
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aca:	492f      	ldr	r1, [pc, #188]	; (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ace:	089b      	lsrs	r3, r3, #2
 8003ad0:	3302      	adds	r3, #2
 8003ad2:	68fa      	ldr	r2, [r7, #12]
 8003ad4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d006      	beq.n	8003af2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003ae4:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	492c      	ldr	r1, [pc, #176]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	608b      	str	r3, [r1, #8]
 8003af0:	e006      	b.n	8003b00 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003af2:	4b2a      	ldr	r3, [pc, #168]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003af4:	689a      	ldr	r2, [r3, #8]
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	4928      	ldr	r1, [pc, #160]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003afc:	4013      	ands	r3, r2
 8003afe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d006      	beq.n	8003b1a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b0c:	4b23      	ldr	r3, [pc, #140]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b0e:	68da      	ldr	r2, [r3, #12]
 8003b10:	4922      	ldr	r1, [pc, #136]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60cb      	str	r3, [r1, #12]
 8003b18:	e006      	b.n	8003b28 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b1c:	68da      	ldr	r2, [r3, #12]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	43db      	mvns	r3, r3
 8003b22:	491e      	ldr	r1, [pc, #120]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d006      	beq.n	8003b42 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4918      	ldr	r1, [pc, #96]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]
 8003b40:	e006      	b.n	8003b50 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003b42:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b44:	685a      	ldr	r2, [r3, #4]
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	43db      	mvns	r3, r3
 8003b4a:	4914      	ldr	r1, [pc, #80]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d021      	beq.n	8003ba0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b5c:	4b0f      	ldr	r3, [pc, #60]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	600b      	str	r3, [r1, #0]
 8003b68:	e021      	b.n	8003bae <HAL_GPIO_Init+0x2e2>
 8003b6a:	bf00      	nop
 8003b6c:	10320000 	.word	0x10320000
 8003b70:	10310000 	.word	0x10310000
 8003b74:	10220000 	.word	0x10220000
 8003b78:	10210000 	.word	0x10210000
 8003b7c:	10120000 	.word	0x10120000
 8003b80:	10110000 	.word	0x10110000
 8003b84:	40021000 	.word	0x40021000
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010800 	.word	0x40010800
 8003b90:	40010c00 	.word	0x40010c00
 8003b94:	40011000 	.word	0x40011000
 8003b98:	40011400 	.word	0x40011400
 8003b9c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ba0:	4b0b      	ldr	r3, [pc, #44]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	4909      	ldr	r1, [pc, #36]	; (8003bd0 <HAL_GPIO_Init+0x304>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bba:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f47f ae8e 	bne.w	80038e0 <HAL_GPIO_Init+0x14>
  }
}
 8003bc4:	bf00      	nop
 8003bc6:	bf00      	nop
 8003bc8:	372c      	adds	r7, #44	; 0x2c
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr
 8003bd0:	40010400 	.word	0x40010400

08003bd4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b089      	sub	sp, #36	; 0x24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003be2:	e09a      	b.n	8003d1a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003be4:	2201      	movs	r2, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 808d 	beq.w	8003d14 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003bfa:	4a4e      	ldr	r2, [pc, #312]	; (8003d34 <HAL_GPIO_DeInit+0x160>)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	3302      	adds	r3, #2
 8003c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c06:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	220f      	movs	r2, #15
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a46      	ldr	r2, [pc, #280]	; (8003d38 <HAL_GPIO_DeInit+0x164>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d013      	beq.n	8003c4c <HAL_GPIO_DeInit+0x78>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a45      	ldr	r2, [pc, #276]	; (8003d3c <HAL_GPIO_DeInit+0x168>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d00d      	beq.n	8003c48 <HAL_GPIO_DeInit+0x74>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a44      	ldr	r2, [pc, #272]	; (8003d40 <HAL_GPIO_DeInit+0x16c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d007      	beq.n	8003c44 <HAL_GPIO_DeInit+0x70>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a43      	ldr	r2, [pc, #268]	; (8003d44 <HAL_GPIO_DeInit+0x170>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d101      	bne.n	8003c40 <HAL_GPIO_DeInit+0x6c>
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e006      	b.n	8003c4e <HAL_GPIO_DeInit+0x7a>
 8003c40:	2304      	movs	r3, #4
 8003c42:	e004      	b.n	8003c4e <HAL_GPIO_DeInit+0x7a>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e002      	b.n	8003c4e <HAL_GPIO_DeInit+0x7a>
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e000      	b.n	8003c4e <HAL_GPIO_DeInit+0x7a>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	f002 0203 	and.w	r2, r2, #3
 8003c54:	0092      	lsls	r2, r2, #2
 8003c56:	4093      	lsls	r3, r2
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	429a      	cmp	r2, r3
 8003c5c:	d132      	bne.n	8003cc4 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003c5e:	4b3a      	ldr	r3, [pc, #232]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	43db      	mvns	r3, r3
 8003c66:	4938      	ldr	r1, [pc, #224]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003c6c:	4b36      	ldr	r3, [pc, #216]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	4934      	ldr	r1, [pc, #208]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003c7a:	4b33      	ldr	r3, [pc, #204]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c7c:	68da      	ldr	r2, [r3, #12]
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	4931      	ldr	r1, [pc, #196]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c84:	4013      	ands	r3, r2
 8003c86:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003c88:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	43db      	mvns	r3, r3
 8003c90:	492d      	ldr	r1, [pc, #180]	; (8003d48 <HAL_GPIO_DeInit+0x174>)
 8003c92:	4013      	ands	r3, r2
 8003c94:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	f003 0303 	and.w	r3, r3, #3
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	220f      	movs	r2, #15
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003ca6:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_GPIO_DeInit+0x160>)
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	089b      	lsrs	r3, r3, #2
 8003cac:	3302      	adds	r3, #2
 8003cae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	481f      	ldr	r0, [pc, #124]	; (8003d34 <HAL_GPIO_DeInit+0x160>)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	089b      	lsrs	r3, r3, #2
 8003cbc:	400a      	ands	r2, r1
 8003cbe:	3302      	adds	r3, #2
 8003cc0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d801      	bhi.n	8003cce <HAL_GPIO_DeInit+0xfa>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	e001      	b.n	8003cd2 <HAL_GPIO_DeInit+0xfe>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2bff      	cmp	r3, #255	; 0xff
 8003cd8:	d802      	bhi.n	8003ce0 <HAL_GPIO_DeInit+0x10c>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	e002      	b.n	8003ce6 <HAL_GPIO_DeInit+0x112>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	3b08      	subs	r3, #8
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	210f      	movs	r1, #15
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf4:	43db      	mvns	r3, r3
 8003cf6:	401a      	ands	r2, r3
 8003cf8:	2104      	movs	r1, #4
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8003d00:	431a      	orrs	r2, r3
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	401a      	ands	r2, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	f47f af5e 	bne.w	8003be4 <HAL_GPIO_DeInit+0x10>
  }
}
 8003d28:	bf00      	nop
 8003d2a:	bf00      	nop
 8003d2c:	3724      	adds	r7, #36	; 0x24
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bc80      	pop	{r7}
 8003d32:	4770      	bx	lr
 8003d34:	40010000 	.word	0x40010000
 8003d38:	40010800 	.word	0x40010800
 8003d3c:	40010c00 	.word	0x40010c00
 8003d40:	40011000 	.word	0x40011000
 8003d44:	40011400 	.word	0x40011400
 8003d48:	40010400 	.word	0x40010400

08003d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	4603      	mov	r3, r0
 8003d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d006      	beq.n	8003d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d68:	88fb      	ldrh	r3, [r7, #6]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fc ff32 	bl	8000bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d70:	bf00      	nop
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}
 8003d78:	40010400 	.word	0x40010400

08003d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e12b      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d106      	bne.n	8003da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fe f988 	bl	80020b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2224      	movs	r2, #36	; 0x24
 8003dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f022 0201 	bic.w	r2, r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de0:	f000 fd78 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8003de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a81      	ldr	r2, [pc, #516]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d807      	bhi.n	8003e00 <HAL_I2C_Init+0x84>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	4a80      	ldr	r2, [pc, #512]	; (8003ff4 <HAL_I2C_Init+0x278>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	bf94      	ite	ls
 8003df8:	2301      	movls	r3, #1
 8003dfa:	2300      	movhi	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e006      	b.n	8003e0e <HAL_I2C_Init+0x92>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a7d      	ldr	r2, [pc, #500]	; (8003ff8 <HAL_I2C_Init+0x27c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	bf94      	ite	ls
 8003e08:	2301      	movls	r3, #1
 8003e0a:	2300      	movhi	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d001      	beq.n	8003e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e0e7      	b.n	8003fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4a78      	ldr	r2, [pc, #480]	; (8003ffc <HAL_I2C_Init+0x280>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	430a      	orrs	r2, r1
 8003e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	6a1b      	ldr	r3, [r3, #32]
 8003e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	4a6a      	ldr	r2, [pc, #424]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d802      	bhi.n	8003e50 <HAL_I2C_Init+0xd4>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	e009      	b.n	8003e64 <HAL_I2C_Init+0xe8>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e56:	fb02 f303 	mul.w	r3, r2, r3
 8003e5a:	4a69      	ldr	r2, [pc, #420]	; (8004000 <HAL_I2C_Init+0x284>)
 8003e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e60:	099b      	lsrs	r3, r3, #6
 8003e62:	3301      	adds	r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6812      	ldr	r2, [r2, #0]
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	495c      	ldr	r1, [pc, #368]	; (8003ff0 <HAL_I2C_Init+0x274>)
 8003e80:	428b      	cmp	r3, r1
 8003e82:	d819      	bhi.n	8003eb8 <HAL_I2C_Init+0x13c>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	1e59      	subs	r1, r3, #1
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	005b      	lsls	r3, r3, #1
 8003e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e92:	1c59      	adds	r1, r3, #1
 8003e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e98:	400b      	ands	r3, r1
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_I2C_Init+0x138>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e59      	subs	r1, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eac:	3301      	adds	r3, #1
 8003eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb2:	e051      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb4:	2304      	movs	r3, #4
 8003eb6:	e04f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d111      	bne.n	8003ee4 <HAL_I2C_Init+0x168>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	1e58      	subs	r0, r3, #1
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	460b      	mov	r3, r1
 8003eca:	005b      	lsls	r3, r3, #1
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	bf0c      	ite	eq
 8003edc:	2301      	moveq	r3, #1
 8003ede:	2300      	movne	r3, #0
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	e012      	b.n	8003f0a <HAL_I2C_Init+0x18e>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Init+0x196>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e022      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10e      	bne.n	8003f38 <HAL_I2C_Init+0x1bc>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	1e58      	subs	r0, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6859      	ldr	r1, [r3, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	440b      	add	r3, r1
 8003f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f36:	e00f      	b.n	8003f58 <HAL_I2C_Init+0x1dc>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e58      	subs	r0, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6859      	ldr	r1, [r3, #4]
 8003f40:	460b      	mov	r3, r1
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	0099      	lsls	r1, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f4e:	3301      	adds	r3, #1
 8003f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	6809      	ldr	r1, [r1, #0]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	69da      	ldr	r2, [r3, #28]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6911      	ldr	r1, [r2, #16]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68d2      	ldr	r2, [r2, #12]
 8003f92:	4311      	orrs	r1, r2
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	6812      	ldr	r2, [r2, #0]
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695a      	ldr	r2, [r3, #20]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f042 0201 	orr.w	r2, r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	000186a0 	.word	0x000186a0
 8003ff4:	001e847f 	.word	0x001e847f
 8003ff8:	003d08ff 	.word	0x003d08ff
 8003ffc:	431bde83 	.word	0x431bde83
 8004000:	10624dd3 	.word	0x10624dd3

08004004 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d101      	bne.n	8004016 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e021      	b.n	800405a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2224      	movs	r2, #36	; 0x24
 800401a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f7fe f8ae 	bl	8002190 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2200      	movs	r2, #0
 800404c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3708      	adds	r7, #8
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8004062:	b480      	push	{r7}
 8004064:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8004066:	bf20      	wfe
  __asm volatile( "nop" );
 8004068:	bf00      	nop
}
 800406a:	bf00      	nop
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
	...

08004074 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004074:	b480      	push	{r7}
 8004076:	b083      	sub	sp, #12
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004080:	4b09      	ldr	r3, [pc, #36]	; (80040a8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8004086:	f023 0304 	bic.w	r3, r3, #4
 800408a:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	2b01      	cmp	r3, #1
 8004090:	d101      	bne.n	8004096 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004092:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004094:	e002      	b.n	800409c <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 8004096:	bf40      	sev
    __WFE();
 8004098:	bf20      	wfe
    __WFE();
 800409a:	bf20      	wfe
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bc80      	pop	{r7}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	e000ed00 	.word	0xe000ed00

080040ac <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80040b8:	4b13      	ldr	r3, [pc, #76]	; (8004108 <HAL_PWR_EnterSTOPMode+0x5c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a12      	ldr	r2, [pc, #72]	; (8004108 <HAL_PWR_EnterSTOPMode+0x5c>)
 80040be:	f023 0302 	bic.w	r3, r3, #2
 80040c2:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_PWR_EnterSTOPMode+0x5c>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f023 0201 	bic.w	r2, r3, #1
 80040cc:	490e      	ldr	r1, [pc, #56]	; (8004108 <HAL_PWR_EnterSTOPMode+0x5c>)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_PWR_EnterSTOPMode+0x60>)
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	4a0c      	ldr	r2, [pc, #48]	; (800410c <HAL_PWR_EnterSTOPMode+0x60>)
 80040da:	f043 0304 	orr.w	r3, r3, #4
 80040de:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d101      	bne.n	80040ea <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80040e6:	bf30      	wfi
 80040e8:	e004      	b.n	80040f4 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80040ea:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80040ec:	f7ff ffb9 	bl	8004062 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80040f0:	f7ff ffb7 	bl	8004062 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040f4:	4b05      	ldr	r3, [pc, #20]	; (800410c <HAL_PWR_EnterSTOPMode+0x60>)
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	4a04      	ldr	r2, [pc, #16]	; (800410c <HAL_PWR_EnterSTOPMode+0x60>)
 80040fa:	f023 0304 	bic.w	r3, r3, #4
 80040fe:	6113      	str	r3, [r2, #16]
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40007000 	.word	0x40007000
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004114:	4b08      	ldr	r3, [pc, #32]	; (8004138 <HAL_PWR_EnterSTANDBYMode+0x28>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a07      	ldr	r2, [pc, #28]	; (8004138 <HAL_PWR_EnterSTANDBYMode+0x28>)
 800411a:	f043 0302 	orr.w	r3, r3, #2
 800411e:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004120:	4b06      	ldr	r3, [pc, #24]	; (800413c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	4a05      	ldr	r2, [pc, #20]	; (800413c <HAL_PWR_EnterSTANDBYMode+0x2c>)
 8004126:	f043 0304 	orr.w	r3, r3, #4
 800412a:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 800412c:	bf30      	wfi
}
 800412e:	bf00      	nop
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40007000 	.word	0x40007000
 800413c:	e000ed00 	.word	0xe000ed00

08004140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e272      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	4b92      	ldr	r3, [pc, #584]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b04      	cmp	r3, #4
 800416a:	d00c      	beq.n	8004186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d112      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
 8004178:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d10b      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004186:	4b89      	ldr	r3, [pc, #548]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06c      	beq.n	800426c <HAL_RCC_OscConfig+0x12c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d168      	bne.n	800426c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e24c      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x76>
 80041a8:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e02e      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x98>
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7a      	ldr	r2, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0xbc>
 80041e2:	4b72      	ldr	r3, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a71      	ldr	r2, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041fc:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fe fbf4 	bl	8002a08 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7fe fbf0 	bl	8002a08 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e200      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xe4>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7fe fbe0 	bl	8002a08 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7fe fbdc 	bl	8002a08 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1ec      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x10c>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004286:	4b49      	ldr	r3, [pc, #292]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c0      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7fe fb95 	bl	8002a08 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e2:	f7fe fb91 	bl	8002a08 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1a1      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4927      	ldr	r1, [pc, #156]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7fe fb74 	bl	8002a08 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7fe fb70 	bl	8002a08 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e180      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03a      	beq.n	80043c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7fe fb54 	bl	8002a08 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7fe fb50 	bl	8002a08 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e160      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004382:	2001      	movs	r0, #1
 8004384:	f000 fafe 	bl	8004984 <RCC_Delay>
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7fe fb3a 	bl	8002a08 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004396:	e00f      	b.n	80043b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7fe fb36 	bl	8002a08 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d908      	bls.n	80043b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e146      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	42420000 	.word	0x42420000
 80043b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b92      	ldr	r3, [pc, #584]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e9      	bne.n	8004398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a6 	beq.w	800451e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4a87      	ldr	r2, [pc, #540]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	61d3      	str	r3, [r2, #28]
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b82      	ldr	r3, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7fe faf7 	bl	8002a08 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7fe faf3 	bl	8002a08 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e103      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x312>
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a6e      	ldr	r2, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	e02d      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x334>
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6213      	str	r3, [r2, #32]
 8004466:	4b67      	ldr	r3, [pc, #412]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4a66      	ldr	r2, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6213      	str	r3, [r2, #32]
 8004472:	e01c      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x356>
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a60      	ldr	r2, [pc, #384]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004496:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a5a      	ldr	r2, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d015      	beq.n	80044e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7fe faa7 	bl	8002a08 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7fe faa3 	bl	8002a08 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0b1      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCC_OscConfig+0x37e>
 80044e0:	e014      	b.n	800450c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7fe fa91 	bl	8002a08 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7fe fa8d 	bl	8002a08 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e09b      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ee      	bne.n	80044ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8087 	beq.w	8004636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d061      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d146      	bne.n	80045ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7fe fa61 	bl	8002a08 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7fe fa5d 	bl	8002a08 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e06d      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4921      	ldr	r1, [pc, #132]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a19      	ldr	r1, [r3, #32]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	430b      	orrs	r3, r1
 8004596:	491b      	ldr	r1, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7fe fa31 	bl	8002a08 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7fe fa2d 	bl	8002a08 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e03d      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x46a>
 80045c8:	e035      	b.n	8004636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe fa1a 	bl	8002a08 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7fe fa16 	bl	8002a08 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e026      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x498>
 80045f6:	e01e      	b.n	8004636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e019      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
 800460c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x500>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	429a      	cmp	r2, r3
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000

08004644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0d0      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d910      	bls.n	8004688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b67      	ldr	r3, [pc, #412]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4965      	ldr	r1, [pc, #404]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0b8      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d040      	beq.n	8004764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d115      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e073      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004712:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06b      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f023 0203 	bic.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4936      	ldr	r1, [pc, #216]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004734:	f7fe f968 	bl	8002a08 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	e00a      	b.n	8004752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473c:	f7fe f964 	bl	8002a08 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e053      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 020c 	and.w	r2, r3, #12
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d1eb      	bne.n	800473c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d210      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	4922      	ldr	r1, [pc, #136]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e032      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490e      	ldr	r1, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047d2:	f000 f821 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	5ccb      	ldrb	r3, [r1, r3]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1cc>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1d0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7fd ff4e 	bl	8002694 <HAL_InitTick>

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40022000 	.word	0x40022000
 8004808:	40021000 	.word	0x40021000
 800480c:	080087e8 	.word	0x080087e8
 8004810:	20000000 	.word	0x20000000
 8004814:	20000004 	.word	0x20000004

08004818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800481e:	2300      	movs	r3, #0
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	2300      	movs	r3, #0
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	2300      	movs	r3, #0
 8004828:	617b      	str	r3, [r7, #20]
 800482a:	2300      	movs	r3, #0
 800482c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004832:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 030c 	and.w	r3, r3, #12
 800483e:	2b04      	cmp	r3, #4
 8004840:	d002      	beq.n	8004848 <HAL_RCC_GetSysClockFreq+0x30>
 8004842:	2b08      	cmp	r3, #8
 8004844:	d003      	beq.n	800484e <HAL_RCC_GetSysClockFreq+0x36>
 8004846:	e027      	b.n	8004898 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004848:	4b19      	ldr	r3, [pc, #100]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800484a:	613b      	str	r3, [r7, #16]
      break;
 800484c:	e027      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	0c9b      	lsrs	r3, r3, #18
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004858:	5cd3      	ldrb	r3, [r2, r3]
 800485a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d010      	beq.n	8004888 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004866:	4b11      	ldr	r3, [pc, #68]	; (80048ac <HAL_RCC_GetSysClockFreq+0x94>)
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	0c5b      	lsrs	r3, r3, #17
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	4a11      	ldr	r2, [pc, #68]	; (80048b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004872:	5cd3      	ldrb	r3, [r2, r3]
 8004874:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a0d      	ldr	r2, [pc, #52]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800487a:	fb03 f202 	mul.w	r2, r3, r2
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e004      	b.n	8004892 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a0c      	ldr	r2, [pc, #48]	; (80048bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800488c:	fb02 f303 	mul.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	613b      	str	r3, [r7, #16]
      break;
 8004896:	e002      	b.n	800489e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004898:	4b05      	ldr	r3, [pc, #20]	; (80048b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800489a:	613b      	str	r3, [r7, #16]
      break;
 800489c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489e:	693b      	ldr	r3, [r7, #16]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	371c      	adds	r7, #28
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bc80      	pop	{r7}
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40021000 	.word	0x40021000
 80048b0:	007a1200 	.word	0x007a1200
 80048b4:	08008800 	.word	0x08008800
 80048b8:	08008810 	.word	0x08008810
 80048bc:	003d0900 	.word	0x003d0900

080048c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048c0:	b480      	push	{r7}
 80048c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048c4:	4b02      	ldr	r3, [pc, #8]	; (80048d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80048c6:	681b      	ldr	r3, [r3, #0]
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bc80      	pop	{r7}
 80048ce:	4770      	bx	lr
 80048d0:	20000000 	.word	0x20000000

080048d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d8:	f7ff fff2 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 80048dc:	4602      	mov	r2, r0
 80048de:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	0a1b      	lsrs	r3, r3, #8
 80048e4:	f003 0307 	and.w	r3, r3, #7
 80048e8:	4903      	ldr	r1, [pc, #12]	; (80048f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ea:	5ccb      	ldrb	r3, [r1, r3]
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	40021000 	.word	0x40021000
 80048f8:	080087f8 	.word	0x080087f8

080048fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004900:	f7ff ffde 	bl	80048c0 <HAL_RCC_GetHCLKFreq>
 8004904:	4602      	mov	r2, r0
 8004906:	4b05      	ldr	r3, [pc, #20]	; (800491c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	0adb      	lsrs	r3, r3, #11
 800490c:	f003 0307 	and.w	r3, r3, #7
 8004910:	4903      	ldr	r1, [pc, #12]	; (8004920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004912:	5ccb      	ldrb	r3, [r1, r3]
 8004914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004918:	4618      	mov	r0, r3
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40021000 	.word	0x40021000
 8004920:	080087f8 	.word	0x080087f8

08004924 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	220f      	movs	r2, #15
 8004932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004934:	4b11      	ldr	r3, [pc, #68]	; (800497c <HAL_RCC_GetClockConfig+0x58>)
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f003 0203 	and.w	r2, r3, #3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004940:	4b0e      	ldr	r3, [pc, #56]	; (800497c <HAL_RCC_GetClockConfig+0x58>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800494c:	4b0b      	ldr	r3, [pc, #44]	; (800497c <HAL_RCC_GetClockConfig+0x58>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004958:	4b08      	ldr	r3, [pc, #32]	; (800497c <HAL_RCC_GetClockConfig+0x58>)
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	08db      	lsrs	r3, r3, #3
 800495e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004966:	4b06      	ldr	r3, [pc, #24]	; (8004980 <HAL_RCC_GetClockConfig+0x5c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0207 	and.w	r2, r3, #7
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	bc80      	pop	{r7}
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	40022000 	.word	0x40022000

08004984 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <RCC_Delay+0x34>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0a      	ldr	r2, [pc, #40]	; (80049bc <RCC_Delay+0x38>)
 8004992:	fba2 2303 	umull	r2, r3, r2, r3
 8004996:	0a5b      	lsrs	r3, r3, #9
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	fb02 f303 	mul.w	r3, r2, r3
 800499e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80049a0:	bf00      	nop
  }
  while (Delay --);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	1e5a      	subs	r2, r3, #1
 80049a6:	60fa      	str	r2, [r7, #12]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d1f9      	bne.n	80049a0 <RCC_Delay+0x1c>
}
 80049ac:	bf00      	nop
 80049ae:	bf00      	nop
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bc80      	pop	{r7}
 80049b6:	4770      	bx	lr
 80049b8:	20000000 	.word	0x20000000
 80049bc:	10624dd3 	.word	0x10624dd3

080049c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b086      	sub	sp, #24
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0301 	and.w	r3, r3, #1
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d07d      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80049dc:	2300      	movs	r3, #0
 80049de:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049e0:	4b4f      	ldr	r3, [pc, #316]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10d      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049ec:	4b4c      	ldr	r3, [pc, #304]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ee:	69db      	ldr	r3, [r3, #28]
 80049f0:	4a4b      	ldr	r2, [pc, #300]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f6:	61d3      	str	r3, [r2, #28]
 80049f8:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049fa:	69db      	ldr	r3, [r3, #28]
 80049fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a04:	2301      	movs	r3, #1
 8004a06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d118      	bne.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a14:	4b43      	ldr	r3, [pc, #268]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a42      	ldr	r2, [pc, #264]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a20:	f7fd fff2 	bl	8002a08 <HAL_GetTick>
 8004a24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	e008      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a28:	f7fd ffee 	bl	8002a08 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b64      	cmp	r3, #100	; 0x64
 8004a34:	d901      	bls.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e06d      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a3a:	4b3a      	ldr	r3, [pc, #232]	; (8004b24 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d0f0      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a46:	4b36      	ldr	r3, [pc, #216]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a48:	6a1b      	ldr	r3, [r3, #32]
 8004a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a4e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d02e      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d027      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a64:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a66:	6a1b      	ldr	r3, [r3, #32]
 8004a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a6c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004a6e:	4b2e      	ldr	r3, [pc, #184]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a70:	2201      	movs	r2, #1
 8004a72:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004a74:	4b2c      	ldr	r3, [pc, #176]	; (8004b28 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004a7a:	4a29      	ldr	r2, [pc, #164]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8a:	f7fd ffbd 	bl	8002a08 <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a92:	f7fd ffb9 	bl	8002a08 <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e036      	b.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aa8:	4b1d      	ldr	r3, [pc, #116]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004aaa:	6a1b      	ldr	r3, [r3, #32]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d0ee      	beq.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ab4:	4b1a      	ldr	r3, [pc, #104]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ab6:	6a1b      	ldr	r3, [r3, #32]
 8004ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	4917      	ldr	r1, [pc, #92]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004ac6:	7dfb      	ldrb	r3, [r7, #23]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d105      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004acc:	4b14      	ldr	r3, [pc, #80]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ace:	69db      	ldr	r3, [r3, #28]
 8004ad0:	4a13      	ldr	r2, [pc, #76]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ae4:	4b0e      	ldr	r3, [pc, #56]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	490b      	ldr	r1, [pc, #44]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0310 	and.w	r3, r3, #16
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d008      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b02:	4b07      	ldr	r3, [pc, #28]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	4904      	ldr	r1, [pc, #16]	; (8004b20 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	40021000 	.word	0x40021000
 8004b24:	40007000 	.word	0x40007000
 8004b28:	42420440 	.word	0x42420440

08004b2c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b088      	sub	sp, #32
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	617b      	str	r3, [r7, #20]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]
 8004b44:	2300      	movs	r3, #0
 8004b46:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b10      	cmp	r3, #16
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	f200 808a 	bhi.w	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d045      	beq.n	8004be8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d075      	beq.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004b62:	e082      	b.n	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004b64:	4b46      	ldr	r3, [pc, #280]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004b6a:	4b45      	ldr	r3, [pc, #276]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d07b      	beq.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	0c9b      	lsrs	r3, r3, #18
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	4a41      	ldr	r2, [pc, #260]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b80:	5cd3      	ldrb	r3, [r2, r3]
 8004b82:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d015      	beq.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b8e:	4b3c      	ldr	r3, [pc, #240]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	0c5b      	lsrs	r3, r3, #17
 8004b94:	f003 0301 	and.w	r3, r3, #1
 8004b98:	4a3b      	ldr	r2, [pc, #236]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b9a:	5cd3      	ldrb	r3, [r2, r3]
 8004b9c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00d      	beq.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004ba8:	4a38      	ldr	r2, [pc, #224]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	61fb      	str	r3, [r7, #28]
 8004bb8:	e004      	b.n	8004bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	4a34      	ldr	r2, [pc, #208]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004bbe:	fb02 f303 	mul.w	r3, r2, r3
 8004bc2:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004bc4:	4b2e      	ldr	r3, [pc, #184]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bd0:	d102      	bne.n	8004bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	61bb      	str	r3, [r7, #24]
      break;
 8004bd6:	e04a      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4a2d      	ldr	r2, [pc, #180]	; (8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004bde:	fba2 2303 	umull	r2, r3, r2, r3
 8004be2:	085b      	lsrs	r3, r3, #1
 8004be4:	61bb      	str	r3, [r7, #24]
      break;
 8004be6:	e042      	b.n	8004c6e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004be8:	4b25      	ldr	r3, [pc, #148]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bea:	6a1b      	ldr	r3, [r3, #32]
 8004bec:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bf8:	d108      	bne.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d003      	beq.n	8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c08:	61bb      	str	r3, [r7, #24]
 8004c0a:	e01f      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c16:	d109      	bne.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004c18:	4b19      	ldr	r3, [pc, #100]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d003      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004c24:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004c28:	61bb      	str	r3, [r7, #24]
 8004c2a:	e00f      	b.n	8004c4c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c36:	d11c      	bne.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c38:	4b11      	ldr	r3, [pc, #68]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d016      	beq.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004c44:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004c48:	61bb      	str	r3, [r7, #24]
      break;
 8004c4a:	e012      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004c4c:	e011      	b.n	8004c72 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004c4e:	f7ff fe55 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 8004c52:	4602      	mov	r2, r0
 8004c54:	4b0a      	ldr	r3, [pc, #40]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	0b9b      	lsrs	r3, r3, #14
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	3301      	adds	r3, #1
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	61bb      	str	r3, [r7, #24]
      break;
 8004c68:	e004      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e002      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c6e:	bf00      	nop
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004c72:	bf00      	nop
    }
  }
  return (frequency);
 8004c74:	69bb      	ldr	r3, [r7, #24]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3720      	adds	r7, #32
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	08008814 	.word	0x08008814
 8004c88:	08008824 	.word	0x08008824
 8004c8c:	007a1200 	.word	0x007a1200
 8004c90:	003d0900 	.word	0x003d0900
 8004c94:	aaaaaaab 	.word	0xaaaaaaab

08004c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e076      	b.n	8004d98 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d108      	bne.n	8004cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cba:	d009      	beq.n	8004cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	61da      	str	r2, [r3, #28]
 8004cc2:	e005      	b.n	8004cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fa8a 	bl	8002204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2202      	movs	r2, #2
 8004cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004d18:	431a      	orrs	r2, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d22:	431a      	orrs	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d40:	431a      	orrs	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a1b      	ldr	r3, [r3, #32]
 8004d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d54:	ea42 0103 	orr.w	r1, r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	699b      	ldr	r3, [r3, #24]
 8004d6c:	0c1a      	lsrs	r2, r3, #16
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f002 0204 	and.w	r2, r2, #4
 8004d76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	69da      	ldr	r2, [r3, #28]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3708      	adds	r7, #8
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b082      	sub	sp, #8
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e01a      	b.n	8004de8 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2202      	movs	r2, #2
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dc8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fd faa0 	bl	8002310 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e041      	b.n	8004e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d106      	bne.n	8004e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f7fd faac 	bl	8002374 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	3304      	adds	r3, #4
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4610      	mov	r0, r2
 8004e30:	f000 fac8 	bl	80053c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}

08004e8e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004e8e:	b580      	push	{r7, lr}
 8004e90:	b082      	sub	sp, #8
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2202      	movs	r2, #2
 8004e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6a1a      	ldr	r2, [r3, #32]
 8004ea4:	f241 1311 	movw	r3, #4369	; 0x1111
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d10f      	bne.n	8004ece <HAL_TIM_Base_DeInit+0x40>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	6a1a      	ldr	r2, [r3, #32]
 8004eb4:	f240 4344 	movw	r3, #1092	; 0x444
 8004eb8:	4013      	ands	r3, r2
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_Base_DeInit+0x40>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0201 	bic.w	r2, r2, #1
 8004ecc:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f7fd fa94 	bl	80023fc <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
	...

08004f38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d001      	beq.n	8004f50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e03a      	b.n	8004fc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f042 0201 	orr.w	r2, r2, #1
 8004f66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_TIM_Base_Start_IT+0x98>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00e      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x58>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d009      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x58>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d004      	beq.n	8004f90 <HAL_TIM_Base_Start_IT+0x58>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a13      	ldr	r2, [pc, #76]	; (8004fd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d111      	bne.n	8004fb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b06      	cmp	r3, #6
 8004fa0:	d010      	beq.n	8004fc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f042 0201 	orr.w	r2, r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb2:	e007      	b.n	8004fc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0201 	orr.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr
 8004fd0:	40012c00 	.word	0x40012c00
 8004fd4:	40000400 	.word	0x40000400
 8004fd8:	40000800 	.word	0x40000800

08004fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d122      	bne.n	8005038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d11b      	bne.n	8005038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f06f 0202 	mvn.w	r2, #2
 8005008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9b4 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8005024:	e005      	b.n	8005032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f9a7 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 f9b6 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2200      	movs	r2, #0
 8005036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	f003 0304 	and.w	r3, r3, #4
 8005042:	2b04      	cmp	r3, #4
 8005044:	d122      	bne.n	800508c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b04      	cmp	r3, #4
 8005052:	d11b      	bne.n	800508c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f06f 0204 	mvn.w	r2, #4
 800505c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800506e:	2b00      	cmp	r3, #0
 8005070:	d003      	beq.n	800507a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f98a 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8005078:	e005      	b.n	8005086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f000 f97d 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f98c 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d122      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f003 0308 	and.w	r3, r3, #8
 80050a4:	2b08      	cmp	r3, #8
 80050a6:	d11b      	bne.n	80050e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f06f 0208 	mvn.w	r2, #8
 80050b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2204      	movs	r2, #4
 80050b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 0303 	and.w	r3, r3, #3
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f960 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 80050cc:	e005      	b.n	80050da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f953 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 f962 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	f003 0310 	and.w	r3, r3, #16
 80050ea:	2b10      	cmp	r3, #16
 80050ec:	d122      	bne.n	8005134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	f003 0310 	and.w	r3, r3, #16
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d11b      	bne.n	8005134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f06f 0210 	mvn.w	r2, #16
 8005104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2208      	movs	r2, #8
 800510a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f936 	bl	800538c <HAL_TIM_IC_CaptureCallback>
 8005120:	e005      	b.n	800512e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f929 	bl	800537a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 f938 	bl	800539e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b01      	cmp	r3, #1
 8005140:	d10e      	bne.n	8005160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0301 	and.w	r3, r3, #1
 800514c:	2b01      	cmp	r3, #1
 800514e:	d107      	bne.n	8005160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0201 	mvn.w	r2, #1
 8005158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fc fe3c 	bl	8001dd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800516a:	2b80      	cmp	r3, #128	; 0x80
 800516c:	d10e      	bne.n	800518c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005178:	2b80      	cmp	r3, #128	; 0x80
 800517a:	d107      	bne.n	800518c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fa7b 	bl	8005682 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d10e      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a4:	2b40      	cmp	r3, #64	; 0x40
 80051a6:	d107      	bne.n	80051b8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 f8fc 	bl	80053b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	f003 0320 	and.w	r3, r3, #32
 80051c2:	2b20      	cmp	r3, #32
 80051c4:	d10e      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b20      	cmp	r3, #32
 80051d2:	d107      	bne.n	80051e4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0220 	mvn.w	r2, #32
 80051dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa46 	bl	8005670 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051e4:	bf00      	nop
 80051e6:	3708      	adds	r7, #8
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_TIM_ConfigClockSource+0x1c>
 8005204:	2302      	movs	r3, #2
 8005206:	e0b4      	b.n	8005372 <HAL_TIM_ConfigClockSource+0x186>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2202      	movs	r2, #2
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800522e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005240:	d03e      	beq.n	80052c0 <HAL_TIM_ConfigClockSource+0xd4>
 8005242:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005246:	f200 8087 	bhi.w	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 800524a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524e:	f000 8086 	beq.w	800535e <HAL_TIM_ConfigClockSource+0x172>
 8005252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005256:	d87f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005258:	2b70      	cmp	r3, #112	; 0x70
 800525a:	d01a      	beq.n	8005292 <HAL_TIM_ConfigClockSource+0xa6>
 800525c:	2b70      	cmp	r3, #112	; 0x70
 800525e:	d87b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005260:	2b60      	cmp	r3, #96	; 0x60
 8005262:	d050      	beq.n	8005306 <HAL_TIM_ConfigClockSource+0x11a>
 8005264:	2b60      	cmp	r3, #96	; 0x60
 8005266:	d877      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005268:	2b50      	cmp	r3, #80	; 0x50
 800526a:	d03c      	beq.n	80052e6 <HAL_TIM_ConfigClockSource+0xfa>
 800526c:	2b50      	cmp	r3, #80	; 0x50
 800526e:	d873      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005270:	2b40      	cmp	r3, #64	; 0x40
 8005272:	d058      	beq.n	8005326 <HAL_TIM_ConfigClockSource+0x13a>
 8005274:	2b40      	cmp	r3, #64	; 0x40
 8005276:	d86f      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005278:	2b30      	cmp	r3, #48	; 0x30
 800527a:	d064      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 800527c:	2b30      	cmp	r3, #48	; 0x30
 800527e:	d86b      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d060      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d867      	bhi.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d05c      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 800528c:	2b10      	cmp	r3, #16
 800528e:	d05a      	beq.n	8005346 <HAL_TIM_ConfigClockSource+0x15a>
 8005290:	e062      	b.n	8005358 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052a2:	f000 f968 	bl	8005576 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	609a      	str	r2, [r3, #8]
      break;
 80052be:	e04f      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80052d0:	f000 f951 	bl	8005576 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052e2:	609a      	str	r2, [r3, #8]
      break;
 80052e4:	e03c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052f2:	461a      	mov	r2, r3
 80052f4:	f000 f8c8 	bl	8005488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	2150      	movs	r1, #80	; 0x50
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 f91f 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 8005304:	e02c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005312:	461a      	mov	r2, r3
 8005314:	f000 f8e6 	bl	80054e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2160      	movs	r1, #96	; 0x60
 800531e:	4618      	mov	r0, r3
 8005320:	f000 f90f 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 8005324:	e01c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005332:	461a      	mov	r2, r3
 8005334:	f000 f8a8 	bl	8005488 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	2140      	movs	r1, #64	; 0x40
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f8ff 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 8005344:	e00c      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4619      	mov	r1, r3
 8005350:	4610      	mov	r0, r2
 8005352:	f000 f8f6 	bl	8005542 <TIM_ITRx_SetConfig>
      break;
 8005356:	e003      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005358:	2301      	movs	r3, #1
 800535a:	73fb      	strb	r3, [r7, #15]
      break;
 800535c:	e000      	b.n	8005360 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800535e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800537a:	b480      	push	{r7}
 800537c:	b083      	sub	sp, #12
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	bc80      	pop	{r7}
 800538a:	4770      	bx	lr

0800538c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005394:	bf00      	nop
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	bc80      	pop	{r7}
 800539c:	4770      	bx	lr

0800539e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800539e:	b480      	push	{r7}
 80053a0:	b083      	sub	sp, #12
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053a6:	bf00      	nop
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bc80      	pop	{r7}
 80053ae:	4770      	bx	lr

080053b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053b8:	bf00      	nop
 80053ba:	370c      	adds	r7, #12
 80053bc:	46bd      	mov	sp, r7
 80053be:	bc80      	pop	{r7}
 80053c0:	4770      	bx	lr
	...

080053c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b085      	sub	sp, #20
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a29      	ldr	r2, [pc, #164]	; (800547c <TIM_Base_SetConfig+0xb8>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d00b      	beq.n	80053f4 <TIM_Base_SetConfig+0x30>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053e2:	d007      	beq.n	80053f4 <TIM_Base_SetConfig+0x30>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a26      	ldr	r2, [pc, #152]	; (8005480 <TIM_Base_SetConfig+0xbc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_Base_SetConfig+0x30>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a25      	ldr	r2, [pc, #148]	; (8005484 <TIM_Base_SetConfig+0xc0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d108      	bne.n	8005406 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4313      	orrs	r3, r2
 8005404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a1c      	ldr	r2, [pc, #112]	; (800547c <TIM_Base_SetConfig+0xb8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d00b      	beq.n	8005426 <TIM_Base_SetConfig+0x62>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005414:	d007      	beq.n	8005426 <TIM_Base_SetConfig+0x62>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a19      	ldr	r2, [pc, #100]	; (8005480 <TIM_Base_SetConfig+0xbc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d003      	beq.n	8005426 <TIM_Base_SetConfig+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	4a18      	ldr	r2, [pc, #96]	; (8005484 <TIM_Base_SetConfig+0xc0>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d108      	bne.n	8005438 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800542c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	4313      	orrs	r3, r2
 8005436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68fa      	ldr	r2, [r7, #12]
 800544a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	689a      	ldr	r2, [r3, #8]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a07      	ldr	r2, [pc, #28]	; (800547c <TIM_Base_SetConfig+0xb8>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d103      	bne.n	800546c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	691a      	ldr	r2, [r3, #16]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	615a      	str	r2, [r3, #20]
}
 8005472:	bf00      	nop
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	bc80      	pop	{r7}
 800547a:	4770      	bx	lr
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40000400 	.word	0x40000400
 8005484:	40000800 	.word	0x40000800

08005488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005488:	b480      	push	{r7}
 800548a:	b087      	sub	sp, #28
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a1b      	ldr	r3, [r3, #32]
 8005498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	011b      	lsls	r3, r3, #4
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	f023 030a 	bic.w	r3, r3, #10
 80054c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	bc80      	pop	{r7}
 80054e2:	4770      	bx	lr

080054e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	f023 0210 	bic.w	r2, r3, #16
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	699b      	ldr	r3, [r3, #24]
 8005506:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800550e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	693a      	ldr	r2, [r7, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005520:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	4313      	orrs	r3, r2
 800552a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	621a      	str	r2, [r3, #32]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	bc80      	pop	{r7}
 8005540:	4770      	bx	lr

08005542 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005542:	b480      	push	{r7}
 8005544:	b085      	sub	sp, #20
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005558:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4313      	orrs	r3, r2
 8005560:	f043 0307 	orr.w	r3, r3, #7
 8005564:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	68fa      	ldr	r2, [r7, #12]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005576:	b480      	push	{r7}
 8005578:	b087      	sub	sp, #28
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
 8005582:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005590:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	021a      	lsls	r2, r3, #8
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	431a      	orrs	r2, r3
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4313      	orrs	r3, r2
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	609a      	str	r2, [r3, #8]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e046      	b.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a16      	ldr	r2, [pc, #88]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00e      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d009      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a12      	ldr	r2, [pc, #72]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d004      	beq.n	800562e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a10      	ldr	r2, [pc, #64]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10c      	bne.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005634:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	4313      	orrs	r3, r2
 800563e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68ba      	ldr	r2, [r7, #8]
 8005646:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3714      	adds	r7, #20
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr
 8005664:	40012c00 	.word	0x40012c00
 8005668:	40000400 	.word	0x40000400
 800566c:	40000800 	.word	0x40000800

08005670 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005678:	bf00      	nop
 800567a:	370c      	adds	r7, #12
 800567c:	46bd      	mov	sp, r7
 800567e:	bc80      	pop	{r7}
 8005680:	4770      	bx	lr

08005682 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005682:	b480      	push	{r7}
 8005684:	b083      	sub	sp, #12
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800568a:	bf00      	nop
 800568c:	370c      	adds	r7, #12
 800568e:	46bd      	mov	sp, r7
 8005690:	bc80      	pop	{r7}
 8005692:	4770      	bx	lr

08005694 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b082      	sub	sp, #8
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d101      	bne.n	80056a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	e042      	b.n	800572c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7fc fed0 	bl	8002460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2224      	movs	r2, #36	; 0x24
 80056c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f9e1 	bl	8005aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691a      	ldr	r2, [r3, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695a      	ldr	r2, [r3, #20]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800570c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2220      	movs	r2, #32
 8005718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2220      	movs	r2, #32
 8005720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800572a:	2300      	movs	r3, #0
}
 800572c:	4618      	mov	r0, r3
 800572e:	3708      	adds	r7, #8
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e024      	b.n	8005790 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2224      	movs	r2, #36	; 0x24
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800575c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f7fc ff52 	bl	8002608 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3708      	adds	r7, #8
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b08a      	sub	sp, #40	; 0x28
 800579c:	af02      	add	r7, sp, #8
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	603b      	str	r3, [r7, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057a8:	2300      	movs	r3, #0
 80057aa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b20      	cmp	r3, #32
 80057b6:	d16d      	bne.n	8005894 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d002      	beq.n	80057c4 <HAL_UART_Transmit+0x2c>
 80057be:	88fb      	ldrh	r3, [r7, #6]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d101      	bne.n	80057c8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e066      	b.n	8005896 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2221      	movs	r2, #33	; 0x21
 80057d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057d6:	f7fd f917 	bl	8002a08 <HAL_GetTick>
 80057da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	88fa      	ldrh	r2, [r7, #6]
 80057e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f0:	d108      	bne.n	8005804 <HAL_UART_Transmit+0x6c>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d104      	bne.n	8005804 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057fa:	2300      	movs	r3, #0
 80057fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	61bb      	str	r3, [r7, #24]
 8005802:	e003      	b.n	800580c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800580c:	e02a      	b.n	8005864 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2200      	movs	r2, #0
 8005816:	2180      	movs	r1, #128	; 0x80
 8005818:	68f8      	ldr	r0, [r7, #12]
 800581a:	f000 f8d2 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d001      	beq.n	8005828 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e036      	b.n	8005896 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d10b      	bne.n	8005846 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800582e:	69bb      	ldr	r3, [r7, #24]
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800583c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	3302      	adds	r3, #2
 8005842:	61bb      	str	r3, [r7, #24]
 8005844:	e007      	b.n	8005856 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	781a      	ldrb	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585a:	b29b      	uxth	r3, r3
 800585c:	3b01      	subs	r3, #1
 800585e:	b29a      	uxth	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1cf      	bne.n	800580e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	2200      	movs	r2, #0
 8005876:	2140      	movs	r1, #64	; 0x40
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f8a2 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800587e:	4603      	mov	r3, r0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e006      	b.n	8005896 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005890:	2300      	movs	r3, #0
 8005892:	e000      	b.n	8005896 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005894:	2302      	movs	r3, #2
  }
}
 8005896:	4618      	mov	r0, r3
 8005898:	3720      	adds	r7, #32
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}

0800589e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800589e:	b580      	push	{r7, lr}
 80058a0:	b08a      	sub	sp, #40	; 0x28
 80058a2:	af02      	add	r7, sp, #8
 80058a4:	60f8      	str	r0, [r7, #12]
 80058a6:	60b9      	str	r1, [r7, #8]
 80058a8:	603b      	str	r3, [r7, #0]
 80058aa:	4613      	mov	r3, r2
 80058ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d17c      	bne.n	80059b8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d002      	beq.n	80058ca <HAL_UART_Receive+0x2c>
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e075      	b.n	80059ba <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2200      	movs	r2, #0
 80058d2:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2222      	movs	r2, #34	; 0x22
 80058d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058e2:	f7fd f891 	bl	8002a08 <HAL_GetTick>
 80058e6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	88fa      	ldrh	r2, [r7, #6]
 80058ec:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	88fa      	ldrh	r2, [r7, #6]
 80058f2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058fc:	d108      	bne.n	8005910 <HAL_UART_Receive+0x72>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d104      	bne.n	8005910 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8005906:	2300      	movs	r3, #0
 8005908:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	61bb      	str	r3, [r7, #24]
 800590e:	e003      	b.n	8005918 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005914:	2300      	movs	r3, #0
 8005916:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005918:	e043      	b.n	80059a2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	9300      	str	r3, [sp, #0]
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2200      	movs	r2, #0
 8005922:	2120      	movs	r1, #32
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f000 f84c 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	e042      	b.n	80059ba <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8005934:	69fb      	ldr	r3, [r7, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10c      	bne.n	8005954 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	b29b      	uxth	r3, r3
 8005942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005946:	b29a      	uxth	r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	3302      	adds	r3, #2
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e01f      	b.n	8005994 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d007      	beq.n	800596e <HAL_UART_Receive+0xd0>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10a      	bne.n	800597c <HAL_UART_Receive+0xde>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	b2da      	uxtb	r2, r3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	701a      	strb	r2, [r3, #0]
 800597a:	e008      	b.n	800598e <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005988:	b2da      	uxtb	r2, r3
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	3301      	adds	r3, #1
 8005992:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1b6      	bne.n	800591a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 80059b4:	2300      	movs	r3, #0
 80059b6:	e000      	b.n	80059ba <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80059b8:	2302      	movs	r3, #2
  }
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3720      	adds	r7, #32
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b090      	sub	sp, #64	; 0x40
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e050      	b.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059da:	d04c      	beq.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80059e2:	f7fd f811 	bl	8002a08 <HAL_GetTick>
 80059e6:	4602      	mov	r2, r0
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d241      	bcs.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	330c      	adds	r3, #12
 80059f8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a12:	637a      	str	r2, [r7, #52]	; 0x34
 8005a14:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e5      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	613b      	str	r3, [r7, #16]
   return(result);
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a46:	623a      	str	r2, [r7, #32]
 8005a48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	69f9      	ldr	r1, [r7, #28]
 8005a4c:	6a3a      	ldr	r2, [r7, #32]
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e00f      	b.n	8005a96 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	4013      	ands	r3, r2
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	bf0c      	ite	eq
 8005a86:	2301      	moveq	r3, #1
 8005a88:	2300      	movne	r3, #0
 8005a8a:	b2db      	uxtb	r3, r3
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	79fb      	ldrb	r3, [r7, #7]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d09f      	beq.n	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3740      	adds	r7, #64	; 0x40
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
	...

08005aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68da      	ldr	r2, [r3, #12]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689a      	ldr	r2, [r3, #8]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	695b      	ldr	r3, [r3, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	68db      	ldr	r3, [r3, #12]
 8005ad6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005ada:	f023 030c 	bic.w	r3, r3, #12
 8005ade:	687a      	ldr	r2, [r7, #4]
 8005ae0:	6812      	ldr	r2, [r2, #0]
 8005ae2:	68b9      	ldr	r1, [r7, #8]
 8005ae4:	430b      	orrs	r3, r1
 8005ae6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699a      	ldr	r2, [r3, #24]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4a2c      	ldr	r2, [pc, #176]	; (8005bb4 <UART_SetConfig+0x114>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d103      	bne.n	8005b10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005b08:	f7fe fef8 	bl	80048fc <HAL_RCC_GetPCLK2Freq>
 8005b0c:	60f8      	str	r0, [r7, #12]
 8005b0e:	e002      	b.n	8005b16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005b10:	f7fe fee0 	bl	80048d4 <HAL_RCC_GetPCLK1Freq>
 8005b14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009a      	lsls	r2, r3, #2
 8005b20:	441a      	add	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b2c:	4a22      	ldr	r2, [pc, #136]	; (8005bb8 <UART_SetConfig+0x118>)
 8005b2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	0119      	lsls	r1, r3, #4
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	009a      	lsls	r2, r3, #2
 8005b40:	441a      	add	r2, r3
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <UART_SetConfig+0x118>)
 8005b4e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b52:	095b      	lsrs	r3, r3, #5
 8005b54:	2064      	movs	r0, #100	; 0x64
 8005b56:	fb00 f303 	mul.w	r3, r0, r3
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	011b      	lsls	r3, r3, #4
 8005b5e:	3332      	adds	r3, #50	; 0x32
 8005b60:	4a15      	ldr	r2, [pc, #84]	; (8005bb8 <UART_SetConfig+0x118>)
 8005b62:	fba2 2303 	umull	r2, r3, r2, r3
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b6c:	4419      	add	r1, r3
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	4613      	mov	r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	009a      	lsls	r2, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b84:	4b0c      	ldr	r3, [pc, #48]	; (8005bb8 <UART_SetConfig+0x118>)
 8005b86:	fba3 0302 	umull	r0, r3, r3, r2
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2064      	movs	r0, #100	; 0x64
 8005b8e:	fb00 f303 	mul.w	r3, r0, r3
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	3332      	adds	r3, #50	; 0x32
 8005b98:	4a07      	ldr	r2, [pc, #28]	; (8005bb8 <UART_SetConfig+0x118>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f003 020f 	and.w	r2, r3, #15
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	440a      	add	r2, r1
 8005baa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005bac:	bf00      	nop
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}
 8005bb4:	40013800 	.word	0x40013800
 8005bb8:	51eb851f 	.word	0x51eb851f

08005bbc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b085      	sub	sp, #20
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005bca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005bce:	2b84      	cmp	r3, #132	; 0x84
 8005bd0:	d005      	beq.n	8005bde <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005bd2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	3303      	adds	r3, #3
 8005bdc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bc80      	pop	{r7}
 8005be8:	4770      	bx	lr

08005bea <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005bea:	b580      	push	{r7, lr}
 8005bec:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005bee:	f000 fa67 	bl	80060c0 <vTaskStartScheduler>
  
  return osOK;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bfa:	b089      	sub	sp, #36	; 0x24
 8005bfc:	af04      	add	r7, sp, #16
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d020      	beq.n	8005c4c <osThreadCreate+0x54>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d01c      	beq.n	8005c4c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685c      	ldr	r4, [r3, #4]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691e      	ldr	r6, [r3, #16]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7ff ffc9 	bl	8005bbc <makeFreeRtosPriority>
 8005c2a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c34:	9202      	str	r2, [sp, #8]
 8005c36:	9301      	str	r3, [sp, #4]
 8005c38:	9100      	str	r1, [sp, #0]
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	4632      	mov	r2, r6
 8005c3e:	4629      	mov	r1, r5
 8005c40:	4620      	mov	r0, r4
 8005c42:	f000 f89c 	bl	8005d7e <xTaskCreateStatic>
 8005c46:	4603      	mov	r3, r0
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e01c      	b.n	8005c86 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	685c      	ldr	r4, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c58:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7ff ffab 	bl	8005bbc <makeFreeRtosPriority>
 8005c66:	4602      	mov	r2, r0
 8005c68:	f107 030c 	add.w	r3, r7, #12
 8005c6c:	9301      	str	r3, [sp, #4]
 8005c6e:	9200      	str	r2, [sp, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	4632      	mov	r2, r6
 8005c74:	4629      	mov	r1, r5
 8005c76:	4620      	mov	r0, r4
 8005c78:	f000 f8dd 	bl	8005e36 <xTaskCreate>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d001      	beq.n	8005c86 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005c82:	2300      	movs	r3, #0
 8005c84:	e000      	b.n	8005c88 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005c86:	68fb      	ldr	r3, [r7, #12]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3714      	adds	r7, #20
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005c90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f103 0208 	add.w	r2, r3, #8
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ca8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f103 0208 	add.w	r2, r3, #8
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f103 0208 	add.w	r2, r3, #8
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005cc4:	bf00      	nop
 8005cc6:	370c      	adds	r7, #12
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bc80      	pop	{r7}
 8005ccc:	4770      	bx	lr

08005cce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005cdc:	bf00      	nop
 8005cde:	370c      	adds	r7, #12
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bc80      	pop	{r7}
 8005ce4:	4770      	bx	lr

08005ce6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ce6:	b480      	push	{r7}
 8005ce8:	b085      	sub	sp, #20
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]
 8005cee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	68fa      	ldr	r2, [r7, #12]
 8005cfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	689a      	ldr	r2, [r3, #8]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	683a      	ldr	r2, [r7, #0]
 8005d10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	687a      	ldr	r2, [r7, #4]
 8005d16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	1c5a      	adds	r2, r3, #1
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	601a      	str	r2, [r3, #0]
}
 8005d22:	bf00      	nop
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bc80      	pop	{r7}
 8005d2a:	4770      	bx	lr

08005d2c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6892      	ldr	r2, [r2, #8]
 8005d42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	6852      	ldr	r2, [r2, #4]
 8005d4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d103      	bne.n	8005d60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2200      	movs	r2, #0
 8005d64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	1e5a      	subs	r2, r3, #1
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3714      	adds	r7, #20
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bc80      	pop	{r7}
 8005d7c:	4770      	bx	lr

08005d7e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b08e      	sub	sp, #56	; 0x38
 8005d82:	af04      	add	r7, sp, #16
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d10a      	bne.n	8005da8 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005da4:	bf00      	nop
 8005da6:	e7fe      	b.n	8005da6 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10a      	bne.n	8005dc4 <xTaskCreateStatic+0x46>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	61fb      	str	r3, [r7, #28]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dc4:	23a0      	movs	r3, #160	; 0xa0
 8005dc6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	2ba0      	cmp	r3, #160	; 0xa0
 8005dcc:	d00a      	beq.n	8005de4 <xTaskCreateStatic+0x66>
	__asm volatile
 8005dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dd2:	f383 8811 	msr	BASEPRI, r3
 8005dd6:	f3bf 8f6f 	isb	sy
 8005dda:	f3bf 8f4f 	dsb	sy
 8005dde:	61bb      	str	r3, [r7, #24]
}
 8005de0:	bf00      	nop
 8005de2:	e7fe      	b.n	8005de2 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d01e      	beq.n	8005e28 <xTaskCreateStatic+0xaa>
 8005dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005df8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	2202      	movs	r2, #2
 8005dfe:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e02:	2300      	movs	r3, #0
 8005e04:	9303      	str	r3, [sp, #12]
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	9302      	str	r3, [sp, #8]
 8005e0a:	f107 0314 	add.w	r3, r7, #20
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	68b9      	ldr	r1, [r7, #8]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 f850 	bl	8005ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005e22:	f000 f8e3 	bl	8005fec <prvAddNewTaskToReadyList>
 8005e26:	e001      	b.n	8005e2c <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e2c:	697b      	ldr	r3, [r7, #20]
	}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3728      	adds	r7, #40	; 0x28
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08c      	sub	sp, #48	; 0x30
 8005e3a:	af04      	add	r7, sp, #16
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	603b      	str	r3, [r7, #0]
 8005e42:	4613      	mov	r3, r2
 8005e44:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f000 ff96 	bl	8006d7c <pvPortMalloc>
 8005e50:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00e      	beq.n	8005e76 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005e58:	20a0      	movs	r0, #160	; 0xa0
 8005e5a:	f000 ff8f 	bl	8006d7c <pvPortMalloc>
 8005e5e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	697a      	ldr	r2, [r7, #20]
 8005e6a:	631a      	str	r2, [r3, #48]	; 0x30
 8005e6c:	e005      	b.n	8005e7a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e6e:	6978      	ldr	r0, [r7, #20]
 8005e70:	f001 f848 	bl	8006f04 <vPortFree>
 8005e74:	e001      	b.n	8005e7a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e76:	2300      	movs	r3, #0
 8005e78:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d017      	beq.n	8005eb0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005e88:	88fa      	ldrh	r2, [r7, #6]
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	9303      	str	r3, [sp, #12]
 8005e8e:	69fb      	ldr	r3, [r7, #28]
 8005e90:	9302      	str	r3, [sp, #8]
 8005e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e98:	9300      	str	r3, [sp, #0]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68b9      	ldr	r1, [r7, #8]
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 f80e 	bl	8005ec0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ea4:	69f8      	ldr	r0, [r7, #28]
 8005ea6:	f000 f8a1 	bl	8005fec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	61bb      	str	r3, [r7, #24]
 8005eae:	e002      	b.n	8005eb6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005eb4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3720      	adds	r7, #32
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b088      	sub	sp, #32
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f023 0307 	bic.w	r3, r3, #7
 8005ee6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00a      	beq.n	8005f08 <prvInitialiseNewTask+0x48>
	__asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	617b      	str	r3, [r7, #20]
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f08:	2300      	movs	r3, #0
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	e012      	b.n	8005f34 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	7819      	ldrb	r1, [r3, #0]
 8005f16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	3334      	adds	r3, #52	; 0x34
 8005f1e:	460a      	mov	r2, r1
 8005f20:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	4413      	add	r3, r2
 8005f28:	781b      	ldrb	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d006      	beq.n	8005f3c <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	3301      	adds	r3, #1
 8005f32:	61fb      	str	r3, [r7, #28]
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	2b0f      	cmp	r3, #15
 8005f38:	d9e9      	bls.n	8005f0e <prvInitialiseNewTask+0x4e>
 8005f3a:	e000      	b.n	8005f3e <prvInitialiseNewTask+0x7e>
		{
			break;
 8005f3c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	2b06      	cmp	r3, #6
 8005f4a:	d901      	bls.n	8005f50 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f4c:	2306      	movs	r3, #6
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f54:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005f5a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5e:	2200      	movs	r2, #0
 8005f60:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	3304      	adds	r3, #4
 8005f66:	4618      	mov	r0, r3
 8005f68:	f7ff feb1 	bl	8005cce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f6e:	3318      	adds	r3, #24
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7ff feac 	bl	8005cce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f7a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7e:	f1c3 0207 	rsb	r2, r3, #7
 8005f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f84:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f8a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f96:	2200      	movs	r2, #0
 8005f98:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	334c      	adds	r3, #76	; 0x4c
 8005fa0:	224c      	movs	r2, #76	; 0x4c
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 fab7 	bl	8007518 <memset>
 8005faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fac:	4a0c      	ldr	r2, [pc, #48]	; (8005fe0 <prvInitialiseNewTask+0x120>)
 8005fae:	651a      	str	r2, [r3, #80]	; 0x50
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	; (8005fe4 <prvInitialiseNewTask+0x124>)
 8005fb4:	655a      	str	r2, [r3, #84]	; 0x54
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fb8:	4a0b      	ldr	r2, [pc, #44]	; (8005fe8 <prvInitialiseNewTask+0x128>)
 8005fba:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	69b8      	ldr	r0, [r7, #24]
 8005fc2:	f000 fc45 	bl	8006850 <pxPortInitialiseStack>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d002      	beq.n	8005fd8 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fd6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fd8:	bf00      	nop
 8005fda:	3720      	adds	r7, #32
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	20001478 	.word	0x20001478
 8005fe4:	200014e0 	.word	0x200014e0
 8005fe8:	20001548 	.word	0x20001548

08005fec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ff4:	f000 fd1a 	bl	8006a2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ff8:	4b2a      	ldr	r3, [pc, #168]	; (80060a4 <prvAddNewTaskToReadyList+0xb8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	4a29      	ldr	r2, [pc, #164]	; (80060a4 <prvAddNewTaskToReadyList+0xb8>)
 8006000:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006002:	4b29      	ldr	r3, [pc, #164]	; (80060a8 <prvAddNewTaskToReadyList+0xbc>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d109      	bne.n	800601e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800600a:	4a27      	ldr	r2, [pc, #156]	; (80060a8 <prvAddNewTaskToReadyList+0xbc>)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006010:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <prvAddNewTaskToReadyList+0xb8>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b01      	cmp	r3, #1
 8006016:	d110      	bne.n	800603a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006018:	f000 fb54 	bl	80066c4 <prvInitialiseTaskLists>
 800601c:	e00d      	b.n	800603a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800601e:	4b23      	ldr	r3, [pc, #140]	; (80060ac <prvAddNewTaskToReadyList+0xc0>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d109      	bne.n	800603a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006026:	4b20      	ldr	r3, [pc, #128]	; (80060a8 <prvAddNewTaskToReadyList+0xbc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006030:	429a      	cmp	r2, r3
 8006032:	d802      	bhi.n	800603a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006034:	4a1c      	ldr	r2, [pc, #112]	; (80060a8 <prvAddNewTaskToReadyList+0xbc>)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <prvAddNewTaskToReadyList+0xc4>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3301      	adds	r3, #1
 8006040:	4a1b      	ldr	r2, [pc, #108]	; (80060b0 <prvAddNewTaskToReadyList+0xc4>)
 8006042:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006048:	2201      	movs	r2, #1
 800604a:	409a      	lsls	r2, r3
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <prvAddNewTaskToReadyList+0xc8>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4313      	orrs	r3, r2
 8006052:	4a18      	ldr	r2, [pc, #96]	; (80060b4 <prvAddNewTaskToReadyList+0xc8>)
 8006054:	6013      	str	r3, [r2, #0]
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <prvAddNewTaskToReadyList+0xcc>)
 8006064:	441a      	add	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	3304      	adds	r3, #4
 800606a:	4619      	mov	r1, r3
 800606c:	4610      	mov	r0, r2
 800606e:	f7ff fe3a 	bl	8005ce6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006072:	f000 fd0b 	bl	8006a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006076:	4b0d      	ldr	r3, [pc, #52]	; (80060ac <prvAddNewTaskToReadyList+0xc0>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00e      	beq.n	800609c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800607e:	4b0a      	ldr	r3, [pc, #40]	; (80060a8 <prvAddNewTaskToReadyList+0xbc>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006088:	429a      	cmp	r2, r3
 800608a:	d207      	bcs.n	800609c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800608c:	4b0b      	ldr	r3, [pc, #44]	; (80060bc <prvAddNewTaskToReadyList+0xd0>)
 800608e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006092:	601a      	str	r2, [r3, #0]
 8006094:	f3bf 8f4f 	dsb	sy
 8006098:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800609c:	bf00      	nop
 800609e:	3708      	adds	r7, #8
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000820 	.word	0x20000820
 80060a8:	20000720 	.word	0x20000720
 80060ac:	2000082c 	.word	0x2000082c
 80060b0:	2000083c 	.word	0x2000083c
 80060b4:	20000828 	.word	0x20000828
 80060b8:	20000724 	.word	0x20000724
 80060bc:	e000ed04 	.word	0xe000ed04

080060c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08a      	sub	sp, #40	; 0x28
 80060c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80060ce:	463a      	mov	r2, r7
 80060d0:	1d39      	adds	r1, r7, #4
 80060d2:	f107 0308 	add.w	r3, r7, #8
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7fa fd52 	bl	8000b80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	9202      	str	r2, [sp, #8]
 80060e4:	9301      	str	r3, [sp, #4]
 80060e6:	2300      	movs	r3, #0
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	2300      	movs	r3, #0
 80060ec:	460a      	mov	r2, r1
 80060ee:	4921      	ldr	r1, [pc, #132]	; (8006174 <vTaskStartScheduler+0xb4>)
 80060f0:	4821      	ldr	r0, [pc, #132]	; (8006178 <vTaskStartScheduler+0xb8>)
 80060f2:	f7ff fe44 	bl	8005d7e <xTaskCreateStatic>
 80060f6:	4603      	mov	r3, r0
 80060f8:	4a20      	ldr	r2, [pc, #128]	; (800617c <vTaskStartScheduler+0xbc>)
 80060fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060fc:	4b1f      	ldr	r3, [pc, #124]	; (800617c <vTaskStartScheduler+0xbc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d002      	beq.n	800610a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006104:	2301      	movs	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	e001      	b.n	800610e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d11b      	bne.n	800614c <vTaskStartScheduler+0x8c>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	613b      	str	r3, [r7, #16]
}
 8006126:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006128:	4b15      	ldr	r3, [pc, #84]	; (8006180 <vTaskStartScheduler+0xc0>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	334c      	adds	r3, #76	; 0x4c
 800612e:	4a15      	ldr	r2, [pc, #84]	; (8006184 <vTaskStartScheduler+0xc4>)
 8006130:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006132:	4b15      	ldr	r3, [pc, #84]	; (8006188 <vTaskStartScheduler+0xc8>)
 8006134:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006138:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800613a:	4b14      	ldr	r3, [pc, #80]	; (800618c <vTaskStartScheduler+0xcc>)
 800613c:	2201      	movs	r2, #1
 800613e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006140:	4b13      	ldr	r3, [pc, #76]	; (8006190 <vTaskStartScheduler+0xd0>)
 8006142:	2200      	movs	r2, #0
 8006144:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006146:	f000 fbff 	bl	8006948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800614a:	e00e      	b.n	800616a <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006152:	d10a      	bne.n	800616a <vTaskStartScheduler+0xaa>
	__asm volatile
 8006154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006158:	f383 8811 	msr	BASEPRI, r3
 800615c:	f3bf 8f6f 	isb	sy
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	60fb      	str	r3, [r7, #12]
}
 8006166:	bf00      	nop
 8006168:	e7fe      	b.n	8006168 <vTaskStartScheduler+0xa8>
}
 800616a:	bf00      	nop
 800616c:	3718      	adds	r7, #24
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	080087e0 	.word	0x080087e0
 8006178:	080065e9 	.word	0x080065e9
 800617c:	20000844 	.word	0x20000844
 8006180:	20000720 	.word	0x20000720
 8006184:	20000068 	.word	0x20000068
 8006188:	20000840 	.word	0x20000840
 800618c:	2000082c 	.word	0x2000082c
 8006190:	20000824 	.word	0x20000824

08006194 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006198:	4b04      	ldr	r3, [pc, #16]	; (80061ac <vTaskSuspendAll+0x18>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3301      	adds	r3, #1
 800619e:	4a03      	ldr	r2, [pc, #12]	; (80061ac <vTaskSuspendAll+0x18>)
 80061a0:	6013      	str	r3, [r2, #0]
}
 80061a2:	bf00      	nop
 80061a4:	46bd      	mov	sp, r7
 80061a6:	bc80      	pop	{r7}
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop
 80061ac:	20000848 	.word	0x20000848

080061b0 <prvGetExpectedIdleTime>:
/*----------------------------------------------------------*/

#if ( configUSE_TICKLESS_IDLE != 0 )

	static TickType_t prvGetExpectedIdleTime( void )
	{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
	TickType_t xReturn;
	UBaseType_t uxHigherPriorityReadyTasks = pdFALSE;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
				uxHigherPriorityReadyTasks = pdTRUE;
			}
		}
		#else
		{
			const UBaseType_t uxLeastSignificantBit = ( UBaseType_t ) 0x01;
 80061ba:	2301      	movs	r3, #1
 80061bc:	607b      	str	r3, [r7, #4]
			/* When port optimised task selection is used the uxTopReadyPriority
			variable is used as a bit map.  If bits other than the least
			significant bit are set then there are tasks that have a priority
			above the idle priority that are in the Ready state.  This takes
			care of the case where the co-operative scheduler is in use. */
			if( uxTopReadyPriority > uxLeastSignificantBit )
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <prvGetExpectedIdleTime+0x60>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d201      	bcs.n	80061cc <prvGetExpectedIdleTime+0x1c>
			{
				uxHigherPriorityReadyTasks = pdTRUE;
 80061c8:	2301      	movs	r3, #1
 80061ca:	60bb      	str	r3, [r7, #8]
			}
		}
		#endif

		if( pxCurrentTCB->uxPriority > tskIDLE_PRIORITY )
 80061cc:	4b11      	ldr	r3, [pc, #68]	; (8006214 <prvGetExpectedIdleTime+0x64>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <prvGetExpectedIdleTime+0x2c>
		{
			xReturn = 0;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
 80061da:	e012      	b.n	8006202 <prvGetExpectedIdleTime+0x52>
		}
		else if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > 1 )
 80061dc:	4b0e      	ldr	r3, [pc, #56]	; (8006218 <prvGetExpectedIdleTime+0x68>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d902      	bls.n	80061ea <prvGetExpectedIdleTime+0x3a>
		{
			/* There are other idle priority tasks in the ready state.  If
			time slicing is used then the very next tick interrupt must be
			processed. */
			xReturn = 0;
 80061e4:	2300      	movs	r3, #0
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	e00b      	b.n	8006202 <prvGetExpectedIdleTime+0x52>
		}
		else if( uxHigherPriorityReadyTasks != pdFALSE )
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <prvGetExpectedIdleTime+0x46>
		{
			/* There are tasks in the Ready state that have a priority above the
			idle priority.  This path can only be reached if
			configUSE_PREEMPTION is 0. */
			xReturn = 0;
 80061f0:	2300      	movs	r3, #0
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	e005      	b.n	8006202 <prvGetExpectedIdleTime+0x52>
		}
		else
		{
			xReturn = xNextTaskUnblockTime - xTickCount;
 80061f6:	4b09      	ldr	r3, [pc, #36]	; (800621c <prvGetExpectedIdleTime+0x6c>)
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	4b09      	ldr	r3, [pc, #36]	; (8006220 <prvGetExpectedIdleTime+0x70>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	60fb      	str	r3, [r7, #12]
		}

		return xReturn;
 8006202:	68fb      	ldr	r3, [r7, #12]
	}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000828 	.word	0x20000828
 8006214:	20000720 	.word	0x20000720
 8006218:	20000724 	.word	0x20000724
 800621c:	20000840 	.word	0x20000840
 8006220:	20000824 	.word	0x20000824

08006224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800622a:	2300      	movs	r3, #0
 800622c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800622e:	2300      	movs	r3, #0
 8006230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006232:	4b41      	ldr	r3, [pc, #260]	; (8006338 <xTaskResumeAll+0x114>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10a      	bne.n	8006250 <xTaskResumeAll+0x2c>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	603b      	str	r3, [r7, #0]
}
 800624c:	bf00      	nop
 800624e:	e7fe      	b.n	800624e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006250:	f000 fbec 	bl	8006a2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006254:	4b38      	ldr	r3, [pc, #224]	; (8006338 <xTaskResumeAll+0x114>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	4a37      	ldr	r2, [pc, #220]	; (8006338 <xTaskResumeAll+0x114>)
 800625c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625e:	4b36      	ldr	r3, [pc, #216]	; (8006338 <xTaskResumeAll+0x114>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d161      	bne.n	800632a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006266:	4b35      	ldr	r3, [pc, #212]	; (800633c <xTaskResumeAll+0x118>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d05d      	beq.n	800632a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800626e:	e02e      	b.n	80062ce <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006270:	4b33      	ldr	r3, [pc, #204]	; (8006340 <xTaskResumeAll+0x11c>)
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	3318      	adds	r3, #24
 800627c:	4618      	mov	r0, r3
 800627e:	f7ff fd55 	bl	8005d2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	3304      	adds	r3, #4
 8006286:	4618      	mov	r0, r3
 8006288:	f7ff fd50 	bl	8005d2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006290:	2201      	movs	r2, #1
 8006292:	409a      	lsls	r2, r3
 8006294:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <xTaskResumeAll+0x120>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4313      	orrs	r3, r2
 800629a:	4a2a      	ldr	r2, [pc, #168]	; (8006344 <xTaskResumeAll+0x120>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062a2:	4613      	mov	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	4413      	add	r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	4a27      	ldr	r2, [pc, #156]	; (8006348 <xTaskResumeAll+0x124>)
 80062ac:	441a      	add	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3304      	adds	r3, #4
 80062b2:	4619      	mov	r1, r3
 80062b4:	4610      	mov	r0, r2
 80062b6:	f7ff fd16 	bl	8005ce6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062be:	4b23      	ldr	r3, [pc, #140]	; (800634c <xTaskResumeAll+0x128>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d302      	bcc.n	80062ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80062c8:	4b21      	ldr	r3, [pc, #132]	; (8006350 <xTaskResumeAll+0x12c>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062ce:	4b1c      	ldr	r3, [pc, #112]	; (8006340 <xTaskResumeAll+0x11c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1cc      	bne.n	8006270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d001      	beq.n	80062e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062dc:	f000 fa94 	bl	8006808 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80062e0:	4b1c      	ldr	r3, [pc, #112]	; (8006354 <xTaskResumeAll+0x130>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d010      	beq.n	800630e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80062ec:	f000 f85c 	bl	80063a8 <xTaskIncrementTick>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d002      	beq.n	80062fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80062f6:	4b16      	ldr	r3, [pc, #88]	; (8006350 <xTaskResumeAll+0x12c>)
 80062f8:	2201      	movs	r2, #1
 80062fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	3b01      	subs	r3, #1
 8006300:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f1      	bne.n	80062ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8006308:	4b12      	ldr	r3, [pc, #72]	; (8006354 <xTaskResumeAll+0x130>)
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800630e:	4b10      	ldr	r3, [pc, #64]	; (8006350 <xTaskResumeAll+0x12c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d009      	beq.n	800632a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <xTaskResumeAll+0x134>)
 800631c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006320:	601a      	str	r2, [r3, #0]
 8006322:	f3bf 8f4f 	dsb	sy
 8006326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800632a:	f000 fbaf 	bl	8006a8c <vPortExitCritical>

	return xAlreadyYielded;
 800632e:	68bb      	ldr	r3, [r7, #8]
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20000848 	.word	0x20000848
 800633c:	20000820 	.word	0x20000820
 8006340:	200007e0 	.word	0x200007e0
 8006344:	20000828 	.word	0x20000828
 8006348:	20000724 	.word	0x20000724
 800634c:	20000720 	.word	0x20000720
 8006350:	20000834 	.word	0x20000834
 8006354:	20000830 	.word	0x20000830
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vTaskStepTick>:
implementations require configUSE_TICKLESS_IDLE to be set to a value other than
1. */
#if ( configUSE_TICKLESS_IDLE != 0 )

	void vTaskStepTick( const TickType_t xTicksToJump )
	{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
		/* Correct the tick count value after a period during which the tick
		was suppressed.  Note this does *not* call the tick hook function for
		each stepped tick. */
		configASSERT( ( xTickCount + xTicksToJump ) <= xNextTaskUnblockTime );
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <vTaskStepTick+0x44>)
 8006366:	681a      	ldr	r2, [r3, #0]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	441a      	add	r2, r3
 800636c:	4b0d      	ldr	r3, [pc, #52]	; (80063a4 <vTaskStepTick+0x48>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	429a      	cmp	r2, r3
 8006372:	d90a      	bls.n	800638a <vTaskStepTick+0x2e>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006378:	f383 8811 	msr	BASEPRI, r3
 800637c:	f3bf 8f6f 	isb	sy
 8006380:	f3bf 8f4f 	dsb	sy
 8006384:	60fb      	str	r3, [r7, #12]
}
 8006386:	bf00      	nop
 8006388:	e7fe      	b.n	8006388 <vTaskStepTick+0x2c>
		xTickCount += xTicksToJump;
 800638a:	4b05      	ldr	r3, [pc, #20]	; (80063a0 <vTaskStepTick+0x44>)
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4413      	add	r3, r2
 8006392:	4a03      	ldr	r2, [pc, #12]	; (80063a0 <vTaskStepTick+0x44>)
 8006394:	6013      	str	r3, [r2, #0]
		traceINCREASE_TICK_COUNT( xTicksToJump );
	}
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	bc80      	pop	{r7}
 800639e:	4770      	bx	lr
 80063a0:	20000824 	.word	0x20000824
 80063a4:	20000840 	.word	0x20000840

080063a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063b2:	4b51      	ldr	r3, [pc, #324]	; (80064f8 <xTaskIncrementTick+0x150>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 808d 	bne.w	80064d6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063bc:	4b4f      	ldr	r3, [pc, #316]	; (80064fc <xTaskIncrementTick+0x154>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	3301      	adds	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063c4:	4a4d      	ldr	r2, [pc, #308]	; (80064fc <xTaskIncrementTick+0x154>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d120      	bne.n	8006412 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80063d0:	4b4b      	ldr	r3, [pc, #300]	; (8006500 <xTaskIncrementTick+0x158>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00a      	beq.n	80063f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	603b      	str	r3, [r7, #0]
}
 80063ec:	bf00      	nop
 80063ee:	e7fe      	b.n	80063ee <xTaskIncrementTick+0x46>
 80063f0:	4b43      	ldr	r3, [pc, #268]	; (8006500 <xTaskIncrementTick+0x158>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	60fb      	str	r3, [r7, #12]
 80063f6:	4b43      	ldr	r3, [pc, #268]	; (8006504 <xTaskIncrementTick+0x15c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a41      	ldr	r2, [pc, #260]	; (8006500 <xTaskIncrementTick+0x158>)
 80063fc:	6013      	str	r3, [r2, #0]
 80063fe:	4a41      	ldr	r2, [pc, #260]	; (8006504 <xTaskIncrementTick+0x15c>)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	4b40      	ldr	r3, [pc, #256]	; (8006508 <xTaskIncrementTick+0x160>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a3f      	ldr	r2, [pc, #252]	; (8006508 <xTaskIncrementTick+0x160>)
 800640c:	6013      	str	r3, [r2, #0]
 800640e:	f000 f9fb 	bl	8006808 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006412:	4b3e      	ldr	r3, [pc, #248]	; (800650c <xTaskIncrementTick+0x164>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	429a      	cmp	r2, r3
 800641a:	d34d      	bcc.n	80064b8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800641c:	4b38      	ldr	r3, [pc, #224]	; (8006500 <xTaskIncrementTick+0x158>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <xTaskIncrementTick+0x82>
 8006426:	2301      	movs	r3, #1
 8006428:	e000      	b.n	800642c <xTaskIncrementTick+0x84>
 800642a:	2300      	movs	r3, #0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006430:	4b36      	ldr	r3, [pc, #216]	; (800650c <xTaskIncrementTick+0x164>)
 8006432:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006436:	601a      	str	r2, [r3, #0]
					break;
 8006438:	e03e      	b.n	80064b8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800643a:	4b31      	ldr	r3, [pc, #196]	; (8006500 <xTaskIncrementTick+0x158>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	429a      	cmp	r2, r3
 8006450:	d203      	bcs.n	800645a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006452:	4a2e      	ldr	r2, [pc, #184]	; (800650c <xTaskIncrementTick+0x164>)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6013      	str	r3, [r2, #0]
						break;
 8006458:	e02e      	b.n	80064b8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3304      	adds	r3, #4
 800645e:	4618      	mov	r0, r3
 8006460:	f7ff fc64 	bl	8005d2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	3318      	adds	r3, #24
 8006470:	4618      	mov	r0, r3
 8006472:	f7ff fc5b 	bl	8005d2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647a:	2201      	movs	r2, #1
 800647c:	409a      	lsls	r2, r3
 800647e:	4b24      	ldr	r3, [pc, #144]	; (8006510 <xTaskIncrementTick+0x168>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4313      	orrs	r3, r2
 8006484:	4a22      	ldr	r2, [pc, #136]	; (8006510 <xTaskIncrementTick+0x168>)
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	4613      	mov	r3, r2
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4a1f      	ldr	r2, [pc, #124]	; (8006514 <xTaskIncrementTick+0x16c>)
 8006496:	441a      	add	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	3304      	adds	r3, #4
 800649c:	4619      	mov	r1, r3
 800649e:	4610      	mov	r0, r2
 80064a0:	f7ff fc21 	bl	8005ce6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a8:	4b1b      	ldr	r3, [pc, #108]	; (8006518 <xTaskIncrementTick+0x170>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d3b4      	bcc.n	800641c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b6:	e7b1      	b.n	800641c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064b8:	4b17      	ldr	r3, [pc, #92]	; (8006518 <xTaskIncrementTick+0x170>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064be:	4915      	ldr	r1, [pc, #84]	; (8006514 <xTaskIncrementTick+0x16c>)
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	440b      	add	r3, r1
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d907      	bls.n	80064e0 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80064d0:	2301      	movs	r3, #1
 80064d2:	617b      	str	r3, [r7, #20]
 80064d4:	e004      	b.n	80064e0 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80064d6:	4b11      	ldr	r3, [pc, #68]	; (800651c <xTaskIncrementTick+0x174>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	3301      	adds	r3, #1
 80064dc:	4a0f      	ldr	r2, [pc, #60]	; (800651c <xTaskIncrementTick+0x174>)
 80064de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80064e0:	4b0f      	ldr	r3, [pc, #60]	; (8006520 <xTaskIncrementTick+0x178>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80064ec:	697b      	ldr	r3, [r7, #20]
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000848 	.word	0x20000848
 80064fc:	20000824 	.word	0x20000824
 8006500:	200007d8 	.word	0x200007d8
 8006504:	200007dc 	.word	0x200007dc
 8006508:	20000838 	.word	0x20000838
 800650c:	20000840 	.word	0x20000840
 8006510:	20000828 	.word	0x20000828
 8006514:	20000724 	.word	0x20000724
 8006518:	20000720 	.word	0x20000720
 800651c:	20000830 	.word	0x20000830
 8006520:	20000834 	.word	0x20000834

08006524 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <vTaskSwitchContext+0xac>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d003      	beq.n	800653a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006532:	4b28      	ldr	r3, [pc, #160]	; (80065d4 <vTaskSwitchContext+0xb0>)
 8006534:	2201      	movs	r2, #1
 8006536:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006538:	e044      	b.n	80065c4 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800653a:	4b26      	ldr	r3, [pc, #152]	; (80065d4 <vTaskSwitchContext+0xb0>)
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006540:	4b25      	ldr	r3, [pc, #148]	; (80065d8 <vTaskSwitchContext+0xb4>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	fab3 f383 	clz	r3, r3
 800654c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800654e:	7afb      	ldrb	r3, [r7, #11]
 8006550:	f1c3 031f 	rsb	r3, r3, #31
 8006554:	617b      	str	r3, [r7, #20]
 8006556:	4921      	ldr	r1, [pc, #132]	; (80065dc <vTaskSwitchContext+0xb8>)
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	440b      	add	r3, r1
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10a      	bne.n	8006580 <vTaskSwitchContext+0x5c>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	607b      	str	r3, [r7, #4]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <vTaskSwitchContext+0x5a>
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4613      	mov	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	4a14      	ldr	r2, [pc, #80]	; (80065dc <vTaskSwitchContext+0xb8>)
 800658c:	4413      	add	r3, r2
 800658e:	613b      	str	r3, [r7, #16]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	605a      	str	r2, [r3, #4]
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	3308      	adds	r3, #8
 80065a2:	429a      	cmp	r2, r3
 80065a4:	d104      	bne.n	80065b0 <vTaskSwitchContext+0x8c>
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	685a      	ldr	r2, [r3, #4]
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	605a      	str	r2, [r3, #4]
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	4a0a      	ldr	r2, [pc, #40]	; (80065e0 <vTaskSwitchContext+0xbc>)
 80065b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <vTaskSwitchContext+0xbc>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	334c      	adds	r3, #76	; 0x4c
 80065c0:	4a08      	ldr	r2, [pc, #32]	; (80065e4 <vTaskSwitchContext+0xc0>)
 80065c2:	6013      	str	r3, [r2, #0]
}
 80065c4:	bf00      	nop
 80065c6:	371c      	adds	r7, #28
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bc80      	pop	{r7}
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000848 	.word	0x20000848
 80065d4:	20000834 	.word	0x20000834
 80065d8:	20000828 	.word	0x20000828
 80065dc:	20000724 	.word	0x20000724
 80065e0:	20000720 	.word	0x20000720
 80065e4:	20000068 	.word	0x20000068

080065e8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80065f0:	f000 f8a8 	bl	8006744 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80065f4:	4b18      	ldr	r3, [pc, #96]	; (8006658 <prvIdleTask+0x70>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d907      	bls.n	800660c <prvIdleTask+0x24>
			{
				taskYIELD();
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <prvIdleTask+0x74>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
			/* It is not desirable to suspend then resume the scheduler on
			each iteration of the idle task.  Therefore, a preliminary
			test of the expected idle time is performed without the
			scheduler suspended.  The result here is not necessarily
			valid. */
			xExpectedIdleTime = prvGetExpectedIdleTime();
 800660c:	f7ff fdd0 	bl	80061b0 <prvGetExpectedIdleTime>
 8006610:	60f8      	str	r0, [r7, #12]

			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d9eb      	bls.n	80065f0 <prvIdleTask+0x8>
			{
				vTaskSuspendAll();
 8006618:	f7ff fdbc 	bl	8006194 <vTaskSuspendAll>
				{
					/* Now the scheduler is suspended, the expected idle
					time can be sampled again, and this time its value can
					be used. */
					configASSERT( xNextTaskUnblockTime >= xTickCount );
 800661c:	4b10      	ldr	r3, [pc, #64]	; (8006660 <prvIdleTask+0x78>)
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <prvIdleTask+0x7c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d20a      	bcs.n	800663e <prvIdleTask+0x56>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	60bb      	str	r3, [r7, #8]
}
 800663a:	bf00      	nop
 800663c:	e7fe      	b.n	800663c <prvIdleTask+0x54>
					xExpectedIdleTime = prvGetExpectedIdleTime();
 800663e:	f7ff fdb7 	bl	80061b0 <prvGetExpectedIdleTime>
 8006642:	60f8      	str	r0, [r7, #12]
					/* Define the following macro to set xExpectedIdleTime to 0
					if the application does not want
					portSUPPRESS_TICKS_AND_SLEEP() to be called. */
					configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING( xExpectedIdleTime );

					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d902      	bls.n	8006650 <prvIdleTask+0x68>
					{
						traceLOW_POWER_IDLE_BEGIN();
						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 fa8e 	bl	8006b6c <vPortSuppressTicksAndSleep>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}
				( void ) xTaskResumeAll();
 8006650:	f7ff fde8 	bl	8006224 <xTaskResumeAll>
		prvCheckTasksWaitingTermination();
 8006654:	e7cc      	b.n	80065f0 <prvIdleTask+0x8>
 8006656:	bf00      	nop
 8006658:	20000724 	.word	0x20000724
 800665c:	e000ed04 	.word	0xe000ed04
 8006660:	20000840 	.word	0x20000840
 8006664:	20000824 	.word	0x20000824

08006668 <eTaskConfirmSleepModeStatus>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE != 0 )

	eSleepModeStatus eTaskConfirmSleepModeStatus( void )
	{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
	/* The idle task exists in addition to the application tasks. */
	const UBaseType_t uxNonApplicationTasks = 1;
 800666e:	2301      	movs	r3, #1
 8006670:	603b      	str	r3, [r7, #0]
	eSleepModeStatus eReturn = eStandardSleep;
 8006672:	2301      	movs	r3, #1
 8006674:	71fb      	strb	r3, [r7, #7]

		if( listCURRENT_LIST_LENGTH( &xPendingReadyList ) != 0 )
 8006676:	4b0f      	ldr	r3, [pc, #60]	; (80066b4 <eTaskConfirmSleepModeStatus+0x4c>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <eTaskConfirmSleepModeStatus+0x1c>
		{
			/* A task was made ready while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800667e:	2300      	movs	r3, #0
 8006680:	71fb      	strb	r3, [r7, #7]
 8006682:	e010      	b.n	80066a6 <eTaskConfirmSleepModeStatus+0x3e>
		}
		else if( xYieldPending != pdFALSE )
 8006684:	4b0c      	ldr	r3, [pc, #48]	; (80066b8 <eTaskConfirmSleepModeStatus+0x50>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d002      	beq.n	8006692 <eTaskConfirmSleepModeStatus+0x2a>
		{
			/* A yield was pended while the scheduler was suspended. */
			eReturn = eAbortSleep;
 800668c:	2300      	movs	r3, #0
 800668e:	71fb      	strb	r3, [r7, #7]
 8006690:	e009      	b.n	80066a6 <eTaskConfirmSleepModeStatus+0x3e>
		{
			/* If all the tasks are in the suspended list (which might mean they
			have an infinite block time rather than actually being suspended)
			then it is safe to turn all clocks off and just wait for external
			interrupts. */
			if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == ( uxCurrentNumberOfTasks - uxNonApplicationTasks ) )
 8006692:	4b0a      	ldr	r3, [pc, #40]	; (80066bc <eTaskConfirmSleepModeStatus+0x54>)
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	4b0a      	ldr	r3, [pc, #40]	; (80066c0 <eTaskConfirmSleepModeStatus+0x58>)
 8006698:	6819      	ldr	r1, [r3, #0]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	1acb      	subs	r3, r1, r3
 800669e:	429a      	cmp	r2, r3
 80066a0:	d101      	bne.n	80066a6 <eTaskConfirmSleepModeStatus+0x3e>
			{
				eReturn = eNoTasksWaitingTimeout;
 80066a2:	2302      	movs	r3, #2
 80066a4:	71fb      	strb	r3, [r7, #7]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		return eReturn;
 80066a6:	79fb      	ldrb	r3, [r7, #7]
	}
 80066a8:	4618      	mov	r0, r3
 80066aa:	370c      	adds	r7, #12
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bc80      	pop	{r7}
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	200007e0 	.word	0x200007e0
 80066b8:	20000834 	.word	0x20000834
 80066bc:	2000080c 	.word	0x2000080c
 80066c0:	20000820 	.word	0x20000820

080066c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ca:	2300      	movs	r3, #0
 80066cc:	607b      	str	r3, [r7, #4]
 80066ce:	e00c      	b.n	80066ea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066d0:	687a      	ldr	r2, [r7, #4]
 80066d2:	4613      	mov	r3, r2
 80066d4:	009b      	lsls	r3, r3, #2
 80066d6:	4413      	add	r3, r2
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4a12      	ldr	r2, [pc, #72]	; (8006724 <prvInitialiseTaskLists+0x60>)
 80066dc:	4413      	add	r3, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f7ff fad6 	bl	8005c90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	3301      	adds	r3, #1
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	2b06      	cmp	r3, #6
 80066ee:	d9ef      	bls.n	80066d0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066f0:	480d      	ldr	r0, [pc, #52]	; (8006728 <prvInitialiseTaskLists+0x64>)
 80066f2:	f7ff facd 	bl	8005c90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066f6:	480d      	ldr	r0, [pc, #52]	; (800672c <prvInitialiseTaskLists+0x68>)
 80066f8:	f7ff faca 	bl	8005c90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066fc:	480c      	ldr	r0, [pc, #48]	; (8006730 <prvInitialiseTaskLists+0x6c>)
 80066fe:	f7ff fac7 	bl	8005c90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006702:	480c      	ldr	r0, [pc, #48]	; (8006734 <prvInitialiseTaskLists+0x70>)
 8006704:	f7ff fac4 	bl	8005c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006708:	480b      	ldr	r0, [pc, #44]	; (8006738 <prvInitialiseTaskLists+0x74>)
 800670a:	f7ff fac1 	bl	8005c90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800670e:	4b0b      	ldr	r3, [pc, #44]	; (800673c <prvInitialiseTaskLists+0x78>)
 8006710:	4a05      	ldr	r2, [pc, #20]	; (8006728 <prvInitialiseTaskLists+0x64>)
 8006712:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvInitialiseTaskLists+0x7c>)
 8006716:	4a05      	ldr	r2, [pc, #20]	; (800672c <prvInitialiseTaskLists+0x68>)
 8006718:	601a      	str	r2, [r3, #0]
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20000724 	.word	0x20000724
 8006728:	200007b0 	.word	0x200007b0
 800672c:	200007c4 	.word	0x200007c4
 8006730:	200007e0 	.word	0x200007e0
 8006734:	200007f4 	.word	0x200007f4
 8006738:	2000080c 	.word	0x2000080c
 800673c:	200007d8 	.word	0x200007d8
 8006740:	200007dc 	.word	0x200007dc

08006744 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800674a:	e019      	b.n	8006780 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800674c:	f000 f96e 	bl	8006a2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006750:	4b10      	ldr	r3, [pc, #64]	; (8006794 <prvCheckTasksWaitingTermination+0x50>)
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	3304      	adds	r3, #4
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fae5 	bl	8005d2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <prvCheckTasksWaitingTermination+0x54>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	3b01      	subs	r3, #1
 8006768:	4a0b      	ldr	r2, [pc, #44]	; (8006798 <prvCheckTasksWaitingTermination+0x54>)
 800676a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800676c:	4b0b      	ldr	r3, [pc, #44]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3b01      	subs	r3, #1
 8006772:	4a0a      	ldr	r2, [pc, #40]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 8006774:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006776:	f000 f989 	bl	8006a8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 f810 	bl	80067a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006780:	4b06      	ldr	r3, [pc, #24]	; (800679c <prvCheckTasksWaitingTermination+0x58>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e1      	bne.n	800674c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006788:	bf00      	nop
 800678a:	bf00      	nop
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}
 8006792:	bf00      	nop
 8006794:	200007f4 	.word	0x200007f4
 8006798:	20000820 	.word	0x20000820
 800679c:	20000808 	.word	0x20000808

080067a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	334c      	adds	r3, #76	; 0x4c
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fecb 	bl	8007548 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d108      	bne.n	80067ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c0:	4618      	mov	r0, r3
 80067c2:	f000 fb9f 	bl	8006f04 <vPortFree>
				vPortFree( pxTCB );
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 fb9c 	bl	8006f04 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067cc:	e018      	b.n	8006800 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d103      	bne.n	80067e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fb93 	bl	8006f04 <vPortFree>
	}
 80067de:	e00f      	b.n	8006800 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80067e6:	2b02      	cmp	r3, #2
 80067e8:	d00a      	beq.n	8006800 <prvDeleteTCB+0x60>
	__asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	60fb      	str	r3, [r7, #12]
}
 80067fc:	bf00      	nop
 80067fe:	e7fe      	b.n	80067fe <prvDeleteTCB+0x5e>
	}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006808:	b480      	push	{r7}
 800680a:	b083      	sub	sp, #12
 800680c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800680e:	4b0e      	ldr	r3, [pc, #56]	; (8006848 <prvResetNextTaskUnblockTime+0x40>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d101      	bne.n	800681c <prvResetNextTaskUnblockTime+0x14>
 8006818:	2301      	movs	r3, #1
 800681a:	e000      	b.n	800681e <prvResetNextTaskUnblockTime+0x16>
 800681c:	2300      	movs	r3, #0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d004      	beq.n	800682c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006822:	4b0a      	ldr	r3, [pc, #40]	; (800684c <prvResetNextTaskUnblockTime+0x44>)
 8006824:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006828:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800682a:	e008      	b.n	800683e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800682c:	4b06      	ldr	r3, [pc, #24]	; (8006848 <prvResetNextTaskUnblockTime+0x40>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	4a04      	ldr	r2, [pc, #16]	; (800684c <prvResetNextTaskUnblockTime+0x44>)
 800683c:	6013      	str	r3, [r2, #0]
}
 800683e:	bf00      	nop
 8006840:	370c      	adds	r7, #12
 8006842:	46bd      	mov	sp, r7
 8006844:	bc80      	pop	{r7}
 8006846:	4770      	bx	lr
 8006848:	200007d8 	.word	0x200007d8
 800684c:	20000840 	.word	0x20000840

08006850 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006850:	b480      	push	{r7}
 8006852:	b085      	sub	sp, #20
 8006854:	af00      	add	r7, sp, #0
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	3b04      	subs	r3, #4
 8006860:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006868:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3b04      	subs	r3, #4
 800686e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f023 0201 	bic.w	r2, r3, #1
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	3b04      	subs	r3, #4
 800687e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006880:	4a08      	ldr	r2, [pc, #32]	; (80068a4 <pxPortInitialiseStack+0x54>)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3b14      	subs	r3, #20
 800688a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	3b20      	subs	r3, #32
 8006896:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006898:	68fb      	ldr	r3, [r7, #12]
}
 800689a:	4618      	mov	r0, r3
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr
 80068a4:	080068a9 	.word	0x080068a9

080068a8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80068ae:	2300      	movs	r3, #0
 80068b0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <prvTaskExitError+0x54>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068ba:	d00a      	beq.n	80068d2 <prvTaskExitError+0x2a>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <prvTaskExitError+0x28>
	__asm volatile
 80068d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d6:	f383 8811 	msr	BASEPRI, r3
 80068da:	f3bf 8f6f 	isb	sy
 80068de:	f3bf 8f4f 	dsb	sy
 80068e2:	60bb      	str	r3, [r7, #8]
}
 80068e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068e6:	bf00      	nop
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0fc      	beq.n	80068e8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	3714      	adds	r7, #20
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bc80      	pop	{r7}
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	2000000c 	.word	0x2000000c

08006900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006900:	4b07      	ldr	r3, [pc, #28]	; (8006920 <pxCurrentTCBConst2>)
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	6808      	ldr	r0, [r1, #0]
 8006906:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800690a:	f380 8809 	msr	PSP, r0
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f04f 0000 	mov.w	r0, #0
 8006916:	f380 8811 	msr	BASEPRI, r0
 800691a:	f04e 0e0d 	orr.w	lr, lr, #13
 800691e:	4770      	bx	lr

08006920 <pxCurrentTCBConst2>:
 8006920:	20000720 	.word	0x20000720
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006924:	bf00      	nop
 8006926:	bf00      	nop

08006928 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006928:	4806      	ldr	r0, [pc, #24]	; (8006944 <prvPortStartFirstTask+0x1c>)
 800692a:	6800      	ldr	r0, [r0, #0]
 800692c:	6800      	ldr	r0, [r0, #0]
 800692e:	f380 8808 	msr	MSP, r0
 8006932:	b662      	cpsie	i
 8006934:	b661      	cpsie	f
 8006936:	f3bf 8f4f 	dsb	sy
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	df00      	svc	0
 8006940:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006942:	bf00      	nop
 8006944:	e000ed08 	.word	0xe000ed08

08006948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b084      	sub	sp, #16
 800694c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800694e:	4b32      	ldr	r3, [pc, #200]	; (8006a18 <xPortStartScheduler+0xd0>)
 8006950:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	b2db      	uxtb	r3, r3
 8006958:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	22ff      	movs	r2, #255	; 0xff
 800695e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	b2db      	uxtb	r3, r3
 8006966:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006968:	78fb      	ldrb	r3, [r7, #3]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006970:	b2da      	uxtb	r2, r3
 8006972:	4b2a      	ldr	r3, [pc, #168]	; (8006a1c <xPortStartScheduler+0xd4>)
 8006974:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006976:	4b2a      	ldr	r3, [pc, #168]	; (8006a20 <xPortStartScheduler+0xd8>)
 8006978:	2207      	movs	r2, #7
 800697a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800697c:	e009      	b.n	8006992 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800697e:	4b28      	ldr	r3, [pc, #160]	; (8006a20 <xPortStartScheduler+0xd8>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3b01      	subs	r3, #1
 8006984:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <xPortStartScheduler+0xd8>)
 8006986:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	005b      	lsls	r3, r3, #1
 800698e:	b2db      	uxtb	r3, r3
 8006990:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006992:	78fb      	ldrb	r3, [r7, #3]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800699a:	2b80      	cmp	r3, #128	; 0x80
 800699c:	d0ef      	beq.n	800697e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800699e:	4b20      	ldr	r3, [pc, #128]	; (8006a20 <xPortStartScheduler+0xd8>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f1c3 0307 	rsb	r3, r3, #7
 80069a6:	2b04      	cmp	r3, #4
 80069a8:	d00a      	beq.n	80069c0 <xPortStartScheduler+0x78>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60bb      	str	r3, [r7, #8]
}
 80069bc:	bf00      	nop
 80069be:	e7fe      	b.n	80069be <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <xPortStartScheduler+0xd8>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	4a16      	ldr	r2, [pc, #88]	; (8006a20 <xPortStartScheduler+0xd8>)
 80069c8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80069ca:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <xPortStartScheduler+0xd8>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80069d2:	4a13      	ldr	r2, [pc, #76]	; (8006a20 <xPortStartScheduler+0xd8>)
 80069d4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	b2da      	uxtb	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80069de:	4b11      	ldr	r3, [pc, #68]	; (8006a24 <xPortStartScheduler+0xdc>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a10      	ldr	r2, [pc, #64]	; (8006a24 <xPortStartScheduler+0xdc>)
 80069e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069ea:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <xPortStartScheduler+0xdc>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a0d      	ldr	r2, [pc, #52]	; (8006a24 <xPortStartScheduler+0xdc>)
 80069f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069f4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069f6:	f000 f985 	bl	8006d04 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069fa:	4b0b      	ldr	r3, [pc, #44]	; (8006a28 <xPortStartScheduler+0xe0>)
 80069fc:	2200      	movs	r2, #0
 80069fe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006a00:	f7ff ff92 	bl	8006928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006a04:	f7ff fd8e 	bl	8006524 <vTaskSwitchContext>
	prvTaskExitError();
 8006a08:	f7ff ff4e 	bl	80068a8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	e000e400 	.word	0xe000e400
 8006a1c:	20000858 	.word	0x20000858
 8006a20:	2000085c 	.word	0x2000085c
 8006a24:	e000ed20 	.word	0xe000ed20
 8006a28:	2000000c 	.word	0x2000000c

08006a2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	607b      	str	r3, [r7, #4]
}
 8006a44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a46:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <vPortEnterCritical+0x58>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	4a0d      	ldr	r2, [pc, #52]	; (8006a84 <vPortEnterCritical+0x58>)
 8006a4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a50:	4b0c      	ldr	r3, [pc, #48]	; (8006a84 <vPortEnterCritical+0x58>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10f      	bne.n	8006a78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a58:	4b0b      	ldr	r3, [pc, #44]	; (8006a88 <vPortEnterCritical+0x5c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	b2db      	uxtb	r3, r3
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00a      	beq.n	8006a78 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	f383 8811 	msr	BASEPRI, r3
 8006a6a:	f3bf 8f6f 	isb	sy
 8006a6e:	f3bf 8f4f 	dsb	sy
 8006a72:	603b      	str	r3, [r7, #0]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <vPortEnterCritical+0x4a>
	}
}
 8006a78:	bf00      	nop
 8006a7a:	370c      	adds	r7, #12
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bc80      	pop	{r7}
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	2000000c 	.word	0x2000000c
 8006a88:	e000ed04 	.word	0xe000ed04

08006a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b083      	sub	sp, #12
 8006a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a92:	4b11      	ldr	r3, [pc, #68]	; (8006ad8 <vPortExitCritical+0x4c>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d10a      	bne.n	8006ab0 <vPortExitCritical+0x24>
	__asm volatile
 8006a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a9e:	f383 8811 	msr	BASEPRI, r3
 8006aa2:	f3bf 8f6f 	isb	sy
 8006aa6:	f3bf 8f4f 	dsb	sy
 8006aaa:	607b      	str	r3, [r7, #4]
}
 8006aac:	bf00      	nop
 8006aae:	e7fe      	b.n	8006aae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ab0:	4b09      	ldr	r3, [pc, #36]	; (8006ad8 <vPortExitCritical+0x4c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	4a08      	ldr	r2, [pc, #32]	; (8006ad8 <vPortExitCritical+0x4c>)
 8006ab8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006aba:	4b07      	ldr	r3, [pc, #28]	; (8006ad8 <vPortExitCritical+0x4c>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d105      	bne.n	8006ace <vPortExitCritical+0x42>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006acc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006ace:	bf00      	nop
 8006ad0:	370c      	adds	r7, #12
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bc80      	pop	{r7}
 8006ad6:	4770      	bx	lr
 8006ad8:	2000000c 	.word	0x2000000c
 8006adc:	00000000 	.word	0x00000000

08006ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006ae0:	f3ef 8009 	mrs	r0, PSP
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	4b0d      	ldr	r3, [pc, #52]	; (8006b20 <pxCurrentTCBConst>)
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006af0:	6010      	str	r0, [r2, #0]
 8006af2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006af6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006afa:	f380 8811 	msr	BASEPRI, r0
 8006afe:	f7ff fd11 	bl	8006524 <vTaskSwitchContext>
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8811 	msr	BASEPRI, r0
 8006b0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006b0e:	6819      	ldr	r1, [r3, #0]
 8006b10:	6808      	ldr	r0, [r1, #0]
 8006b12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006b16:	f380 8809 	msr	PSP, r0
 8006b1a:	f3bf 8f6f 	isb	sy
 8006b1e:	4770      	bx	lr

08006b20 <pxCurrentTCBConst>:
 8006b20:	20000720 	.word	0x20000720
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006b24:	bf00      	nop
 8006b26:	bf00      	nop

08006b28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b32:	f383 8811 	msr	BASEPRI, r3
 8006b36:	f3bf 8f6f 	isb	sy
 8006b3a:	f3bf 8f4f 	dsb	sy
 8006b3e:	607b      	str	r3, [r7, #4]
}
 8006b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b42:	f7ff fc31 	bl	80063a8 <xTaskIncrementTick>
 8006b46:	4603      	mov	r3, r0
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d003      	beq.n	8006b54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b4c:	4b06      	ldr	r3, [pc, #24]	; (8006b68 <SysTick_Handler+0x40>)
 8006b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b52:	601a      	str	r2, [r3, #0]
 8006b54:	2300      	movs	r3, #0
 8006b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	f383 8811 	msr	BASEPRI, r3
}
 8006b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b60:	bf00      	nop
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	e000ed04 	.word	0xe000ed04

08006b6c <vPortSuppressTicksAndSleep>:
/*-----------------------------------------------------------*/

#if( configUSE_TICKLESS_IDLE == 1 )

	__attribute__((weak)) void vPortSuppressTicksAndSleep( TickType_t xExpectedIdleTime )
	{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b088      	sub	sp, #32
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	uint32_t ulReloadValue, ulCompleteTickPeriods, ulCompletedSysTickDecrements;
	TickType_t xModifiableIdleTime;

		/* Make sure the SysTick reload value does not overflow the counter. */
		if( xExpectedIdleTime > xMaximumPossibleSuppressedTicks )
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	4b5d      	ldr	r3, [pc, #372]	; (8006cec <vPortSuppressTicksAndSleep+0x180>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d902      	bls.n	8006b84 <vPortSuppressTicksAndSleep+0x18>
		{
			xExpectedIdleTime = xMaximumPossibleSuppressedTicks;
 8006b7e:	4b5b      	ldr	r3, [pc, #364]	; (8006cec <vPortSuppressTicksAndSleep+0x180>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	607b      	str	r3, [r7, #4]

		/* Stop the SysTick momentarily.  The time the SysTick is stopped for
		is accounted for as best it can be, but using the tickless mode will
		inevitably result in some tiny drift of the time maintained by the
		kernel with respect to calendar time. */
		portNVIC_SYSTICK_CTRL_REG &= ~portNVIC_SYSTICK_ENABLE_BIT;
 8006b84:	4b5a      	ldr	r3, [pc, #360]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a59      	ldr	r2, [pc, #356]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006b8a:	f023 0301 	bic.w	r3, r3, #1
 8006b8e:	6013      	str	r3, [r2, #0]

		/* Calculate the reload value required to wait xExpectedIdleTime
		tick periods.  -1 is used because this code will execute part way
		through one of the tick periods. */
		ulReloadValue = portNVIC_SYSTICK_CURRENT_VALUE_REG + ( ulTimerCountsForOneTick * ( xExpectedIdleTime - 1UL ) );
 8006b90:	4b58      	ldr	r3, [pc, #352]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006b92:	681a      	ldr	r2, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	4957      	ldr	r1, [pc, #348]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006b9a:	6809      	ldr	r1, [r1, #0]
 8006b9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ba0:	4413      	add	r3, r2
 8006ba2:	61fb      	str	r3, [r7, #28]
		if( ulReloadValue > ulStoppedTimerCompensation )
 8006ba4:	4b55      	ldr	r3, [pc, #340]	; (8006cfc <vPortSuppressTicksAndSleep+0x190>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	69fa      	ldr	r2, [r7, #28]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d904      	bls.n	8006bb8 <vPortSuppressTicksAndSleep+0x4c>
		{
			ulReloadValue -= ulStoppedTimerCompensation;
 8006bae:	4b53      	ldr	r3, [pc, #332]	; (8006cfc <vPortSuppressTicksAndSleep+0x190>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	69fa      	ldr	r2, [r7, #28]
 8006bb4:	1ad3      	subs	r3, r2, r3
 8006bb6:	61fb      	str	r3, [r7, #28]
		}

		/* Enter a critical section but don't use the taskENTER_CRITICAL()
		method as that will mask interrupts that should exit sleep mode. */
		__asm volatile( "cpsid i" ::: "memory" );
 8006bb8:	b672      	cpsid	i
		__asm volatile( "dsb" );
 8006bba:	f3bf 8f4f 	dsb	sy
		__asm volatile( "isb" );
 8006bbe:	f3bf 8f6f 	isb	sy

		/* If a context switch is pending or a task is waiting for the scheduler
		to be unsuspended then abandon the low power entry. */
		if( eTaskConfirmSleepModeStatus() == eAbortSleep )
 8006bc2:	f7ff fd51 	bl	8006668 <eTaskConfirmSleepModeStatus>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d110      	bne.n	8006bee <vPortSuppressTicksAndSleep+0x82>
		{
			/* Restart from whatever is left in the count register to complete
			this tick period. */
			portNVIC_SYSTICK_LOAD_REG = portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006bcc:	4b49      	ldr	r3, [pc, #292]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006bce:	4a4c      	ldr	r2, [pc, #304]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6013      	str	r3, [r2, #0]

			/* Restart SysTick. */
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006bd4:	4b46      	ldr	r3, [pc, #280]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a45      	ldr	r2, [pc, #276]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006bda:	f043 0301 	orr.w	r3, r3, #1
 8006bde:	6013      	str	r3, [r2, #0]

			/* Reset the reload register to the value required for normal tick
			periods. */
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006be0:	4b45      	ldr	r3, [pc, #276]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a46      	ldr	r2, [pc, #280]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006be6:	3b01      	subs	r3, #1
 8006be8:	6013      	str	r3, [r2, #0]

			/* Re-enable interrupts - see comments above the cpsid instruction()
			above. */
			__asm volatile( "cpsie i" ::: "memory" );
 8006bea:	b662      	cpsie	i
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;

			/* Exit with interrpts enabled. */
			__asm volatile( "cpsie i" ::: "memory" );
		}
	}
 8006bec:	e07a      	b.n	8006ce4 <vPortSuppressTicksAndSleep+0x178>
			portNVIC_SYSTICK_LOAD_REG = ulReloadValue;
 8006bee:	4a44      	ldr	r2, [pc, #272]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006bf0:	69fb      	ldr	r3, [r7, #28]
 8006bf2:	6013      	str	r3, [r2, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006bf4:	4b3f      	ldr	r3, [pc, #252]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006bfa:	4b3d      	ldr	r3, [pc, #244]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a3c      	ldr	r2, [pc, #240]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006c00:	f043 0301 	orr.w	r3, r3, #1
 8006c04:	6013      	str	r3, [r2, #0]
			xModifiableIdleTime = xExpectedIdleTime;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60fb      	str	r3, [r7, #12]
			configPRE_SLEEP_PROCESSING( &xModifiableIdleTime );
 8006c0a:	f107 030c 	add.w	r3, r7, #12
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7f9 ffa4 	bl	8000b5c <PreSleepProcessing>
			if( xModifiableIdleTime > 0 )
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d004      	beq.n	8006c24 <vPortSuppressTicksAndSleep+0xb8>
				__asm volatile( "dsb" ::: "memory" );
 8006c1a:	f3bf 8f4f 	dsb	sy
				__asm volatile( "wfi" );
 8006c1e:	bf30      	wfi
				__asm volatile( "isb" );
 8006c20:	f3bf 8f6f 	isb	sy
			configPOST_SLEEP_PROCESSING( &xExpectedIdleTime );
 8006c24:	1d3b      	adds	r3, r7, #4
 8006c26:	4618      	mov	r0, r3
 8006c28:	f7f9 ffa1 	bl	8000b6e <PostSleepProcessing>
			__asm volatile( "cpsie i" ::: "memory" );
 8006c2c:	b662      	cpsie	i
			__asm volatile( "dsb" );
 8006c2e:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006c32:	f3bf 8f6f 	isb	sy
			__asm volatile( "cpsid i" ::: "memory" );
 8006c36:	b672      	cpsid	i
			__asm volatile( "dsb" );
 8006c38:	f3bf 8f4f 	dsb	sy
			__asm volatile( "isb" );
 8006c3c:	f3bf 8f6f 	isb	sy
			portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT );
 8006c40:	4b2b      	ldr	r3, [pc, #172]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006c42:	2206      	movs	r2, #6
 8006c44:	601a      	str	r2, [r3, #0]
			if( ( portNVIC_SYSTICK_CTRL_REG & portNVIC_SYSTICK_COUNT_FLAG_BIT ) != 0 )
 8006c46:	4b2a      	ldr	r3, [pc, #168]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d01d      	beq.n	8006c8e <vPortSuppressTicksAndSleep+0x122>
				ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL ) - ( ulReloadValue - portNVIC_SYSTICK_CURRENT_VALUE_REG );
 8006c52:	4b29      	ldr	r3, [pc, #164]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006c58:	6819      	ldr	r1, [r3, #0]
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	1acb      	subs	r3, r1, r3
 8006c5e:	4413      	add	r3, r2
 8006c60:	3b01      	subs	r3, #1
 8006c62:	617b      	str	r3, [r7, #20]
				if( ( ulCalculatedLoadValue < ulStoppedTimerCompensation ) || ( ulCalculatedLoadValue > ulTimerCountsForOneTick ) )
 8006c64:	4b25      	ldr	r3, [pc, #148]	; (8006cfc <vPortSuppressTicksAndSleep+0x190>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d304      	bcc.n	8006c78 <vPortSuppressTicksAndSleep+0x10c>
 8006c6e:	4b22      	ldr	r3, [pc, #136]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d903      	bls.n	8006c80 <vPortSuppressTicksAndSleep+0x114>
					ulCalculatedLoadValue = ( ulTimerCountsForOneTick - 1UL );
 8006c78:	4b1f      	ldr	r3, [pc, #124]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	617b      	str	r3, [r7, #20]
				portNVIC_SYSTICK_LOAD_REG = ulCalculatedLoadValue;
 8006c80:	4a1f      	ldr	r2, [pc, #124]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6013      	str	r3, [r2, #0]
				ulCompleteTickPeriods = xExpectedIdleTime - 1UL;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	61bb      	str	r3, [r7, #24]
 8006c8c:	e018      	b.n	8006cc0 <vPortSuppressTicksAndSleep+0x154>
				ulCompletedSysTickDecrements = ( xExpectedIdleTime * ulTimerCountsForOneTick ) - portNVIC_SYSTICK_CURRENT_VALUE_REG;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a19      	ldr	r2, [pc, #100]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006c92:	6812      	ldr	r2, [r2, #0]
 8006c94:	fb03 f202 	mul.w	r2, r3, r2
 8006c98:	4b16      	ldr	r3, [pc, #88]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	613b      	str	r3, [r7, #16]
				ulCompleteTickPeriods = ulCompletedSysTickDecrements / ulTimerCountsForOneTick;
 8006ca0:	4b15      	ldr	r3, [pc, #84]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006caa:	61bb      	str	r3, [r7, #24]
				portNVIC_SYSTICK_LOAD_REG = ( ( ulCompleteTickPeriods + 1UL ) * ulTimerCountsForOneTick ) - ulCompletedSysTickDecrements;
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	4a11      	ldr	r2, [pc, #68]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	fb03 f202 	mul.w	r2, r3, r2
 8006cb8:	4911      	ldr	r1, [pc, #68]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	600b      	str	r3, [r1, #0]
			portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cc0:	4b0c      	ldr	r3, [pc, #48]	; (8006cf4 <vPortSuppressTicksAndSleep+0x188>)
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	601a      	str	r2, [r3, #0]
			portNVIC_SYSTICK_CTRL_REG |= portNVIC_SYSTICK_ENABLE_BIT;
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a09      	ldr	r2, [pc, #36]	; (8006cf0 <vPortSuppressTicksAndSleep+0x184>)
 8006ccc:	f043 0301 	orr.w	r3, r3, #1
 8006cd0:	6013      	str	r3, [r2, #0]
			vTaskStepTick( ulCompleteTickPeriods );
 8006cd2:	69b8      	ldr	r0, [r7, #24]
 8006cd4:	f7ff fb42 	bl	800635c <vTaskStepTick>
			portNVIC_SYSTICK_LOAD_REG = ulTimerCountsForOneTick - 1UL;
 8006cd8:	4b07      	ldr	r3, [pc, #28]	; (8006cf8 <vPortSuppressTicksAndSleep+0x18c>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <vPortSuppressTicksAndSleep+0x194>)
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	6013      	str	r3, [r2, #0]
			__asm volatile( "cpsie i" ::: "memory" );
 8006ce2:	b662      	cpsie	i
	}
 8006ce4:	bf00      	nop
 8006ce6:	3720      	adds	r7, #32
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000850 	.word	0x20000850
 8006cf0:	e000e010 	.word	0xe000e010
 8006cf4:	e000e018 	.word	0xe000e018
 8006cf8:	2000084c 	.word	0x2000084c
 8006cfc:	20000854 	.word	0x20000854
 8006d00:	e000e014 	.word	0xe000e014

08006d04 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
	/* Calculate the constants required to configure the tick interrupt. */
	#if( configUSE_TICKLESS_IDLE == 1 )
	{
		ulTimerCountsForOneTick = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ );
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <vPortSetupTimerInterrupt+0x58>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a14      	ldr	r2, [pc, #80]	; (8006d60 <vPortSetupTimerInterrupt+0x5c>)
 8006d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d12:	099b      	lsrs	r3, r3, #6
 8006d14:	4a13      	ldr	r2, [pc, #76]	; (8006d64 <vPortSetupTimerInterrupt+0x60>)
 8006d16:	6013      	str	r3, [r2, #0]
		xMaximumPossibleSuppressedTicks = portMAX_24_BIT_NUMBER / ulTimerCountsForOneTick;
 8006d18:	4b12      	ldr	r3, [pc, #72]	; (8006d64 <vPortSetupTimerInterrupt+0x60>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d24:	4a10      	ldr	r2, [pc, #64]	; (8006d68 <vPortSetupTimerInterrupt+0x64>)
 8006d26:	6013      	str	r3, [r2, #0]
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 8006d28:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <vPortSetupTimerInterrupt+0x68>)
 8006d2a:	222d      	movs	r2, #45	; 0x2d
 8006d2c:	601a      	str	r2, [r3, #0]
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d2e:	4b10      	ldr	r3, [pc, #64]	; (8006d70 <vPortSetupTimerInterrupt+0x6c>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <vPortSetupTimerInterrupt+0x70>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <vPortSetupTimerInterrupt+0x58>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <vPortSetupTimerInterrupt+0x5c>)
 8006d40:	fba2 2303 	umull	r2, r3, r2, r3
 8006d44:	099b      	lsrs	r3, r3, #6
 8006d46:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <vPortSetupTimerInterrupt+0x74>)
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d4c:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <vPortSetupTimerInterrupt+0x6c>)
 8006d4e:	2207      	movs	r2, #7
 8006d50:	601a      	str	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bc80      	pop	{r7}
 8006d58:	4770      	bx	lr
 8006d5a:	bf00      	nop
 8006d5c:	20000000 	.word	0x20000000
 8006d60:	10624dd3 	.word	0x10624dd3
 8006d64:	2000084c 	.word	0x2000084c
 8006d68:	20000850 	.word	0x20000850
 8006d6c:	20000854 	.word	0x20000854
 8006d70:	e000e010 	.word	0xe000e010
 8006d74:	e000e018 	.word	0xe000e018
 8006d78:	e000e014 	.word	0xe000e014

08006d7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b08a      	sub	sp, #40	; 0x28
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d88:	f7ff fa04 	bl	8006194 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d8c:	4b58      	ldr	r3, [pc, #352]	; (8006ef0 <pvPortMalloc+0x174>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d94:	f000 f910 	bl	8006fb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d98:	4b56      	ldr	r3, [pc, #344]	; (8006ef4 <pvPortMalloc+0x178>)
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4013      	ands	r3, r2
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f040 808e 	bne.w	8006ec2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d01d      	beq.n	8006de8 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006dac:	2208      	movs	r2, #8
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d014      	beq.n	8006de8 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f023 0307 	bic.w	r3, r3, #7
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f003 0307 	and.w	r3, r3, #7
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00a      	beq.n	8006de8 <pvPortMalloc+0x6c>
	__asm volatile
 8006dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dd6:	f383 8811 	msr	BASEPRI, r3
 8006dda:	f3bf 8f6f 	isb	sy
 8006dde:	f3bf 8f4f 	dsb	sy
 8006de2:	617b      	str	r3, [r7, #20]
}
 8006de4:	bf00      	nop
 8006de6:	e7fe      	b.n	8006de6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d069      	beq.n	8006ec2 <pvPortMalloc+0x146>
 8006dee:	4b42      	ldr	r3, [pc, #264]	; (8006ef8 <pvPortMalloc+0x17c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d864      	bhi.n	8006ec2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006df8:	4b40      	ldr	r3, [pc, #256]	; (8006efc <pvPortMalloc+0x180>)
 8006dfa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006dfc:	4b3f      	ldr	r3, [pc, #252]	; (8006efc <pvPortMalloc+0x180>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e02:	e004      	b.n	8006e0e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	685b      	ldr	r3, [r3, #4]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	429a      	cmp	r2, r3
 8006e16:	d903      	bls.n	8006e20 <pvPortMalloc+0xa4>
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1f1      	bne.n	8006e04 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006e20:	4b33      	ldr	r3, [pc, #204]	; (8006ef0 <pvPortMalloc+0x174>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d04b      	beq.n	8006ec2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006e2a:	6a3b      	ldr	r3, [r7, #32]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	2208      	movs	r2, #8
 8006e30:	4413      	add	r3, r2
 8006e32:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	6a3b      	ldr	r3, [r7, #32]
 8006e3a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	1ad2      	subs	r2, r2, r3
 8006e44:	2308      	movs	r3, #8
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	429a      	cmp	r2, r3
 8006e4a:	d91f      	bls.n	8006e8c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4413      	add	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f003 0307 	and.w	r3, r3, #7
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00a      	beq.n	8006e74 <pvPortMalloc+0xf8>
	__asm volatile
 8006e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e62:	f383 8811 	msr	BASEPRI, r3
 8006e66:	f3bf 8f6f 	isb	sy
 8006e6a:	f3bf 8f4f 	dsb	sy
 8006e6e:	613b      	str	r3, [r7, #16]
}
 8006e70:	bf00      	nop
 8006e72:	e7fe      	b.n	8006e72 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	685a      	ldr	r2, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1ad2      	subs	r2, r2, r3
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e82:	687a      	ldr	r2, [r7, #4]
 8006e84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e86:	69b8      	ldr	r0, [r7, #24]
 8006e88:	f000 f8f8 	bl	800707c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e8c:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <pvPortMalloc+0x17c>)
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	1ad3      	subs	r3, r2, r3
 8006e96:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <pvPortMalloc+0x17c>)
 8006e98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e9a:	4b17      	ldr	r3, [pc, #92]	; (8006ef8 <pvPortMalloc+0x17c>)
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	4b18      	ldr	r3, [pc, #96]	; (8006f00 <pvPortMalloc+0x184>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d203      	bcs.n	8006eae <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ea6:	4b14      	ldr	r3, [pc, #80]	; (8006ef8 <pvPortMalloc+0x17c>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a15      	ldr	r2, [pc, #84]	; (8006f00 <pvPortMalloc+0x184>)
 8006eac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb0:	685a      	ldr	r2, [r3, #4]
 8006eb2:	4b10      	ldr	r3, [pc, #64]	; (8006ef4 <pvPortMalloc+0x178>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ec2:	f7ff f9af 	bl	8006224 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00a      	beq.n	8006ee6 <pvPortMalloc+0x16a>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60fb      	str	r3, [r7, #12]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <pvPortMalloc+0x168>
	return pvReturn;
 8006ee6:	69fb      	ldr	r3, [r7, #28]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3728      	adds	r7, #40	; 0x28
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20001468 	.word	0x20001468
 8006ef4:	20001474 	.word	0x20001474
 8006ef8:	2000146c 	.word	0x2000146c
 8006efc:	20001460 	.word	0x20001460
 8006f00:	20001470 	.word	0x20001470

08006f04 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d048      	beq.n	8006fa8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006f16:	2308      	movs	r3, #8
 8006f18:	425b      	negs	r3, r3
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <vPortFree+0xac>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d10a      	bne.n	8006f48 <vPortFree+0x44>
	__asm volatile
 8006f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f36:	f383 8811 	msr	BASEPRI, r3
 8006f3a:	f3bf 8f6f 	isb	sy
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	60fb      	str	r3, [r7, #12]
}
 8006f44:	bf00      	nop
 8006f46:	e7fe      	b.n	8006f46 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00a      	beq.n	8006f66 <vPortFree+0x62>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	60bb      	str	r3, [r7, #8]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	685a      	ldr	r2, [r3, #4]
 8006f6a:	4b11      	ldr	r3, [pc, #68]	; (8006fb0 <vPortFree+0xac>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4013      	ands	r3, r2
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d019      	beq.n	8006fa8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d115      	bne.n	8006fa8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f7c:	693b      	ldr	r3, [r7, #16]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	4b0b      	ldr	r3, [pc, #44]	; (8006fb0 <vPortFree+0xac>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	43db      	mvns	r3, r3
 8006f86:	401a      	ands	r2, r3
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f8c:	f7ff f902 	bl	8006194 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	685a      	ldr	r2, [r3, #4]
 8006f94:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <vPortFree+0xb0>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4413      	add	r3, r2
 8006f9a:	4a06      	ldr	r2, [pc, #24]	; (8006fb4 <vPortFree+0xb0>)
 8006f9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f9e:	6938      	ldr	r0, [r7, #16]
 8006fa0:	f000 f86c 	bl	800707c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006fa4:	f7ff f93e 	bl	8006224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006fa8:	bf00      	nop
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20001474 	.word	0x20001474
 8006fb4:	2000146c 	.word	0x2000146c

08006fb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006fbe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006fc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006fc4:	4b27      	ldr	r3, [pc, #156]	; (8007064 <prvHeapInit+0xac>)
 8006fc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f003 0307 	and.w	r3, r3, #7
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d00c      	beq.n	8006fec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	3307      	adds	r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0307 	bic.w	r3, r3, #7
 8006fde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	4a1f      	ldr	r2, [pc, #124]	; (8007064 <prvHeapInit+0xac>)
 8006fe8:	4413      	add	r3, r2
 8006fea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ff0:	4a1d      	ldr	r2, [pc, #116]	; (8007068 <prvHeapInit+0xb0>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ff6:	4b1c      	ldr	r3, [pc, #112]	; (8007068 <prvHeapInit+0xb0>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68ba      	ldr	r2, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007004:	2208      	movs	r2, #8
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	1a9b      	subs	r3, r3, r2
 800700a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f023 0307 	bic.w	r3, r3, #7
 8007012:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4a15      	ldr	r2, [pc, #84]	; (800706c <prvHeapInit+0xb4>)
 8007018:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800701a:	4b14      	ldr	r3, [pc, #80]	; (800706c <prvHeapInit+0xb4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2200      	movs	r2, #0
 8007020:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007022:	4b12      	ldr	r3, [pc, #72]	; (800706c <prvHeapInit+0xb4>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	2200      	movs	r2, #0
 8007028:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	1ad2      	subs	r2, r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007038:	4b0c      	ldr	r3, [pc, #48]	; (800706c <prvHeapInit+0xb4>)
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	4a0a      	ldr	r2, [pc, #40]	; (8007070 <prvHeapInit+0xb8>)
 8007046:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	4a09      	ldr	r2, [pc, #36]	; (8007074 <prvHeapInit+0xbc>)
 800704e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007050:	4b09      	ldr	r3, [pc, #36]	; (8007078 <prvHeapInit+0xc0>)
 8007052:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007056:	601a      	str	r2, [r3, #0]
}
 8007058:	bf00      	nop
 800705a:	3714      	adds	r7, #20
 800705c:	46bd      	mov	sp, r7
 800705e:	bc80      	pop	{r7}
 8007060:	4770      	bx	lr
 8007062:	bf00      	nop
 8007064:	20000860 	.word	0x20000860
 8007068:	20001460 	.word	0x20001460
 800706c:	20001468 	.word	0x20001468
 8007070:	20001470 	.word	0x20001470
 8007074:	2000146c 	.word	0x2000146c
 8007078:	20001474 	.word	0x20001474

0800707c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800707c:	b480      	push	{r7}
 800707e:	b085      	sub	sp, #20
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007084:	4b27      	ldr	r3, [pc, #156]	; (8007124 <prvInsertBlockIntoFreeList+0xa8>)
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	e002      	b.n	8007090 <prvInsertBlockIntoFreeList+0x14>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	687a      	ldr	r2, [r7, #4]
 8007096:	429a      	cmp	r2, r3
 8007098:	d8f7      	bhi.n	800708a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	4413      	add	r3, r2
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d108      	bne.n	80070be <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685b      	ldr	r3, [r3, #4]
 80070b4:	441a      	add	r2, r3
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	441a      	add	r2, r3
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d118      	bne.n	8007104 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	4b14      	ldr	r3, [pc, #80]	; (8007128 <prvInsertBlockIntoFreeList+0xac>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d00d      	beq.n	80070fa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685a      	ldr	r2, [r3, #4]
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	441a      	add	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	681a      	ldr	r2, [r3, #0]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
 80070f8:	e008      	b.n	800710c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <prvInsertBlockIntoFreeList+0xac>)
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	601a      	str	r2, [r3, #0]
 8007102:	e003      	b.n	800710c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800710c:	68fa      	ldr	r2, [r7, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	429a      	cmp	r2, r3
 8007112:	d002      	beq.n	800711a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	687a      	ldr	r2, [r7, #4]
 8007118:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800711a:	bf00      	nop
 800711c:	3714      	adds	r7, #20
 800711e:	46bd      	mov	sp, r7
 8007120:	bc80      	pop	{r7}
 8007122:	4770      	bx	lr
 8007124:	20001460 	.word	0x20001460
 8007128:	20001468 	.word	0x20001468

0800712c <std>:
 800712c:	2300      	movs	r3, #0
 800712e:	b510      	push	{r4, lr}
 8007130:	4604      	mov	r4, r0
 8007132:	e9c0 3300 	strd	r3, r3, [r0]
 8007136:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800713a:	6083      	str	r3, [r0, #8]
 800713c:	8181      	strh	r1, [r0, #12]
 800713e:	6643      	str	r3, [r0, #100]	; 0x64
 8007140:	81c2      	strh	r2, [r0, #14]
 8007142:	6183      	str	r3, [r0, #24]
 8007144:	4619      	mov	r1, r3
 8007146:	2208      	movs	r2, #8
 8007148:	305c      	adds	r0, #92	; 0x5c
 800714a:	f000 f9e5 	bl	8007518 <memset>
 800714e:	4b05      	ldr	r3, [pc, #20]	; (8007164 <std+0x38>)
 8007150:	6224      	str	r4, [r4, #32]
 8007152:	6263      	str	r3, [r4, #36]	; 0x24
 8007154:	4b04      	ldr	r3, [pc, #16]	; (8007168 <std+0x3c>)
 8007156:	62a3      	str	r3, [r4, #40]	; 0x28
 8007158:	4b04      	ldr	r3, [pc, #16]	; (800716c <std+0x40>)
 800715a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800715c:	4b04      	ldr	r3, [pc, #16]	; (8007170 <std+0x44>)
 800715e:	6323      	str	r3, [r4, #48]	; 0x30
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	08007369 	.word	0x08007369
 8007168:	0800738b 	.word	0x0800738b
 800716c:	080073c3 	.word	0x080073c3
 8007170:	080073e7 	.word	0x080073e7

08007174 <stdio_exit_handler>:
 8007174:	4a02      	ldr	r2, [pc, #8]	; (8007180 <stdio_exit_handler+0xc>)
 8007176:	4903      	ldr	r1, [pc, #12]	; (8007184 <stdio_exit_handler+0x10>)
 8007178:	4803      	ldr	r0, [pc, #12]	; (8007188 <stdio_exit_handler+0x14>)
 800717a:	f000 b869 	b.w	8007250 <_fwalk_sglue>
 800717e:	bf00      	nop
 8007180:	20000010 	.word	0x20000010
 8007184:	08007f51 	.word	0x08007f51
 8007188:	2000001c 	.word	0x2000001c

0800718c <cleanup_stdio>:
 800718c:	6841      	ldr	r1, [r0, #4]
 800718e:	4b0c      	ldr	r3, [pc, #48]	; (80071c0 <cleanup_stdio+0x34>)
 8007190:	b510      	push	{r4, lr}
 8007192:	4299      	cmp	r1, r3
 8007194:	4604      	mov	r4, r0
 8007196:	d001      	beq.n	800719c <cleanup_stdio+0x10>
 8007198:	f000 feda 	bl	8007f50 <_fflush_r>
 800719c:	68a1      	ldr	r1, [r4, #8]
 800719e:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <cleanup_stdio+0x38>)
 80071a0:	4299      	cmp	r1, r3
 80071a2:	d002      	beq.n	80071aa <cleanup_stdio+0x1e>
 80071a4:	4620      	mov	r0, r4
 80071a6:	f000 fed3 	bl	8007f50 <_fflush_r>
 80071aa:	68e1      	ldr	r1, [r4, #12]
 80071ac:	4b06      	ldr	r3, [pc, #24]	; (80071c8 <cleanup_stdio+0x3c>)
 80071ae:	4299      	cmp	r1, r3
 80071b0:	d004      	beq.n	80071bc <cleanup_stdio+0x30>
 80071b2:	4620      	mov	r0, r4
 80071b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071b8:	f000 beca 	b.w	8007f50 <_fflush_r>
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop
 80071c0:	20001478 	.word	0x20001478
 80071c4:	200014e0 	.word	0x200014e0
 80071c8:	20001548 	.word	0x20001548

080071cc <global_stdio_init.part.0>:
 80071cc:	b510      	push	{r4, lr}
 80071ce:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <global_stdio_init.part.0+0x30>)
 80071d0:	4c0b      	ldr	r4, [pc, #44]	; (8007200 <global_stdio_init.part.0+0x34>)
 80071d2:	4a0c      	ldr	r2, [pc, #48]	; (8007204 <global_stdio_init.part.0+0x38>)
 80071d4:	4620      	mov	r0, r4
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	2104      	movs	r1, #4
 80071da:	2200      	movs	r2, #0
 80071dc:	f7ff ffa6 	bl	800712c <std>
 80071e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071e4:	2201      	movs	r2, #1
 80071e6:	2109      	movs	r1, #9
 80071e8:	f7ff ffa0 	bl	800712c <std>
 80071ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071f0:	2202      	movs	r2, #2
 80071f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f6:	2112      	movs	r1, #18
 80071f8:	f7ff bf98 	b.w	800712c <std>
 80071fc:	200015b0 	.word	0x200015b0
 8007200:	20001478 	.word	0x20001478
 8007204:	08007175 	.word	0x08007175

08007208 <__sfp_lock_acquire>:
 8007208:	4801      	ldr	r0, [pc, #4]	; (8007210 <__sfp_lock_acquire+0x8>)
 800720a:	f000 ba53 	b.w	80076b4 <__retarget_lock_acquire_recursive>
 800720e:	bf00      	nop
 8007210:	200015b9 	.word	0x200015b9

08007214 <__sfp_lock_release>:
 8007214:	4801      	ldr	r0, [pc, #4]	; (800721c <__sfp_lock_release+0x8>)
 8007216:	f000 ba4e 	b.w	80076b6 <__retarget_lock_release_recursive>
 800721a:	bf00      	nop
 800721c:	200015b9 	.word	0x200015b9

08007220 <__sinit>:
 8007220:	b510      	push	{r4, lr}
 8007222:	4604      	mov	r4, r0
 8007224:	f7ff fff0 	bl	8007208 <__sfp_lock_acquire>
 8007228:	6a23      	ldr	r3, [r4, #32]
 800722a:	b11b      	cbz	r3, 8007234 <__sinit+0x14>
 800722c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007230:	f7ff bff0 	b.w	8007214 <__sfp_lock_release>
 8007234:	4b04      	ldr	r3, [pc, #16]	; (8007248 <__sinit+0x28>)
 8007236:	6223      	str	r3, [r4, #32]
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <__sinit+0x2c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1f5      	bne.n	800722c <__sinit+0xc>
 8007240:	f7ff ffc4 	bl	80071cc <global_stdio_init.part.0>
 8007244:	e7f2      	b.n	800722c <__sinit+0xc>
 8007246:	bf00      	nop
 8007248:	0800718d 	.word	0x0800718d
 800724c:	200015b0 	.word	0x200015b0

08007250 <_fwalk_sglue>:
 8007250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007254:	4607      	mov	r7, r0
 8007256:	4688      	mov	r8, r1
 8007258:	4614      	mov	r4, r2
 800725a:	2600      	movs	r6, #0
 800725c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007260:	f1b9 0901 	subs.w	r9, r9, #1
 8007264:	d505      	bpl.n	8007272 <_fwalk_sglue+0x22>
 8007266:	6824      	ldr	r4, [r4, #0]
 8007268:	2c00      	cmp	r4, #0
 800726a:	d1f7      	bne.n	800725c <_fwalk_sglue+0xc>
 800726c:	4630      	mov	r0, r6
 800726e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007272:	89ab      	ldrh	r3, [r5, #12]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d907      	bls.n	8007288 <_fwalk_sglue+0x38>
 8007278:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800727c:	3301      	adds	r3, #1
 800727e:	d003      	beq.n	8007288 <_fwalk_sglue+0x38>
 8007280:	4629      	mov	r1, r5
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	4306      	orrs	r6, r0
 8007288:	3568      	adds	r5, #104	; 0x68
 800728a:	e7e9      	b.n	8007260 <_fwalk_sglue+0x10>

0800728c <iprintf>:
 800728c:	b40f      	push	{r0, r1, r2, r3}
 800728e:	b507      	push	{r0, r1, r2, lr}
 8007290:	4906      	ldr	r1, [pc, #24]	; (80072ac <iprintf+0x20>)
 8007292:	ab04      	add	r3, sp, #16
 8007294:	6808      	ldr	r0, [r1, #0]
 8007296:	f853 2b04 	ldr.w	r2, [r3], #4
 800729a:	6881      	ldr	r1, [r0, #8]
 800729c:	9301      	str	r3, [sp, #4]
 800729e:	f000 fb27 	bl	80078f0 <_vfiprintf_r>
 80072a2:	b003      	add	sp, #12
 80072a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80072a8:	b004      	add	sp, #16
 80072aa:	4770      	bx	lr
 80072ac:	20000068 	.word	0x20000068

080072b0 <_puts_r>:
 80072b0:	6a03      	ldr	r3, [r0, #32]
 80072b2:	b570      	push	{r4, r5, r6, lr}
 80072b4:	4605      	mov	r5, r0
 80072b6:	460e      	mov	r6, r1
 80072b8:	6884      	ldr	r4, [r0, #8]
 80072ba:	b90b      	cbnz	r3, 80072c0 <_puts_r+0x10>
 80072bc:	f7ff ffb0 	bl	8007220 <__sinit>
 80072c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80072c2:	07db      	lsls	r3, r3, #31
 80072c4:	d405      	bmi.n	80072d2 <_puts_r+0x22>
 80072c6:	89a3      	ldrh	r3, [r4, #12]
 80072c8:	0598      	lsls	r0, r3, #22
 80072ca:	d402      	bmi.n	80072d2 <_puts_r+0x22>
 80072cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072ce:	f000 f9f1 	bl	80076b4 <__retarget_lock_acquire_recursive>
 80072d2:	89a3      	ldrh	r3, [r4, #12]
 80072d4:	0719      	lsls	r1, r3, #28
 80072d6:	d513      	bpl.n	8007300 <_puts_r+0x50>
 80072d8:	6923      	ldr	r3, [r4, #16]
 80072da:	b18b      	cbz	r3, 8007300 <_puts_r+0x50>
 80072dc:	3e01      	subs	r6, #1
 80072de:	68a3      	ldr	r3, [r4, #8]
 80072e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072e4:	3b01      	subs	r3, #1
 80072e6:	60a3      	str	r3, [r4, #8]
 80072e8:	b9e9      	cbnz	r1, 8007326 <_puts_r+0x76>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	da2e      	bge.n	800734c <_puts_r+0x9c>
 80072ee:	4622      	mov	r2, r4
 80072f0:	210a      	movs	r1, #10
 80072f2:	4628      	mov	r0, r5
 80072f4:	f000 f87b 	bl	80073ee <__swbuf_r>
 80072f8:	3001      	adds	r0, #1
 80072fa:	d007      	beq.n	800730c <_puts_r+0x5c>
 80072fc:	250a      	movs	r5, #10
 80072fe:	e007      	b.n	8007310 <_puts_r+0x60>
 8007300:	4621      	mov	r1, r4
 8007302:	4628      	mov	r0, r5
 8007304:	f000 f8b0 	bl	8007468 <__swsetup_r>
 8007308:	2800      	cmp	r0, #0
 800730a:	d0e7      	beq.n	80072dc <_puts_r+0x2c>
 800730c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007312:	07da      	lsls	r2, r3, #31
 8007314:	d405      	bmi.n	8007322 <_puts_r+0x72>
 8007316:	89a3      	ldrh	r3, [r4, #12]
 8007318:	059b      	lsls	r3, r3, #22
 800731a:	d402      	bmi.n	8007322 <_puts_r+0x72>
 800731c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800731e:	f000 f9ca 	bl	80076b6 <__retarget_lock_release_recursive>
 8007322:	4628      	mov	r0, r5
 8007324:	bd70      	pop	{r4, r5, r6, pc}
 8007326:	2b00      	cmp	r3, #0
 8007328:	da04      	bge.n	8007334 <_puts_r+0x84>
 800732a:	69a2      	ldr	r2, [r4, #24]
 800732c:	429a      	cmp	r2, r3
 800732e:	dc06      	bgt.n	800733e <_puts_r+0x8e>
 8007330:	290a      	cmp	r1, #10
 8007332:	d004      	beq.n	800733e <_puts_r+0x8e>
 8007334:	6823      	ldr	r3, [r4, #0]
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	6022      	str	r2, [r4, #0]
 800733a:	7019      	strb	r1, [r3, #0]
 800733c:	e7cf      	b.n	80072de <_puts_r+0x2e>
 800733e:	4622      	mov	r2, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 f854 	bl	80073ee <__swbuf_r>
 8007346:	3001      	adds	r0, #1
 8007348:	d1c9      	bne.n	80072de <_puts_r+0x2e>
 800734a:	e7df      	b.n	800730c <_puts_r+0x5c>
 800734c:	250a      	movs	r5, #10
 800734e:	6823      	ldr	r3, [r4, #0]
 8007350:	1c5a      	adds	r2, r3, #1
 8007352:	6022      	str	r2, [r4, #0]
 8007354:	701d      	strb	r5, [r3, #0]
 8007356:	e7db      	b.n	8007310 <_puts_r+0x60>

08007358 <puts>:
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <puts+0xc>)
 800735a:	4601      	mov	r1, r0
 800735c:	6818      	ldr	r0, [r3, #0]
 800735e:	f7ff bfa7 	b.w	80072b0 <_puts_r>
 8007362:	bf00      	nop
 8007364:	20000068 	.word	0x20000068

08007368 <__sread>:
 8007368:	b510      	push	{r4, lr}
 800736a:	460c      	mov	r4, r1
 800736c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007370:	f000 f952 	bl	8007618 <_read_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	bfab      	itete	ge
 8007378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800737a:	89a3      	ldrhlt	r3, [r4, #12]
 800737c:	181b      	addge	r3, r3, r0
 800737e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007382:	bfac      	ite	ge
 8007384:	6563      	strge	r3, [r4, #84]	; 0x54
 8007386:	81a3      	strhlt	r3, [r4, #12]
 8007388:	bd10      	pop	{r4, pc}

0800738a <__swrite>:
 800738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738e:	461f      	mov	r7, r3
 8007390:	898b      	ldrh	r3, [r1, #12]
 8007392:	4605      	mov	r5, r0
 8007394:	05db      	lsls	r3, r3, #23
 8007396:	460c      	mov	r4, r1
 8007398:	4616      	mov	r6, r2
 800739a:	d505      	bpl.n	80073a8 <__swrite+0x1e>
 800739c:	2302      	movs	r3, #2
 800739e:	2200      	movs	r2, #0
 80073a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073a4:	f000 f926 	bl	80075f4 <_lseek_r>
 80073a8:	89a3      	ldrh	r3, [r4, #12]
 80073aa:	4632      	mov	r2, r6
 80073ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073b0:	81a3      	strh	r3, [r4, #12]
 80073b2:	4628      	mov	r0, r5
 80073b4:	463b      	mov	r3, r7
 80073b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80073be:	f000 b93d 	b.w	800763c <_write_r>

080073c2 <__sseek>:
 80073c2:	b510      	push	{r4, lr}
 80073c4:	460c      	mov	r4, r1
 80073c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ca:	f000 f913 	bl	80075f4 <_lseek_r>
 80073ce:	1c43      	adds	r3, r0, #1
 80073d0:	89a3      	ldrh	r3, [r4, #12]
 80073d2:	bf15      	itete	ne
 80073d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80073d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80073da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80073de:	81a3      	strheq	r3, [r4, #12]
 80073e0:	bf18      	it	ne
 80073e2:	81a3      	strhne	r3, [r4, #12]
 80073e4:	bd10      	pop	{r4, pc}

080073e6 <__sclose>:
 80073e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ea:	f000 b89d 	b.w	8007528 <_close_r>

080073ee <__swbuf_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	460e      	mov	r6, r1
 80073f2:	4614      	mov	r4, r2
 80073f4:	4605      	mov	r5, r0
 80073f6:	b118      	cbz	r0, 8007400 <__swbuf_r+0x12>
 80073f8:	6a03      	ldr	r3, [r0, #32]
 80073fa:	b90b      	cbnz	r3, 8007400 <__swbuf_r+0x12>
 80073fc:	f7ff ff10 	bl	8007220 <__sinit>
 8007400:	69a3      	ldr	r3, [r4, #24]
 8007402:	60a3      	str	r3, [r4, #8]
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	071a      	lsls	r2, r3, #28
 8007408:	d525      	bpl.n	8007456 <__swbuf_r+0x68>
 800740a:	6923      	ldr	r3, [r4, #16]
 800740c:	b31b      	cbz	r3, 8007456 <__swbuf_r+0x68>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	6922      	ldr	r2, [r4, #16]
 8007412:	b2f6      	uxtb	r6, r6
 8007414:	1a98      	subs	r0, r3, r2
 8007416:	6963      	ldr	r3, [r4, #20]
 8007418:	4637      	mov	r7, r6
 800741a:	4283      	cmp	r3, r0
 800741c:	dc04      	bgt.n	8007428 <__swbuf_r+0x3a>
 800741e:	4621      	mov	r1, r4
 8007420:	4628      	mov	r0, r5
 8007422:	f000 fd95 	bl	8007f50 <_fflush_r>
 8007426:	b9e0      	cbnz	r0, 8007462 <__swbuf_r+0x74>
 8007428:	68a3      	ldr	r3, [r4, #8]
 800742a:	3b01      	subs	r3, #1
 800742c:	60a3      	str	r3, [r4, #8]
 800742e:	6823      	ldr	r3, [r4, #0]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	6022      	str	r2, [r4, #0]
 8007434:	701e      	strb	r6, [r3, #0]
 8007436:	6962      	ldr	r2, [r4, #20]
 8007438:	1c43      	adds	r3, r0, #1
 800743a:	429a      	cmp	r2, r3
 800743c:	d004      	beq.n	8007448 <__swbuf_r+0x5a>
 800743e:	89a3      	ldrh	r3, [r4, #12]
 8007440:	07db      	lsls	r3, r3, #31
 8007442:	d506      	bpl.n	8007452 <__swbuf_r+0x64>
 8007444:	2e0a      	cmp	r6, #10
 8007446:	d104      	bne.n	8007452 <__swbuf_r+0x64>
 8007448:	4621      	mov	r1, r4
 800744a:	4628      	mov	r0, r5
 800744c:	f000 fd80 	bl	8007f50 <_fflush_r>
 8007450:	b938      	cbnz	r0, 8007462 <__swbuf_r+0x74>
 8007452:	4638      	mov	r0, r7
 8007454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007456:	4621      	mov	r1, r4
 8007458:	4628      	mov	r0, r5
 800745a:	f000 f805 	bl	8007468 <__swsetup_r>
 800745e:	2800      	cmp	r0, #0
 8007460:	d0d5      	beq.n	800740e <__swbuf_r+0x20>
 8007462:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007466:	e7f4      	b.n	8007452 <__swbuf_r+0x64>

08007468 <__swsetup_r>:
 8007468:	b538      	push	{r3, r4, r5, lr}
 800746a:	4b2a      	ldr	r3, [pc, #168]	; (8007514 <__swsetup_r+0xac>)
 800746c:	4605      	mov	r5, r0
 800746e:	6818      	ldr	r0, [r3, #0]
 8007470:	460c      	mov	r4, r1
 8007472:	b118      	cbz	r0, 800747c <__swsetup_r+0x14>
 8007474:	6a03      	ldr	r3, [r0, #32]
 8007476:	b90b      	cbnz	r3, 800747c <__swsetup_r+0x14>
 8007478:	f7ff fed2 	bl	8007220 <__sinit>
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007482:	0718      	lsls	r0, r3, #28
 8007484:	d422      	bmi.n	80074cc <__swsetup_r+0x64>
 8007486:	06d9      	lsls	r1, r3, #27
 8007488:	d407      	bmi.n	800749a <__swsetup_r+0x32>
 800748a:	2309      	movs	r3, #9
 800748c:	602b      	str	r3, [r5, #0]
 800748e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007496:	81a3      	strh	r3, [r4, #12]
 8007498:	e034      	b.n	8007504 <__swsetup_r+0x9c>
 800749a:	0758      	lsls	r0, r3, #29
 800749c:	d512      	bpl.n	80074c4 <__swsetup_r+0x5c>
 800749e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074a0:	b141      	cbz	r1, 80074b4 <__swsetup_r+0x4c>
 80074a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074a6:	4299      	cmp	r1, r3
 80074a8:	d002      	beq.n	80074b0 <__swsetup_r+0x48>
 80074aa:	4628      	mov	r0, r5
 80074ac:	f000 f904 	bl	80076b8 <_free_r>
 80074b0:	2300      	movs	r3, #0
 80074b2:	6363      	str	r3, [r4, #52]	; 0x34
 80074b4:	89a3      	ldrh	r3, [r4, #12]
 80074b6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80074ba:	81a3      	strh	r3, [r4, #12]
 80074bc:	2300      	movs	r3, #0
 80074be:	6063      	str	r3, [r4, #4]
 80074c0:	6923      	ldr	r3, [r4, #16]
 80074c2:	6023      	str	r3, [r4, #0]
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f043 0308 	orr.w	r3, r3, #8
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	b94b      	cbnz	r3, 80074e4 <__swsetup_r+0x7c>
 80074d0:	89a3      	ldrh	r3, [r4, #12]
 80074d2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80074d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074da:	d003      	beq.n	80074e4 <__swsetup_r+0x7c>
 80074dc:	4621      	mov	r1, r4
 80074de:	4628      	mov	r0, r5
 80074e0:	f000 fd83 	bl	8007fea <__smakebuf_r>
 80074e4:	89a0      	ldrh	r0, [r4, #12]
 80074e6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074ea:	f010 0301 	ands.w	r3, r0, #1
 80074ee:	d00a      	beq.n	8007506 <__swsetup_r+0x9e>
 80074f0:	2300      	movs	r3, #0
 80074f2:	60a3      	str	r3, [r4, #8]
 80074f4:	6963      	ldr	r3, [r4, #20]
 80074f6:	425b      	negs	r3, r3
 80074f8:	61a3      	str	r3, [r4, #24]
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	b943      	cbnz	r3, 8007510 <__swsetup_r+0xa8>
 80074fe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007502:	d1c4      	bne.n	800748e <__swsetup_r+0x26>
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	0781      	lsls	r1, r0, #30
 8007508:	bf58      	it	pl
 800750a:	6963      	ldrpl	r3, [r4, #20]
 800750c:	60a3      	str	r3, [r4, #8]
 800750e:	e7f4      	b.n	80074fa <__swsetup_r+0x92>
 8007510:	2000      	movs	r0, #0
 8007512:	e7f7      	b.n	8007504 <__swsetup_r+0x9c>
 8007514:	20000068 	.word	0x20000068

08007518 <memset>:
 8007518:	4603      	mov	r3, r0
 800751a:	4402      	add	r2, r0
 800751c:	4293      	cmp	r3, r2
 800751e:	d100      	bne.n	8007522 <memset+0xa>
 8007520:	4770      	bx	lr
 8007522:	f803 1b01 	strb.w	r1, [r3], #1
 8007526:	e7f9      	b.n	800751c <memset+0x4>

08007528 <_close_r>:
 8007528:	b538      	push	{r3, r4, r5, lr}
 800752a:	2300      	movs	r3, #0
 800752c:	4d05      	ldr	r5, [pc, #20]	; (8007544 <_close_r+0x1c>)
 800752e:	4604      	mov	r4, r0
 8007530:	4608      	mov	r0, r1
 8007532:	602b      	str	r3, [r5, #0]
 8007534:	f7fb f9ad 	bl	8002892 <_close>
 8007538:	1c43      	adds	r3, r0, #1
 800753a:	d102      	bne.n	8007542 <_close_r+0x1a>
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	b103      	cbz	r3, 8007542 <_close_r+0x1a>
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	bd38      	pop	{r3, r4, r5, pc}
 8007544:	200015b4 	.word	0x200015b4

08007548 <_reclaim_reent>:
 8007548:	4b29      	ldr	r3, [pc, #164]	; (80075f0 <_reclaim_reent+0xa8>)
 800754a:	b570      	push	{r4, r5, r6, lr}
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4604      	mov	r4, r0
 8007550:	4283      	cmp	r3, r0
 8007552:	d04b      	beq.n	80075ec <_reclaim_reent+0xa4>
 8007554:	69c3      	ldr	r3, [r0, #28]
 8007556:	b143      	cbz	r3, 800756a <_reclaim_reent+0x22>
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d144      	bne.n	80075e8 <_reclaim_reent+0xa0>
 800755e:	69e3      	ldr	r3, [r4, #28]
 8007560:	6819      	ldr	r1, [r3, #0]
 8007562:	b111      	cbz	r1, 800756a <_reclaim_reent+0x22>
 8007564:	4620      	mov	r0, r4
 8007566:	f000 f8a7 	bl	80076b8 <_free_r>
 800756a:	6961      	ldr	r1, [r4, #20]
 800756c:	b111      	cbz	r1, 8007574 <_reclaim_reent+0x2c>
 800756e:	4620      	mov	r0, r4
 8007570:	f000 f8a2 	bl	80076b8 <_free_r>
 8007574:	69e1      	ldr	r1, [r4, #28]
 8007576:	b111      	cbz	r1, 800757e <_reclaim_reent+0x36>
 8007578:	4620      	mov	r0, r4
 800757a:	f000 f89d 	bl	80076b8 <_free_r>
 800757e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007580:	b111      	cbz	r1, 8007588 <_reclaim_reent+0x40>
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f898 	bl	80076b8 <_free_r>
 8007588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800758a:	b111      	cbz	r1, 8007592 <_reclaim_reent+0x4a>
 800758c:	4620      	mov	r0, r4
 800758e:	f000 f893 	bl	80076b8 <_free_r>
 8007592:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007594:	b111      	cbz	r1, 800759c <_reclaim_reent+0x54>
 8007596:	4620      	mov	r0, r4
 8007598:	f000 f88e 	bl	80076b8 <_free_r>
 800759c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800759e:	b111      	cbz	r1, 80075a6 <_reclaim_reent+0x5e>
 80075a0:	4620      	mov	r0, r4
 80075a2:	f000 f889 	bl	80076b8 <_free_r>
 80075a6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80075a8:	b111      	cbz	r1, 80075b0 <_reclaim_reent+0x68>
 80075aa:	4620      	mov	r0, r4
 80075ac:	f000 f884 	bl	80076b8 <_free_r>
 80075b0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80075b2:	b111      	cbz	r1, 80075ba <_reclaim_reent+0x72>
 80075b4:	4620      	mov	r0, r4
 80075b6:	f000 f87f 	bl	80076b8 <_free_r>
 80075ba:	6a23      	ldr	r3, [r4, #32]
 80075bc:	b1b3      	cbz	r3, 80075ec <_reclaim_reent+0xa4>
 80075be:	4620      	mov	r0, r4
 80075c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80075c4:	4718      	bx	r3
 80075c6:	5949      	ldr	r1, [r1, r5]
 80075c8:	b941      	cbnz	r1, 80075dc <_reclaim_reent+0x94>
 80075ca:	3504      	adds	r5, #4
 80075cc:	69e3      	ldr	r3, [r4, #28]
 80075ce:	2d80      	cmp	r5, #128	; 0x80
 80075d0:	68d9      	ldr	r1, [r3, #12]
 80075d2:	d1f8      	bne.n	80075c6 <_reclaim_reent+0x7e>
 80075d4:	4620      	mov	r0, r4
 80075d6:	f000 f86f 	bl	80076b8 <_free_r>
 80075da:	e7c0      	b.n	800755e <_reclaim_reent+0x16>
 80075dc:	680e      	ldr	r6, [r1, #0]
 80075de:	4620      	mov	r0, r4
 80075e0:	f000 f86a 	bl	80076b8 <_free_r>
 80075e4:	4631      	mov	r1, r6
 80075e6:	e7ef      	b.n	80075c8 <_reclaim_reent+0x80>
 80075e8:	2500      	movs	r5, #0
 80075ea:	e7ef      	b.n	80075cc <_reclaim_reent+0x84>
 80075ec:	bd70      	pop	{r4, r5, r6, pc}
 80075ee:	bf00      	nop
 80075f0:	20000068 	.word	0x20000068

080075f4 <_lseek_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4604      	mov	r4, r0
 80075f8:	4608      	mov	r0, r1
 80075fa:	4611      	mov	r1, r2
 80075fc:	2200      	movs	r2, #0
 80075fe:	4d05      	ldr	r5, [pc, #20]	; (8007614 <_lseek_r+0x20>)
 8007600:	602a      	str	r2, [r5, #0]
 8007602:	461a      	mov	r2, r3
 8007604:	f7fb f969 	bl	80028da <_lseek>
 8007608:	1c43      	adds	r3, r0, #1
 800760a:	d102      	bne.n	8007612 <_lseek_r+0x1e>
 800760c:	682b      	ldr	r3, [r5, #0]
 800760e:	b103      	cbz	r3, 8007612 <_lseek_r+0x1e>
 8007610:	6023      	str	r3, [r4, #0]
 8007612:	bd38      	pop	{r3, r4, r5, pc}
 8007614:	200015b4 	.word	0x200015b4

08007618 <_read_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4604      	mov	r4, r0
 800761c:	4608      	mov	r0, r1
 800761e:	4611      	mov	r1, r2
 8007620:	2200      	movs	r2, #0
 8007622:	4d05      	ldr	r5, [pc, #20]	; (8007638 <_read_r+0x20>)
 8007624:	602a      	str	r2, [r5, #0]
 8007626:	461a      	mov	r2, r3
 8007628:	f7fb f8fa 	bl	8002820 <_read>
 800762c:	1c43      	adds	r3, r0, #1
 800762e:	d102      	bne.n	8007636 <_read_r+0x1e>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	b103      	cbz	r3, 8007636 <_read_r+0x1e>
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	bd38      	pop	{r3, r4, r5, pc}
 8007638:	200015b4 	.word	0x200015b4

0800763c <_write_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	2200      	movs	r2, #0
 8007646:	4d05      	ldr	r5, [pc, #20]	; (800765c <_write_r+0x20>)
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7fb f905 	bl	800285a <_write>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_write_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_write_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	200015b4 	.word	0x200015b4

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000068 	.word	0x20000068

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	2600      	movs	r6, #0
 8007670:	4d0c      	ldr	r5, [pc, #48]	; (80076a4 <__libc_init_array+0x38>)
 8007672:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007674:	1b64      	subs	r4, r4, r5
 8007676:	10a4      	asrs	r4, r4, #2
 8007678:	42a6      	cmp	r6, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	f000 fd32 	bl	80080e4 <_init>
 8007680:	2600      	movs	r6, #0
 8007682:	4d0a      	ldr	r5, [pc, #40]	; (80076ac <__libc_init_array+0x40>)
 8007684:	4c0a      	ldr	r4, [pc, #40]	; (80076b0 <__libc_init_array+0x44>)
 8007686:	1b64      	subs	r4, r4, r5
 8007688:	10a4      	asrs	r4, r4, #2
 800768a:	42a6      	cmp	r6, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f855 3b04 	ldr.w	r3, [r5], #4
 8007694:	4798      	blx	r3
 8007696:	3601      	adds	r6, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f855 3b04 	ldr.w	r3, [r5], #4
 800769e:	4798      	blx	r3
 80076a0:	3601      	adds	r6, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	0800885c 	.word	0x0800885c
 80076a8:	0800885c 	.word	0x0800885c
 80076ac:	0800885c 	.word	0x0800885c
 80076b0:	08008860 	.word	0x08008860

080076b4 <__retarget_lock_acquire_recursive>:
 80076b4:	4770      	bx	lr

080076b6 <__retarget_lock_release_recursive>:
 80076b6:	4770      	bx	lr

080076b8 <_free_r>:
 80076b8:	b538      	push	{r3, r4, r5, lr}
 80076ba:	4605      	mov	r5, r0
 80076bc:	2900      	cmp	r1, #0
 80076be:	d040      	beq.n	8007742 <_free_r+0x8a>
 80076c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c4:	1f0c      	subs	r4, r1, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfb8      	it	lt
 80076ca:	18e4      	addlt	r4, r4, r3
 80076cc:	f000 f8dc 	bl	8007888 <__malloc_lock>
 80076d0:	4a1c      	ldr	r2, [pc, #112]	; (8007744 <_free_r+0x8c>)
 80076d2:	6813      	ldr	r3, [r2, #0]
 80076d4:	b933      	cbnz	r3, 80076e4 <_free_r+0x2c>
 80076d6:	6063      	str	r3, [r4, #4]
 80076d8:	6014      	str	r4, [r2, #0]
 80076da:	4628      	mov	r0, r5
 80076dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e0:	f000 b8d8 	b.w	8007894 <__malloc_unlock>
 80076e4:	42a3      	cmp	r3, r4
 80076e6:	d908      	bls.n	80076fa <_free_r+0x42>
 80076e8:	6820      	ldr	r0, [r4, #0]
 80076ea:	1821      	adds	r1, r4, r0
 80076ec:	428b      	cmp	r3, r1
 80076ee:	bf01      	itttt	eq
 80076f0:	6819      	ldreq	r1, [r3, #0]
 80076f2:	685b      	ldreq	r3, [r3, #4]
 80076f4:	1809      	addeq	r1, r1, r0
 80076f6:	6021      	streq	r1, [r4, #0]
 80076f8:	e7ed      	b.n	80076d6 <_free_r+0x1e>
 80076fa:	461a      	mov	r2, r3
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	b10b      	cbz	r3, 8007704 <_free_r+0x4c>
 8007700:	42a3      	cmp	r3, r4
 8007702:	d9fa      	bls.n	80076fa <_free_r+0x42>
 8007704:	6811      	ldr	r1, [r2, #0]
 8007706:	1850      	adds	r0, r2, r1
 8007708:	42a0      	cmp	r0, r4
 800770a:	d10b      	bne.n	8007724 <_free_r+0x6c>
 800770c:	6820      	ldr	r0, [r4, #0]
 800770e:	4401      	add	r1, r0
 8007710:	1850      	adds	r0, r2, r1
 8007712:	4283      	cmp	r3, r0
 8007714:	6011      	str	r1, [r2, #0]
 8007716:	d1e0      	bne.n	80076da <_free_r+0x22>
 8007718:	6818      	ldr	r0, [r3, #0]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	4408      	add	r0, r1
 800771e:	6010      	str	r0, [r2, #0]
 8007720:	6053      	str	r3, [r2, #4]
 8007722:	e7da      	b.n	80076da <_free_r+0x22>
 8007724:	d902      	bls.n	800772c <_free_r+0x74>
 8007726:	230c      	movs	r3, #12
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	e7d6      	b.n	80076da <_free_r+0x22>
 800772c:	6820      	ldr	r0, [r4, #0]
 800772e:	1821      	adds	r1, r4, r0
 8007730:	428b      	cmp	r3, r1
 8007732:	bf01      	itttt	eq
 8007734:	6819      	ldreq	r1, [r3, #0]
 8007736:	685b      	ldreq	r3, [r3, #4]
 8007738:	1809      	addeq	r1, r1, r0
 800773a:	6021      	streq	r1, [r4, #0]
 800773c:	6063      	str	r3, [r4, #4]
 800773e:	6054      	str	r4, [r2, #4]
 8007740:	e7cb      	b.n	80076da <_free_r+0x22>
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200015bc 	.word	0x200015bc

08007748 <sbrk_aligned>:
 8007748:	b570      	push	{r4, r5, r6, lr}
 800774a:	4e0e      	ldr	r6, [pc, #56]	; (8007784 <sbrk_aligned+0x3c>)
 800774c:	460c      	mov	r4, r1
 800774e:	6831      	ldr	r1, [r6, #0]
 8007750:	4605      	mov	r5, r0
 8007752:	b911      	cbnz	r1, 800775a <sbrk_aligned+0x12>
 8007754:	f000 fca8 	bl	80080a8 <_sbrk_r>
 8007758:	6030      	str	r0, [r6, #0]
 800775a:	4621      	mov	r1, r4
 800775c:	4628      	mov	r0, r5
 800775e:	f000 fca3 	bl	80080a8 <_sbrk_r>
 8007762:	1c43      	adds	r3, r0, #1
 8007764:	d00a      	beq.n	800777c <sbrk_aligned+0x34>
 8007766:	1cc4      	adds	r4, r0, #3
 8007768:	f024 0403 	bic.w	r4, r4, #3
 800776c:	42a0      	cmp	r0, r4
 800776e:	d007      	beq.n	8007780 <sbrk_aligned+0x38>
 8007770:	1a21      	subs	r1, r4, r0
 8007772:	4628      	mov	r0, r5
 8007774:	f000 fc98 	bl	80080a8 <_sbrk_r>
 8007778:	3001      	adds	r0, #1
 800777a:	d101      	bne.n	8007780 <sbrk_aligned+0x38>
 800777c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007780:	4620      	mov	r0, r4
 8007782:	bd70      	pop	{r4, r5, r6, pc}
 8007784:	200015c0 	.word	0x200015c0

08007788 <_malloc_r>:
 8007788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800778c:	1ccd      	adds	r5, r1, #3
 800778e:	f025 0503 	bic.w	r5, r5, #3
 8007792:	3508      	adds	r5, #8
 8007794:	2d0c      	cmp	r5, #12
 8007796:	bf38      	it	cc
 8007798:	250c      	movcc	r5, #12
 800779a:	2d00      	cmp	r5, #0
 800779c:	4607      	mov	r7, r0
 800779e:	db01      	blt.n	80077a4 <_malloc_r+0x1c>
 80077a0:	42a9      	cmp	r1, r5
 80077a2:	d905      	bls.n	80077b0 <_malloc_r+0x28>
 80077a4:	230c      	movs	r3, #12
 80077a6:	2600      	movs	r6, #0
 80077a8:	603b      	str	r3, [r7, #0]
 80077aa:	4630      	mov	r0, r6
 80077ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007884 <_malloc_r+0xfc>
 80077b4:	f000 f868 	bl	8007888 <__malloc_lock>
 80077b8:	f8d8 3000 	ldr.w	r3, [r8]
 80077bc:	461c      	mov	r4, r3
 80077be:	bb5c      	cbnz	r4, 8007818 <_malloc_r+0x90>
 80077c0:	4629      	mov	r1, r5
 80077c2:	4638      	mov	r0, r7
 80077c4:	f7ff ffc0 	bl	8007748 <sbrk_aligned>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	4604      	mov	r4, r0
 80077cc:	d155      	bne.n	800787a <_malloc_r+0xf2>
 80077ce:	f8d8 4000 	ldr.w	r4, [r8]
 80077d2:	4626      	mov	r6, r4
 80077d4:	2e00      	cmp	r6, #0
 80077d6:	d145      	bne.n	8007864 <_malloc_r+0xdc>
 80077d8:	2c00      	cmp	r4, #0
 80077da:	d048      	beq.n	800786e <_malloc_r+0xe6>
 80077dc:	6823      	ldr	r3, [r4, #0]
 80077de:	4631      	mov	r1, r6
 80077e0:	4638      	mov	r0, r7
 80077e2:	eb04 0903 	add.w	r9, r4, r3
 80077e6:	f000 fc5f 	bl	80080a8 <_sbrk_r>
 80077ea:	4581      	cmp	r9, r0
 80077ec:	d13f      	bne.n	800786e <_malloc_r+0xe6>
 80077ee:	6821      	ldr	r1, [r4, #0]
 80077f0:	4638      	mov	r0, r7
 80077f2:	1a6d      	subs	r5, r5, r1
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7ff ffa7 	bl	8007748 <sbrk_aligned>
 80077fa:	3001      	adds	r0, #1
 80077fc:	d037      	beq.n	800786e <_malloc_r+0xe6>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	442b      	add	r3, r5
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	f8d8 3000 	ldr.w	r3, [r8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d038      	beq.n	800787e <_malloc_r+0xf6>
 800780c:	685a      	ldr	r2, [r3, #4]
 800780e:	42a2      	cmp	r2, r4
 8007810:	d12b      	bne.n	800786a <_malloc_r+0xe2>
 8007812:	2200      	movs	r2, #0
 8007814:	605a      	str	r2, [r3, #4]
 8007816:	e00f      	b.n	8007838 <_malloc_r+0xb0>
 8007818:	6822      	ldr	r2, [r4, #0]
 800781a:	1b52      	subs	r2, r2, r5
 800781c:	d41f      	bmi.n	800785e <_malloc_r+0xd6>
 800781e:	2a0b      	cmp	r2, #11
 8007820:	d917      	bls.n	8007852 <_malloc_r+0xca>
 8007822:	1961      	adds	r1, r4, r5
 8007824:	42a3      	cmp	r3, r4
 8007826:	6025      	str	r5, [r4, #0]
 8007828:	bf18      	it	ne
 800782a:	6059      	strne	r1, [r3, #4]
 800782c:	6863      	ldr	r3, [r4, #4]
 800782e:	bf08      	it	eq
 8007830:	f8c8 1000 	streq.w	r1, [r8]
 8007834:	5162      	str	r2, [r4, r5]
 8007836:	604b      	str	r3, [r1, #4]
 8007838:	4638      	mov	r0, r7
 800783a:	f104 060b 	add.w	r6, r4, #11
 800783e:	f000 f829 	bl	8007894 <__malloc_unlock>
 8007842:	f026 0607 	bic.w	r6, r6, #7
 8007846:	1d23      	adds	r3, r4, #4
 8007848:	1af2      	subs	r2, r6, r3
 800784a:	d0ae      	beq.n	80077aa <_malloc_r+0x22>
 800784c:	1b9b      	subs	r3, r3, r6
 800784e:	50a3      	str	r3, [r4, r2]
 8007850:	e7ab      	b.n	80077aa <_malloc_r+0x22>
 8007852:	42a3      	cmp	r3, r4
 8007854:	6862      	ldr	r2, [r4, #4]
 8007856:	d1dd      	bne.n	8007814 <_malloc_r+0x8c>
 8007858:	f8c8 2000 	str.w	r2, [r8]
 800785c:	e7ec      	b.n	8007838 <_malloc_r+0xb0>
 800785e:	4623      	mov	r3, r4
 8007860:	6864      	ldr	r4, [r4, #4]
 8007862:	e7ac      	b.n	80077be <_malloc_r+0x36>
 8007864:	4634      	mov	r4, r6
 8007866:	6876      	ldr	r6, [r6, #4]
 8007868:	e7b4      	b.n	80077d4 <_malloc_r+0x4c>
 800786a:	4613      	mov	r3, r2
 800786c:	e7cc      	b.n	8007808 <_malloc_r+0x80>
 800786e:	230c      	movs	r3, #12
 8007870:	4638      	mov	r0, r7
 8007872:	603b      	str	r3, [r7, #0]
 8007874:	f000 f80e 	bl	8007894 <__malloc_unlock>
 8007878:	e797      	b.n	80077aa <_malloc_r+0x22>
 800787a:	6025      	str	r5, [r4, #0]
 800787c:	e7dc      	b.n	8007838 <_malloc_r+0xb0>
 800787e:	605b      	str	r3, [r3, #4]
 8007880:	deff      	udf	#255	; 0xff
 8007882:	bf00      	nop
 8007884:	200015bc 	.word	0x200015bc

08007888 <__malloc_lock>:
 8007888:	4801      	ldr	r0, [pc, #4]	; (8007890 <__malloc_lock+0x8>)
 800788a:	f7ff bf13 	b.w	80076b4 <__retarget_lock_acquire_recursive>
 800788e:	bf00      	nop
 8007890:	200015b8 	.word	0x200015b8

08007894 <__malloc_unlock>:
 8007894:	4801      	ldr	r0, [pc, #4]	; (800789c <__malloc_unlock+0x8>)
 8007896:	f7ff bf0e 	b.w	80076b6 <__retarget_lock_release_recursive>
 800789a:	bf00      	nop
 800789c:	200015b8 	.word	0x200015b8

080078a0 <__sfputc_r>:
 80078a0:	6893      	ldr	r3, [r2, #8]
 80078a2:	b410      	push	{r4}
 80078a4:	3b01      	subs	r3, #1
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	6093      	str	r3, [r2, #8]
 80078aa:	da07      	bge.n	80078bc <__sfputc_r+0x1c>
 80078ac:	6994      	ldr	r4, [r2, #24]
 80078ae:	42a3      	cmp	r3, r4
 80078b0:	db01      	blt.n	80078b6 <__sfputc_r+0x16>
 80078b2:	290a      	cmp	r1, #10
 80078b4:	d102      	bne.n	80078bc <__sfputc_r+0x1c>
 80078b6:	bc10      	pop	{r4}
 80078b8:	f7ff bd99 	b.w	80073ee <__swbuf_r>
 80078bc:	6813      	ldr	r3, [r2, #0]
 80078be:	1c58      	adds	r0, r3, #1
 80078c0:	6010      	str	r0, [r2, #0]
 80078c2:	7019      	strb	r1, [r3, #0]
 80078c4:	4608      	mov	r0, r1
 80078c6:	bc10      	pop	{r4}
 80078c8:	4770      	bx	lr

080078ca <__sfputs_r>:
 80078ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078cc:	4606      	mov	r6, r0
 80078ce:	460f      	mov	r7, r1
 80078d0:	4614      	mov	r4, r2
 80078d2:	18d5      	adds	r5, r2, r3
 80078d4:	42ac      	cmp	r4, r5
 80078d6:	d101      	bne.n	80078dc <__sfputs_r+0x12>
 80078d8:	2000      	movs	r0, #0
 80078da:	e007      	b.n	80078ec <__sfputs_r+0x22>
 80078dc:	463a      	mov	r2, r7
 80078de:	4630      	mov	r0, r6
 80078e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078e4:	f7ff ffdc 	bl	80078a0 <__sfputc_r>
 80078e8:	1c43      	adds	r3, r0, #1
 80078ea:	d1f3      	bne.n	80078d4 <__sfputs_r+0xa>
 80078ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078f0 <_vfiprintf_r>:
 80078f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	460d      	mov	r5, r1
 80078f6:	4614      	mov	r4, r2
 80078f8:	4698      	mov	r8, r3
 80078fa:	4606      	mov	r6, r0
 80078fc:	b09d      	sub	sp, #116	; 0x74
 80078fe:	b118      	cbz	r0, 8007908 <_vfiprintf_r+0x18>
 8007900:	6a03      	ldr	r3, [r0, #32]
 8007902:	b90b      	cbnz	r3, 8007908 <_vfiprintf_r+0x18>
 8007904:	f7ff fc8c 	bl	8007220 <__sinit>
 8007908:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800790a:	07d9      	lsls	r1, r3, #31
 800790c:	d405      	bmi.n	800791a <_vfiprintf_r+0x2a>
 800790e:	89ab      	ldrh	r3, [r5, #12]
 8007910:	059a      	lsls	r2, r3, #22
 8007912:	d402      	bmi.n	800791a <_vfiprintf_r+0x2a>
 8007914:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007916:	f7ff fecd 	bl	80076b4 <__retarget_lock_acquire_recursive>
 800791a:	89ab      	ldrh	r3, [r5, #12]
 800791c:	071b      	lsls	r3, r3, #28
 800791e:	d501      	bpl.n	8007924 <_vfiprintf_r+0x34>
 8007920:	692b      	ldr	r3, [r5, #16]
 8007922:	b99b      	cbnz	r3, 800794c <_vfiprintf_r+0x5c>
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff fd9e 	bl	8007468 <__swsetup_r>
 800792c:	b170      	cbz	r0, 800794c <_vfiprintf_r+0x5c>
 800792e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007930:	07dc      	lsls	r4, r3, #31
 8007932:	d504      	bpl.n	800793e <_vfiprintf_r+0x4e>
 8007934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007938:	b01d      	add	sp, #116	; 0x74
 800793a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800793e:	89ab      	ldrh	r3, [r5, #12]
 8007940:	0598      	lsls	r0, r3, #22
 8007942:	d4f7      	bmi.n	8007934 <_vfiprintf_r+0x44>
 8007944:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007946:	f7ff feb6 	bl	80076b6 <__retarget_lock_release_recursive>
 800794a:	e7f3      	b.n	8007934 <_vfiprintf_r+0x44>
 800794c:	2300      	movs	r3, #0
 800794e:	9309      	str	r3, [sp, #36]	; 0x24
 8007950:	2320      	movs	r3, #32
 8007952:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007956:	2330      	movs	r3, #48	; 0x30
 8007958:	f04f 0901 	mov.w	r9, #1
 800795c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007960:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8007b10 <_vfiprintf_r+0x220>
 8007964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007968:	4623      	mov	r3, r4
 800796a:	469a      	mov	sl, r3
 800796c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007970:	b10a      	cbz	r2, 8007976 <_vfiprintf_r+0x86>
 8007972:	2a25      	cmp	r2, #37	; 0x25
 8007974:	d1f9      	bne.n	800796a <_vfiprintf_r+0x7a>
 8007976:	ebba 0b04 	subs.w	fp, sl, r4
 800797a:	d00b      	beq.n	8007994 <_vfiprintf_r+0xa4>
 800797c:	465b      	mov	r3, fp
 800797e:	4622      	mov	r2, r4
 8007980:	4629      	mov	r1, r5
 8007982:	4630      	mov	r0, r6
 8007984:	f7ff ffa1 	bl	80078ca <__sfputs_r>
 8007988:	3001      	adds	r0, #1
 800798a:	f000 80a9 	beq.w	8007ae0 <_vfiprintf_r+0x1f0>
 800798e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007990:	445a      	add	r2, fp
 8007992:	9209      	str	r2, [sp, #36]	; 0x24
 8007994:	f89a 3000 	ldrb.w	r3, [sl]
 8007998:	2b00      	cmp	r3, #0
 800799a:	f000 80a1 	beq.w	8007ae0 <_vfiprintf_r+0x1f0>
 800799e:	2300      	movs	r3, #0
 80079a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079a8:	f10a 0a01 	add.w	sl, sl, #1
 80079ac:	9304      	str	r3, [sp, #16]
 80079ae:	9307      	str	r3, [sp, #28]
 80079b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80079b4:	931a      	str	r3, [sp, #104]	; 0x68
 80079b6:	4654      	mov	r4, sl
 80079b8:	2205      	movs	r2, #5
 80079ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079be:	4854      	ldr	r0, [pc, #336]	; (8007b10 <_vfiprintf_r+0x220>)
 80079c0:	f000 fb82 	bl	80080c8 <memchr>
 80079c4:	9a04      	ldr	r2, [sp, #16]
 80079c6:	b9d8      	cbnz	r0, 8007a00 <_vfiprintf_r+0x110>
 80079c8:	06d1      	lsls	r1, r2, #27
 80079ca:	bf44      	itt	mi
 80079cc:	2320      	movmi	r3, #32
 80079ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079d2:	0713      	lsls	r3, r2, #28
 80079d4:	bf44      	itt	mi
 80079d6:	232b      	movmi	r3, #43	; 0x2b
 80079d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079dc:	f89a 3000 	ldrb.w	r3, [sl]
 80079e0:	2b2a      	cmp	r3, #42	; 0x2a
 80079e2:	d015      	beq.n	8007a10 <_vfiprintf_r+0x120>
 80079e4:	4654      	mov	r4, sl
 80079e6:	2000      	movs	r0, #0
 80079e8:	f04f 0c0a 	mov.w	ip, #10
 80079ec:	9a07      	ldr	r2, [sp, #28]
 80079ee:	4621      	mov	r1, r4
 80079f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079f4:	3b30      	subs	r3, #48	; 0x30
 80079f6:	2b09      	cmp	r3, #9
 80079f8:	d94d      	bls.n	8007a96 <_vfiprintf_r+0x1a6>
 80079fa:	b1b0      	cbz	r0, 8007a2a <_vfiprintf_r+0x13a>
 80079fc:	9207      	str	r2, [sp, #28]
 80079fe:	e014      	b.n	8007a2a <_vfiprintf_r+0x13a>
 8007a00:	eba0 0308 	sub.w	r3, r0, r8
 8007a04:	fa09 f303 	lsl.w	r3, r9, r3
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	46a2      	mov	sl, r4
 8007a0c:	9304      	str	r3, [sp, #16]
 8007a0e:	e7d2      	b.n	80079b6 <_vfiprintf_r+0xc6>
 8007a10:	9b03      	ldr	r3, [sp, #12]
 8007a12:	1d19      	adds	r1, r3, #4
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	9103      	str	r1, [sp, #12]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	bfbb      	ittet	lt
 8007a1c:	425b      	neglt	r3, r3
 8007a1e:	f042 0202 	orrlt.w	r2, r2, #2
 8007a22:	9307      	strge	r3, [sp, #28]
 8007a24:	9307      	strlt	r3, [sp, #28]
 8007a26:	bfb8      	it	lt
 8007a28:	9204      	strlt	r2, [sp, #16]
 8007a2a:	7823      	ldrb	r3, [r4, #0]
 8007a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2e:	d10c      	bne.n	8007a4a <_vfiprintf_r+0x15a>
 8007a30:	7863      	ldrb	r3, [r4, #1]
 8007a32:	2b2a      	cmp	r3, #42	; 0x2a
 8007a34:	d134      	bne.n	8007aa0 <_vfiprintf_r+0x1b0>
 8007a36:	9b03      	ldr	r3, [sp, #12]
 8007a38:	3402      	adds	r4, #2
 8007a3a:	1d1a      	adds	r2, r3, #4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	9203      	str	r2, [sp, #12]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	bfb8      	it	lt
 8007a44:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a48:	9305      	str	r3, [sp, #20]
 8007a4a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b14 <_vfiprintf_r+0x224>
 8007a4e:	2203      	movs	r2, #3
 8007a50:	4650      	mov	r0, sl
 8007a52:	7821      	ldrb	r1, [r4, #0]
 8007a54:	f000 fb38 	bl	80080c8 <memchr>
 8007a58:	b138      	cbz	r0, 8007a6a <_vfiprintf_r+0x17a>
 8007a5a:	2240      	movs	r2, #64	; 0x40
 8007a5c:	9b04      	ldr	r3, [sp, #16]
 8007a5e:	eba0 000a 	sub.w	r0, r0, sl
 8007a62:	4082      	lsls	r2, r0
 8007a64:	4313      	orrs	r3, r2
 8007a66:	3401      	adds	r4, #1
 8007a68:	9304      	str	r3, [sp, #16]
 8007a6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a6e:	2206      	movs	r2, #6
 8007a70:	4829      	ldr	r0, [pc, #164]	; (8007b18 <_vfiprintf_r+0x228>)
 8007a72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a76:	f000 fb27 	bl	80080c8 <memchr>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	d03f      	beq.n	8007afe <_vfiprintf_r+0x20e>
 8007a7e:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <_vfiprintf_r+0x22c>)
 8007a80:	bb1b      	cbnz	r3, 8007aca <_vfiprintf_r+0x1da>
 8007a82:	9b03      	ldr	r3, [sp, #12]
 8007a84:	3307      	adds	r3, #7
 8007a86:	f023 0307 	bic.w	r3, r3, #7
 8007a8a:	3308      	adds	r3, #8
 8007a8c:	9303      	str	r3, [sp, #12]
 8007a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a90:	443b      	add	r3, r7
 8007a92:	9309      	str	r3, [sp, #36]	; 0x24
 8007a94:	e768      	b.n	8007968 <_vfiprintf_r+0x78>
 8007a96:	460c      	mov	r4, r1
 8007a98:	2001      	movs	r0, #1
 8007a9a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a9e:	e7a6      	b.n	80079ee <_vfiprintf_r+0xfe>
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	f04f 0c0a 	mov.w	ip, #10
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	3401      	adds	r4, #1
 8007aaa:	9305      	str	r3, [sp, #20]
 8007aac:	4620      	mov	r0, r4
 8007aae:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007ab2:	3a30      	subs	r2, #48	; 0x30
 8007ab4:	2a09      	cmp	r2, #9
 8007ab6:	d903      	bls.n	8007ac0 <_vfiprintf_r+0x1d0>
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0c6      	beq.n	8007a4a <_vfiprintf_r+0x15a>
 8007abc:	9105      	str	r1, [sp, #20]
 8007abe:	e7c4      	b.n	8007a4a <_vfiprintf_r+0x15a>
 8007ac0:	4604      	mov	r4, r0
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ac8:	e7f0      	b.n	8007aac <_vfiprintf_r+0x1bc>
 8007aca:	ab03      	add	r3, sp, #12
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	462a      	mov	r2, r5
 8007ad0:	4630      	mov	r0, r6
 8007ad2:	4b13      	ldr	r3, [pc, #76]	; (8007b20 <_vfiprintf_r+0x230>)
 8007ad4:	a904      	add	r1, sp, #16
 8007ad6:	f3af 8000 	nop.w
 8007ada:	4607      	mov	r7, r0
 8007adc:	1c78      	adds	r0, r7, #1
 8007ade:	d1d6      	bne.n	8007a8e <_vfiprintf_r+0x19e>
 8007ae0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ae2:	07d9      	lsls	r1, r3, #31
 8007ae4:	d405      	bmi.n	8007af2 <_vfiprintf_r+0x202>
 8007ae6:	89ab      	ldrh	r3, [r5, #12]
 8007ae8:	059a      	lsls	r2, r3, #22
 8007aea:	d402      	bmi.n	8007af2 <_vfiprintf_r+0x202>
 8007aec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aee:	f7ff fde2 	bl	80076b6 <__retarget_lock_release_recursive>
 8007af2:	89ab      	ldrh	r3, [r5, #12]
 8007af4:	065b      	lsls	r3, r3, #25
 8007af6:	f53f af1d 	bmi.w	8007934 <_vfiprintf_r+0x44>
 8007afa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007afc:	e71c      	b.n	8007938 <_vfiprintf_r+0x48>
 8007afe:	ab03      	add	r3, sp, #12
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	462a      	mov	r2, r5
 8007b04:	4630      	mov	r0, r6
 8007b06:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <_vfiprintf_r+0x230>)
 8007b08:	a904      	add	r1, sp, #16
 8007b0a:	f000 f87d 	bl	8007c08 <_printf_i>
 8007b0e:	e7e4      	b.n	8007ada <_vfiprintf_r+0x1ea>
 8007b10:	08008826 	.word	0x08008826
 8007b14:	0800882c 	.word	0x0800882c
 8007b18:	08008830 	.word	0x08008830
 8007b1c:	00000000 	.word	0x00000000
 8007b20:	080078cb 	.word	0x080078cb

08007b24 <_printf_common>:
 8007b24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b28:	4616      	mov	r6, r2
 8007b2a:	4699      	mov	r9, r3
 8007b2c:	688a      	ldr	r2, [r1, #8]
 8007b2e:	690b      	ldr	r3, [r1, #16]
 8007b30:	4607      	mov	r7, r0
 8007b32:	4293      	cmp	r3, r2
 8007b34:	bfb8      	it	lt
 8007b36:	4613      	movlt	r3, r2
 8007b38:	6033      	str	r3, [r6, #0]
 8007b3a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b3e:	460c      	mov	r4, r1
 8007b40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b44:	b10a      	cbz	r2, 8007b4a <_printf_common+0x26>
 8007b46:	3301      	adds	r3, #1
 8007b48:	6033      	str	r3, [r6, #0]
 8007b4a:	6823      	ldr	r3, [r4, #0]
 8007b4c:	0699      	lsls	r1, r3, #26
 8007b4e:	bf42      	ittt	mi
 8007b50:	6833      	ldrmi	r3, [r6, #0]
 8007b52:	3302      	addmi	r3, #2
 8007b54:	6033      	strmi	r3, [r6, #0]
 8007b56:	6825      	ldr	r5, [r4, #0]
 8007b58:	f015 0506 	ands.w	r5, r5, #6
 8007b5c:	d106      	bne.n	8007b6c <_printf_common+0x48>
 8007b5e:	f104 0a19 	add.w	sl, r4, #25
 8007b62:	68e3      	ldr	r3, [r4, #12]
 8007b64:	6832      	ldr	r2, [r6, #0]
 8007b66:	1a9b      	subs	r3, r3, r2
 8007b68:	42ab      	cmp	r3, r5
 8007b6a:	dc2b      	bgt.n	8007bc4 <_printf_common+0xa0>
 8007b6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b70:	1e13      	subs	r3, r2, #0
 8007b72:	6822      	ldr	r2, [r4, #0]
 8007b74:	bf18      	it	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	0692      	lsls	r2, r2, #26
 8007b7a:	d430      	bmi.n	8007bde <_printf_common+0xba>
 8007b7c:	4649      	mov	r1, r9
 8007b7e:	4638      	mov	r0, r7
 8007b80:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b84:	47c0      	blx	r8
 8007b86:	3001      	adds	r0, #1
 8007b88:	d023      	beq.n	8007bd2 <_printf_common+0xae>
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	6922      	ldr	r2, [r4, #16]
 8007b8e:	f003 0306 	and.w	r3, r3, #6
 8007b92:	2b04      	cmp	r3, #4
 8007b94:	bf14      	ite	ne
 8007b96:	2500      	movne	r5, #0
 8007b98:	6833      	ldreq	r3, [r6, #0]
 8007b9a:	f04f 0600 	mov.w	r6, #0
 8007b9e:	bf08      	it	eq
 8007ba0:	68e5      	ldreq	r5, [r4, #12]
 8007ba2:	f104 041a 	add.w	r4, r4, #26
 8007ba6:	bf08      	it	eq
 8007ba8:	1aed      	subeq	r5, r5, r3
 8007baa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007bae:	bf08      	it	eq
 8007bb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	bfc4      	itt	gt
 8007bb8:	1a9b      	subgt	r3, r3, r2
 8007bba:	18ed      	addgt	r5, r5, r3
 8007bbc:	42b5      	cmp	r5, r6
 8007bbe:	d11a      	bne.n	8007bf6 <_printf_common+0xd2>
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e008      	b.n	8007bd6 <_printf_common+0xb2>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	4652      	mov	r2, sl
 8007bc8:	4649      	mov	r1, r9
 8007bca:	4638      	mov	r0, r7
 8007bcc:	47c0      	blx	r8
 8007bce:	3001      	adds	r0, #1
 8007bd0:	d103      	bne.n	8007bda <_printf_common+0xb6>
 8007bd2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bda:	3501      	adds	r5, #1
 8007bdc:	e7c1      	b.n	8007b62 <_printf_common+0x3e>
 8007bde:	2030      	movs	r0, #48	; 0x30
 8007be0:	18e1      	adds	r1, r4, r3
 8007be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bec:	4422      	add	r2, r4
 8007bee:	3302      	adds	r3, #2
 8007bf0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bf4:	e7c2      	b.n	8007b7c <_printf_common+0x58>
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	4622      	mov	r2, r4
 8007bfa:	4649      	mov	r1, r9
 8007bfc:	4638      	mov	r0, r7
 8007bfe:	47c0      	blx	r8
 8007c00:	3001      	adds	r0, #1
 8007c02:	d0e6      	beq.n	8007bd2 <_printf_common+0xae>
 8007c04:	3601      	adds	r6, #1
 8007c06:	e7d9      	b.n	8007bbc <_printf_common+0x98>

08007c08 <_printf_i>:
 8007c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c0c:	7e0f      	ldrb	r7, [r1, #24]
 8007c0e:	4691      	mov	r9, r2
 8007c10:	2f78      	cmp	r7, #120	; 0x78
 8007c12:	4680      	mov	r8, r0
 8007c14:	460c      	mov	r4, r1
 8007c16:	469a      	mov	sl, r3
 8007c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007c1e:	d807      	bhi.n	8007c30 <_printf_i+0x28>
 8007c20:	2f62      	cmp	r7, #98	; 0x62
 8007c22:	d80a      	bhi.n	8007c3a <_printf_i+0x32>
 8007c24:	2f00      	cmp	r7, #0
 8007c26:	f000 80d5 	beq.w	8007dd4 <_printf_i+0x1cc>
 8007c2a:	2f58      	cmp	r7, #88	; 0x58
 8007c2c:	f000 80c1 	beq.w	8007db2 <_printf_i+0x1aa>
 8007c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c38:	e03a      	b.n	8007cb0 <_printf_i+0xa8>
 8007c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c3e:	2b15      	cmp	r3, #21
 8007c40:	d8f6      	bhi.n	8007c30 <_printf_i+0x28>
 8007c42:	a101      	add	r1, pc, #4	; (adr r1, 8007c48 <_printf_i+0x40>)
 8007c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007c48:	08007ca1 	.word	0x08007ca1
 8007c4c:	08007cb5 	.word	0x08007cb5
 8007c50:	08007c31 	.word	0x08007c31
 8007c54:	08007c31 	.word	0x08007c31
 8007c58:	08007c31 	.word	0x08007c31
 8007c5c:	08007c31 	.word	0x08007c31
 8007c60:	08007cb5 	.word	0x08007cb5
 8007c64:	08007c31 	.word	0x08007c31
 8007c68:	08007c31 	.word	0x08007c31
 8007c6c:	08007c31 	.word	0x08007c31
 8007c70:	08007c31 	.word	0x08007c31
 8007c74:	08007dbb 	.word	0x08007dbb
 8007c78:	08007ce1 	.word	0x08007ce1
 8007c7c:	08007d75 	.word	0x08007d75
 8007c80:	08007c31 	.word	0x08007c31
 8007c84:	08007c31 	.word	0x08007c31
 8007c88:	08007ddd 	.word	0x08007ddd
 8007c8c:	08007c31 	.word	0x08007c31
 8007c90:	08007ce1 	.word	0x08007ce1
 8007c94:	08007c31 	.word	0x08007c31
 8007c98:	08007c31 	.word	0x08007c31
 8007c9c:	08007d7d 	.word	0x08007d7d
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	1d1a      	adds	r2, r3, #4
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	602a      	str	r2, [r5, #0]
 8007ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	e0a0      	b.n	8007df6 <_printf_i+0x1ee>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	682b      	ldr	r3, [r5, #0]
 8007cb8:	0607      	lsls	r7, r0, #24
 8007cba:	f103 0104 	add.w	r1, r3, #4
 8007cbe:	6029      	str	r1, [r5, #0]
 8007cc0:	d501      	bpl.n	8007cc6 <_printf_i+0xbe>
 8007cc2:	681e      	ldr	r6, [r3, #0]
 8007cc4:	e003      	b.n	8007cce <_printf_i+0xc6>
 8007cc6:	0646      	lsls	r6, r0, #25
 8007cc8:	d5fb      	bpl.n	8007cc2 <_printf_i+0xba>
 8007cca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	da03      	bge.n	8007cda <_printf_i+0xd2>
 8007cd2:	232d      	movs	r3, #45	; 0x2d
 8007cd4:	4276      	negs	r6, r6
 8007cd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007cda:	230a      	movs	r3, #10
 8007cdc:	4859      	ldr	r0, [pc, #356]	; (8007e44 <_printf_i+0x23c>)
 8007cde:	e012      	b.n	8007d06 <_printf_i+0xfe>
 8007ce0:	682b      	ldr	r3, [r5, #0]
 8007ce2:	6820      	ldr	r0, [r4, #0]
 8007ce4:	1d19      	adds	r1, r3, #4
 8007ce6:	6029      	str	r1, [r5, #0]
 8007ce8:	0605      	lsls	r5, r0, #24
 8007cea:	d501      	bpl.n	8007cf0 <_printf_i+0xe8>
 8007cec:	681e      	ldr	r6, [r3, #0]
 8007cee:	e002      	b.n	8007cf6 <_printf_i+0xee>
 8007cf0:	0641      	lsls	r1, r0, #25
 8007cf2:	d5fb      	bpl.n	8007cec <_printf_i+0xe4>
 8007cf4:	881e      	ldrh	r6, [r3, #0]
 8007cf6:	2f6f      	cmp	r7, #111	; 0x6f
 8007cf8:	bf0c      	ite	eq
 8007cfa:	2308      	moveq	r3, #8
 8007cfc:	230a      	movne	r3, #10
 8007cfe:	4851      	ldr	r0, [pc, #324]	; (8007e44 <_printf_i+0x23c>)
 8007d00:	2100      	movs	r1, #0
 8007d02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007d06:	6865      	ldr	r5, [r4, #4]
 8007d08:	2d00      	cmp	r5, #0
 8007d0a:	bfa8      	it	ge
 8007d0c:	6821      	ldrge	r1, [r4, #0]
 8007d0e:	60a5      	str	r5, [r4, #8]
 8007d10:	bfa4      	itt	ge
 8007d12:	f021 0104 	bicge.w	r1, r1, #4
 8007d16:	6021      	strge	r1, [r4, #0]
 8007d18:	b90e      	cbnz	r6, 8007d1e <_printf_i+0x116>
 8007d1a:	2d00      	cmp	r5, #0
 8007d1c:	d04b      	beq.n	8007db6 <_printf_i+0x1ae>
 8007d1e:	4615      	mov	r5, r2
 8007d20:	fbb6 f1f3 	udiv	r1, r6, r3
 8007d24:	fb03 6711 	mls	r7, r3, r1, r6
 8007d28:	5dc7      	ldrb	r7, [r0, r7]
 8007d2a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007d2e:	4637      	mov	r7, r6
 8007d30:	42bb      	cmp	r3, r7
 8007d32:	460e      	mov	r6, r1
 8007d34:	d9f4      	bls.n	8007d20 <_printf_i+0x118>
 8007d36:	2b08      	cmp	r3, #8
 8007d38:	d10b      	bne.n	8007d52 <_printf_i+0x14a>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	07de      	lsls	r6, r3, #31
 8007d3e:	d508      	bpl.n	8007d52 <_printf_i+0x14a>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	6861      	ldr	r1, [r4, #4]
 8007d44:	4299      	cmp	r1, r3
 8007d46:	bfde      	ittt	le
 8007d48:	2330      	movle	r3, #48	; 0x30
 8007d4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007d4e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007d52:	1b52      	subs	r2, r2, r5
 8007d54:	6122      	str	r2, [r4, #16]
 8007d56:	464b      	mov	r3, r9
 8007d58:	4621      	mov	r1, r4
 8007d5a:	4640      	mov	r0, r8
 8007d5c:	f8cd a000 	str.w	sl, [sp]
 8007d60:	aa03      	add	r2, sp, #12
 8007d62:	f7ff fedf 	bl	8007b24 <_printf_common>
 8007d66:	3001      	adds	r0, #1
 8007d68:	d14a      	bne.n	8007e00 <_printf_i+0x1f8>
 8007d6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d6e:	b004      	add	sp, #16
 8007d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d74:	6823      	ldr	r3, [r4, #0]
 8007d76:	f043 0320 	orr.w	r3, r3, #32
 8007d7a:	6023      	str	r3, [r4, #0]
 8007d7c:	2778      	movs	r7, #120	; 0x78
 8007d7e:	4832      	ldr	r0, [pc, #200]	; (8007e48 <_printf_i+0x240>)
 8007d80:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	6829      	ldr	r1, [r5, #0]
 8007d88:	061f      	lsls	r7, r3, #24
 8007d8a:	f851 6b04 	ldr.w	r6, [r1], #4
 8007d8e:	d402      	bmi.n	8007d96 <_printf_i+0x18e>
 8007d90:	065f      	lsls	r7, r3, #25
 8007d92:	bf48      	it	mi
 8007d94:	b2b6      	uxthmi	r6, r6
 8007d96:	07df      	lsls	r7, r3, #31
 8007d98:	bf48      	it	mi
 8007d9a:	f043 0320 	orrmi.w	r3, r3, #32
 8007d9e:	6029      	str	r1, [r5, #0]
 8007da0:	bf48      	it	mi
 8007da2:	6023      	strmi	r3, [r4, #0]
 8007da4:	b91e      	cbnz	r6, 8007dae <_printf_i+0x1a6>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	f023 0320 	bic.w	r3, r3, #32
 8007dac:	6023      	str	r3, [r4, #0]
 8007dae:	2310      	movs	r3, #16
 8007db0:	e7a6      	b.n	8007d00 <_printf_i+0xf8>
 8007db2:	4824      	ldr	r0, [pc, #144]	; (8007e44 <_printf_i+0x23c>)
 8007db4:	e7e4      	b.n	8007d80 <_printf_i+0x178>
 8007db6:	4615      	mov	r5, r2
 8007db8:	e7bd      	b.n	8007d36 <_printf_i+0x12e>
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	6826      	ldr	r6, [r4, #0]
 8007dbe:	1d18      	adds	r0, r3, #4
 8007dc0:	6961      	ldr	r1, [r4, #20]
 8007dc2:	6028      	str	r0, [r5, #0]
 8007dc4:	0635      	lsls	r5, r6, #24
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	d501      	bpl.n	8007dce <_printf_i+0x1c6>
 8007dca:	6019      	str	r1, [r3, #0]
 8007dcc:	e002      	b.n	8007dd4 <_printf_i+0x1cc>
 8007dce:	0670      	lsls	r0, r6, #25
 8007dd0:	d5fb      	bpl.n	8007dca <_printf_i+0x1c2>
 8007dd2:	8019      	strh	r1, [r3, #0]
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	4615      	mov	r5, r2
 8007dd8:	6123      	str	r3, [r4, #16]
 8007dda:	e7bc      	b.n	8007d56 <_printf_i+0x14e>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	2100      	movs	r1, #0
 8007de0:	1d1a      	adds	r2, r3, #4
 8007de2:	602a      	str	r2, [r5, #0]
 8007de4:	681d      	ldr	r5, [r3, #0]
 8007de6:	6862      	ldr	r2, [r4, #4]
 8007de8:	4628      	mov	r0, r5
 8007dea:	f000 f96d 	bl	80080c8 <memchr>
 8007dee:	b108      	cbz	r0, 8007df4 <_printf_i+0x1ec>
 8007df0:	1b40      	subs	r0, r0, r5
 8007df2:	6060      	str	r0, [r4, #4]
 8007df4:	6863      	ldr	r3, [r4, #4]
 8007df6:	6123      	str	r3, [r4, #16]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dfe:	e7aa      	b.n	8007d56 <_printf_i+0x14e>
 8007e00:	462a      	mov	r2, r5
 8007e02:	4649      	mov	r1, r9
 8007e04:	4640      	mov	r0, r8
 8007e06:	6923      	ldr	r3, [r4, #16]
 8007e08:	47d0      	blx	sl
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	d0ad      	beq.n	8007d6a <_printf_i+0x162>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	079b      	lsls	r3, r3, #30
 8007e12:	d413      	bmi.n	8007e3c <_printf_i+0x234>
 8007e14:	68e0      	ldr	r0, [r4, #12]
 8007e16:	9b03      	ldr	r3, [sp, #12]
 8007e18:	4298      	cmp	r0, r3
 8007e1a:	bfb8      	it	lt
 8007e1c:	4618      	movlt	r0, r3
 8007e1e:	e7a6      	b.n	8007d6e <_printf_i+0x166>
 8007e20:	2301      	movs	r3, #1
 8007e22:	4632      	mov	r2, r6
 8007e24:	4649      	mov	r1, r9
 8007e26:	4640      	mov	r0, r8
 8007e28:	47d0      	blx	sl
 8007e2a:	3001      	adds	r0, #1
 8007e2c:	d09d      	beq.n	8007d6a <_printf_i+0x162>
 8007e2e:	3501      	adds	r5, #1
 8007e30:	68e3      	ldr	r3, [r4, #12]
 8007e32:	9903      	ldr	r1, [sp, #12]
 8007e34:	1a5b      	subs	r3, r3, r1
 8007e36:	42ab      	cmp	r3, r5
 8007e38:	dcf2      	bgt.n	8007e20 <_printf_i+0x218>
 8007e3a:	e7eb      	b.n	8007e14 <_printf_i+0x20c>
 8007e3c:	2500      	movs	r5, #0
 8007e3e:	f104 0619 	add.w	r6, r4, #25
 8007e42:	e7f5      	b.n	8007e30 <_printf_i+0x228>
 8007e44:	08008837 	.word	0x08008837
 8007e48:	08008848 	.word	0x08008848

08007e4c <__sflush_r>:
 8007e4c:	898a      	ldrh	r2, [r1, #12]
 8007e4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e50:	4605      	mov	r5, r0
 8007e52:	0710      	lsls	r0, r2, #28
 8007e54:	460c      	mov	r4, r1
 8007e56:	d457      	bmi.n	8007f08 <__sflush_r+0xbc>
 8007e58:	684b      	ldr	r3, [r1, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	dc04      	bgt.n	8007e68 <__sflush_r+0x1c>
 8007e5e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	dc01      	bgt.n	8007e68 <__sflush_r+0x1c>
 8007e64:	2000      	movs	r0, #0
 8007e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e6a:	2e00      	cmp	r6, #0
 8007e6c:	d0fa      	beq.n	8007e64 <__sflush_r+0x18>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e74:	682f      	ldr	r7, [r5, #0]
 8007e76:	6a21      	ldr	r1, [r4, #32]
 8007e78:	602b      	str	r3, [r5, #0]
 8007e7a:	d032      	beq.n	8007ee2 <__sflush_r+0x96>
 8007e7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e7e:	89a3      	ldrh	r3, [r4, #12]
 8007e80:	075a      	lsls	r2, r3, #29
 8007e82:	d505      	bpl.n	8007e90 <__sflush_r+0x44>
 8007e84:	6863      	ldr	r3, [r4, #4]
 8007e86:	1ac0      	subs	r0, r0, r3
 8007e88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e8a:	b10b      	cbz	r3, 8007e90 <__sflush_r+0x44>
 8007e8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e8e:	1ac0      	subs	r0, r0, r3
 8007e90:	2300      	movs	r3, #0
 8007e92:	4602      	mov	r2, r0
 8007e94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e96:	4628      	mov	r0, r5
 8007e98:	6a21      	ldr	r1, [r4, #32]
 8007e9a:	47b0      	blx	r6
 8007e9c:	1c43      	adds	r3, r0, #1
 8007e9e:	89a3      	ldrh	r3, [r4, #12]
 8007ea0:	d106      	bne.n	8007eb0 <__sflush_r+0x64>
 8007ea2:	6829      	ldr	r1, [r5, #0]
 8007ea4:	291d      	cmp	r1, #29
 8007ea6:	d82b      	bhi.n	8007f00 <__sflush_r+0xb4>
 8007ea8:	4a28      	ldr	r2, [pc, #160]	; (8007f4c <__sflush_r+0x100>)
 8007eaa:	410a      	asrs	r2, r1
 8007eac:	07d6      	lsls	r6, r2, #31
 8007eae:	d427      	bmi.n	8007f00 <__sflush_r+0xb4>
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	6062      	str	r2, [r4, #4]
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	04d9      	lsls	r1, r3, #19
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	d504      	bpl.n	8007ec6 <__sflush_r+0x7a>
 8007ebc:	1c42      	adds	r2, r0, #1
 8007ebe:	d101      	bne.n	8007ec4 <__sflush_r+0x78>
 8007ec0:	682b      	ldr	r3, [r5, #0]
 8007ec2:	b903      	cbnz	r3, 8007ec6 <__sflush_r+0x7a>
 8007ec4:	6560      	str	r0, [r4, #84]	; 0x54
 8007ec6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ec8:	602f      	str	r7, [r5, #0]
 8007eca:	2900      	cmp	r1, #0
 8007ecc:	d0ca      	beq.n	8007e64 <__sflush_r+0x18>
 8007ece:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ed2:	4299      	cmp	r1, r3
 8007ed4:	d002      	beq.n	8007edc <__sflush_r+0x90>
 8007ed6:	4628      	mov	r0, r5
 8007ed8:	f7ff fbee 	bl	80076b8 <_free_r>
 8007edc:	2000      	movs	r0, #0
 8007ede:	6360      	str	r0, [r4, #52]	; 0x34
 8007ee0:	e7c1      	b.n	8007e66 <__sflush_r+0x1a>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	47b0      	blx	r6
 8007ee8:	1c41      	adds	r1, r0, #1
 8007eea:	d1c8      	bne.n	8007e7e <__sflush_r+0x32>
 8007eec:	682b      	ldr	r3, [r5, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d0c5      	beq.n	8007e7e <__sflush_r+0x32>
 8007ef2:	2b1d      	cmp	r3, #29
 8007ef4:	d001      	beq.n	8007efa <__sflush_r+0xae>
 8007ef6:	2b16      	cmp	r3, #22
 8007ef8:	d101      	bne.n	8007efe <__sflush_r+0xb2>
 8007efa:	602f      	str	r7, [r5, #0]
 8007efc:	e7b2      	b.n	8007e64 <__sflush_r+0x18>
 8007efe:	89a3      	ldrh	r3, [r4, #12]
 8007f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f04:	81a3      	strh	r3, [r4, #12]
 8007f06:	e7ae      	b.n	8007e66 <__sflush_r+0x1a>
 8007f08:	690f      	ldr	r7, [r1, #16]
 8007f0a:	2f00      	cmp	r7, #0
 8007f0c:	d0aa      	beq.n	8007e64 <__sflush_r+0x18>
 8007f0e:	0793      	lsls	r3, r2, #30
 8007f10:	bf18      	it	ne
 8007f12:	2300      	movne	r3, #0
 8007f14:	680e      	ldr	r6, [r1, #0]
 8007f16:	bf08      	it	eq
 8007f18:	694b      	ldreq	r3, [r1, #20]
 8007f1a:	1bf6      	subs	r6, r6, r7
 8007f1c:	600f      	str	r7, [r1, #0]
 8007f1e:	608b      	str	r3, [r1, #8]
 8007f20:	2e00      	cmp	r6, #0
 8007f22:	dd9f      	ble.n	8007e64 <__sflush_r+0x18>
 8007f24:	4633      	mov	r3, r6
 8007f26:	463a      	mov	r2, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	6a21      	ldr	r1, [r4, #32]
 8007f2c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007f30:	47e0      	blx	ip
 8007f32:	2800      	cmp	r0, #0
 8007f34:	dc06      	bgt.n	8007f44 <__sflush_r+0xf8>
 8007f36:	89a3      	ldrh	r3, [r4, #12]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	e790      	b.n	8007e66 <__sflush_r+0x1a>
 8007f44:	4407      	add	r7, r0
 8007f46:	1a36      	subs	r6, r6, r0
 8007f48:	e7ea      	b.n	8007f20 <__sflush_r+0xd4>
 8007f4a:	bf00      	nop
 8007f4c:	dfbffffe 	.word	0xdfbffffe

08007f50 <_fflush_r>:
 8007f50:	b538      	push	{r3, r4, r5, lr}
 8007f52:	690b      	ldr	r3, [r1, #16]
 8007f54:	4605      	mov	r5, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	b913      	cbnz	r3, 8007f60 <_fflush_r+0x10>
 8007f5a:	2500      	movs	r5, #0
 8007f5c:	4628      	mov	r0, r5
 8007f5e:	bd38      	pop	{r3, r4, r5, pc}
 8007f60:	b118      	cbz	r0, 8007f6a <_fflush_r+0x1a>
 8007f62:	6a03      	ldr	r3, [r0, #32]
 8007f64:	b90b      	cbnz	r3, 8007f6a <_fflush_r+0x1a>
 8007f66:	f7ff f95b 	bl	8007220 <__sinit>
 8007f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d0f3      	beq.n	8007f5a <_fflush_r+0xa>
 8007f72:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f74:	07d0      	lsls	r0, r2, #31
 8007f76:	d404      	bmi.n	8007f82 <_fflush_r+0x32>
 8007f78:	0599      	lsls	r1, r3, #22
 8007f7a:	d402      	bmi.n	8007f82 <_fflush_r+0x32>
 8007f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f7e:	f7ff fb99 	bl	80076b4 <__retarget_lock_acquire_recursive>
 8007f82:	4628      	mov	r0, r5
 8007f84:	4621      	mov	r1, r4
 8007f86:	f7ff ff61 	bl	8007e4c <__sflush_r>
 8007f8a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f8c:	4605      	mov	r5, r0
 8007f8e:	07da      	lsls	r2, r3, #31
 8007f90:	d4e4      	bmi.n	8007f5c <_fflush_r+0xc>
 8007f92:	89a3      	ldrh	r3, [r4, #12]
 8007f94:	059b      	lsls	r3, r3, #22
 8007f96:	d4e1      	bmi.n	8007f5c <_fflush_r+0xc>
 8007f98:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f9a:	f7ff fb8c 	bl	80076b6 <__retarget_lock_release_recursive>
 8007f9e:	e7dd      	b.n	8007f5c <_fflush_r+0xc>

08007fa0 <__swhatbuf_r>:
 8007fa0:	b570      	push	{r4, r5, r6, lr}
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa8:	4615      	mov	r5, r2
 8007faa:	2900      	cmp	r1, #0
 8007fac:	461e      	mov	r6, r3
 8007fae:	b096      	sub	sp, #88	; 0x58
 8007fb0:	da0c      	bge.n	8007fcc <__swhatbuf_r+0x2c>
 8007fb2:	89a3      	ldrh	r3, [r4, #12]
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007fba:	bf0c      	ite	eq
 8007fbc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007fc0:	2340      	movne	r3, #64	; 0x40
 8007fc2:	2000      	movs	r0, #0
 8007fc4:	6031      	str	r1, [r6, #0]
 8007fc6:	602b      	str	r3, [r5, #0]
 8007fc8:	b016      	add	sp, #88	; 0x58
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	466a      	mov	r2, sp
 8007fce:	f000 f849 	bl	8008064 <_fstat_r>
 8007fd2:	2800      	cmp	r0, #0
 8007fd4:	dbed      	blt.n	8007fb2 <__swhatbuf_r+0x12>
 8007fd6:	9901      	ldr	r1, [sp, #4]
 8007fd8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007fdc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007fe0:	4259      	negs	r1, r3
 8007fe2:	4159      	adcs	r1, r3
 8007fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fe8:	e7eb      	b.n	8007fc2 <__swhatbuf_r+0x22>

08007fea <__smakebuf_r>:
 8007fea:	898b      	ldrh	r3, [r1, #12]
 8007fec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007fee:	079d      	lsls	r5, r3, #30
 8007ff0:	4606      	mov	r6, r0
 8007ff2:	460c      	mov	r4, r1
 8007ff4:	d507      	bpl.n	8008006 <__smakebuf_r+0x1c>
 8007ff6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ffa:	6023      	str	r3, [r4, #0]
 8007ffc:	6123      	str	r3, [r4, #16]
 8007ffe:	2301      	movs	r3, #1
 8008000:	6163      	str	r3, [r4, #20]
 8008002:	b002      	add	sp, #8
 8008004:	bd70      	pop	{r4, r5, r6, pc}
 8008006:	466a      	mov	r2, sp
 8008008:	ab01      	add	r3, sp, #4
 800800a:	f7ff ffc9 	bl	8007fa0 <__swhatbuf_r>
 800800e:	9900      	ldr	r1, [sp, #0]
 8008010:	4605      	mov	r5, r0
 8008012:	4630      	mov	r0, r6
 8008014:	f7ff fbb8 	bl	8007788 <_malloc_r>
 8008018:	b948      	cbnz	r0, 800802e <__smakebuf_r+0x44>
 800801a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801e:	059a      	lsls	r2, r3, #22
 8008020:	d4ef      	bmi.n	8008002 <__smakebuf_r+0x18>
 8008022:	f023 0303 	bic.w	r3, r3, #3
 8008026:	f043 0302 	orr.w	r3, r3, #2
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	e7e3      	b.n	8007ff6 <__smakebuf_r+0xc>
 800802e:	89a3      	ldrh	r3, [r4, #12]
 8008030:	6020      	str	r0, [r4, #0]
 8008032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008036:	81a3      	strh	r3, [r4, #12]
 8008038:	9b00      	ldr	r3, [sp, #0]
 800803a:	6120      	str	r0, [r4, #16]
 800803c:	6163      	str	r3, [r4, #20]
 800803e:	9b01      	ldr	r3, [sp, #4]
 8008040:	b15b      	cbz	r3, 800805a <__smakebuf_r+0x70>
 8008042:	4630      	mov	r0, r6
 8008044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008048:	f000 f81e 	bl	8008088 <_isatty_r>
 800804c:	b128      	cbz	r0, 800805a <__smakebuf_r+0x70>
 800804e:	89a3      	ldrh	r3, [r4, #12]
 8008050:	f023 0303 	bic.w	r3, r3, #3
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	81a3      	strh	r3, [r4, #12]
 800805a:	89a3      	ldrh	r3, [r4, #12]
 800805c:	431d      	orrs	r5, r3
 800805e:	81a5      	strh	r5, [r4, #12]
 8008060:	e7cf      	b.n	8008002 <__smakebuf_r+0x18>
	...

08008064 <_fstat_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	2300      	movs	r3, #0
 8008068:	4d06      	ldr	r5, [pc, #24]	; (8008084 <_fstat_r+0x20>)
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	4611      	mov	r1, r2
 8008070:	602b      	str	r3, [r5, #0]
 8008072:	f7fa fc19 	bl	80028a8 <_fstat>
 8008076:	1c43      	adds	r3, r0, #1
 8008078:	d102      	bne.n	8008080 <_fstat_r+0x1c>
 800807a:	682b      	ldr	r3, [r5, #0]
 800807c:	b103      	cbz	r3, 8008080 <_fstat_r+0x1c>
 800807e:	6023      	str	r3, [r4, #0]
 8008080:	bd38      	pop	{r3, r4, r5, pc}
 8008082:	bf00      	nop
 8008084:	200015b4 	.word	0x200015b4

08008088 <_isatty_r>:
 8008088:	b538      	push	{r3, r4, r5, lr}
 800808a:	2300      	movs	r3, #0
 800808c:	4d05      	ldr	r5, [pc, #20]	; (80080a4 <_isatty_r+0x1c>)
 800808e:	4604      	mov	r4, r0
 8008090:	4608      	mov	r0, r1
 8008092:	602b      	str	r3, [r5, #0]
 8008094:	f7fa fc17 	bl	80028c6 <_isatty>
 8008098:	1c43      	adds	r3, r0, #1
 800809a:	d102      	bne.n	80080a2 <_isatty_r+0x1a>
 800809c:	682b      	ldr	r3, [r5, #0]
 800809e:	b103      	cbz	r3, 80080a2 <_isatty_r+0x1a>
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	bd38      	pop	{r3, r4, r5, pc}
 80080a4:	200015b4 	.word	0x200015b4

080080a8 <_sbrk_r>:
 80080a8:	b538      	push	{r3, r4, r5, lr}
 80080aa:	2300      	movs	r3, #0
 80080ac:	4d05      	ldr	r5, [pc, #20]	; (80080c4 <_sbrk_r+0x1c>)
 80080ae:	4604      	mov	r4, r0
 80080b0:	4608      	mov	r0, r1
 80080b2:	602b      	str	r3, [r5, #0]
 80080b4:	f7fa fc1e 	bl	80028f4 <_sbrk>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_sbrk_r+0x1a>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_sbrk_r+0x1a>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	200015b4 	.word	0x200015b4

080080c8 <memchr>:
 80080c8:	4603      	mov	r3, r0
 80080ca:	b510      	push	{r4, lr}
 80080cc:	b2c9      	uxtb	r1, r1
 80080ce:	4402      	add	r2, r0
 80080d0:	4293      	cmp	r3, r2
 80080d2:	4618      	mov	r0, r3
 80080d4:	d101      	bne.n	80080da <memchr+0x12>
 80080d6:	2000      	movs	r0, #0
 80080d8:	e003      	b.n	80080e2 <memchr+0x1a>
 80080da:	7804      	ldrb	r4, [r0, #0]
 80080dc:	3301      	adds	r3, #1
 80080de:	428c      	cmp	r4, r1
 80080e0:	d1f6      	bne.n	80080d0 <memchr+0x8>
 80080e2:	bd10      	pop	{r4, pc}

080080e4 <_init>:
 80080e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e6:	bf00      	nop
 80080e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080ea:	bc08      	pop	{r3}
 80080ec:	469e      	mov	lr, r3
 80080ee:	4770      	bx	lr

080080f0 <_fini>:
 80080f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080f2:	bf00      	nop
 80080f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080f6:	bc08      	pop	{r3}
 80080f8:	469e      	mov	lr, r3
 80080fa:	4770      	bx	lr
