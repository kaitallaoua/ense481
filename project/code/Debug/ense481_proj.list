
ense481_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006758  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e3c  08006e3c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08006e3c  08006e3c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e3c  08006e3c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e3c  08006e3c  00016e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e40  08006e40  00016e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006e44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000068  08006eac  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08006eac  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013b73  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000298d  00000000  00000000  00033c47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001408  00000000  00000000  000365d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc8  00000000  00000000  000379e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a198  00000000  00000000  000389a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015ee1  00000000  00000000  00052b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097b5a  00000000  00000000  00068a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ee8  00000000  00000000  0010057c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00106464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006850 	.word	0x08006850

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006850 	.word	0x08006850

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	3a01      	subs	r2, #1
 80009fa:	bf28      	it	cs
 80009fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a00:	d2ed      	bcs.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <__io_putchar+0x20>)
 8000b6e:	f004 fcd7 	bl	8005520 <HAL_UART_Transmit>
  return ch;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000033c 	.word	0x2000033c

08000b80 <select_adc_channel>:
  * @brief Select ADC1 channel function
  * @param None
  * @retval None
  */
void select_adc_channel(int channel)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b086      	sub	sp, #24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000b88:	f107 030c 	add.w	r3, r7, #12
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
    //sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
    switch (channel)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b0f      	cmp	r3, #15
 8000b9c:	f200 812d 	bhi.w	8000dfa <select_adc_channel+0x27a>
 8000ba0:	a201      	add	r2, pc, #4	; (adr r2, 8000ba8 <select_adc_channel+0x28>)
 8000ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ba6:	bf00      	nop
 8000ba8:	08000be9 	.word	0x08000be9
 8000bac:	08000c0b 	.word	0x08000c0b
 8000bb0:	08000c2d 	.word	0x08000c2d
 8000bb4:	08000c4f 	.word	0x08000c4f
 8000bb8:	08000c71 	.word	0x08000c71
 8000bbc:	08000c93 	.word	0x08000c93
 8000bc0:	08000cb5 	.word	0x08000cb5
 8000bc4:	08000cd7 	.word	0x08000cd7
 8000bc8:	08000cf9 	.word	0x08000cf9
 8000bcc:	08000d1b 	.word	0x08000d1b
 8000bd0:	08000d3b 	.word	0x08000d3b
 8000bd4:	08000d5b 	.word	0x08000d5b
 8000bd8:	08000d7b 	.word	0x08000d7b
 8000bdc:	08000d9b 	.word	0x08000d9b
 8000be0:	08000dbb 	.word	0x08000dbb
 8000be4:	08000ddb 	.word	0x08000ddb
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	613b      	str	r3, [r7, #16]

              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4893      	ldr	r0, [pc, #588]	; (8000e44 <select_adc_channel+0x2c4>)
 8000bf8:	f002 f9b6 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	f000 80fd 	beq.w	8000dfe <select_adc_channel+0x27e>
              {
                Error_Handler();
 8000c04:	f001 f836 	bl	8001c74 <Error_Handler>
              }
              break;
 8000c08:	e0f9      	b.n	8000dfe <select_adc_channel+0x27e>

        case 1:
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
              sConfig.Channel = ADC_CHANNEL_1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c12:	f107 030c 	add.w	r3, r7, #12
 8000c16:	4619      	mov	r1, r3
 8000c18:	488a      	ldr	r0, [pc, #552]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c1a:	f002 f9a5 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	f000 80ee 	beq.w	8000e02 <select_adc_channel+0x282>
              {
                Error_Handler();
 8000c26:	f001 f825 	bl	8001c74 <Error_Handler>
              }
              break;
 8000c2a:	e0ea      	b.n	8000e02 <select_adc_channel+0x282>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 2:
              sConfig.Channel = ADC_CHANNEL_2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4882      	ldr	r0, [pc, #520]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c3c:	f002 f994 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f000 80df 	beq.w	8000e06 <select_adc_channel+0x286>
              {
                Error_Handler();
 8000c48:	f001 f814 	bl	8001c74 <Error_Handler>
              }
              break;
 8000c4c:	e0db      	b.n	8000e06 <select_adc_channel+0x286>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 3:
              sConfig.Channel = ADC_CHANNEL_3;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c52:	2301      	movs	r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4879      	ldr	r0, [pc, #484]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c5e:	f002 f983 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	f000 80d0 	beq.w	8000e0a <select_adc_channel+0x28a>
              {
                Error_Handler();
 8000c6a:	f001 f803 	bl	8001c74 <Error_Handler>
              }
              break;
 8000c6e:	e0cc      	b.n	8000e0a <select_adc_channel+0x28a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 4:
              sConfig.Channel = ADC_CHANNEL_4;
 8000c70:	2304      	movs	r3, #4
 8000c72:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4871      	ldr	r0, [pc, #452]	; (8000e44 <select_adc_channel+0x2c4>)
 8000c80:	f002 f972 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f000 80c1 	beq.w	8000e0e <select_adc_channel+0x28e>
              {
                Error_Handler();
 8000c8c:	f000 fff2 	bl	8001c74 <Error_Handler>
              }
              break;
 8000c90:	e0bd      	b.n	8000e0e <select_adc_channel+0x28e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 5:
              sConfig.Channel = ADC_CHANNEL_5;
 8000c92:	2305      	movs	r3, #5
 8000c94:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c96:	2301      	movs	r3, #1
 8000c98:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4868      	ldr	r0, [pc, #416]	; (8000e44 <select_adc_channel+0x2c4>)
 8000ca2:	f002 f961 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	f000 80b2 	beq.w	8000e12 <select_adc_channel+0x292>
              {
                Error_Handler();
 8000cae:	f000 ffe1 	bl	8001c74 <Error_Handler>
              }
              break;
 8000cb2:	e0ae      	b.n	8000e12 <select_adc_channel+0x292>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 6:
              sConfig.Channel = ADC_CHANNEL_6;
 8000cb4:	2306      	movs	r3, #6
 8000cb6:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4860      	ldr	r0, [pc, #384]	; (8000e44 <select_adc_channel+0x2c4>)
 8000cc4:	f002 f950 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 80a3 	beq.w	8000e16 <select_adc_channel+0x296>
              {
                Error_Handler();
 8000cd0:	f000 ffd0 	bl	8001c74 <Error_Handler>
              }
              break;
 8000cd4:	e09f      	b.n	8000e16 <select_adc_channel+0x296>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 7:
              sConfig.Channel = ADC_CHANNEL_7;
 8000cd6:	2307      	movs	r3, #7
 8000cd8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4857      	ldr	r0, [pc, #348]	; (8000e44 <select_adc_channel+0x2c4>)
 8000ce6:	f002 f93f 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 8094 	beq.w	8000e1a <select_adc_channel+0x29a>
              {
                Error_Handler();
 8000cf2:	f000 ffbf 	bl	8001c74 <Error_Handler>
              }
              break;
 8000cf6:	e090      	b.n	8000e1a <select_adc_channel+0x29a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 8:
              sConfig.Channel = ADC_CHANNEL_8;
 8000cf8:	2308      	movs	r3, #8
 8000cfa:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 9;
 8000cfc:	2309      	movs	r3, #9
 8000cfe:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	484f      	ldr	r0, [pc, #316]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d08:	f002 f92e 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f000 8085 	beq.w	8000e1e <select_adc_channel+0x29e>
              {
                Error_Handler();
 8000d14:	f000 ffae 	bl	8001c74 <Error_Handler>
              }
              break;
 8000d18:	e081      	b.n	8000e1e <select_adc_channel+0x29e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 9:
              sConfig.Channel = ADC_CHANNEL_9;
 8000d1a:	2309      	movs	r3, #9
 8000d1c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	4846      	ldr	r0, [pc, #280]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d2a:	f002 f91d 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d076      	beq.n	8000e22 <select_adc_channel+0x2a2>
              {
                Error_Handler();
 8000d34:	f000 ff9e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000d38:	e073      	b.n	8000e22 <select_adc_channel+0x2a2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 10:
              sConfig.Channel = ADC_CHANNEL_10;
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	483e      	ldr	r0, [pc, #248]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d4a:	f002 f90d 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d068      	beq.n	8000e26 <select_adc_channel+0x2a6>
              {
                Error_Handler();
 8000d54:	f000 ff8e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000d58:	e065      	b.n	8000e26 <select_adc_channel+0x2a6>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 11:
              sConfig.Channel = ADC_CHANNEL_11;
 8000d5a:	230b      	movs	r3, #11
 8000d5c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4619      	mov	r1, r3
 8000d68:	4836      	ldr	r0, [pc, #216]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d6a:	f002 f8fd 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d05a      	beq.n	8000e2a <select_adc_channel+0x2aa>
              {
                Error_Handler();
 8000d74:	f000 ff7e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000d78:	e057      	b.n	8000e2a <select_adc_channel+0x2aa>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 12:
              sConfig.Channel = ADC_CHANNEL_12;
 8000d7a:	230c      	movs	r3, #12
 8000d7c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d82:	f107 030c 	add.w	r3, r7, #12
 8000d86:	4619      	mov	r1, r3
 8000d88:	482e      	ldr	r0, [pc, #184]	; (8000e44 <select_adc_channel+0x2c4>)
 8000d8a:	f002 f8ed 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d04c      	beq.n	8000e2e <select_adc_channel+0x2ae>
              {
                Error_Handler();
 8000d94:	f000 ff6e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000d98:	e049      	b.n	8000e2e <select_adc_channel+0x2ae>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 13:
              sConfig.Channel = ADC_CHANNEL_13;
 8000d9a:	230d      	movs	r3, #13
 8000d9c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da2:	f107 030c 	add.w	r3, r7, #12
 8000da6:	4619      	mov	r1, r3
 8000da8:	4826      	ldr	r0, [pc, #152]	; (8000e44 <select_adc_channel+0x2c4>)
 8000daa:	f002 f8dd 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d03e      	beq.n	8000e32 <select_adc_channel+0x2b2>
              {
                Error_Handler();
 8000db4:	f000 ff5e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000db8:	e03b      	b.n	8000e32 <select_adc_channel+0x2b2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 14:
              sConfig.Channel = ADC_CHANNEL_14;
 8000dba:	230e      	movs	r3, #14
 8000dbc:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	f107 030c 	add.w	r3, r7, #12
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <select_adc_channel+0x2c4>)
 8000dca:	f002 f8cd 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d030      	beq.n	8000e36 <select_adc_channel+0x2b6>
              {
                Error_Handler();
 8000dd4:	f000 ff4e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000dd8:	e02d      	b.n	8000e36 <select_adc_channel+0x2b6>
        case 15:
              sConfig.Channel = ADC_CHANNEL_15;
 8000dda:	230f      	movs	r3, #15
 8000ddc:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dde:	2301      	movs	r3, #1
 8000de0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	f107 030c 	add.w	r3, r7, #12
 8000de6:	4619      	mov	r1, r3
 8000de8:	4816      	ldr	r0, [pc, #88]	; (8000e44 <select_adc_channel+0x2c4>)
 8000dea:	f002 f8bd 	bl	8002f68 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d022      	beq.n	8000e3a <select_adc_channel+0x2ba>
              {
                Error_Handler();
 8000df4:	f000 ff3e 	bl	8001c74 <Error_Handler>
              }
              break;
 8000df8:	e01f      	b.n	8000e3a <select_adc_channel+0x2ba>
        default:
            break;
 8000dfa:	bf00      	nop
 8000dfc:	e01e      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000dfe:	bf00      	nop
 8000e00:	e01c      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e02:	bf00      	nop
 8000e04:	e01a      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e06:	bf00      	nop
 8000e08:	e018      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e0a:	bf00      	nop
 8000e0c:	e016      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e0e:	bf00      	nop
 8000e10:	e014      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e12:	bf00      	nop
 8000e14:	e012      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e16:	bf00      	nop
 8000e18:	e010      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e1a:	bf00      	nop
 8000e1c:	e00e      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e1e:	bf00      	nop
 8000e20:	e00c      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e22:	bf00      	nop
 8000e24:	e00a      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e26:	bf00      	nop
 8000e28:	e008      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e2a:	bf00      	nop
 8000e2c:	e006      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e2e:	bf00      	nop
 8000e30:	e004      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e32:	bf00      	nop
 8000e34:	e002      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e36:	bf00      	nop
 8000e38:	e000      	b.n	8000e3c <select_adc_channel+0x2bc>
              break;
 8000e3a:	bf00      	nop
    }
}
 8000e3c:	bf00      	nop
 8000e3e:	3718      	adds	r7, #24
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000084 	.word	0x20000084

08000e48 <print_pwr>:

void print_pwr(void) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0

	  printf("-------------------------------\r\n");
 8000e4e:	4872      	ldr	r0, [pc, #456]	; (8001018 <print_pwr+0x1d0>)
 8000e50:	f004 fe8e 	bl	8005b70 <puts>
	  for (uint16_t i = 0; i < 2; i++) {
 8000e54:	2300      	movs	r3, #0
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	e031      	b.n	8000ebe <print_pwr+0x76>



			  select_adc_channel(i);
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fe8f 	bl	8000b80 <select_adc_channel>
			  // Get each ADC value from the group (2 channels in this case)
			  HAL_ADC_Start(&hadc1);
 8000e62:	486e      	ldr	r0, [pc, #440]	; (800101c <print_pwr+0x1d4>)
 8000e64:	f001 fec0 	bl	8002be8 <HAL_ADC_Start>
			  // Wait for regular group conversion to be completed
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e6c:	486b      	ldr	r0, [pc, #428]	; (800101c <print_pwr+0x1d4>)
 8000e6e:	f001 ff69 	bl	8002d44 <HAL_ADC_PollForConversion>

			  if (i == 0) {
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10e      	bne.n	8000e96 <print_pwr+0x4e>
				  source_V_q = HAL_ADC_GetValue(&hadc1);
 8000e78:	4868      	ldr	r0, [pc, #416]	; (800101c <print_pwr+0x1d4>)
 8000e7a:	f002 f869 	bl	8002f50 <HAL_ADC_GetValue>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	b29a      	uxth	r2, r3
 8000e82:	4b67      	ldr	r3, [pc, #412]	; (8001020 <print_pwr+0x1d8>)
 8000e84:	801a      	strh	r2, [r3, #0]
				  printf("Quantized Source Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) source_V_q);
 8000e86:	88fb      	ldrh	r3, [r7, #6]
 8000e88:	4a65      	ldr	r2, [pc, #404]	; (8001020 <print_pwr+0x1d8>)
 8000e8a:	8812      	ldrh	r2, [r2, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4865      	ldr	r0, [pc, #404]	; (8001024 <print_pwr+0x1dc>)
 8000e90:	f004 fe08 	bl	8005aa4 <iprintf>
 8000e94:	e010      	b.n	8000eb8 <print_pwr+0x70>
			  } else if (i == 1) {
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d10d      	bne.n	8000eb8 <print_pwr+0x70>
				  mcu_V_q = HAL_ADC_GetValue(&hadc1);
 8000e9c:	485f      	ldr	r0, [pc, #380]	; (800101c <print_pwr+0x1d4>)
 8000e9e:	f002 f857 	bl	8002f50 <HAL_ADC_GetValue>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b60      	ldr	r3, [pc, #384]	; (8001028 <print_pwr+0x1e0>)
 8000ea8:	801a      	strh	r2, [r3, #0]
				  printf("Quantized MCU Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) mcu_V_q);
 8000eaa:	88fb      	ldrh	r3, [r7, #6]
 8000eac:	4a5e      	ldr	r2, [pc, #376]	; (8001028 <print_pwr+0x1e0>)
 8000eae:	8812      	ldrh	r2, [r2, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	485e      	ldr	r0, [pc, #376]	; (800102c <print_pwr+0x1e4>)
 8000eb4:	f004 fdf6 	bl	8005aa4 <iprintf>
	  for (uint16_t i = 0; i < 2; i++) {
 8000eb8:	88fb      	ldrh	r3, [r7, #6]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	80fb      	strh	r3, [r7, #6]
 8000ebe:	88fb      	ldrh	r3, [r7, #6]
 8000ec0:	2b01      	cmp	r3, #1
 8000ec2:	d9ca      	bls.n	8000e5a <print_pwr+0x12>
			  }
		  }

		  shunt_resistor_V_q = source_V_q - mcu_V_q;
 8000ec4:	4b56      	ldr	r3, [pc, #344]	; (8001020 <print_pwr+0x1d8>)
 8000ec6:	881a      	ldrh	r2, [r3, #0]
 8000ec8:	4b57      	ldr	r3, [pc, #348]	; (8001028 <print_pwr+0x1e0>)
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <print_pwr+0x1e8>)
 8000ed2:	801a      	strh	r2, [r3, #0]
		  shunt_resistor_mV = (uint16_t) (((float) (shunt_resistor_V_q * 1000)) / 4095.0) * 3.3;
 8000ed4:	4b56      	ldr	r3, [pc, #344]	; (8001030 <print_pwr+0x1e8>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ede:	fb02 f303 	mul.w	r3, r2, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fde6 	bl	8000ab4 <__aeabi_i2f>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fa9e 	bl	800042c <__aeabi_f2d>
 8000ef0:	a345      	add	r3, pc, #276	; (adr r3, 8001008 <print_pwr+0x1c0>)
 8000ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef6:	f7ff fc1b 	bl	8000730 <__aeabi_ddiv>
 8000efa:	4602      	mov	r2, r0
 8000efc:	460b      	mov	r3, r1
 8000efe:	4610      	mov	r0, r2
 8000f00:	4619      	mov	r1, r3
 8000f02:	f7ff fcfd 	bl	8000900 <__aeabi_d2uiz>
 8000f06:	4603      	mov	r3, r0
 8000f08:	b29b      	uxth	r3, r3
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff fa7c 	bl	8000408 <__aeabi_i2d>
 8000f10:	a33f      	add	r3, pc, #252	; (adr r3, 8001010 <print_pwr+0x1c8>)
 8000f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f16:	f7ff fae1 	bl	80004dc <__aeabi_dmul>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f7ff fced 	bl	8000900 <__aeabi_d2uiz>
 8000f26:	4603      	mov	r3, r0
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	4b42      	ldr	r3, [pc, #264]	; (8001034 <print_pwr+0x1ec>)
 8000f2c:	801a      	strh	r2, [r3, #0]
		  mcu_mV = (uint16_t) (((float) (mcu_V_q * 1000)) / 4095.0) * 3.3;
 8000f2e:	4b3e      	ldr	r3, [pc, #248]	; (8001028 <print_pwr+0x1e0>)
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f38:	fb02 f303 	mul.w	r3, r2, r3
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fdb9 	bl	8000ab4 <__aeabi_i2f>
 8000f42:	4603      	mov	r3, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa71 	bl	800042c <__aeabi_f2d>
 8000f4a:	a32f      	add	r3, pc, #188	; (adr r3, 8001008 <print_pwr+0x1c0>)
 8000f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f50:	f7ff fbee 	bl	8000730 <__aeabi_ddiv>
 8000f54:	4602      	mov	r2, r0
 8000f56:	460b      	mov	r3, r1
 8000f58:	4610      	mov	r0, r2
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	f7ff fcd0 	bl	8000900 <__aeabi_d2uiz>
 8000f60:	4603      	mov	r3, r0
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fa4f 	bl	8000408 <__aeabi_i2d>
 8000f6a:	a329      	add	r3, pc, #164	; (adr r3, 8001010 <print_pwr+0x1c8>)
 8000f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f70:	f7ff fab4 	bl	80004dc <__aeabi_dmul>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	4610      	mov	r0, r2
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	f7ff fcc0 	bl	8000900 <__aeabi_d2uiz>
 8000f80:	4603      	mov	r3, r0
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <print_pwr+0x1f0>)
 8000f86:	801a      	strh	r2, [r3, #0]


		  printf("shunt resistor voltage: %u [mV]\r\n", shunt_resistor_mV);
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <print_pwr+0x1ec>)
 8000f8a:	881b      	ldrh	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	482b      	ldr	r0, [pc, #172]	; (800103c <print_pwr+0x1f4>)
 8000f90:	f004 fd88 	bl	8005aa4 <iprintf>
		  printf("mcu voltage: %u [mV]\r\n", mcu_mV);
 8000f94:	4b28      	ldr	r3, [pc, #160]	; (8001038 <print_pwr+0x1f0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4829      	ldr	r0, [pc, #164]	; (8001040 <print_pwr+0x1f8>)
 8000f9c:	f004 fd82 	bl	8005aa4 <iprintf>

		  // since 1 ohm (assumed constant) shunt resistor
		  // I = V / R
		  // I = V
		  circuit_mA = shunt_resistor_mV;
 8000fa0:	4b24      	ldr	r3, [pc, #144]	; (8001034 <print_pwr+0x1ec>)
 8000fa2:	881a      	ldrh	r2, [r3, #0]
 8000fa4:	4b27      	ldr	r3, [pc, #156]	; (8001044 <print_pwr+0x1fc>)
 8000fa6:	801a      	strh	r2, [r3, #0]
		  printf("Circuit current: %u [mA]\r\n", circuit_mA);
 8000fa8:	4b26      	ldr	r3, [pc, #152]	; (8001044 <print_pwr+0x1fc>)
 8000faa:	881b      	ldrh	r3, [r3, #0]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4826      	ldr	r0, [pc, #152]	; (8001048 <print_pwr+0x200>)
 8000fb0:	f004 fd78 	bl	8005aa4 <iprintf>

		  mcu_mW = circuit_mA * (mcu_mV / 1000);
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <print_pwr+0x1f0>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	4a24      	ldr	r2, [pc, #144]	; (800104c <print_pwr+0x204>)
 8000fba:	fba2 2303 	umull	r2, r3, r2, r3
 8000fbe:	099b      	lsrs	r3, r3, #6
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <print_pwr+0x1fc>)
 8000fc4:	8812      	ldrh	r2, [r2, #0]
 8000fc6:	fb02 f303 	mul.w	r3, r2, r3
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <print_pwr+0x208>)
 8000fce:	801a      	strh	r2, [r3, #0]

		  shunt_resistor_uW = circuit_mA * (shunt_resistor_mV);
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <print_pwr+0x1fc>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	4a17      	ldr	r2, [pc, #92]	; (8001034 <print_pwr+0x1ec>)
 8000fd6:	8812      	ldrh	r2, [r2, #0]
 8000fd8:	fb02 f303 	mul.w	r3, r2, r3
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b1d      	ldr	r3, [pc, #116]	; (8001054 <print_pwr+0x20c>)
 8000fe0:	801a      	strh	r2, [r3, #0]

		  printf("shunt resistor power: %u [uW]\r\n", shunt_resistor_uW);
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <print_pwr+0x20c>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	481b      	ldr	r0, [pc, #108]	; (8001058 <print_pwr+0x210>)
 8000fea:	f004 fd5b 	bl	8005aa4 <iprintf>
		  printf("mcu power: %u [mW]\r\n", mcu_mW);
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <print_pwr+0x208>)
 8000ff0:	881b      	ldrh	r3, [r3, #0]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4819      	ldr	r0, [pc, #100]	; (800105c <print_pwr+0x214>)
 8000ff6:	f004 fd55 	bl	8005aa4 <iprintf>



}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	f3af 8000 	nop.w
 8001008:	00000000 	.word	0x00000000
 800100c:	40affe00 	.word	0x40affe00
 8001010:	66666666 	.word	0x66666666
 8001014:	400a6666 	.word	0x400a6666
 8001018:	08006868 	.word	0x08006868
 800101c:	20000084 	.word	0x20000084
 8001020:	20000414 	.word	0x20000414
 8001024:	0800688c 	.word	0x0800688c
 8001028:	20000416 	.word	0x20000416
 800102c:	080068c4 	.word	0x080068c4
 8001030:	20000418 	.word	0x20000418
 8001034:	2000041a 	.word	0x2000041a
 8001038:	2000041c 	.word	0x2000041c
 800103c:	080068f8 	.word	0x080068f8
 8001040:	0800691c 	.word	0x0800691c
 8001044:	2000041e 	.word	0x2000041e
 8001048:	08006934 	.word	0x08006934
 800104c:	10624dd3 	.word	0x10624dd3
 8001050:	20000420 	.word	0x20000420
 8001054:	20000422 	.word	0x20000422
 8001058:	08006950 	.word	0x08006950
 800105c:	08006970 	.word	0x08006970

08001060 <print_help>:

void print_help(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	printf("Help: \r\n");
 8001064:	480b      	ldr	r0, [pc, #44]	; (8001094 <print_help+0x34>)
 8001066:	f004 fd83 	bl	8005b70 <puts>
	printf("    max : power consumption test enabling all clocks and peripherals\r\n");
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <print_help+0x38>)
 800106c:	f004 fd80 	bl	8005b70 <puts>
	printf("    typ : power consumption test for this program: USART1, ADC1, TIM3\r\n");
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <print_help+0x3c>)
 8001072:	f004 fd7d 	bl	8005b70 <puts>
	printf("    min : power consumption test all peripherals disabled (except TIM4), only CPU enabled CANNOT GATHER INFO IN THIS MODE\r\n");
 8001076:	480a      	ldr	r0, [pc, #40]	; (80010a0 <print_help+0x40>)
 8001078:	f004 fd7a 	bl	8005b70 <puts>
	printf("    pwr : free-running print of power readings\r\n");
 800107c:	4809      	ldr	r0, [pc, #36]	; (80010a4 <print_help+0x44>)
 800107e:	f004 fd77 	bl	8005b70 <puts>
	printf("    ver : print version info\r\n");
 8001082:	4809      	ldr	r0, [pc, #36]	; (80010a8 <print_help+0x48>)
 8001084:	f004 fd74 	bl	8005b70 <puts>
	printf("    hel : this message\r\n");
 8001088:	4808      	ldr	r0, [pc, #32]	; (80010ac <print_help+0x4c>)
 800108a:	f004 fd71 	bl	8005b70 <puts>

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	08006988 	.word	0x08006988
 8001098:	08006990 	.word	0x08006990
 800109c:	080069d8 	.word	0x080069d8
 80010a0:	08006a20 	.word	0x08006a20
 80010a4:	08006a9c 	.word	0x08006a9c
 80010a8:	08006acc 	.word	0x08006acc
 80010ac:	08006aec 	.word	0x08006aec

080010b0 <print_version>:

void print_version(void) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	printf("Version: REV B April 1th, 2024\r\n");
 80010b4:	4802      	ldr	r0, [pc, #8]	; (80010c0 <print_version+0x10>)
 80010b6:	f004 fd5b 	bl	8005b70 <puts>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	08006b04 	.word	0x08006b04

080010c4 <test_max>:

// power consumption test enabling all clocks and peripherals
void test_max(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 80010c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80010cc:	4619      	mov	r1, r3
 80010ce:	485e      	ldr	r0, [pc, #376]	; (8001248 <test_max+0x184>)
 80010d0:	f004 fce8 	bl	8005aa4 <iprintf>

	MX_GPIO_Init();
 80010d4:	f000 fd62 	bl	8001b9c <MX_GPIO_Init>
	printf("GPIO INIT\r\n");
 80010d8:	485c      	ldr	r0, [pc, #368]	; (800124c <test_max+0x188>)
 80010da:	f004 fd49 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80010de:	f241 3388 	movw	r3, #5000	; 0x1388
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fbc2 	bl	800286c <HAL_Delay>

	MX_USART1_UART_Init();
 80010e8:	f000 fcda 	bl	8001aa0 <MX_USART1_UART_Init>
	printf("USART1 INIT\r\n");
 80010ec:	4858      	ldr	r0, [pc, #352]	; (8001250 <test_max+0x18c>)
 80010ee:	f004 fd3f 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80010f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 fbb8 	bl	800286c <HAL_Delay>

	MX_ADC1_Init();
 80010fc:	f000 fa6e 	bl	80015dc <MX_ADC1_Init>
	printf("ADC1 INIT\r\n");
 8001100:	4854      	ldr	r0, [pc, #336]	; (8001254 <test_max+0x190>)
 8001102:	f004 fd35 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 8001106:	f241 3388 	movw	r3, #5000	; 0x1388
 800110a:	4618      	mov	r0, r3
 800110c:	f001 fbae 	bl	800286c <HAL_Delay>

	MX_ADC2_Init();
 8001110:	f000 faa2 	bl	8001658 <MX_ADC2_Init>
	printf("ADC2 INIT\r\n");
 8001114:	4850      	ldr	r0, [pc, #320]	; (8001258 <test_max+0x194>)
 8001116:	f004 fd2b 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 800111a:	f241 3388 	movw	r3, #5000	; 0x1388
 800111e:	4618      	mov	r0, r3
 8001120:	f001 fba4 	bl	800286c <HAL_Delay>

	MX_CAN_Init();
 8001124:	f000 fad6 	bl	80016d4 <MX_CAN_Init>
	printf("CANBUS INIT\r\n");
 8001128:	484c      	ldr	r0, [pc, #304]	; (800125c <test_max+0x198>)
 800112a:	f004 fd21 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 800112e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001132:	4618      	mov	r0, r3
 8001134:	f001 fb9a 	bl	800286c <HAL_Delay>

	MX_I2C1_Init();
 8001138:	f000 fb00 	bl	800173c <MX_I2C1_Init>
	printf("I2C1 INIT\r\n");
 800113c:	4848      	ldr	r0, [pc, #288]	; (8001260 <test_max+0x19c>)
 800113e:	f004 fd17 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 8001142:	f241 3388 	movw	r3, #5000	; 0x1388
 8001146:	4618      	mov	r0, r3
 8001148:	f001 fb90 	bl	800286c <HAL_Delay>

	MX_I2C2_Init();
 800114c:	f000 fb24 	bl	8001798 <MX_I2C2_Init>
	printf("I2C2 INIT\r\n");
 8001150:	4844      	ldr	r0, [pc, #272]	; (8001264 <test_max+0x1a0>)
 8001152:	f004 fd0d 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 8001156:	f241 3388 	movw	r3, #5000	; 0x1388
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fb86 	bl	800286c <HAL_Delay>

	MX_SPI1_Init();
 8001160:	f000 fb48 	bl	80017f4 <MX_SPI1_Init>
	printf("SPI1 INIT\r\n");
 8001164:	4840      	ldr	r0, [pc, #256]	; (8001268 <test_max+0x1a4>)
 8001166:	f004 fd03 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 800116a:	f241 3388 	movw	r3, #5000	; 0x1388
 800116e:	4618      	mov	r0, r3
 8001170:	f001 fb7c 	bl	800286c <HAL_Delay>

	MX_SPI2_Init();
 8001174:	f000 fb74 	bl	8001860 <MX_SPI2_Init>
	printf("SPI2 INIT\r\n");
 8001178:	483c      	ldr	r0, [pc, #240]	; (800126c <test_max+0x1a8>)
 800117a:	f004 fcf9 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 800117e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001182:	4618      	mov	r0, r3
 8001184:	f001 fb72 	bl	800286c <HAL_Delay>

	MX_TIM1_Init();
 8001188:	f000 fba0 	bl	80018cc <MX_TIM1_Init>
	printf("TIM1 INIT\r\n");
 800118c:	4838      	ldr	r0, [pc, #224]	; (8001270 <test_max+0x1ac>)
 800118e:	f004 fcef 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 8001192:	f241 3388 	movw	r3, #5000	; 0x1388
 8001196:	4618      	mov	r0, r3
 8001198:	f001 fb68 	bl	800286c <HAL_Delay>

	MX_TIM2_Init();
 800119c:	f000 fbe6 	bl	800196c <MX_TIM2_Init>
	printf("TIM2 INIT\r\n");
 80011a0:	4834      	ldr	r0, [pc, #208]	; (8001274 <test_max+0x1b0>)
 80011a2:	f004 fce5 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80011a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fb5e 	bl	800286c <HAL_Delay>

	MX_TIM3_Init();
 80011b0:	f000 fc28 	bl	8001a04 <MX_TIM3_Init>
	printf("TIM3 INIT\r\n");
 80011b4:	4830      	ldr	r0, [pc, #192]	; (8001278 <test_max+0x1b4>)
 80011b6:	f004 fcdb 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80011ba:	f241 3388 	movw	r3, #5000	; 0x1388
 80011be:	4618      	mov	r0, r3
 80011c0:	f001 fb54 	bl	800286c <HAL_Delay>

	MX_USART2_UART_Init();
 80011c4:	f000 fc96 	bl	8001af4 <MX_USART2_UART_Init>
	printf("USART2 INIT\r\n");
 80011c8:	482c      	ldr	r0, [pc, #176]	; (800127c <test_max+0x1b8>)
 80011ca:	f004 fcd1 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80011ce:	f241 3388 	movw	r3, #5000	; 0x1388
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fb4a 	bl	800286c <HAL_Delay>

	MX_USART3_UART_Init();
 80011d8:	f000 fcb6 	bl	8001b48 <MX_USART3_UART_Init>
	printf("USART3 INIT\r\n");
 80011dc:	4828      	ldr	r0, [pc, #160]	; (8001280 <test_max+0x1bc>)
 80011de:	f004 fcc7 	bl	8005b70 <puts>
	HAL_Delay(time_per_periph_ms);
 80011e2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011e6:	4618      	mov	r0, r3
 80011e8:	f001 fb40 	bl	800286c <HAL_Delay>


	printf("DeINIT non typical periph");
 80011ec:	4825      	ldr	r0, [pc, #148]	; (8001284 <test_max+0x1c0>)
 80011ee:	f004 fc59 	bl	8005aa4 <iprintf>
	HAL_Delay(time_per_periph_ms);
 80011f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fb38 	bl	800286c <HAL_Delay>

	HAL_ADC_DeInit(&hadc2);
 80011fc:	4822      	ldr	r0, [pc, #136]	; (8001288 <test_max+0x1c4>)
 80011fe:	f001 fc31 	bl	8002a64 <HAL_ADC_DeInit>
	HAL_CAN_DeInit(&hcan);
 8001202:	4822      	ldr	r0, [pc, #136]	; (800128c <test_max+0x1c8>)
 8001204:	f002 f93e 	bl	8003484 <HAL_CAN_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 8001208:	4821      	ldr	r0, [pc, #132]	; (8001290 <test_max+0x1cc>)
 800120a:	f002 fe2d 	bl	8003e68 <HAL_I2C_DeInit>
	HAL_I2C_DeInit(&hi2c2);
 800120e:	4821      	ldr	r0, [pc, #132]	; (8001294 <test_max+0x1d0>)
 8001210:	f002 fe2a 	bl	8003e68 <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 8001214:	4820      	ldr	r0, [pc, #128]	; (8001298 <test_max+0x1d4>)
 8001216:	f003 fc87 	bl	8004b28 <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 800121a:	4820      	ldr	r0, [pc, #128]	; (800129c <test_max+0x1d8>)
 800121c:	f003 fc84 	bl	8004b28 <HAL_SPI_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 8001220:	481f      	ldr	r0, [pc, #124]	; (80012a0 <test_max+0x1dc>)
 8001222:	f003 fcf8 	bl	8004c16 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 8001226:	481f      	ldr	r0, [pc, #124]	; (80012a4 <test_max+0x1e0>)
 8001228:	f003 fcf5 	bl	8004c16 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 800122c:	481e      	ldr	r0, [pc, #120]	; (80012a8 <test_max+0x1e4>)
 800122e:	f003 fcf2 	bl	8004c16 <HAL_TIM_Base_DeInit>
	HAL_UART_DeInit(&huart2);
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <test_max+0x1e8>)
 8001234:	f004 f942 	bl	80054bc <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 8001238:	481d      	ldr	r0, [pc, #116]	; (80012b0 <test_max+0x1ec>)
 800123a:	f004 f93f 	bl	80054bc <HAL_UART_DeInit>

	printf("Max Test Done\r\n");
 800123e:	481d      	ldr	r0, [pc, #116]	; (80012b4 <test_max+0x1f0>)
 8001240:	f004 fc96 	bl	8005b70 <puts>
}
 8001244:	bf00      	nop
 8001246:	bd80      	pop	{r7, pc}
 8001248:	08006b24 	.word	0x08006b24
 800124c:	08006b8c 	.word	0x08006b8c
 8001250:	08006b98 	.word	0x08006b98
 8001254:	08006ba8 	.word	0x08006ba8
 8001258:	08006bb4 	.word	0x08006bb4
 800125c:	08006bc0 	.word	0x08006bc0
 8001260:	08006bd0 	.word	0x08006bd0
 8001264:	08006bdc 	.word	0x08006bdc
 8001268:	08006be8 	.word	0x08006be8
 800126c:	08006bf4 	.word	0x08006bf4
 8001270:	08006c00 	.word	0x08006c00
 8001274:	08006c0c 	.word	0x08006c0c
 8001278:	08006c18 	.word	0x08006c18
 800127c:	08006c24 	.word	0x08006c24
 8001280:	08006c34 	.word	0x08006c34
 8001284:	08006c44 	.word	0x08006c44
 8001288:	200000b4 	.word	0x200000b4
 800128c:	200000e4 	.word	0x200000e4
 8001290:	2000010c 	.word	0x2000010c
 8001294:	20000160 	.word	0x20000160
 8001298:	200001b4 	.word	0x200001b4
 800129c:	2000020c 	.word	0x2000020c
 80012a0:	20000264 	.word	0x20000264
 80012a4:	200002ac 	.word	0x200002ac
 80012a8:	200002f4 	.word	0x200002f4
 80012ac:	20000384 	.word	0x20000384
 80012b0:	200003cc 	.word	0x200003cc
 80012b4:	08006c60 	.word	0x08006c60

080012b8 <test_typ>:

// power consumption test for this program: USART1, ADC1, TIM3
void test_typ(void) {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 80012bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <test_typ+0x24>)
 80012c4:	f004 fbee 	bl	8005aa4 <iprintf>
	HAL_Delay(time_per_periph_ms);
 80012c8:	f241 3388 	movw	r3, #5000	; 0x1388
 80012cc:	4618      	mov	r0, r3
 80012ce:	f001 facd 	bl	800286c <HAL_Delay>

	printf("Typical Test Done\r\n");
 80012d2:	4803      	ldr	r0, [pc, #12]	; (80012e0 <test_typ+0x28>)
 80012d4:	f004 fc4c 	bl	8005b70 <puts>

}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	08006b24 	.word	0x08006b24
 80012e0:	08006c70 	.word	0x08006c70

080012e4 <test_min>:

// power consumption test all peripherals disabled, only CPU enabled
void test_min(void) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	printf("Entering typical minimum mode, ensure external power meter connected. Will auto exit in %lu ms\r\n", delay_in_test_for_ms);
 80012e8:	f242 7310 	movw	r3, #10000	; 0x2710
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	; (8001334 <test_min+0x50>)
 80012f0:	f004 fbd8 	bl	8005aa4 <iprintf>
	HAL_Delay(delay_in_test_for_ms);
 80012f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80012f8:	4618      	mov	r0, r3
 80012fa:	f001 fab7 	bl	800286c <HAL_Delay>

	HAL_UART_DeInit(&huart1);
 80012fe:	480e      	ldr	r0, [pc, #56]	; (8001338 <test_min+0x54>)
 8001300:	f004 f8dc 	bl	80054bc <HAL_UART_DeInit>
	// printf's wont work..
	HAL_Delay(delay_in_test_for_ms);
 8001304:	f242 7310 	movw	r3, #10000	; 0x2710
 8001308:	4618      	mov	r0, r3
 800130a:	f001 faaf 	bl	800286c <HAL_Delay>

	HAL_ADC_DeInit(&hadc1);
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <test_min+0x58>)
 8001310:	f001 fba8 	bl	8002a64 <HAL_ADC_DeInit>
	HAL_Delay(time_per_periph_ms);
 8001314:	f241 3388 	movw	r3, #5000	; 0x1388
 8001318:	4618      	mov	r0, r3
 800131a:	f001 faa7 	bl	800286c <HAL_Delay>

	MX_GPIO_Init();
 800131e:	f000 fc3d 	bl	8001b9c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001322:	f000 fbbd 	bl	8001aa0 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001326:	f000 f959 	bl	80015dc <MX_ADC1_Init>

	printf("Minimum Test Done\r\n");
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <test_min+0x5c>)
 800132c:	f004 fc20 	bl	8005b70 <puts>

}
 8001330:	bf00      	nop
 8001332:	bd80      	pop	{r7, pc}
 8001334:	08006c84 	.word	0x08006c84
 8001338:	2000033c 	.word	0x2000033c
 800133c:	20000084 	.word	0x20000084
 8001340:	08006ce8 	.word	0x08006ce8

08001344 <test_pwr>:

void test_pwr(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	printf("Entering free-running power mode, press `q` three times quickly to exit\r\n");
 8001348:	480b      	ldr	r0, [pc, #44]	; (8001378 <test_pwr+0x34>)
 800134a:	f004 fc11 	bl	8005b70 <puts>
	while (1) {

		print_pwr();
 800134e:	f7ff fd7b 	bl	8000e48 <print_pwr>
		HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, 2000);
 8001352:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001356:	2203      	movs	r2, #3
 8001358:	4908      	ldr	r1, [pc, #32]	; (800137c <test_pwr+0x38>)
 800135a:	4809      	ldr	r0, [pc, #36]	; (8001380 <test_pwr+0x3c>)
 800135c:	f004 f963 	bl	8005626 <HAL_UART_Receive>

		if (strcmp(UART1_rxBuffer, "qqq") == 0) {
 8001360:	4908      	ldr	r1, [pc, #32]	; (8001384 <test_pwr+0x40>)
 8001362:	4806      	ldr	r0, [pc, #24]	; (800137c <test_pwr+0x38>)
 8001364:	f7fe fef4 	bl	8000150 <strcmp>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d1ef      	bne.n	800134e <test_pwr+0xa>
			printf("Exiting `pwr` mode\r\n");
 800136e:	4806      	ldr	r0, [pc, #24]	; (8001388 <test_pwr+0x44>)
 8001370:	f004 fbfe 	bl	8005b70 <puts>
			return;
 8001374:	bf00      	nop

		}
	}


}
 8001376:	bd80      	pop	{r7, pc}
 8001378:	08006cfc 	.word	0x08006cfc
 800137c:	20000424 	.word	0x20000424
 8001380:	2000033c 	.word	0x2000033c
 8001384:	08006d48 	.word	0x08006d48
 8001388:	08006d4c 	.word	0x08006d4c

0800138c <read_cli>:

// CLI commands
// max, typ, min, pwr
void read_cli(void) {
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8001392:	2300      	movs	r3, #0
 8001394:	71fb      	strb	r3, [r7, #7]
 8001396:	e005      	b.n	80013a4 <read_cli+0x18>
		UART1_rxBuffer[0] = 0;
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <read_cli+0xb0>)
 800139a:	2200      	movs	r2, #0
 800139c:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	3301      	adds	r3, #1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b02      	cmp	r3, #2
 80013a8:	d9f6      	bls.n	8001398 <read_cli+0xc>
	}
	// need to type the command in the timeout
	while(HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, CLI_timeout_ms) != HAL_OK);
 80013aa:	bf00      	nop
 80013ac:	4b24      	ldr	r3, [pc, #144]	; (8001440 <read_cli+0xb4>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	4922      	ldr	r1, [pc, #136]	; (800143c <read_cli+0xb0>)
 80013b2:	4824      	ldr	r0, [pc, #144]	; (8001444 <read_cli+0xb8>)
 80013b4:	f004 f937 	bl	8005626 <HAL_UART_Receive>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f6      	bne.n	80013ac <read_cli+0x20>
	printf("Your command: %s\r\n", UART1_rxBuffer);
 80013be:	491f      	ldr	r1, [pc, #124]	; (800143c <read_cli+0xb0>)
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <read_cli+0xbc>)
 80013c2:	f004 fb6f 	bl	8005aa4 <iprintf>

	if (strcmp(UART1_rxBuffer, "max") == 0) {
 80013c6:	4921      	ldr	r1, [pc, #132]	; (800144c <read_cli+0xc0>)
 80013c8:	481c      	ldr	r0, [pc, #112]	; (800143c <read_cli+0xb0>)
 80013ca:	f7fe fec1 	bl	8000150 <strcmp>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <read_cli+0x4c>
		test_max();
 80013d4:	f7ff fe76 	bl	80010c4 <test_max>

	}

	if (strcmp(UART1_rxBuffer, "typ") == 0) {
 80013d8:	491d      	ldr	r1, [pc, #116]	; (8001450 <read_cli+0xc4>)
 80013da:	4818      	ldr	r0, [pc, #96]	; (800143c <read_cli+0xb0>)
 80013dc:	f7fe feb8 	bl	8000150 <strcmp>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d101      	bne.n	80013ea <read_cli+0x5e>
		test_typ();
 80013e6:	f7ff ff67 	bl	80012b8 <test_typ>
	}

	if (strcmp(UART1_rxBuffer, "min") == 0) {
 80013ea:	491a      	ldr	r1, [pc, #104]	; (8001454 <read_cli+0xc8>)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <read_cli+0xb0>)
 80013ee:	f7fe feaf 	bl	8000150 <strcmp>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d101      	bne.n	80013fc <read_cli+0x70>
		test_min();
 80013f8:	f7ff ff74 	bl	80012e4 <test_min>

	}

	if (strcmp(UART1_rxBuffer, "pwr") == 0) {
 80013fc:	4916      	ldr	r1, [pc, #88]	; (8001458 <read_cli+0xcc>)
 80013fe:	480f      	ldr	r0, [pc, #60]	; (800143c <read_cli+0xb0>)
 8001400:	f7fe fea6 	bl	8000150 <strcmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d101      	bne.n	800140e <read_cli+0x82>
		test_pwr();
 800140a:	f7ff ff9b 	bl	8001344 <test_pwr>

	}

	if (strcmp(UART1_rxBuffer, "ver") == 0) {
 800140e:	4913      	ldr	r1, [pc, #76]	; (800145c <read_cli+0xd0>)
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <read_cli+0xb0>)
 8001412:	f7fe fe9d 	bl	8000150 <strcmp>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <read_cli+0x94>
		print_version();
 800141c:	f7ff fe48 	bl	80010b0 <print_version>

	}

	if (strcmp(UART1_rxBuffer, "hel") == 0) {
 8001420:	490f      	ldr	r1, [pc, #60]	; (8001460 <read_cli+0xd4>)
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <read_cli+0xb0>)
 8001424:	f7fe fe94 	bl	8000150 <strcmp>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d101      	bne.n	8001432 <read_cli+0xa6>
		print_help();
 800142e:	f7ff fe17 	bl	8001060 <print_help>

	}

}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000424 	.word	0x20000424
 8001440:	000186a0 	.word	0x000186a0
 8001444:	2000033c 	.word	0x2000033c
 8001448:	08006d60 	.word	0x08006d60
 800144c:	08006d74 	.word	0x08006d74
 8001450:	08006d78 	.word	0x08006d78
 8001454:	08006d7c 	.word	0x08006d7c
 8001458:	08006d80 	.word	0x08006d80
 800145c:	08006d84 	.word	0x08006d84
 8001460:	08006d88 	.word	0x08006d88

08001464 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001468:	f001 f9ce 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800146c:	f000 f860 	bl	8001530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001470:	f000 fb94 	bl	8001b9c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001474:	f000 fb14 	bl	8001aa0 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001478:	f000 f8b0 	bl	80015dc <MX_ADC1_Init>
  MX_ADC2_Init();
 800147c:	f000 f8ec 	bl	8001658 <MX_ADC2_Init>
  MX_CAN_Init();
 8001480:	f000 f928 	bl	80016d4 <MX_CAN_Init>
  MX_I2C1_Init();
 8001484:	f000 f95a 	bl	800173c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001488:	f000 f986 	bl	8001798 <MX_I2C2_Init>
  MX_SPI1_Init();
 800148c:	f000 f9b2 	bl	80017f4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001490:	f000 f9e6 	bl	8001860 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001494:	f000 fa1a 	bl	80018cc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001498:	f000 fa68 	bl	800196c <MX_TIM2_Init>
  MX_TIM3_Init();
 800149c:	f000 fab2 	bl	8001a04 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014a0:	f000 fb28 	bl	8001af4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014a4:	f000 fb50 	bl	8001b48 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  // above autogenerated code should not be modified, it will be overwritten on changes
  // for consistency, disable the non-typical periphrials
  HAL_ADC_DeInit(&hadc2);
 80014a8:	4814      	ldr	r0, [pc, #80]	; (80014fc <main+0x98>)
 80014aa:	f001 fadb 	bl	8002a64 <HAL_ADC_DeInit>
  HAL_CAN_DeInit(&hcan);
 80014ae:	4814      	ldr	r0, [pc, #80]	; (8001500 <main+0x9c>)
 80014b0:	f001 ffe8 	bl	8003484 <HAL_CAN_DeInit>
  HAL_I2C_DeInit(&hi2c1);
 80014b4:	4813      	ldr	r0, [pc, #76]	; (8001504 <main+0xa0>)
 80014b6:	f002 fcd7 	bl	8003e68 <HAL_I2C_DeInit>
  HAL_I2C_DeInit(&hi2c2);
 80014ba:	4813      	ldr	r0, [pc, #76]	; (8001508 <main+0xa4>)
 80014bc:	f002 fcd4 	bl	8003e68 <HAL_I2C_DeInit>
  HAL_SPI_DeInit(&hspi1);
 80014c0:	4812      	ldr	r0, [pc, #72]	; (800150c <main+0xa8>)
 80014c2:	f003 fb31 	bl	8004b28 <HAL_SPI_DeInit>
  HAL_SPI_DeInit(&hspi2);
 80014c6:	4812      	ldr	r0, [pc, #72]	; (8001510 <main+0xac>)
 80014c8:	f003 fb2e 	bl	8004b28 <HAL_SPI_DeInit>
  HAL_TIM_Base_DeInit(&htim1);
 80014cc:	4811      	ldr	r0, [pc, #68]	; (8001514 <main+0xb0>)
 80014ce:	f003 fba2 	bl	8004c16 <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim2);
 80014d2:	4811      	ldr	r0, [pc, #68]	; (8001518 <main+0xb4>)
 80014d4:	f003 fb9f 	bl	8004c16 <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim3);
 80014d8:	4810      	ldr	r0, [pc, #64]	; (800151c <main+0xb8>)
 80014da:	f003 fb9c 	bl	8004c16 <HAL_TIM_Base_DeInit>
  HAL_UART_DeInit(&huart2);
 80014de:	4810      	ldr	r0, [pc, #64]	; (8001520 <main+0xbc>)
 80014e0:	f003 ffec 	bl	80054bc <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart3);
 80014e4:	480f      	ldr	r0, [pc, #60]	; (8001524 <main+0xc0>)
 80014e6:	f003 ffe9 	bl	80054bc <HAL_UART_DeInit>




  // display firmware version+build info
  printf("REV B April 1th, 2024\r\n\r\n");
 80014ea:	480f      	ldr	r0, [pc, #60]	; (8001528 <main+0xc4>)
 80014ec:	f004 fb40 	bl	8005b70 <puts>
  printf("Power Consumption CLI\r\n");
 80014f0:	480e      	ldr	r0, [pc, #56]	; (800152c <main+0xc8>)
 80014f2:	f004 fb3d 	bl	8005b70 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_cli();
 80014f6:	f7ff ff49 	bl	800138c <read_cli>
 80014fa:	e7fc      	b.n	80014f6 <main+0x92>
 80014fc:	200000b4 	.word	0x200000b4
 8001500:	200000e4 	.word	0x200000e4
 8001504:	2000010c 	.word	0x2000010c
 8001508:	20000160 	.word	0x20000160
 800150c:	200001b4 	.word	0x200001b4
 8001510:	2000020c 	.word	0x2000020c
 8001514:	20000264 	.word	0x20000264
 8001518:	200002ac 	.word	0x200002ac
 800151c:	200002f4 	.word	0x200002f4
 8001520:	20000384 	.word	0x20000384
 8001524:	200003cc 	.word	0x200003cc
 8001528:	08006d8c 	.word	0x08006d8c
 800152c:	08006da8 	.word	0x08006da8

08001530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b094      	sub	sp, #80	; 0x50
 8001534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001536:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153a:	2228      	movs	r2, #40	; 0x28
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fbf6 	bl	8005d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
 800154c:	605a      	str	r2, [r3, #4]
 800154e:	609a      	str	r2, [r3, #8]
 8001550:	60da      	str	r2, [r3, #12]
 8001552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001560:	2302      	movs	r3, #2
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001564:	2301      	movs	r3, #1
 8001566:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001568:	2310      	movs	r3, #16
 800156a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800156c:	2302      	movs	r3, #2
 800156e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001570:	2300      	movs	r3, #0
 8001572:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800157a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f002 fca2 	bl	8003ec8 <HAL_RCC_OscConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800158a:	f000 fb73 	bl	8001c74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800158e:	230f      	movs	r3, #15
 8001590:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001592:	2302      	movs	r3, #2
 8001594:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001596:	2300      	movs	r3, #0
 8001598:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800159a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a0:	2300      	movs	r3, #0
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015a4:	f107 0314 	add.w	r3, r7, #20
 80015a8:	2100      	movs	r1, #0
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 ff0e 	bl	80043cc <HAL_RCC_ClockConfig>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015b6:	f000 fb5d 	bl	8001c74 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015ba:	2302      	movs	r3, #2
 80015bc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015be:	2300      	movs	r3, #0
 80015c0:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4618      	mov	r0, r3
 80015c6:	f003 f8bf 	bl	8004748 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80015d0:	f000 fb50 	bl	8001c74 <Error_Handler>
  }
}
 80015d4:	bf00      	nop
 80015d6:	3750      	adds	r7, #80	; 0x50
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}

080015dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b084      	sub	sp, #16
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <MX_ADC1_Init+0x74>)
 80015ee:	4a19      	ldr	r2, [pc, #100]	; (8001654 <MX_ADC1_Init+0x78>)
 80015f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_ADC1_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f8:	4b15      	ldr	r3, [pc, #84]	; (8001650 <MX_ADC1_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_ADC1_Init+0x74>)
 8001600:	2200      	movs	r2, #0
 8001602:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_ADC1_Init+0x74>)
 8001606:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800160a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <MX_ADC1_Init+0x74>)
 800160e:	2200      	movs	r2, #0
 8001610:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_ADC1_Init+0x74>)
 8001614:	2201      	movs	r2, #1
 8001616:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001618:	480d      	ldr	r0, [pc, #52]	; (8001650 <MX_ADC1_Init+0x74>)
 800161a:	f001 f94b 	bl	80028b4 <HAL_ADC_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001624:	f000 fb26 	bl	8001c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800162c:	2301      	movs	r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001630:	2301      	movs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001634:	1d3b      	adds	r3, r7, #4
 8001636:	4619      	mov	r1, r3
 8001638:	4805      	ldr	r0, [pc, #20]	; (8001650 <MX_ADC1_Init+0x74>)
 800163a:	f001 fc95 	bl	8002f68 <HAL_ADC_ConfigChannel>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001644:	f000 fb16 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001648:	bf00      	nop
 800164a:	3710      	adds	r7, #16
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000084 	.word	0x20000084
 8001654:	40012400 	.word	0x40012400

08001658 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800165e:	1d3b      	adds	r3, r7, #4
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <MX_ADC2_Init+0x74>)
 800166a:	4a19      	ldr	r2, [pc, #100]	; (80016d0 <MX_ADC2_Init+0x78>)
 800166c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <MX_ADC2_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001674:	4b15      	ldr	r3, [pc, #84]	; (80016cc <MX_ADC2_Init+0x74>)
 8001676:	2201      	movs	r2, #1
 8001678:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <MX_ADC2_Init+0x74>)
 800167c:	2200      	movs	r2, #0
 800167e:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001680:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_ADC2_Init+0x74>)
 8001682:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001686:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_ADC2_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <MX_ADC2_Init+0x74>)
 8001690:	2201      	movs	r2, #1
 8001692:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <MX_ADC2_Init+0x74>)
 8001696:	f001 f90d 	bl	80028b4 <HAL_ADC_Init>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 80016a0:	f000 fae8 	bl	8001c74 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80016a4:	230f      	movs	r3, #15
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016a8:	2301      	movs	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	; (80016cc <MX_ADC2_Init+0x74>)
 80016b6:	f001 fc57 	bl	8002f68 <HAL_ADC_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80016c0:	f000 fad8 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200000b4 	.word	0x200000b4
 80016d0:	40012800 	.word	0x40012800

080016d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80016d8:	4b16      	ldr	r3, [pc, #88]	; (8001734 <MX_CAN_Init+0x60>)
 80016da:	4a17      	ldr	r2, [pc, #92]	; (8001738 <MX_CAN_Init+0x64>)
 80016dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <MX_CAN_Init+0x60>)
 80016e0:	2210      	movs	r2, #16
 80016e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80016e4:	4b13      	ldr	r3, [pc, #76]	; (8001734 <MX_CAN_Init+0x60>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80016ea:	4b12      	ldr	r3, [pc, #72]	; (8001734 <MX_CAN_Init+0x60>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_CAN_Init+0x60>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_CAN_Init+0x60>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_CAN_Init+0x60>)
 80016fe:	2200      	movs	r2, #0
 8001700:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_CAN_Init+0x60>)
 8001704:	2200      	movs	r2, #0
 8001706:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_CAN_Init+0x60>)
 800170a:	2200      	movs	r2, #0
 800170c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_CAN_Init+0x60>)
 8001710:	2200      	movs	r2, #0
 8001712:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_CAN_Init+0x60>)
 8001716:	2200      	movs	r2, #0
 8001718:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_CAN_Init+0x60>)
 800171c:	2200      	movs	r2, #0
 800171e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_CAN_Init+0x60>)
 8001722:	f001 fdb4 	bl	800328e <HAL_CAN_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800172c:	f000 faa2 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	200000e4 	.word	0x200000e4
 8001738:	40006400 	.word	0x40006400

0800173c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <MX_I2C1_Init+0x50>)
 8001742:	4a13      	ldr	r2, [pc, #76]	; (8001790 <MX_I2C1_Init+0x54>)
 8001744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_I2C1_Init+0x50>)
 8001748:	4a12      	ldr	r2, [pc, #72]	; (8001794 <MX_I2C1_Init+0x58>)
 800174a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_I2C1_Init+0x50>)
 800175a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800175e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001760:	4b0a      	ldr	r3, [pc, #40]	; (800178c <MX_I2C1_Init+0x50>)
 8001762:	2200      	movs	r2, #0
 8001764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001766:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_I2C1_Init+0x50>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800176c:	4b07      	ldr	r3, [pc, #28]	; (800178c <MX_I2C1_Init+0x50>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001772:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_I2C1_Init+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001778:	4804      	ldr	r0, [pc, #16]	; (800178c <MX_I2C1_Init+0x50>)
 800177a:	f002 fa31 	bl	8003be0 <HAL_I2C_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001784:	f000 fa76 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	2000010c 	.word	0x2000010c
 8001790:	40005400 	.word	0x40005400
 8001794:	000186a0 	.word	0x000186a0

08001798 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_I2C2_Init+0x50>)
 800179e:	4a13      	ldr	r2, [pc, #76]	; (80017ec <MX_I2C2_Init+0x54>)
 80017a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017a4:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <MX_I2C2_Init+0x58>)
 80017a6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017b4:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_I2C2_Init+0x50>)
 80017d6:	f002 fa03 	bl	8003be0 <HAL_I2C_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80017e0:	f000 fa48 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000160 	.word	0x20000160
 80017ec:	40005800 	.word	0x40005800
 80017f0:	000186a0 	.word	0x000186a0

080017f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017f8:	4b17      	ldr	r3, [pc, #92]	; (8001858 <MX_SPI1_Init+0x64>)
 80017fa:	4a18      	ldr	r2, [pc, #96]	; (800185c <MX_SPI1_Init+0x68>)
 80017fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017fe:	4b16      	ldr	r3, [pc, #88]	; (8001858 <MX_SPI1_Init+0x64>)
 8001800:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001804:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001806:	4b14      	ldr	r3, [pc, #80]	; (8001858 <MX_SPI1_Init+0x64>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001812:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_SPI1_Init+0x64>)
 8001820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001824:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001826:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182c:	4b0a      	ldr	r3, [pc, #40]	; (8001858 <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001832:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_SPI1_Init+0x64>)
 8001834:	2200      	movs	r2, #0
 8001836:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001838:	4b07      	ldr	r3, [pc, #28]	; (8001858 <MX_SPI1_Init+0x64>)
 800183a:	2200      	movs	r2, #0
 800183c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800183e:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_SPI1_Init+0x64>)
 8001840:	220a      	movs	r2, #10
 8001842:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001844:	4804      	ldr	r0, [pc, #16]	; (8001858 <MX_SPI1_Init+0x64>)
 8001846:	f003 f8eb 	bl	8004a20 <HAL_SPI_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001850:	f000 fa10 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	bd80      	pop	{r7, pc}
 8001858:	200001b4 	.word	0x200001b4
 800185c:	40013000 	.word	0x40013000

08001860 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001864:	4b17      	ldr	r3, [pc, #92]	; (80018c4 <MX_SPI2_Init+0x64>)
 8001866:	4a18      	ldr	r2, [pc, #96]	; (80018c8 <MX_SPI2_Init+0x68>)
 8001868:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800186a:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <MX_SPI2_Init+0x64>)
 800186c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001870:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001872:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <MX_SPI2_Init+0x64>)
 8001874:	2200      	movs	r2, #0
 8001876:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_SPI2_Init+0x64>)
 800187a:	2200      	movs	r2, #0
 800187c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_SPI2_Init+0x64>)
 8001880:	2200      	movs	r2, #0
 8001882:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_SPI2_Init+0x64>)
 8001886:	2200      	movs	r2, #0
 8001888:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_SPI2_Init+0x64>)
 800188c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001890:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001892:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_SPI2_Init+0x64>)
 8001894:	2200      	movs	r2, #0
 8001896:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_SPI2_Init+0x64>)
 800189a:	2200      	movs	r2, #0
 800189c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_SPI2_Init+0x64>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_SPI2_Init+0x64>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_SPI2_Init+0x64>)
 80018ac:	220a      	movs	r2, #10
 80018ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_SPI2_Init+0x64>)
 80018b2:	f003 f8b5 	bl	8004a20 <HAL_SPI_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018bc:	f000 f9da 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	2000020c 	.word	0x2000020c
 80018c8:	40003800 	.word	0x40003800

080018cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018d2:	f107 0308 	add.w	r3, r7, #8
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]
 80018dc:	609a      	str	r2, [r3, #8]
 80018de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018e0:	463b      	mov	r3, r7
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_TIM1_Init+0x98>)
 80018ea:	4a1f      	ldr	r2, [pc, #124]	; (8001968 <MX_TIM1_Init+0x9c>)
 80018ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_TIM1_Init+0x98>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_TIM1_Init+0x98>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018fa:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <MX_TIM1_Init+0x98>)
 80018fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001900:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001902:	4b18      	ldr	r3, [pc, #96]	; (8001964 <MX_TIM1_Init+0x98>)
 8001904:	2200      	movs	r2, #0
 8001906:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001908:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_TIM1_Init+0x98>)
 800190a:	2200      	movs	r2, #0
 800190c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <MX_TIM1_Init+0x98>)
 8001910:	2280      	movs	r2, #128	; 0x80
 8001912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001914:	4813      	ldr	r0, [pc, #76]	; (8001964 <MX_TIM1_Init+0x98>)
 8001916:	f003 f92f 	bl	8004b78 <HAL_TIM_Base_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001920:	f000 f9a8 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001928:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <MX_TIM1_Init+0x98>)
 8001932:	f003 fb1f 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800193c:	f000 f99a 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001948:	463b      	mov	r3, r7
 800194a:	4619      	mov	r1, r3
 800194c:	4805      	ldr	r0, [pc, #20]	; (8001964 <MX_TIM1_Init+0x98>)
 800194e:	f003 fcf5 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001958:	f000 f98c 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800195c:	bf00      	nop
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	20000264 	.word	0x20000264
 8001968:	40012c00 	.word	0x40012c00

0800196c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b086      	sub	sp, #24
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001972:	f107 0308 	add.w	r3, r7, #8
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001980:	463b      	mov	r3, r7
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001988:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <MX_TIM2_Init+0x94>)
 800198a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800198e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001990:	4b1b      	ldr	r3, [pc, #108]	; (8001a00 <MX_TIM2_Init+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001996:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <MX_TIM2_Init+0x94>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800199c:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <MX_TIM2_Init+0x94>)
 800199e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019ac:	2280      	movs	r2, #128	; 0x80
 80019ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019b0:	4813      	ldr	r0, [pc, #76]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019b2:	f003 f8e1 	bl	8004b78 <HAL_TIM_Base_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80019bc:	f000 f95a 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019ce:	f003 fad1 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80019d8:	f000 f94c 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	; (8001a00 <MX_TIM2_Init+0x94>)
 80019ea:	f003 fca7 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80019f4:	f000 f93e 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3718      	adds	r7, #24
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200002ac 	.word	0x200002ac

08001a04 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a18:	463b      	mov	r3, r7
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a20:	4b1d      	ldr	r3, [pc, #116]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a22:	4a1e      	ldr	r2, [pc, #120]	; (8001a9c <MX_TIM3_Init+0x98>)
 8001a24:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a26:	4b1c      	ldr	r3, [pc, #112]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a32:	4b19      	ldr	r3, [pc, #100]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a3a:	4b17      	ldr	r3, [pc, #92]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a40:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a42:	2280      	movs	r2, #128	; 0x80
 8001a44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a46:	4814      	ldr	r0, [pc, #80]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a48:	f003 f896 	bl	8004b78 <HAL_TIM_Base_Init>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a52:	f000 f90f 	bl	8001c74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a5c:	f107 0308 	add.w	r3, r7, #8
 8001a60:	4619      	mov	r1, r3
 8001a62:	480d      	ldr	r0, [pc, #52]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a64:	f003 fa86 	bl	8004f74 <HAL_TIM_ConfigClockSource>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a6e:	f000 f901 	bl	8001c74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a76:	2300      	movs	r3, #0
 8001a78:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4806      	ldr	r0, [pc, #24]	; (8001a98 <MX_TIM3_Init+0x94>)
 8001a80:	f003 fc5c 	bl	800533c <HAL_TIMEx_MasterConfigSynchronization>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a8a:	f000 f8f3 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8e:	bf00      	nop
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	200002f4 	.word	0x200002f4
 8001a9c:	40000400 	.word	0x40000400

08001aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aa6:	4a12      	ldr	r2, [pc, #72]	; (8001af0 <MX_USART1_UART_Init+0x50>)
 8001aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ab2:	4b0e      	ldr	r3, [pc, #56]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001abe:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aca:	4b08      	ldr	r3, [pc, #32]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ad0:	4b06      	ldr	r3, [pc, #24]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_USART1_UART_Init+0x4c>)
 8001ad8:	f003 fca0 	bl	800541c <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ae2:	f000 f8c7 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	2000033c 	.word	0x2000033c
 8001af0:	40013800 	.word	0x40013800

08001af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART2_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART2_UART_Init+0x4c>)
 8001b2c:	f003 fc76 	bl	800541c <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f89d 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000384 	.word	0x20000384
 8001b44:	40004400 	.word	0x40004400

08001b48 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b4e:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <MX_USART3_UART_Init+0x50>)
 8001b50:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b52:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b58:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b6e:	220c      	movs	r2, #12
 8001b70:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART3_UART_Init+0x4c>)
 8001b80:	f003 fc4c 	bl	800541c <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b8a:	f000 f873 	bl	8001c74 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200003cc 	.word	0x200003cc
 8001b98:	40004800 	.word	0x40004800

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0310 	add.w	r3, r7, #16
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	4a23      	ldr	r2, [pc, #140]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bb6:	f043 0310 	orr.w	r3, r3, #16
 8001bba:	6193      	str	r3, [r2, #24]
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b1e      	ldr	r3, [pc, #120]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a1d      	ldr	r2, [pc, #116]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	607b      	str	r3, [r7, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b12      	ldr	r3, [pc, #72]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <MX_GPIO_Init+0xa8>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <MX_GPIO_Init+0xac>)
 8001c18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4619      	mov	r1, r3
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <MX_GPIO_Init+0xb0>)
 8001c26:	f001 fd79 	bl	800371c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	2028      	movs	r0, #40	; 0x28
 8001c30:	f001 fd49 	bl	80036c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001c34:	2028      	movs	r0, #40	; 0x28
 8001c36:	f001 fd62 	bl	80036fe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c3a:	bf00      	nop
 8001c3c:	3720      	adds	r7, #32
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	10110000 	.word	0x10110000
 8001c4c:	40011000 	.word	0x40011000

08001c50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c62:	f000 fde7 	bl	8002834 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40000800 	.word	0x40000800

08001c74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c78:	b672      	cpsid	i
}
 8001c7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Bricked");
 8001c7c:	4803      	ldr	r0, [pc, #12]	; (8001c8c <Error_Handler+0x18>)
 8001c7e:	f003 ff11 	bl	8005aa4 <iprintf>
	  HAL_Delay(1000);
 8001c82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c86:	f000 fdf1 	bl	800286c <HAL_Delay>
	  printf("Bricked");
 8001c8a:	e7f7      	b.n	8001c7c <Error_Handler+0x8>
 8001c8c:	08006dc0 	.word	0x08006dc0

08001c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c96:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_MspInit+0x5c>)
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	4a14      	ldr	r2, [pc, #80]	; (8001cec <HAL_MspInit+0x5c>)
 8001c9c:	f043 0301 	orr.w	r3, r3, #1
 8001ca0:	6193      	str	r3, [r2, #24]
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_MspInit+0x5c>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	f003 0301 	and.w	r3, r3, #1
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cae:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	4a0e      	ldr	r2, [pc, #56]	; (8001cec <HAL_MspInit+0x5c>)
 8001cb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cb8:	61d3      	str	r3, [r2, #28]
 8001cba:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_MspInit+0x5c>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	607b      	str	r3, [r7, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <HAL_MspInit+0x60>)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	40010000 	.word	0x40010000

08001cf4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <HAL_ADC_MspInit+0xbc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d122      	bne.n	8001d5a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d14:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d16:	699b      	ldr	r3, [r3, #24]
 8001d18:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d1e:	6193      	str	r3, [r2, #24]
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d28:	617b      	str	r3, [r7, #20]
 8001d2a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	4b21      	ldr	r3, [pc, #132]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d2e:	699b      	ldr	r3, [r3, #24]
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6193      	str	r3, [r2, #24]
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	f003 0304 	and.w	r3, r3, #4
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d44:	2303      	movs	r3, #3
 8001d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d4c:	f107 0318 	add.w	r3, r7, #24
 8001d50:	4619      	mov	r1, r3
 8001d52:	4819      	ldr	r0, [pc, #100]	; (8001db8 <HAL_ADC_MspInit+0xc4>)
 8001d54:	f001 fce2 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001d58:	e026      	b.n	8001da8 <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a17      	ldr	r2, [pc, #92]	; (8001dbc <HAL_ADC_MspInit+0xc8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d121      	bne.n	8001da8 <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001d64:	4b13      	ldr	r3, [pc, #76]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	4a12      	ldr	r2, [pc, #72]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6e:	6193      	str	r3, [r2, #24]
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	60fb      	str	r3, [r7, #12]
 8001d7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d7c:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	4a0c      	ldr	r2, [pc, #48]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d82:	f043 0310 	orr.w	r3, r3, #16
 8001d86:	6193      	str	r3, [r2, #24]
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_ADC_MspInit+0xc0>)
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001d94:	2320      	movs	r3, #32
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0318 	add.w	r3, r7, #24
 8001da0:	4619      	mov	r1, r3
 8001da2:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <HAL_ADC_MspInit+0xcc>)
 8001da4:	f001 fcba 	bl	800371c <HAL_GPIO_Init>
}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40012400 	.word	0x40012400
 8001db4:	40021000 	.word	0x40021000
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	40012800 	.word	0x40012800
 8001dc0:	40011000 	.word	0x40011000

08001dc4 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a10      	ldr	r2, [pc, #64]	; (8001e14 <HAL_ADC_MspDeInit+0x50>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10a      	bne.n	8001dec <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001dd6:	4b10      	ldr	r3, [pc, #64]	; (8001e18 <HAL_ADC_MspDeInit+0x54>)
 8001dd8:	699b      	ldr	r3, [r3, #24]
 8001dda:	4a0f      	ldr	r2, [pc, #60]	; (8001e18 <HAL_ADC_MspDeInit+0x54>)
 8001ddc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001de0:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001de2:	2103      	movs	r1, #3
 8001de4:	480d      	ldr	r0, [pc, #52]	; (8001e1c <HAL_ADC_MspDeInit+0x58>)
 8001de6:	f001 fe1d 	bl	8003a24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001dea:	e00e      	b.n	8001e0a <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0b      	ldr	r2, [pc, #44]	; (8001e20 <HAL_ADC_MspDeInit+0x5c>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d109      	bne.n	8001e0a <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_ADC_MspDeInit+0x54>)
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	4a07      	ldr	r2, [pc, #28]	; (8001e18 <HAL_ADC_MspDeInit+0x54>)
 8001dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001e00:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8001e02:	2120      	movs	r1, #32
 8001e04:	4807      	ldr	r0, [pc, #28]	; (8001e24 <HAL_ADC_MspDeInit+0x60>)
 8001e06:	f001 fe0d 	bl	8003a24 <HAL_GPIO_DeInit>
}
 8001e0a:	bf00      	nop
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40012400 	.word	0x40012400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010800 	.word	0x40010800
 8001e20:	40012800 	.word	0x40012800
 8001e24:	40011000 	.word	0x40011000

08001e28 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b08a      	sub	sp, #40	; 0x28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a25      	ldr	r2, [pc, #148]	; (8001ed8 <HAL_CAN_MspInit+0xb0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d143      	bne.n	8001ed0 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001e48:	4b24      	ldr	r3, [pc, #144]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e4a:	69db      	ldr	r3, [r3, #28]
 8001e4c:	4a23      	ldr	r2, [pc, #140]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e52:	61d3      	str	r3, [r2, #28]
 8001e54:	4b21      	ldr	r3, [pc, #132]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e56:	69db      	ldr	r3, [r3, #28]
 8001e58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e60:	4b1e      	ldr	r3, [pc, #120]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	4a1d      	ldr	r2, [pc, #116]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6193      	str	r3, [r2, #24]
 8001e6c:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <HAL_CAN_MspInit+0xb4>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4814      	ldr	r0, [pc, #80]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001e8e:	f001 fc45 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea0:	f107 0314 	add.w	r3, r7, #20
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	480e      	ldr	r0, [pc, #56]	; (8001ee0 <HAL_CAN_MspInit+0xb8>)
 8001ea8:	f001 fc38 	bl	800371c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001eac:	4b0d      	ldr	r3, [pc, #52]	; (8001ee4 <HAL_CAN_MspInit+0xbc>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
 8001eca:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_CAN_MspInit+0xbc>)
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001ed0:	bf00      	nop
 8001ed2:	3728      	adds	r7, #40	; 0x28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	40006400 	.word	0x40006400
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010c00 	.word	0x40010c00
 8001ee4:	40010000 	.word	0x40010000

08001ee8 <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a08      	ldr	r2, [pc, #32]	; (8001f18 <HAL_CAN_MspDeInit+0x30>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10a      	bne.n	8001f10 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_CAN_MspDeInit+0x34>)
 8001efc:	69db      	ldr	r3, [r3, #28]
 8001efe:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_CAN_MspDeInit+0x34>)
 8001f00:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001f04:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001f06:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001f0a:	4805      	ldr	r0, [pc, #20]	; (8001f20 <HAL_CAN_MspDeInit+0x38>)
 8001f0c:	f001 fd8a 	bl	8003a24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8001f10:	bf00      	nop
 8001f12:	3708      	adds	r7, #8
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	40006400 	.word	0x40006400
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40010c00 	.word	0x40010c00

08001f24 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0318 	add.w	r3, r7, #24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a2b      	ldr	r2, [pc, #172]	; (8001fec <HAL_I2C_MspInit+0xc8>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d124      	bne.n	8001f8e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f44:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	4a29      	ldr	r2, [pc, #164]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f4a:	f043 0308 	orr.w	r3, r3, #8
 8001f4e:	6193      	str	r3, [r2, #24]
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	f003 0308 	and.w	r3, r3, #8
 8001f58:	617b      	str	r3, [r7, #20]
 8001f5a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f5c:	23c0      	movs	r3, #192	; 0xc0
 8001f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f60:	2312      	movs	r3, #18
 8001f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f64:	2303      	movs	r3, #3
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f68:	f107 0318 	add.w	r3, r7, #24
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4821      	ldr	r0, [pc, #132]	; (8001ff4 <HAL_I2C_MspInit+0xd0>)
 8001f70:	f001 fbd4 	bl	800371c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f7e:	61d3      	str	r3, [r2, #28]
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f88:	613b      	str	r3, [r7, #16]
 8001f8a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f8c:	e029      	b.n	8001fe2 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a19      	ldr	r2, [pc, #100]	; (8001ff8 <HAL_I2C_MspInit+0xd4>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d124      	bne.n	8001fe2 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a14      	ldr	r2, [pc, #80]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b12      	ldr	r3, [pc, #72]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0308 	and.w	r3, r3, #8
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fb0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fb6:	2312      	movs	r3, #18
 8001fb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480b      	ldr	r0, [pc, #44]	; (8001ff4 <HAL_I2C_MspInit+0xd0>)
 8001fc6:	f001 fba9 	bl	800371c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fca:	4b09      	ldr	r3, [pc, #36]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001fd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fd4:	61d3      	str	r3, [r2, #28]
 8001fd6:	4b06      	ldr	r3, [pc, #24]	; (8001ff0 <HAL_I2C_MspInit+0xcc>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fde:	60bb      	str	r3, [r7, #8]
 8001fe0:	68bb      	ldr	r3, [r7, #8]
}
 8001fe2:	bf00      	nop
 8001fe4:	3728      	adds	r7, #40	; 0x28
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	40005400 	.word	0x40005400
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010c00 	.word	0x40010c00
 8001ff8:	40005800 	.word	0x40005800

08001ffc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_I2C_MspDeInit+0x64>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10e      	bne.n	800202c <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800200e:	4b15      	ldr	r3, [pc, #84]	; (8002064 <HAL_I2C_MspDeInit+0x68>)
 8002010:	69db      	ldr	r3, [r3, #28]
 8002012:	4a14      	ldr	r2, [pc, #80]	; (8002064 <HAL_I2C_MspDeInit+0x68>)
 8002014:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002018:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800201a:	2140      	movs	r1, #64	; 0x40
 800201c:	4812      	ldr	r0, [pc, #72]	; (8002068 <HAL_I2C_MspDeInit+0x6c>)
 800201e:	f001 fd01 	bl	8003a24 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002022:	2180      	movs	r1, #128	; 0x80
 8002024:	4810      	ldr	r0, [pc, #64]	; (8002068 <HAL_I2C_MspDeInit+0x6c>)
 8002026:	f001 fcfd 	bl	8003a24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800202a:	e014      	b.n	8002056 <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0e      	ldr	r2, [pc, #56]	; (800206c <HAL_I2C_MspDeInit+0x70>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d10f      	bne.n	8002056 <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <HAL_I2C_MspDeInit+0x68>)
 8002038:	69db      	ldr	r3, [r3, #28]
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_I2C_MspDeInit+0x68>)
 800203c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002040:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002042:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002046:	4808      	ldr	r0, [pc, #32]	; (8002068 <HAL_I2C_MspDeInit+0x6c>)
 8002048:	f001 fcec 	bl	8003a24 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800204c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002050:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_I2C_MspDeInit+0x6c>)
 8002052:	f001 fce7 	bl	8003a24 <HAL_GPIO_DeInit>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40005400 	.word	0x40005400
 8002064:	40021000 	.word	0x40021000
 8002068:	40010c00 	.word	0x40010c00
 800206c:	40005800 	.word	0x40005800

08002070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b08a      	sub	sp, #40	; 0x28
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002078:	f107 0318 	add.w	r3, r7, #24
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a37      	ldr	r2, [pc, #220]	; (8002168 <HAL_SPI_MspInit+0xf8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d130      	bne.n	80020f2 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002090:	4b36      	ldr	r3, [pc, #216]	; (800216c <HAL_SPI_MspInit+0xfc>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	4a35      	ldr	r2, [pc, #212]	; (800216c <HAL_SPI_MspInit+0xfc>)
 8002096:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800209a:	6193      	str	r3, [r2, #24]
 800209c:	4b33      	ldr	r3, [pc, #204]	; (800216c <HAL_SPI_MspInit+0xfc>)
 800209e:	699b      	ldr	r3, [r3, #24]
 80020a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020a8:	4b30      	ldr	r3, [pc, #192]	; (800216c <HAL_SPI_MspInit+0xfc>)
 80020aa:	699b      	ldr	r3, [r3, #24]
 80020ac:	4a2f      	ldr	r2, [pc, #188]	; (800216c <HAL_SPI_MspInit+0xfc>)
 80020ae:	f043 0304 	orr.w	r3, r3, #4
 80020b2:	6193      	str	r3, [r2, #24]
 80020b4:	4b2d      	ldr	r3, [pc, #180]	; (800216c <HAL_SPI_MspInit+0xfc>)
 80020b6:	699b      	ldr	r3, [r3, #24]
 80020b8:	f003 0304 	and.w	r3, r3, #4
 80020bc:	613b      	str	r3, [r7, #16]
 80020be:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80020c0:	23a0      	movs	r3, #160	; 0xa0
 80020c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c4:	2302      	movs	r3, #2
 80020c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020c8:	2303      	movs	r3, #3
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4619      	mov	r1, r3
 80020d2:	4827      	ldr	r0, [pc, #156]	; (8002170 <HAL_SPI_MspInit+0x100>)
 80020d4:	f001 fb22 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80020d8:	2340      	movs	r3, #64	; 0x40
 80020da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020dc:	2300      	movs	r3, #0
 80020de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0318 	add.w	r3, r7, #24
 80020e8:	4619      	mov	r1, r3
 80020ea:	4821      	ldr	r0, [pc, #132]	; (8002170 <HAL_SPI_MspInit+0x100>)
 80020ec:	f001 fb16 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80020f0:	e036      	b.n	8002160 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1f      	ldr	r2, [pc, #124]	; (8002174 <HAL_SPI_MspInit+0x104>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d131      	bne.n	8002160 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020fc:	4b1b      	ldr	r3, [pc, #108]	; (800216c <HAL_SPI_MspInit+0xfc>)
 80020fe:	69db      	ldr	r3, [r3, #28]
 8002100:	4a1a      	ldr	r2, [pc, #104]	; (800216c <HAL_SPI_MspInit+0xfc>)
 8002102:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002106:	61d3      	str	r3, [r2, #28]
 8002108:	4b18      	ldr	r3, [pc, #96]	; (800216c <HAL_SPI_MspInit+0xfc>)
 800210a:	69db      	ldr	r3, [r3, #28]
 800210c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002114:	4b15      	ldr	r3, [pc, #84]	; (800216c <HAL_SPI_MspInit+0xfc>)
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_SPI_MspInit+0xfc>)
 800211a:	f043 0308 	orr.w	r3, r3, #8
 800211e:	6193      	str	r3, [r2, #24]
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_SPI_MspInit+0xfc>)
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	f003 0308 	and.w	r3, r3, #8
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800212c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002132:	2302      	movs	r3, #2
 8002134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002136:	2303      	movs	r3, #3
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0318 	add.w	r3, r7, #24
 800213e:	4619      	mov	r1, r3
 8002140:	480d      	ldr	r0, [pc, #52]	; (8002178 <HAL_SPI_MspInit+0x108>)
 8002142:	f001 faeb 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800214a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800214c:	2300      	movs	r3, #0
 800214e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002154:	f107 0318 	add.w	r3, r7, #24
 8002158:	4619      	mov	r1, r3
 800215a:	4807      	ldr	r0, [pc, #28]	; (8002178 <HAL_SPI_MspInit+0x108>)
 800215c:	f001 fade 	bl	800371c <HAL_GPIO_Init>
}
 8002160:	bf00      	nop
 8002162:	3728      	adds	r7, #40	; 0x28
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	40013000 	.word	0x40013000
 800216c:	40021000 	.word	0x40021000
 8002170:	40010800 	.word	0x40010800
 8002174:	40003800 	.word	0x40003800
 8002178:	40010c00 	.word	0x40010c00

0800217c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a10      	ldr	r2, [pc, #64]	; (80021cc <HAL_SPI_MspDeInit+0x50>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d10a      	bne.n	80021a4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800218e:	4b10      	ldr	r3, [pc, #64]	; (80021d0 <HAL_SPI_MspDeInit+0x54>)
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	4a0f      	ldr	r2, [pc, #60]	; (80021d0 <HAL_SPI_MspDeInit+0x54>)
 8002194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002198:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800219a:	21e0      	movs	r1, #224	; 0xe0
 800219c:	480d      	ldr	r0, [pc, #52]	; (80021d4 <HAL_SPI_MspDeInit+0x58>)
 800219e:	f001 fc41 	bl	8003a24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 80021a2:	e00f      	b.n	80021c4 <HAL_SPI_MspDeInit+0x48>
  else if(hspi->Instance==SPI2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a0b      	ldr	r2, [pc, #44]	; (80021d8 <HAL_SPI_MspDeInit+0x5c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10a      	bne.n	80021c4 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80021ae:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_SPI_MspDeInit+0x54>)
 80021b0:	69db      	ldr	r3, [r3, #28]
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_SPI_MspDeInit+0x54>)
 80021b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80021b8:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80021ba:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80021be:	4807      	ldr	r0, [pc, #28]	; (80021dc <HAL_SPI_MspDeInit+0x60>)
 80021c0:	f001 fc30 	bl	8003a24 <HAL_GPIO_DeInit>
}
 80021c4:	bf00      	nop
 80021c6:	3708      	adds	r7, #8
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40013000 	.word	0x40013000
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40010800 	.word	0x40010800
 80021d8:	40003800 	.word	0x40003800
 80021dc:	40010c00 	.word	0x40010c00

080021e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a1b      	ldr	r2, [pc, #108]	; (800225c <HAL_TIM_Base_MspInit+0x7c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d10c      	bne.n	800220c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 80021f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021fc:	6193      	str	r3, [r2, #24]
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800220a:	e022      	b.n	8002252 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002214:	d10c      	bne.n	8002230 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002216:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	4a11      	ldr	r2, [pc, #68]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 800221c:	f043 0301 	orr.w	r3, r3, #1
 8002220:	61d3      	str	r3, [r2, #28]
 8002222:	4b0f      	ldr	r3, [pc, #60]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 8002224:	69db      	ldr	r3, [r3, #28]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
}
 800222e:	e010      	b.n	8002252 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a0b      	ldr	r2, [pc, #44]	; (8002264 <HAL_TIM_Base_MspInit+0x84>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d10b      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800223a:	4b09      	ldr	r3, [pc, #36]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 800223c:	69db      	ldr	r3, [r3, #28]
 800223e:	4a08      	ldr	r2, [pc, #32]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 8002240:	f043 0302 	orr.w	r3, r3, #2
 8002244:	61d3      	str	r3, [r2, #28]
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <HAL_TIM_Base_MspInit+0x80>)
 8002248:	69db      	ldr	r3, [r3, #28]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	bf00      	nop
 8002254:	371c      	adds	r7, #28
 8002256:	46bd      	mov	sp, r7
 8002258:	bc80      	pop	{r7}
 800225a:	4770      	bx	lr
 800225c:	40012c00 	.word	0x40012c00
 8002260:	40021000 	.word	0x40021000
 8002264:	40000400 	.word	0x40000400

08002268 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a12      	ldr	r2, [pc, #72]	; (80022c0 <HAL_TIM_Base_MspDeInit+0x58>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d106      	bne.n	8002288 <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800227a:	4b12      	ldr	r3, [pc, #72]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 800227c:	699b      	ldr	r3, [r3, #24]
 800227e:	4a11      	ldr	r2, [pc, #68]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002280:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002284:	6193      	str	r3, [r2, #24]
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8002286:	e016      	b.n	80022b6 <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002290:	d106      	bne.n	80022a0 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002292:	4b0c      	ldr	r3, [pc, #48]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002298:	f023 0301 	bic.w	r3, r3, #1
 800229c:	61d3      	str	r3, [r2, #28]
}
 800229e:	e00a      	b.n	80022b6 <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM3)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a08      	ldr	r2, [pc, #32]	; (80022c8 <HAL_TIM_Base_MspDeInit+0x60>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d105      	bne.n	80022b6 <HAL_TIM_Base_MspDeInit+0x4e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_TIM_Base_MspDeInit+0x5c>)
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	61d3      	str	r3, [r2, #28]
}
 80022b6:	bf00      	nop
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr
 80022c0:	40012c00 	.word	0x40012c00
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40000400 	.word	0x40000400

080022cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08e      	sub	sp, #56	; 0x38
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a5c      	ldr	r2, [pc, #368]	; (8002458 <HAL_UART_MspInit+0x18c>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d132      	bne.n	8002352 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80022ec:	4b5b      	ldr	r3, [pc, #364]	; (800245c <HAL_UART_MspInit+0x190>)
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	4a5a      	ldr	r2, [pc, #360]	; (800245c <HAL_UART_MspInit+0x190>)
 80022f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022f6:	6193      	str	r3, [r2, #24]
 80022f8:	4b58      	ldr	r3, [pc, #352]	; (800245c <HAL_UART_MspInit+0x190>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002300:	623b      	str	r3, [r7, #32]
 8002302:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b55      	ldr	r3, [pc, #340]	; (800245c <HAL_UART_MspInit+0x190>)
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	4a54      	ldr	r2, [pc, #336]	; (800245c <HAL_UART_MspInit+0x190>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6193      	str	r3, [r2, #24]
 8002310:	4b52      	ldr	r3, [pc, #328]	; (800245c <HAL_UART_MspInit+0x190>)
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800231c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002322:	2302      	movs	r3, #2
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002326:	2303      	movs	r3, #3
 8002328:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800232e:	4619      	mov	r1, r3
 8002330:	484b      	ldr	r0, [pc, #300]	; (8002460 <HAL_UART_MspInit+0x194>)
 8002332:	f001 f9f3 	bl	800371c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800233c:	2300      	movs	r3, #0
 800233e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002340:	2300      	movs	r3, #0
 8002342:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002348:	4619      	mov	r1, r3
 800234a:	4845      	ldr	r0, [pc, #276]	; (8002460 <HAL_UART_MspInit+0x194>)
 800234c:	f001 f9e6 	bl	800371c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002350:	e07e      	b.n	8002450 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a43      	ldr	r2, [pc, #268]	; (8002464 <HAL_UART_MspInit+0x198>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d130      	bne.n	80023be <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800235c:	4b3f      	ldr	r3, [pc, #252]	; (800245c <HAL_UART_MspInit+0x190>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	4a3e      	ldr	r2, [pc, #248]	; (800245c <HAL_UART_MspInit+0x190>)
 8002362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002366:	61d3      	str	r3, [r2, #28]
 8002368:	4b3c      	ldr	r3, [pc, #240]	; (800245c <HAL_UART_MspInit+0x190>)
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	61bb      	str	r3, [r7, #24]
 8002372:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	4b39      	ldr	r3, [pc, #228]	; (800245c <HAL_UART_MspInit+0x190>)
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	4a38      	ldr	r2, [pc, #224]	; (800245c <HAL_UART_MspInit+0x190>)
 800237a:	f043 0304 	orr.w	r3, r3, #4
 800237e:	6193      	str	r3, [r2, #24]
 8002380:	4b36      	ldr	r3, [pc, #216]	; (800245c <HAL_UART_MspInit+0x190>)
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800238c:	2304      	movs	r3, #4
 800238e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002390:	2302      	movs	r3, #2
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002394:	2303      	movs	r3, #3
 8002396:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	4830      	ldr	r0, [pc, #192]	; (8002460 <HAL_UART_MspInit+0x194>)
 80023a0:	f001 f9bc 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023a4:	2308      	movs	r3, #8
 80023a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023a8:	2300      	movs	r3, #0
 80023aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b4:	4619      	mov	r1, r3
 80023b6:	482a      	ldr	r0, [pc, #168]	; (8002460 <HAL_UART_MspInit+0x194>)
 80023b8:	f001 f9b0 	bl	800371c <HAL_GPIO_Init>
}
 80023bc:	e048      	b.n	8002450 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a29      	ldr	r2, [pc, #164]	; (8002468 <HAL_UART_MspInit+0x19c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d143      	bne.n	8002450 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <HAL_UART_MspInit+0x190>)
 80023ca:	69db      	ldr	r3, [r3, #28]
 80023cc:	4a23      	ldr	r2, [pc, #140]	; (800245c <HAL_UART_MspInit+0x190>)
 80023ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d2:	61d3      	str	r3, [r2, #28]
 80023d4:	4b21      	ldr	r3, [pc, #132]	; (800245c <HAL_UART_MspInit+0x190>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023dc:	613b      	str	r3, [r7, #16]
 80023de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023e0:	4b1e      	ldr	r3, [pc, #120]	; (800245c <HAL_UART_MspInit+0x190>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a1d      	ldr	r2, [pc, #116]	; (800245c <HAL_UART_MspInit+0x190>)
 80023e6:	f043 0310 	orr.w	r3, r3, #16
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b1b      	ldr	r3, [pc, #108]	; (800245c <HAL_UART_MspInit+0x190>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	60fb      	str	r3, [r7, #12]
 80023f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80023f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002402:	2303      	movs	r3, #3
 8002404:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002406:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240a:	4619      	mov	r1, r3
 800240c:	4817      	ldr	r0, [pc, #92]	; (800246c <HAL_UART_MspInit+0x1a0>)
 800240e:	f001 f985 	bl	800371c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002412:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002424:	4619      	mov	r1, r3
 8002426:	4811      	ldr	r0, [pc, #68]	; (800246c <HAL_UART_MspInit+0x1a0>)
 8002428:	f001 f978 	bl	800371c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 800242c:	4b10      	ldr	r3, [pc, #64]	; (8002470 <HAL_UART_MspInit+0x1a4>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	637b      	str	r3, [r7, #52]	; 0x34
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	f043 0310 	orr.w	r3, r3, #16
 8002448:	637b      	str	r3, [r7, #52]	; 0x34
 800244a:	4a09      	ldr	r2, [pc, #36]	; (8002470 <HAL_UART_MspInit+0x1a4>)
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	6053      	str	r3, [r2, #4]
}
 8002450:	bf00      	nop
 8002452:	3738      	adds	r7, #56	; 0x38
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40013800 	.word	0x40013800
 800245c:	40021000 	.word	0x40021000
 8002460:	40010800 	.word	0x40010800
 8002464:	40004400 	.word	0x40004400
 8002468:	40004800 	.word	0x40004800
 800246c:	40011000 	.word	0x40011000
 8002470:	40010000 	.word	0x40010000

08002474 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <HAL_UART_MspDeInit+0x74>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d10b      	bne.n	800249e <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8002486:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	4a18      	ldr	r2, [pc, #96]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 800248c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002490:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002492:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002496:	4816      	ldr	r0, [pc, #88]	; (80024f0 <HAL_UART_MspDeInit+0x7c>)
 8002498:	f001 fac4 	bl	8003a24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 800249c:	e01f      	b.n	80024de <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART2)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_UART_MspDeInit+0x80>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d10a      	bne.n	80024be <HAL_UART_MspDeInit+0x4a>
    __HAL_RCC_USART2_CLK_DISABLE();
 80024a8:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 80024aa:	69db      	ldr	r3, [r3, #28]
 80024ac:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 80024ae:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80024b2:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80024b4:	210c      	movs	r1, #12
 80024b6:	480e      	ldr	r0, [pc, #56]	; (80024f0 <HAL_UART_MspDeInit+0x7c>)
 80024b8:	f001 fab4 	bl	8003a24 <HAL_GPIO_DeInit>
}
 80024bc:	e00f      	b.n	80024de <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART3)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <HAL_UART_MspDeInit+0x84>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d10a      	bne.n	80024de <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80024c8:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_UART_MspDeInit+0x78>)
 80024ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d2:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 80024d4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80024d8:	4808      	ldr	r0, [pc, #32]	; (80024fc <HAL_UART_MspDeInit+0x88>)
 80024da:	f001 faa3 	bl	8003a24 <HAL_GPIO_DeInit>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40013800 	.word	0x40013800
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40010800 	.word	0x40010800
 80024f4:	40004400 	.word	0x40004400
 80024f8:	40004800 	.word	0x40004800
 80024fc:	40011000 	.word	0x40011000

08002500 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08e      	sub	sp, #56	; 0x38
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002516:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_InitTick+0xe8>)
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4a33      	ldr	r2, [pc, #204]	; (80025e8 <HAL_InitTick+0xe8>)
 800251c:	f043 0304 	orr.w	r3, r3, #4
 8002520:	61d3      	str	r3, [r2, #28]
 8002522:	4b31      	ldr	r3, [pc, #196]	; (80025e8 <HAL_InitTick+0xe8>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	60fb      	str	r3, [r7, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800252e:	f107 0210 	add.w	r2, r7, #16
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f002 f8b7 	bl	80046ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	2b00      	cmp	r3, #0
 8002546:	d103      	bne.n	8002550 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002548:	f002 f888 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800254c:	6378      	str	r0, [r7, #52]	; 0x34
 800254e:	e004      	b.n	800255a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002550:	f002 f884 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8002554:	4603      	mov	r3, r0
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800255a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255c:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_InitTick+0xec>)
 800255e:	fba2 2303 	umull	r2, r3, r2, r3
 8002562:	0c9b      	lsrs	r3, r3, #18
 8002564:	3b01      	subs	r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002568:	4b21      	ldr	r3, [pc, #132]	; (80025f0 <HAL_InitTick+0xf0>)
 800256a:	4a22      	ldr	r2, [pc, #136]	; (80025f4 <HAL_InitTick+0xf4>)
 800256c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800256e:	4b20      	ldr	r3, [pc, #128]	; (80025f0 <HAL_InitTick+0xf0>)
 8002570:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002574:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_InitTick+0xf0>)
 8002578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800257a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_InitTick+0xf0>)
 800257e:	2200      	movs	r2, #0
 8002580:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <HAL_InitTick+0xf0>)
 8002584:	2200      	movs	r2, #0
 8002586:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_InitTick+0xf0>)
 800258a:	2200      	movs	r2, #0
 800258c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800258e:	4818      	ldr	r0, [pc, #96]	; (80025f0 <HAL_InitTick+0xf0>)
 8002590:	f002 faf2 	bl	8004b78 <HAL_TIM_Base_Init>
 8002594:	4603      	mov	r3, r0
 8002596:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800259a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d11b      	bne.n	80025da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80025a2:	4813      	ldr	r0, [pc, #76]	; (80025f0 <HAL_InitTick+0xf0>)
 80025a4:	f002 fb8c 	bl	8004cc0 <HAL_TIM_Base_Start_IT>
 80025a8:	4603      	mov	r3, r0
 80025aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80025ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d111      	bne.n	80025da <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025b6:	201e      	movs	r0, #30
 80025b8:	f001 f8a1 	bl	80036fe <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2b0f      	cmp	r3, #15
 80025c0:	d808      	bhi.n	80025d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80025c2:	2200      	movs	r2, #0
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	201e      	movs	r0, #30
 80025c8:	f001 f87d 	bl	80036c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <HAL_InitTick+0xf8>)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e002      	b.n	80025da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80025da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3738      	adds	r7, #56	; 0x38
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	431bde83 	.word	0x431bde83
 80025f0:	20000428 	.word	0x20000428
 80025f4:	40000800 	.word	0x40000800
 80025f8:	20000004 	.word	0x20000004

080025fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002600:	e7fe      	b.n	8002600 <NMI_Handler+0x4>

08002602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002602:	b480      	push	{r7}
 8002604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002606:	e7fe      	b.n	8002606 <HardFault_Handler+0x4>

08002608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800260c:	e7fe      	b.n	800260c <MemManage_Handler+0x4>

0800260e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260e:	b480      	push	{r7}
 8002610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002612:	e7fe      	b.n	8002612 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	e7fe      	b.n	8002618 <UsageFault_Handler+0x4>

0800261a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002626:	b480      	push	{r7}
 8002628:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800262a:	bf00      	nop
 800262c:	46bd      	mov	sp, r7
 800262e:	bc80      	pop	{r7}
 8002630:	4770      	bx	lr

08002632 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002632:	b480      	push	{r7}
 8002634:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr

0800263e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002650:	4802      	ldr	r0, [pc, #8]	; (800265c <TIM4_IRQHandler+0x10>)
 8002652:	f002 fb87 	bl	8004d64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20000428 	.word	0x20000428

08002660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002664:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002668:	f001 fa98 	bl	8003b9c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}

08002670 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	e00a      	b.n	8002698 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002682:	f3af 8000 	nop.w
 8002686:	4601      	mov	r1, r0
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	1c5a      	adds	r2, r3, #1
 800268c:	60ba      	str	r2, [r7, #8]
 800268e:	b2ca      	uxtb	r2, r1
 8002690:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	3301      	adds	r3, #1
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	697a      	ldr	r2, [r7, #20]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	429a      	cmp	r2, r3
 800269e:	dbf0      	blt.n	8002682 <_read+0x12>
  }

  return len;
 80026a0:	687b      	ldr	r3, [r7, #4]
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	60f8      	str	r0, [r7, #12]
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	e009      	b.n	80026d0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	60ba      	str	r2, [r7, #8]
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fa49 	bl	8000b5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	3301      	adds	r3, #1
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	dbf1      	blt.n	80026bc <_write+0x12>
  }
  return len;
 80026d8:	687b      	ldr	r3, [r7, #4]
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <_close>:

int _close(int file)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b083      	sub	sp, #12
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bc80      	pop	{r7}
 80026f6:	4770      	bx	lr

080026f8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002708:	605a      	str	r2, [r3, #4]
  return 0;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <_isatty>:

int _isatty(int file)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr

0800272a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800272a:	b480      	push	{r7}
 800272c:	b085      	sub	sp, #20
 800272e:	af00      	add	r7, sp, #0
 8002730:	60f8      	str	r0, [r7, #12]
 8002732:	60b9      	str	r1, [r7, #8]
 8002734:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
	...

08002744 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <_sbrk+0x5c>)
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_sbrk+0x60>)
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <_sbrk+0x64>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d102      	bne.n	8002766 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <_sbrk+0x64>)
 8002762:	4a12      	ldr	r2, [pc, #72]	; (80027ac <_sbrk+0x68>)
 8002764:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002766:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <_sbrk+0x64>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	429a      	cmp	r2, r3
 8002772:	d207      	bcs.n	8002784 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002774:	f003 fb2a 	bl	8005dcc <__errno>
 8002778:	4603      	mov	r3, r0
 800277a:	220c      	movs	r2, #12
 800277c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800277e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002782:	e009      	b.n	8002798 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <_sbrk+0x64>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <_sbrk+0x64>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4413      	add	r3, r2
 8002792:	4a05      	ldr	r2, [pc, #20]	; (80027a8 <_sbrk+0x64>)
 8002794:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3718      	adds	r7, #24
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20005000 	.word	0x20005000
 80027a4:	00000400 	.word	0x00000400
 80027a8:	20000470 	.word	0x20000470
 80027ac:	200005c8 	.word	0x200005c8

080027b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b4:	bf00      	nop
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bc80      	pop	{r7}
 80027ba:	4770      	bx	lr

080027bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027bc:	f7ff fff8 	bl	80027b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480b      	ldr	r0, [pc, #44]	; (80027f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80027c2:	490c      	ldr	r1, [pc, #48]	; (80027f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80027c4:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a09      	ldr	r2, [pc, #36]	; (80027fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80027d8:	4c09      	ldr	r4, [pc, #36]	; (8002800 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f003 faf7 	bl	8005dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80027ea:	f7fe fe3b 	bl	8001464 <main>
  bx lr
 80027ee:	4770      	bx	lr
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80027f8:	08006e44 	.word	0x08006e44
  ldr r2, =_sbss
 80027fc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002800:	200005c4 	.word	0x200005c4

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>
	...

08002808 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800280c:	4b08      	ldr	r3, [pc, #32]	; (8002830 <HAL_Init+0x28>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a07      	ldr	r2, [pc, #28]	; (8002830 <HAL_Init+0x28>)
 8002812:	f043 0310 	orr.w	r3, r3, #16
 8002816:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002818:	2003      	movs	r0, #3
 800281a:	f000 ff49 	bl	80036b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800281e:	200f      	movs	r0, #15
 8002820:	f7ff fe6e 	bl	8002500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002824:	f7ff fa34 	bl	8001c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40022000 	.word	0x40022000

08002834 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002838:	4b05      	ldr	r3, [pc, #20]	; (8002850 <HAL_IncTick+0x1c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_IncTick+0x20>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a03      	ldr	r2, [pc, #12]	; (8002854 <HAL_IncTick+0x20>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr
 8002850:	20000008 	.word	0x20000008
 8002854:	20000474 	.word	0x20000474

08002858 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return uwTick;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_GetTick+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000474 	.word	0x20000474

0800286c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fff0 	bl	8002858 <HAL_GetTick>
 8002878:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002884:	d005      	beq.n	8002892 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_Delay+0x44>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	4413      	add	r3, r2
 8002890:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002892:	bf00      	nop
 8002894:	f7ff ffe0 	bl	8002858 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d8f7      	bhi.n	8002894 <HAL_Delay+0x28>
  {
  }
}
 80028a4:	bf00      	nop
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	20000008 	.word	0x20000008

080028b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b086      	sub	sp, #24
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80028c0:	2300      	movs	r3, #0
 80028c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0be      	b.n	8002a54 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff f9fe 	bl	8001cf4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fc87 	bl	800320c <ADC_ConversionStop_Disable>
 80028fe:	4603      	mov	r3, r0
 8002900:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f003 0310 	and.w	r3, r3, #16
 800290a:	2b00      	cmp	r3, #0
 800290c:	f040 8099 	bne.w	8002a42 <HAL_ADC_Init+0x18e>
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f040 8095 	bne.w	8002a42 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002920:	f023 0302 	bic.w	r3, r3, #2
 8002924:	f043 0202 	orr.w	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002934:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	7b1b      	ldrb	r3, [r3, #12]
 800293a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800293c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	4313      	orrs	r3, r2
 8002942:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800294c:	d003      	beq.n	8002956 <HAL_ADC_Init+0xa2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	2b01      	cmp	r3, #1
 8002954:	d102      	bne.n	800295c <HAL_ADC_Init+0xa8>
 8002956:	f44f 7380 	mov.w	r3, #256	; 0x100
 800295a:	e000      	b.n	800295e <HAL_ADC_Init+0xaa>
 800295c:	2300      	movs	r3, #0
 800295e:	693a      	ldr	r2, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	7d1b      	ldrb	r3, [r3, #20]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d119      	bne.n	80029a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	7b1b      	ldrb	r3, [r3, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	699b      	ldr	r3, [r3, #24]
 8002978:	3b01      	subs	r3, #1
 800297a:	035a      	lsls	r2, r3, #13
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e00b      	b.n	80029a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	f043 0220 	orr.w	r2, r3, #32
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	693a      	ldr	r2, [r7, #16]
 80029b0:	430a      	orrs	r2, r1
 80029b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689a      	ldr	r2, [r3, #8]
 80029ba:	4b28      	ldr	r3, [pc, #160]	; (8002a5c <HAL_ADC_Init+0x1a8>)
 80029bc:	4013      	ands	r3, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	68b9      	ldr	r1, [r7, #8]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029d0:	d003      	beq.n	80029da <HAL_ADC_Init+0x126>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d104      	bne.n	80029e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	3b01      	subs	r3, #1
 80029e0:	051b      	lsls	r3, r3, #20
 80029e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <HAL_ADC_Init+0x1ac>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d10b      	bne.n	8002a20 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	f023 0303 	bic.w	r3, r3, #3
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a1e:	e018      	b.n	8002a52 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a24:	f023 0312 	bic.w	r3, r3, #18
 8002a28:	f043 0210 	orr.w	r2, r3, #16
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a34:	f043 0201 	orr.w	r2, r3, #1
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002a40:	e007      	b.n	8002a52 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a46:	f043 0210 	orr.w	r2, r3, #16
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	ffe1f7fd 	.word	0xffe1f7fd
 8002a60:	ff1f0efe 	.word	0xff1f0efe

08002a64 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e0ad      	b.n	8002bd6 <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a7e:	f043 0202 	orr.w	r2, r3, #2
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 fbc0 	bl	800320c <ADC_ConversionStop_Disable>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8002a90:	7bfb      	ldrb	r3, [r7, #15]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f040 809a 	bne.w	8002bcc <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 021f 	mvn.w	r2, #31
 8002aa0:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <HAL_ADC_DeInit+0x17c>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6899      	ldr	r1, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_ADC_DeInit+0x180>)
 8002abe:	400b      	ands	r3, r1
 8002ac0:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002ad0:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	691a      	ldr	r2, [r3, #16]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002ae0:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6812      	ldr	r2, [r2, #0]
 8002aec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002af0:	f023 030f 	bic.w	r3, r3, #15
 8002af4:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6812      	ldr	r2, [r2, #0]
 8002b00:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b04:	f023 030f 	bic.w	r3, r3, #15
 8002b08:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	6812      	ldr	r2, [r2, #0]
 8002b14:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b18:	f023 030f 	bic.w	r3, r3, #15
 8002b1c:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6812      	ldr	r2, [r2, #0]
 8002b28:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b2c:	f023 030f 	bic.w	r3, r3, #15
 8002b30:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6812      	ldr	r2, [r2, #0]
 8002b3c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b40:	f023 030f 	bic.w	r3, r3, #15
 8002b44:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6812      	ldr	r2, [r2, #0]
 8002b50:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002b54:	f023 030f 	bic.w	r3, r3, #15
 8002b58:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002b68:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002b78:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002b98:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	6812      	ldr	r2, [r2, #0]
 8002ba4:	0d9b      	lsrs	r3, r3, #22
 8002ba6:	059b      	lsls	r3, r3, #22
 8002ba8:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6812      	ldr	r2, [r2, #0]
 8002bb4:	0d9b      	lsrs	r3, r3, #22
 8002bb6:	059b      	lsls	r3, r3, #22
 8002bb8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff f902 	bl	8001dc4 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	ff3f0000 	.word	0xff3f0000
 8002be4:	ff0106f0 	.word	0xff0106f0

08002be8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_Start+0x1a>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	e098      	b.n	8002d34 <HAL_ADC_Start+0x14c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2201      	movs	r2, #1
 8002c06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f000 faa4 	bl	8003158 <ADC_Enable>
 8002c10:	4603      	mov	r3, r0
 8002c12:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c14:	7bfb      	ldrb	r3, [r7, #15]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f040 8087 	bne.w	8002d2a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c24:	f023 0301 	bic.w	r3, r3, #1
 8002c28:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <HAL_ADC_Start+0x154>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d105      	bne.n	8002c46 <HAL_ADC_Start+0x5e>
 8002c3a:	4b41      	ldr	r3, [pc, #260]	; (8002d40 <HAL_ADC_Start+0x158>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d115      	bne.n	8002c72 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d026      	beq.n	8002cae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c68:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c70:	e01d      	b.n	8002cae <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2f      	ldr	r2, [pc, #188]	; (8002d40 <HAL_ADC_Start+0x158>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_ADC_Start+0xaa>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2b      	ldr	r2, [pc, #172]	; (8002d3c <HAL_ADC_Start+0x154>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d10d      	bne.n	8002cae <HAL_ADC_Start+0xc6>
 8002c92:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <HAL_ADC_Start+0x158>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d007      	beq.n	8002cae <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d006      	beq.n	8002cc8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbe:	f023 0206 	bic.w	r2, r3, #6
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	62da      	str	r2, [r3, #44]	; 0x2c
 8002cc6:	e002      	b.n	8002cce <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0202 	mvn.w	r2, #2
 8002cde:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002cea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002cee:	d113      	bne.n	8002d18 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002cf4:	4a11      	ldr	r2, [pc, #68]	; (8002d3c <HAL_ADC_Start+0x154>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d105      	bne.n	8002d06 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002cfa:	4b11      	ldr	r3, [pc, #68]	; (8002d40 <HAL_ADC_Start+0x158>)
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d108      	bne.n	8002d18 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002d14:	609a      	str	r2, [r3, #8]
 8002d16:	e00c      	b.n	8002d32 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	e003      	b.n	8002d32 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3710      	adds	r7, #16
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	40012800 	.word	0x40012800
 8002d40:	40012400 	.word	0x40012400

08002d44 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002d5a:	f7ff fd7d 	bl	8002858 <HAL_GetTick>
 8002d5e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00b      	beq.n	8002d86 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d72:	f043 0220 	orr.w	r2, r3, #32
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e0d3      	b.n	8002f2e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d131      	bne.n	8002df8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d12a      	bne.n	8002df8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002da2:	e021      	b.n	8002de8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002daa:	d01d      	beq.n	8002de8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d007      	beq.n	8002dc2 <HAL_ADC_PollForConversion+0x7e>
 8002db2:	f7ff fd51 	bl	8002858 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d212      	bcs.n	8002de8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10b      	bne.n	8002de8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd4:	f043 0204 	orr.w	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e0a2      	b.n	8002f2e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0d6      	beq.n	8002da4 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002df6:	e070      	b.n	8002eda <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002df8:	4b4f      	ldr	r3, [pc, #316]	; (8002f38 <HAL_ADC_PollForConversion+0x1f4>)
 8002dfa:	681c      	ldr	r4, [r3, #0]
 8002dfc:	2002      	movs	r0, #2
 8002dfe:	f001 fd59 	bl	80048b4 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e02:	4603      	mov	r3, r0
 8002e04:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6919      	ldr	r1, [r3, #16]
 8002e0e:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_ADC_PollForConversion+0x1f8>)
 8002e10:	400b      	ands	r3, r1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d118      	bne.n	8002e48 <HAL_ADC_PollForConversion+0x104>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68d9      	ldr	r1, [r3, #12]
 8002e1c:	4b48      	ldr	r3, [pc, #288]	; (8002f40 <HAL_ADC_PollForConversion+0x1fc>)
 8002e1e:	400b      	ands	r3, r1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d111      	bne.n	8002e48 <HAL_ADC_PollForConversion+0x104>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	6919      	ldr	r1, [r3, #16]
 8002e2a:	4b46      	ldr	r3, [pc, #280]	; (8002f44 <HAL_ADC_PollForConversion+0x200>)
 8002e2c:	400b      	ands	r3, r1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d108      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x100>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68d9      	ldr	r1, [r3, #12]
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_ADC_PollForConversion+0x204>)
 8002e3a:	400b      	ands	r3, r1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_PollForConversion+0x100>
 8002e40:	2314      	movs	r3, #20
 8002e42:	e020      	b.n	8002e86 <HAL_ADC_PollForConversion+0x142>
 8002e44:	2329      	movs	r3, #41	; 0x29
 8002e46:	e01e      	b.n	8002e86 <HAL_ADC_PollForConversion+0x142>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6919      	ldr	r1, [r3, #16]
 8002e4e:	4b3d      	ldr	r3, [pc, #244]	; (8002f44 <HAL_ADC_PollForConversion+0x200>)
 8002e50:	400b      	ands	r3, r1
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d106      	bne.n	8002e64 <HAL_ADC_PollForConversion+0x120>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	68d9      	ldr	r1, [r3, #12]
 8002e5c:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_ADC_PollForConversion+0x204>)
 8002e5e:	400b      	ands	r3, r1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00d      	beq.n	8002e80 <HAL_ADC_PollForConversion+0x13c>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	6919      	ldr	r1, [r3, #16]
 8002e6a:	4b38      	ldr	r3, [pc, #224]	; (8002f4c <HAL_ADC_PollForConversion+0x208>)
 8002e6c:	400b      	ands	r3, r1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_ADC_PollForConversion+0x140>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68d9      	ldr	r1, [r3, #12]
 8002e78:	4b34      	ldr	r3, [pc, #208]	; (8002f4c <HAL_ADC_PollForConversion+0x208>)
 8002e7a:	400b      	ands	r3, r1
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_PollForConversion+0x140>
 8002e80:	2354      	movs	r3, #84	; 0x54
 8002e82:	e000      	b.n	8002e86 <HAL_ADC_PollForConversion+0x142>
 8002e84:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002e86:	fb02 f303 	mul.w	r3, r2, r3
 8002e8a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002e8c:	e021      	b.n	8002ed2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d01a      	beq.n	8002ecc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d007      	beq.n	8002eac <HAL_ADC_PollForConversion+0x168>
 8002e9c:	f7ff fcdc 	bl	8002858 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d20f      	bcs.n	8002ecc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d90b      	bls.n	8002ecc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb8:	f043 0204 	orr.w	r2, r3, #4
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e030      	b.n	8002f2e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d8d9      	bhi.n	8002e8e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f06f 0212 	mvn.w	r2, #18
 8002ee2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ee8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002efa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002efe:	d115      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	f043 0201 	orr.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	371c      	adds	r7, #28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd90      	pop	{r4, r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000000 	.word	0x20000000
 8002f3c:	24924924 	.word	0x24924924
 8002f40:	00924924 	.word	0x00924924
 8002f44:	12492492 	.word	0x12492492
 8002f48:	00492492 	.word	0x00492492
 8002f4c:	00249249 	.word	0x00249249

08002f50 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr

08002f68 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d101      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x20>
 8002f84:	2302      	movs	r3, #2
 8002f86:	e0dc      	b.n	8003142 <HAL_ADC_ConfigChannel+0x1da>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d81c      	bhi.n	8002fd2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	3b05      	subs	r3, #5
 8002faa:	221f      	movs	r2, #31
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	4019      	ands	r1, r3
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	6818      	ldr	r0, [r3, #0]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4413      	add	r3, r2
 8002fc2:	3b05      	subs	r3, #5
 8002fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	635a      	str	r2, [r3, #52]	; 0x34
 8002fd0:	e03c      	b.n	800304c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b0c      	cmp	r3, #12
 8002fd8:	d81c      	bhi.n	8003014 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b23      	subs	r3, #35	; 0x23
 8002fec:	221f      	movs	r2, #31
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff2:	43db      	mvns	r3, r3
 8002ff4:	4019      	ands	r1, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6818      	ldr	r0, [r3, #0]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	fa00 f203 	lsl.w	r2, r0, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	631a      	str	r2, [r3, #48]	; 0x30
 8003012:	e01b      	b.n	800304c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	4613      	mov	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	3b41      	subs	r3, #65	; 0x41
 8003026:	221f      	movs	r2, #31
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	4019      	ands	r1, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3b41      	subs	r3, #65	; 0x41
 8003040:	fa00 f203 	lsl.w	r2, r0, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b09      	cmp	r3, #9
 8003052:	d91c      	bls.n	800308e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68d9      	ldr	r1, [r3, #12]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4613      	mov	r3, r2
 8003060:	005b      	lsls	r3, r3, #1
 8003062:	4413      	add	r3, r2
 8003064:	3b1e      	subs	r3, #30
 8003066:	2207      	movs	r2, #7
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	4019      	ands	r1, r3
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6898      	ldr	r0, [r3, #8]
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	3b1e      	subs	r3, #30
 8003080:	fa00 f203 	lsl.w	r2, r0, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	430a      	orrs	r2, r1
 800308a:	60da      	str	r2, [r3, #12]
 800308c:	e019      	b.n	80030c2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6919      	ldr	r1, [r3, #16]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4613      	mov	r3, r2
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4413      	add	r3, r2
 800309e:	2207      	movs	r2, #7
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4019      	ands	r1, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6898      	ldr	r0, [r3, #8]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	4613      	mov	r3, r2
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	4413      	add	r3, r2
 80030b6:	fa00 f203 	lsl.w	r2, r0, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d003      	beq.n	80030d2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80030ce:	2b11      	cmp	r3, #17
 80030d0:	d132      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a1d      	ldr	r2, [pc, #116]	; (800314c <HAL_ADC_ConfigChannel+0x1e4>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d125      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d126      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80030f8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b10      	cmp	r3, #16
 8003100:	d11a      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003102:	4b13      	ldr	r3, [pc, #76]	; (8003150 <HAL_ADC_ConfigChannel+0x1e8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a13      	ldr	r2, [pc, #76]	; (8003154 <HAL_ADC_ConfigChannel+0x1ec>)
 8003108:	fba2 2303 	umull	r2, r3, r2, r3
 800310c:	0c9a      	lsrs	r2, r3, #18
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003118:	e002      	b.n	8003120 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3b01      	subs	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1f9      	bne.n	800311a <HAL_ADC_ConfigChannel+0x1b2>
 8003126:	e007      	b.n	8003138 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003140:	7bfb      	ldrb	r3, [r7, #15]
}
 8003142:	4618      	mov	r0, r3
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr
 800314c:	40012400 	.word	0x40012400
 8003150:	20000000 	.word	0x20000000
 8003154:	431bde83 	.word	0x431bde83

08003158 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003160:	2300      	movs	r3, #0
 8003162:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b01      	cmp	r3, #1
 8003174:	d040      	beq.n	80031f8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0201 	orr.w	r2, r2, #1
 8003184:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003186:	4b1f      	ldr	r3, [pc, #124]	; (8003204 <ADC_Enable+0xac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a1f      	ldr	r2, [pc, #124]	; (8003208 <ADC_Enable+0xb0>)
 800318c:	fba2 2303 	umull	r2, r3, r2, r3
 8003190:	0c9b      	lsrs	r3, r3, #18
 8003192:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003194:	e002      	b.n	800319c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3b01      	subs	r3, #1
 800319a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1f9      	bne.n	8003196 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031a2:	f7ff fb59 	bl	8002858 <HAL_GetTick>
 80031a6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031a8:	e01f      	b.n	80031ea <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031aa:	f7ff fb55 	bl	8002858 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d918      	bls.n	80031ea <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d011      	beq.n	80031ea <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ca:	f043 0210 	orr.w	r2, r3, #16
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	f043 0201 	orr.w	r2, r3, #1
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e007      	b.n	80031fa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d1d8      	bne.n	80031aa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000000 	.word	0x20000000
 8003208:	431bde83 	.word	0x431bde83

0800320c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d12e      	bne.n	8003284 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	689a      	ldr	r2, [r3, #8]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003236:	f7ff fb0f 	bl	8002858 <HAL_GetTick>
 800323a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800323c:	e01b      	b.n	8003276 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800323e:	f7ff fb0b 	bl	8002858 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d914      	bls.n	8003276 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d10d      	bne.n	8003276 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d0dc      	beq.n	800323e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e0ed      	b.n	800347c <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d102      	bne.n	80032b2 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fe fdbb 	bl	8001e28 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f042 0201 	orr.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032c2:	f7ff fac9 	bl	8002858 <HAL_GetTick>
 80032c6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032c8:	e012      	b.n	80032f0 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032ca:	f7ff fac5 	bl	8002858 <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	2b0a      	cmp	r3, #10
 80032d6:	d90b      	bls.n	80032f0 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2205      	movs	r2, #5
 80032e8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e0c5      	b.n	800347c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d0e5      	beq.n	80032ca <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0202 	bic.w	r2, r2, #2
 800330c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800330e:	f7ff faa3 	bl	8002858 <HAL_GetTick>
 8003312:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003314:	e012      	b.n	800333c <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003316:	f7ff fa9f 	bl	8002858 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b0a      	cmp	r3, #10
 8003322:	d90b      	bls.n	800333c <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2205      	movs	r2, #5
 8003334:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e09f      	b.n	800347c <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7e1b      	ldrb	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d108      	bne.n	8003364 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	e007      	b.n	8003374 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003372:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	7e5b      	ldrb	r3, [r3, #25]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d108      	bne.n	800338e <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	e007      	b.n	800339e <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	7e9b      	ldrb	r3, [r3, #26]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d108      	bne.n	80033b8 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0220 	orr.w	r2, r2, #32
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	e007      	b.n	80033c8 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0220 	bic.w	r2, r2, #32
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	7edb      	ldrb	r3, [r3, #27]
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d108      	bne.n	80033e2 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0210 	bic.w	r2, r2, #16
 80033de:	601a      	str	r2, [r3, #0]
 80033e0:	e007      	b.n	80033f2 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0210 	orr.w	r2, r2, #16
 80033f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	7f1b      	ldrb	r3, [r3, #28]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d108      	bne.n	800340c <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 0208 	orr.w	r2, r2, #8
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	e007      	b.n	800341c <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0208 	bic.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	7f5b      	ldrb	r3, [r3, #29]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d108      	bne.n	8003436 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0204 	orr.w	r2, r2, #4
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e007      	b.n	8003446 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0204 	bic.w	r2, r2, #4
 8003444:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	431a      	orrs	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	691b      	ldr	r3, [r3, #16]
 8003454:	431a      	orrs	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	ea42 0103 	orr.w	r1, r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	1e5a      	subs	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2201      	movs	r2, #1
 8003476:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b082      	sub	sp, #8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e015      	b.n	80034c2 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f817 	bl	80034ca <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f7fe fd23 	bl	8001ee8 <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b0:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3708      	adds	r7, #8
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b084      	sub	sp, #16
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d133      	bne.n	8003546 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80034ee:	f7ff f9b3 	bl	8002858 <HAL_GetTick>
 80034f2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80034f4:	e012      	b.n	800351c <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80034f6:	f7ff f9af 	bl	8002858 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b0a      	cmp	r3, #10
 8003502:	d90b      	bls.n	800351c <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2205      	movs	r2, #5
 8003514:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e01b      	b.n	8003554 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	f003 0301 	and.w	r3, r3, #1
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0e5      	beq.n	80034f6 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 0202 	bic.w	r2, r2, #2
 8003538:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	e006      	b.n	8003554 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
  }
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003578:	4013      	ands	r3, r2
 800357a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003588:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800358c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800358e:	4a04      	ldr	r2, [pc, #16]	; (80035a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	60d3      	str	r3, [r2, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr
 800359e:	bf00      	nop
 80035a0:	e000ed00 	.word	0xe000ed00

080035a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035a8:	4b04      	ldr	r3, [pc, #16]	; (80035bc <__NVIC_GetPriorityGrouping+0x18>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	0a1b      	lsrs	r3, r3, #8
 80035ae:	f003 0307 	and.w	r3, r3, #7
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bc80      	pop	{r7}
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	4603      	mov	r3, r0
 80035c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	db0b      	blt.n	80035ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035d2:	79fb      	ldrb	r3, [r7, #7]
 80035d4:	f003 021f 	and.w	r2, r3, #31
 80035d8:	4906      	ldr	r1, [pc, #24]	; (80035f4 <__NVIC_EnableIRQ+0x34>)
 80035da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035de:	095b      	lsrs	r3, r3, #5
 80035e0:	2001      	movs	r0, #1
 80035e2:	fa00 f202 	lsl.w	r2, r0, r2
 80035e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bc80      	pop	{r7}
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100

080035f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	4603      	mov	r3, r0
 8003600:	6039      	str	r1, [r7, #0]
 8003602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003608:	2b00      	cmp	r3, #0
 800360a:	db0a      	blt.n	8003622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	b2da      	uxtb	r2, r3
 8003610:	490c      	ldr	r1, [pc, #48]	; (8003644 <__NVIC_SetPriority+0x4c>)
 8003612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003616:	0112      	lsls	r2, r2, #4
 8003618:	b2d2      	uxtb	r2, r2
 800361a:	440b      	add	r3, r1
 800361c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003620:	e00a      	b.n	8003638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	b2da      	uxtb	r2, r3
 8003626:	4908      	ldr	r1, [pc, #32]	; (8003648 <__NVIC_SetPriority+0x50>)
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	3b04      	subs	r3, #4
 8003630:	0112      	lsls	r2, r2, #4
 8003632:	b2d2      	uxtb	r2, r2
 8003634:	440b      	add	r3, r1
 8003636:	761a      	strb	r2, [r3, #24]
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	bc80      	pop	{r7}
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	e000e100 	.word	0xe000e100
 8003648:	e000ed00 	.word	0xe000ed00

0800364c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	; 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	60b9      	str	r1, [r7, #8]
 8003656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f1c3 0307 	rsb	r3, r3, #7
 8003666:	2b04      	cmp	r3, #4
 8003668:	bf28      	it	cs
 800366a:	2304      	movcs	r3, #4
 800366c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3304      	adds	r3, #4
 8003672:	2b06      	cmp	r3, #6
 8003674:	d902      	bls.n	800367c <NVIC_EncodePriority+0x30>
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	3b03      	subs	r3, #3
 800367a:	e000      	b.n	800367e <NVIC_EncodePriority+0x32>
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003680:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	fa02 f303 	lsl.w	r3, r2, r3
 800368a:	43da      	mvns	r2, r3
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	401a      	ands	r2, r3
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003694:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	fa01 f303 	lsl.w	r3, r1, r3
 800369e:	43d9      	mvns	r1, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036a4:	4313      	orrs	r3, r2
         );
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3724      	adds	r7, #36	; 0x24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff ff4f 	bl	800355c <__NVIC_SetPriorityGrouping>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b086      	sub	sp, #24
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	4603      	mov	r3, r0
 80036ce:	60b9      	str	r1, [r7, #8]
 80036d0:	607a      	str	r2, [r7, #4]
 80036d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d8:	f7ff ff64 	bl	80035a4 <__NVIC_GetPriorityGrouping>
 80036dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	6978      	ldr	r0, [r7, #20]
 80036e4:	f7ff ffb2 	bl	800364c <NVIC_EncodePriority>
 80036e8:	4602      	mov	r2, r0
 80036ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ee:	4611      	mov	r1, r2
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff ff81 	bl	80035f8 <__NVIC_SetPriority>
}
 80036f6:	bf00      	nop
 80036f8:	3718      	adds	r7, #24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b082      	sub	sp, #8
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff ff57 	bl	80035c0 <__NVIC_EnableIRQ>
}
 8003712:	bf00      	nop
 8003714:	3708      	adds	r7, #8
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b08b      	sub	sp, #44	; 0x2c
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800372a:	2300      	movs	r3, #0
 800372c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800372e:	e169      	b.n	8003a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003730:	2201      	movs	r2, #1
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69fa      	ldr	r2, [r7, #28]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003744:	69ba      	ldr	r2, [r7, #24]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 8158 	bne.w	80039fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	4a9a      	ldr	r2, [pc, #616]	; (80039bc <HAL_GPIO_Init+0x2a0>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d05e      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003758:	4a98      	ldr	r2, [pc, #608]	; (80039bc <HAL_GPIO_Init+0x2a0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d875      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800375e:	4a98      	ldr	r2, [pc, #608]	; (80039c0 <HAL_GPIO_Init+0x2a4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d058      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003764:	4a96      	ldr	r2, [pc, #600]	; (80039c0 <HAL_GPIO_Init+0x2a4>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d86f      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800376a:	4a96      	ldr	r2, [pc, #600]	; (80039c4 <HAL_GPIO_Init+0x2a8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d052      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003770:	4a94      	ldr	r2, [pc, #592]	; (80039c4 <HAL_GPIO_Init+0x2a8>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d869      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003776:	4a94      	ldr	r2, [pc, #592]	; (80039c8 <HAL_GPIO_Init+0x2ac>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d04c      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 800377c:	4a92      	ldr	r2, [pc, #584]	; (80039c8 <HAL_GPIO_Init+0x2ac>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d863      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003782:	4a92      	ldr	r2, [pc, #584]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d046      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
 8003788:	4a90      	ldr	r2, [pc, #576]	; (80039cc <HAL_GPIO_Init+0x2b0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d85d      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 800378e:	2b12      	cmp	r3, #18
 8003790:	d82a      	bhi.n	80037e8 <HAL_GPIO_Init+0xcc>
 8003792:	2b12      	cmp	r3, #18
 8003794:	d859      	bhi.n	800384a <HAL_GPIO_Init+0x12e>
 8003796:	a201      	add	r2, pc, #4	; (adr r2, 800379c <HAL_GPIO_Init+0x80>)
 8003798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379c:	08003817 	.word	0x08003817
 80037a0:	080037f1 	.word	0x080037f1
 80037a4:	08003803 	.word	0x08003803
 80037a8:	08003845 	.word	0x08003845
 80037ac:	0800384b 	.word	0x0800384b
 80037b0:	0800384b 	.word	0x0800384b
 80037b4:	0800384b 	.word	0x0800384b
 80037b8:	0800384b 	.word	0x0800384b
 80037bc:	0800384b 	.word	0x0800384b
 80037c0:	0800384b 	.word	0x0800384b
 80037c4:	0800384b 	.word	0x0800384b
 80037c8:	0800384b 	.word	0x0800384b
 80037cc:	0800384b 	.word	0x0800384b
 80037d0:	0800384b 	.word	0x0800384b
 80037d4:	0800384b 	.word	0x0800384b
 80037d8:	0800384b 	.word	0x0800384b
 80037dc:	0800384b 	.word	0x0800384b
 80037e0:	080037f9 	.word	0x080037f9
 80037e4:	0800380d 	.word	0x0800380d
 80037e8:	4a79      	ldr	r2, [pc, #484]	; (80039d0 <HAL_GPIO_Init+0x2b4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d013      	beq.n	8003816 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80037ee:	e02c      	b.n	800384a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	623b      	str	r3, [r7, #32]
          break;
 80037f6:	e029      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	3304      	adds	r3, #4
 80037fe:	623b      	str	r3, [r7, #32]
          break;
 8003800:	e024      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	3308      	adds	r3, #8
 8003808:	623b      	str	r3, [r7, #32]
          break;
 800380a:	e01f      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	330c      	adds	r3, #12
 8003812:	623b      	str	r3, [r7, #32]
          break;
 8003814:	e01a      	b.n	800384c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d102      	bne.n	8003824 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800381e:	2304      	movs	r3, #4
 8003820:	623b      	str	r3, [r7, #32]
          break;
 8003822:	e013      	b.n	800384c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800382c:	2308      	movs	r3, #8
 800382e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	611a      	str	r2, [r3, #16]
          break;
 8003836:	e009      	b.n	800384c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003838:	2308      	movs	r3, #8
 800383a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69fa      	ldr	r2, [r7, #28]
 8003840:	615a      	str	r2, [r3, #20]
          break;
 8003842:	e003      	b.n	800384c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]
          break;
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x130>
          break;
 800384a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	2bff      	cmp	r3, #255	; 0xff
 8003850:	d801      	bhi.n	8003856 <HAL_GPIO_Init+0x13a>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	e001      	b.n	800385a <HAL_GPIO_Init+0x13e>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3304      	adds	r3, #4
 800385a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2bff      	cmp	r3, #255	; 0xff
 8003860:	d802      	bhi.n	8003868 <HAL_GPIO_Init+0x14c>
 8003862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	e002      	b.n	800386e <HAL_GPIO_Init+0x152>
 8003868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386a:	3b08      	subs	r3, #8
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	210f      	movs	r1, #15
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	fa01 f303 	lsl.w	r3, r1, r3
 800387c:	43db      	mvns	r3, r3
 800387e:	401a      	ands	r2, r3
 8003880:	6a39      	ldr	r1, [r7, #32]
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	fa01 f303 	lsl.w	r3, r1, r3
 8003888:	431a      	orrs	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80b1 	beq.w	80039fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800389c:	4b4d      	ldr	r3, [pc, #308]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 800389e:	699b      	ldr	r3, [r3, #24]
 80038a0:	4a4c      	ldr	r2, [pc, #304]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6193      	str	r3, [r2, #24]
 80038a8:	4b4a      	ldr	r3, [pc, #296]	; (80039d4 <HAL_GPIO_Init+0x2b8>)
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	f003 0301 	and.w	r3, r3, #1
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80038b4:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 80038b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b8:	089b      	lsrs	r3, r3, #2
 80038ba:	3302      	adds	r3, #2
 80038bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	220f      	movs	r2, #15
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	4013      	ands	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a40      	ldr	r2, [pc, #256]	; (80039dc <HAL_GPIO_Init+0x2c0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d013      	beq.n	8003908 <HAL_GPIO_Init+0x1ec>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a3f      	ldr	r2, [pc, #252]	; (80039e0 <HAL_GPIO_Init+0x2c4>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d00d      	beq.n	8003904 <HAL_GPIO_Init+0x1e8>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a3e      	ldr	r2, [pc, #248]	; (80039e4 <HAL_GPIO_Init+0x2c8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d007      	beq.n	8003900 <HAL_GPIO_Init+0x1e4>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4a3d      	ldr	r2, [pc, #244]	; (80039e8 <HAL_GPIO_Init+0x2cc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d101      	bne.n	80038fc <HAL_GPIO_Init+0x1e0>
 80038f8:	2303      	movs	r3, #3
 80038fa:	e006      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 80038fc:	2304      	movs	r3, #4
 80038fe:	e004      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003900:	2302      	movs	r3, #2
 8003902:	e002      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <HAL_GPIO_Init+0x1ee>
 8003908:	2300      	movs	r3, #0
 800390a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800390c:	f002 0203 	and.w	r2, r2, #3
 8003910:	0092      	lsls	r2, r2, #2
 8003912:	4093      	lsls	r3, r2
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800391a:	492f      	ldr	r1, [pc, #188]	; (80039d8 <HAL_GPIO_Init+0x2bc>)
 800391c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391e:	089b      	lsrs	r3, r3, #2
 8003920:	3302      	adds	r3, #2
 8003922:	68fa      	ldr	r2, [r7, #12]
 8003924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d006      	beq.n	8003942 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003934:	4b2d      	ldr	r3, [pc, #180]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	492c      	ldr	r1, [pc, #176]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	4313      	orrs	r3, r2
 800393e:	608b      	str	r3, [r1, #8]
 8003940:	e006      	b.n	8003950 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003942:	4b2a      	ldr	r3, [pc, #168]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003944:	689a      	ldr	r2, [r3, #8]
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	43db      	mvns	r3, r3
 800394a:	4928      	ldr	r1, [pc, #160]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800394c:	4013      	ands	r3, r2
 800394e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d006      	beq.n	800396a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800395c:	4b23      	ldr	r3, [pc, #140]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800395e:	68da      	ldr	r2, [r3, #12]
 8003960:	4922      	ldr	r1, [pc, #136]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	4313      	orrs	r3, r2
 8003966:	60cb      	str	r3, [r1, #12]
 8003968:	e006      	b.n	8003978 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800396a:	4b20      	ldr	r3, [pc, #128]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	69bb      	ldr	r3, [r7, #24]
 8003970:	43db      	mvns	r3, r3
 8003972:	491e      	ldr	r1, [pc, #120]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003974:	4013      	ands	r3, r2
 8003976:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d006      	beq.n	8003992 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003984:	4b19      	ldr	r3, [pc, #100]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	4918      	ldr	r1, [pc, #96]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	604b      	str	r3, [r1, #4]
 8003990:	e006      	b.n	80039a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003992:	4b16      	ldr	r3, [pc, #88]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	43db      	mvns	r3, r3
 800399a:	4914      	ldr	r1, [pc, #80]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 800399c:	4013      	ands	r3, r2
 800399e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d021      	beq.n	80039f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80039ac:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	490e      	ldr	r1, [pc, #56]	; (80039ec <HAL_GPIO_Init+0x2d0>)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	600b      	str	r3, [r1, #0]
 80039b8:	e021      	b.n	80039fe <HAL_GPIO_Init+0x2e2>
 80039ba:	bf00      	nop
 80039bc:	10320000 	.word	0x10320000
 80039c0:	10310000 	.word	0x10310000
 80039c4:	10220000 	.word	0x10220000
 80039c8:	10210000 	.word	0x10210000
 80039cc:	10120000 	.word	0x10120000
 80039d0:	10110000 	.word	0x10110000
 80039d4:	40021000 	.word	0x40021000
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40010800 	.word	0x40010800
 80039e0:	40010c00 	.word	0x40010c00
 80039e4:	40011000 	.word	0x40011000
 80039e8:	40011400 	.word	0x40011400
 80039ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80039f0:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	4909      	ldr	r1, [pc, #36]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80039fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a00:	3301      	adds	r3, #1
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f47f ae8e 	bne.w	8003730 <HAL_GPIO_Init+0x14>
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	372c      	adds	r7, #44	; 0x2c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40010400 	.word	0x40010400

08003a24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b089      	sub	sp, #36	; 0x24
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003a32:	e09a      	b.n	8003b6a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003a34:	2201      	movs	r2, #1
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 808d 	beq.w	8003b64 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003a4a:	4a4e      	ldr	r2, [pc, #312]	; (8003b84 <HAL_GPIO_DeInit+0x160>)
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	089b      	lsrs	r3, r3, #2
 8003a50:	3302      	adds	r3, #2
 8003a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a56:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	220f      	movs	r2, #15
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	; (8003b88 <HAL_GPIO_DeInit+0x164>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_GPIO_DeInit+0x78>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a45      	ldr	r2, [pc, #276]	; (8003b8c <HAL_GPIO_DeInit+0x168>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00d      	beq.n	8003a98 <HAL_GPIO_DeInit+0x74>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a44      	ldr	r2, [pc, #272]	; (8003b90 <HAL_GPIO_DeInit+0x16c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <HAL_GPIO_DeInit+0x70>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_GPIO_DeInit+0x170>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d101      	bne.n	8003a90 <HAL_GPIO_DeInit+0x6c>
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e006      	b.n	8003a9e <HAL_GPIO_DeInit+0x7a>
 8003a90:	2304      	movs	r3, #4
 8003a92:	e004      	b.n	8003a9e <HAL_GPIO_DeInit+0x7a>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e002      	b.n	8003a9e <HAL_GPIO_DeInit+0x7a>
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_GPIO_DeInit+0x7a>
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	f002 0203 	and.w	r2, r2, #3
 8003aa4:	0092      	lsls	r2, r2, #2
 8003aa6:	4093      	lsls	r3, r2
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d132      	bne.n	8003b14 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	43db      	mvns	r3, r3
 8003ab6:	4938      	ldr	r1, [pc, #224]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003abc:	4b36      	ldr	r3, [pc, #216]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	4934      	ldr	r1, [pc, #208]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003aca:	4b33      	ldr	r3, [pc, #204]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003acc:	68da      	ldr	r2, [r3, #12]
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	4931      	ldr	r1, [pc, #196]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003ad8:	4b2f      	ldr	r3, [pc, #188]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	43db      	mvns	r3, r3
 8003ae0:	492d      	ldr	r1, [pc, #180]	; (8003b98 <HAL_GPIO_DeInit+0x174>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	220f      	movs	r2, #15
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003af6:	4a23      	ldr	r2, [pc, #140]	; (8003b84 <HAL_GPIO_DeInit+0x160>)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	089b      	lsrs	r3, r3, #2
 8003afc:	3302      	adds	r3, #2
 8003afe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	43da      	mvns	r2, r3
 8003b06:	481f      	ldr	r0, [pc, #124]	; (8003b84 <HAL_GPIO_DeInit+0x160>)
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	089b      	lsrs	r3, r3, #2
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	3302      	adds	r3, #2
 8003b10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2bff      	cmp	r3, #255	; 0xff
 8003b18:	d801      	bhi.n	8003b1e <HAL_GPIO_DeInit+0xfa>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	e001      	b.n	8003b22 <HAL_GPIO_DeInit+0xfe>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	2bff      	cmp	r3, #255	; 0xff
 8003b28:	d802      	bhi.n	8003b30 <HAL_GPIO_DeInit+0x10c>
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	e002      	b.n	8003b36 <HAL_GPIO_DeInit+0x112>
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	3b08      	subs	r3, #8
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	210f      	movs	r1, #15
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	401a      	ands	r2, r3
 8003b48:	2104      	movs	r1, #4
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68da      	ldr	r2, [r3, #12]
 8003b5a:	69bb      	ldr	r3, [r7, #24]
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	401a      	ands	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003b6a:	683a      	ldr	r2, [r7, #0]
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	f47f af5e 	bne.w	8003a34 <HAL_GPIO_DeInit+0x10>
  }
}
 8003b78:	bf00      	nop
 8003b7a:	bf00      	nop
 8003b7c:	3724      	adds	r7, #36	; 0x24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bc80      	pop	{r7}
 8003b82:	4770      	bx	lr
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010800 	.word	0x40010800
 8003b8c:	40010c00 	.word	0x40010c00
 8003b90:	40011000 	.word	0x40011000
 8003b94:	40011400 	.word	0x40011400
 8003b98:	40010400 	.word	0x40010400

08003b9c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ba6:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	88fb      	ldrh	r3, [r7, #6]
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bb2:	4a05      	ldr	r2, [pc, #20]	; (8003bc8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 f806 	bl	8003bcc <HAL_GPIO_EXTI_Callback>
  }
}
 8003bc0:	bf00      	nop
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b084      	sub	sp, #16
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e12b      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d106      	bne.n	8003c0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7fe f98c 	bl	8001f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2224      	movs	r2, #36	; 0x24
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c44:	f000 fd0a 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 8003c48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	4a81      	ldr	r2, [pc, #516]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d807      	bhi.n	8003c64 <HAL_I2C_Init+0x84>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4a80      	ldr	r2, [pc, #512]	; (8003e58 <HAL_I2C_Init+0x278>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	bf94      	ite	ls
 8003c5c:	2301      	movls	r3, #1
 8003c5e:	2300      	movhi	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e006      	b.n	8003c72 <HAL_I2C_Init+0x92>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4a7d      	ldr	r2, [pc, #500]	; (8003e5c <HAL_I2C_Init+0x27c>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	bf94      	ite	ls
 8003c6c:	2301      	movls	r3, #1
 8003c6e:	2300      	movhi	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d001      	beq.n	8003c7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e0e7      	b.n	8003e4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4a78      	ldr	r2, [pc, #480]	; (8003e60 <HAL_I2C_Init+0x280>)
 8003c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c82:	0c9b      	lsrs	r3, r3, #18
 8003c84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68ba      	ldr	r2, [r7, #8]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	4a6a      	ldr	r2, [pc, #424]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d802      	bhi.n	8003cb4 <HAL_I2C_Init+0xd4>
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	e009      	b.n	8003cc8 <HAL_I2C_Init+0xe8>
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cba:	fb02 f303 	mul.w	r3, r2, r3
 8003cbe:	4a69      	ldr	r2, [pc, #420]	; (8003e64 <HAL_I2C_Init+0x284>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	099b      	lsrs	r3, r3, #6
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	6812      	ldr	r2, [r2, #0]
 8003ccc:	430b      	orrs	r3, r1
 8003cce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cda:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	495c      	ldr	r1, [pc, #368]	; (8003e54 <HAL_I2C_Init+0x274>)
 8003ce4:	428b      	cmp	r3, r1
 8003ce6:	d819      	bhi.n	8003d1c <HAL_I2C_Init+0x13c>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	1e59      	subs	r1, r3, #1
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	005b      	lsls	r3, r3, #1
 8003cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cf6:	1c59      	adds	r1, r3, #1
 8003cf8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cfc:	400b      	ands	r3, r1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00a      	beq.n	8003d18 <HAL_I2C_Init+0x138>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	1e59      	subs	r1, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d10:	3301      	adds	r3, #1
 8003d12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d16:	e051      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d18:	2304      	movs	r3, #4
 8003d1a:	e04f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d111      	bne.n	8003d48 <HAL_I2C_Init+0x168>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	1e58      	subs	r0, r3, #1
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	440b      	add	r3, r1
 8003d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d36:	3301      	adds	r3, #1
 8003d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	e012      	b.n	8003d6e <HAL_I2C_Init+0x18e>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	009b      	lsls	r3, r3, #2
 8003d54:	440b      	add	r3, r1
 8003d56:	0099      	lsls	r1, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5e:	3301      	adds	r3, #1
 8003d60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf0c      	ite	eq
 8003d68:	2301      	moveq	r3, #1
 8003d6a:	2300      	movne	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Init+0x196>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e022      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10e      	bne.n	8003d9c <HAL_I2C_Init+0x1bc>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	1e58      	subs	r0, r3, #1
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	460b      	mov	r3, r1
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	440b      	add	r3, r1
 8003d8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d90:	3301      	adds	r3, #1
 8003d92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	e00f      	b.n	8003dbc <HAL_I2C_Init+0x1dc>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e58      	subs	r0, r3, #1
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6859      	ldr	r1, [r3, #4]
 8003da4:	460b      	mov	r3, r1
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	0099      	lsls	r1, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db2:	3301      	adds	r3, #1
 8003db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6809      	ldr	r1, [r1, #0]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	69da      	ldr	r2, [r3, #28]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	6911      	ldr	r1, [r2, #16]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68d2      	ldr	r2, [r2, #12]
 8003df6:	4311      	orrs	r1, r2
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	6812      	ldr	r2, [r2, #0]
 8003dfc:	430b      	orrs	r3, r1
 8003dfe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	431a      	orrs	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3710      	adds	r7, #16
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	000186a0 	.word	0x000186a0
 8003e58:	001e847f 	.word	0x001e847f
 8003e5c:	003d08ff 	.word	0x003d08ff
 8003e60:	431bde83 	.word	0x431bde83
 8003e64:	10624dd3 	.word	0x10624dd3

08003e68 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e021      	b.n	8003ebe <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fe f8b2 	bl	8001ffc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ebc:	2300      	movs	r3, #0
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e272      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	f000 8087 	beq.w	8003ff6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ee8:	4b92      	ldr	r3, [pc, #584]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 030c 	and.w	r3, r3, #12
 8003ef0:	2b04      	cmp	r3, #4
 8003ef2:	d00c      	beq.n	8003f0e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ef4:	4b8f      	ldr	r3, [pc, #572]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 030c 	and.w	r3, r3, #12
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d112      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
 8003f00:	4b8c      	ldr	r3, [pc, #560]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0c:	d10b      	bne.n	8003f26 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d06c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d168      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e24c      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2e:	d106      	bne.n	8003f3e <HAL_RCC_OscConfig+0x76>
 8003f30:	4b80      	ldr	r3, [pc, #512]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a7f      	ldr	r2, [pc, #508]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f3a:	6013      	str	r3, [r2, #0]
 8003f3c:	e02e      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10c      	bne.n	8003f60 <HAL_RCC_OscConfig+0x98>
 8003f46:	4b7b      	ldr	r3, [pc, #492]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a7a      	ldr	r2, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f50:	6013      	str	r3, [r2, #0]
 8003f52:	4b78      	ldr	r3, [pc, #480]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a77      	ldr	r2, [pc, #476]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f5c:	6013      	str	r3, [r2, #0]
 8003f5e:	e01d      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f68:	d10c      	bne.n	8003f84 <HAL_RCC_OscConfig+0xbc>
 8003f6a:	4b72      	ldr	r3, [pc, #456]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a71      	ldr	r2, [pc, #452]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f74:	6013      	str	r3, [r2, #0]
 8003f76:	4b6f      	ldr	r3, [pc, #444]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6e      	ldr	r2, [pc, #440]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e00b      	b.n	8003f9c <HAL_RCC_OscConfig+0xd4>
 8003f84:	4b6b      	ldr	r3, [pc, #428]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a6a      	ldr	r2, [pc, #424]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b68      	ldr	r3, [pc, #416]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a67      	ldr	r2, [pc, #412]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f9a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d013      	beq.n	8003fcc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa4:	f7fe fc58 	bl	8002858 <HAL_GetTick>
 8003fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003faa:	e008      	b.n	8003fbe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fac:	f7fe fc54 	bl	8002858 <HAL_GetTick>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1ad3      	subs	r3, r2, r3
 8003fb6:	2b64      	cmp	r3, #100	; 0x64
 8003fb8:	d901      	bls.n	8003fbe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	e200      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	4b5d      	ldr	r3, [pc, #372]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0f0      	beq.n	8003fac <HAL_RCC_OscConfig+0xe4>
 8003fca:	e014      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fe fc44 	bl	8002858 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd4:	f7fe fc40 	bl	8002858 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b64      	cmp	r3, #100	; 0x64
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e1ec      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	4b53      	ldr	r3, [pc, #332]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x10c>
 8003ff2:	e000      	b.n	8003ff6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0302 	and.w	r3, r3, #2
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d063      	beq.n	80040ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004002:	4b4c      	ldr	r3, [pc, #304]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	f003 030c 	and.w	r3, r3, #12
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00b      	beq.n	8004026 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f003 030c 	and.w	r3, r3, #12
 8004016:	2b08      	cmp	r3, #8
 8004018:	d11c      	bne.n	8004054 <HAL_RCC_OscConfig+0x18c>
 800401a:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d116      	bne.n	8004054 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004026:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d005      	beq.n	800403e <HAL_RCC_OscConfig+0x176>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d001      	beq.n	800403e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e1c0      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403e:	4b3d      	ldr	r3, [pc, #244]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4939      	ldr	r1, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800404e:	4313      	orrs	r3, r2
 8004050:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	e03a      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d020      	beq.n	800409e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800405c:	4b36      	ldr	r3, [pc, #216]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe fbf9 	bl	8002858 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406a:	f7fe fbf5 	bl	8002858 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e1a1      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407c:	4b2d      	ldr	r3, [pc, #180]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b2a      	ldr	r3, [pc, #168]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4927      	ldr	r1, [pc, #156]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004098:	4313      	orrs	r3, r2
 800409a:	600b      	str	r3, [r1, #0]
 800409c:	e015      	b.n	80040ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800409e:	4b26      	ldr	r3, [pc, #152]	; (8004138 <HAL_RCC_OscConfig+0x270>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe fbd8 	bl	8002858 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ac:	f7fe fbd4 	bl	8002858 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e180      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040be:	4b1d      	ldr	r3, [pc, #116]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f0      	bne.n	80040ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03a      	beq.n	800414c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	699b      	ldr	r3, [r3, #24]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d019      	beq.n	8004112 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040de:	4b17      	ldr	r3, [pc, #92]	; (800413c <HAL_RCC_OscConfig+0x274>)
 80040e0:	2201      	movs	r2, #1
 80040e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fe fbb8 	bl	8002858 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ea:	e008      	b.n	80040fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040ec:	f7fe fbb4 	bl	8002858 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e160      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040fe:	4b0d      	ldr	r3, [pc, #52]	; (8004134 <HAL_RCC_OscConfig+0x26c>)
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0f0      	beq.n	80040ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800410a:	2001      	movs	r0, #1
 800410c:	f000 fafe 	bl	800470c <RCC_Delay>
 8004110:	e01c      	b.n	800414c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004112:	4b0a      	ldr	r3, [pc, #40]	; (800413c <HAL_RCC_OscConfig+0x274>)
 8004114:	2200      	movs	r2, #0
 8004116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fe fb9e 	bl	8002858 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800411e:	e00f      	b.n	8004140 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004120:	f7fe fb9a 	bl	8002858 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d908      	bls.n	8004140 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e146      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	42420000 	.word	0x42420000
 800413c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004140:	4b92      	ldr	r3, [pc, #584]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e9      	bne.n	8004120 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 80a6 	beq.w	80042a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800415a:	2300      	movs	r3, #0
 800415c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b8b      	ldr	r3, [pc, #556]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	4a87      	ldr	r2, [pc, #540]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	61d3      	str	r3, [r2, #28]
 8004176:	4b85      	ldr	r3, [pc, #532]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004178:	69db      	ldr	r3, [r3, #28]
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b82      	ldr	r3, [pc, #520]	; (8004390 <HAL_RCC_OscConfig+0x4c8>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x4c8>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_RCC_OscConfig+0x4c8>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fe fb5b 	bl	8002858 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fe fb57 	bl	8002858 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e103      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b8:	4b75      	ldr	r3, [pc, #468]	; (8004390 <HAL_RCC_OscConfig+0x4c8>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x312>
 80041cc:	4b6f      	ldr	r3, [pc, #444]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6213      	str	r3, [r2, #32]
 80041d8:	e02d      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x334>
 80041e2:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4a69      	ldr	r2, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6213      	str	r3, [r2, #32]
 80041ee:	4b67      	ldr	r3, [pc, #412]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	4a66      	ldr	r2, [pc, #408]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6213      	str	r3, [r2, #32]
 80041fa:	e01c      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x356>
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	6213      	str	r3, [r2, #32]
 8004210:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	e00b      	b.n	8004236 <HAL_RCC_OscConfig+0x36e>
 800421e:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4a5a      	ldr	r2, [pc, #360]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6213      	str	r3, [r2, #32]
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4a57      	ldr	r2, [pc, #348]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423e:	f7fe fb0b 	bl	8002858 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fe fb07 	bl	8002858 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0b1      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ee      	beq.n	8004246 <HAL_RCC_OscConfig+0x37e>
 8004268:	e014      	b.n	8004294 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800426a:	f7fe faf5 	bl	8002858 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe faf1 	bl	8002858 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e09b      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b40      	ldr	r3, [pc, #256]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800428a:	6a1b      	ldr	r3, [r3, #32]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	4a3b      	ldr	r2, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 8087 	beq.w	80043be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d061      	beq.n	8004380 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d146      	bne.n	8004352 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCC_OscConfig+0x4cc>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fe fac5 	bl	8002858 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fe fac1 	bl	8002858 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e06d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042f8:	d108      	bne.n	800430c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	4921      	ldr	r1, [pc, #132]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a19      	ldr	r1, [r3, #32]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	430b      	orrs	r3, r1
 800431e:	491b      	ldr	r1, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b1b      	ldr	r3, [pc, #108]	; (8004394 <HAL_RCC_OscConfig+0x4cc>)
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fe fa95 	bl	8002858 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004332:	f7fe fa91 	bl	8002858 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e03d      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004344:	4b11      	ldr	r3, [pc, #68]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCC_OscConfig+0x46a>
 8004350:	e035      	b.n	80043be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004352:	4b10      	ldr	r3, [pc, #64]	; (8004394 <HAL_RCC_OscConfig+0x4cc>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004358:	f7fe fa7e 	bl	8002858 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004360:	f7fe fa7a 	bl	8002858 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e026      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004372:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_RCC_OscConfig+0x4c4>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x498>
 800437e:	e01e      	b.n	80043be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	69db      	ldr	r3, [r3, #28]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e019      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
 800438c:	40021000 	.word	0x40021000
 8004390:	40007000 	.word	0x40007000
 8004394:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_OscConfig+0x500>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d001      	beq.n	80043be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	40021000 	.word	0x40021000

080043cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e0d0      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043e0:	4b6a      	ldr	r3, [pc, #424]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	683a      	ldr	r2, [r7, #0]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d910      	bls.n	8004410 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ee:	4b67      	ldr	r3, [pc, #412]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f023 0207 	bic.w	r2, r3, #7
 80043f6:	4965      	ldr	r1, [pc, #404]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043fe:	4b63      	ldr	r3, [pc, #396]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0b8      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d020      	beq.n	800445e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004428:	4b59      	ldr	r3, [pc, #356]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	4a58      	ldr	r2, [pc, #352]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800442e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004432:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f003 0308 	and.w	r3, r3, #8
 800443c:	2b00      	cmp	r3, #0
 800443e:	d005      	beq.n	800444c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004440:	4b53      	ldr	r3, [pc, #332]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a52      	ldr	r2, [pc, #328]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004446:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800444a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b50      	ldr	r3, [pc, #320]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	494d      	ldr	r1, [pc, #308]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d040      	beq.n	80044ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d107      	bne.n	8004482 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004472:	4b47      	ldr	r3, [pc, #284]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d115      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e07f      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d107      	bne.n	800449a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800448a:	4b41      	ldr	r3, [pc, #260]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d109      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e073      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800449a:	4b3d      	ldr	r3, [pc, #244]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d101      	bne.n	80044aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e06b      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044aa:	4b39      	ldr	r3, [pc, #228]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f023 0203 	bic.w	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	4936      	ldr	r1, [pc, #216]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	4313      	orrs	r3, r2
 80044ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044bc:	f7fe f9cc 	bl	8002858 <HAL_GetTick>
 80044c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044c2:	e00a      	b.n	80044da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044c4:	f7fe f9c8 	bl	8002858 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e053      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044da:	4b2d      	ldr	r3, [pc, #180]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f003 020c 	and.w	r2, r3, #12
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d1eb      	bne.n	80044c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ec:	4b27      	ldr	r3, [pc, #156]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	683a      	ldr	r2, [r7, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d210      	bcs.n	800451c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fa:	4b24      	ldr	r3, [pc, #144]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 0207 	bic.w	r2, r3, #7
 8004502:	4922      	ldr	r1, [pc, #136]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	4313      	orrs	r3, r2
 8004508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800450a:	4b20      	ldr	r3, [pc, #128]	; (800458c <HAL_RCC_ClockConfig+0x1c0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e032      	b.n	8004582 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004528:	4b19      	ldr	r3, [pc, #100]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4916      	ldr	r1, [pc, #88]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004536:	4313      	orrs	r3, r2
 8004538:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	2b00      	cmp	r3, #0
 8004544:	d009      	beq.n	800455a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004546:	4b12      	ldr	r3, [pc, #72]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	00db      	lsls	r3, r3, #3
 8004554:	490e      	ldr	r1, [pc, #56]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800455a:	f000 f821 	bl	80045a0 <HAL_RCC_GetSysClockFreq>
 800455e:	4602      	mov	r2, r0
 8004560:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <HAL_RCC_ClockConfig+0x1c4>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	091b      	lsrs	r3, r3, #4
 8004566:	f003 030f 	and.w	r3, r3, #15
 800456a:	490a      	ldr	r1, [pc, #40]	; (8004594 <HAL_RCC_ClockConfig+0x1c8>)
 800456c:	5ccb      	ldrb	r3, [r1, r3]
 800456e:	fa22 f303 	lsr.w	r3, r2, r3
 8004572:	4a09      	ldr	r2, [pc, #36]	; (8004598 <HAL_RCC_ClockConfig+0x1cc>)
 8004574:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <HAL_RCC_ClockConfig+0x1d0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f7fd ffc0 	bl	8002500 <HAL_InitTick>

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop
 800458c:	40022000 	.word	0x40022000
 8004590:	40021000 	.word	0x40021000
 8004594:	08006dc8 	.word	0x08006dc8
 8004598:	20000000 	.word	0x20000000
 800459c:	20000004 	.word	0x20000004

080045a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045a6:	2300      	movs	r3, #0
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	2300      	movs	r3, #0
 80045ac:	60bb      	str	r3, [r7, #8]
 80045ae:	2300      	movs	r3, #0
 80045b0:	617b      	str	r3, [r7, #20]
 80045b2:	2300      	movs	r3, #0
 80045b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045ba:	4b1e      	ldr	r3, [pc, #120]	; (8004634 <HAL_RCC_GetSysClockFreq+0x94>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f003 030c 	and.w	r3, r3, #12
 80045c6:	2b04      	cmp	r3, #4
 80045c8:	d002      	beq.n	80045d0 <HAL_RCC_GetSysClockFreq+0x30>
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d003      	beq.n	80045d6 <HAL_RCC_GetSysClockFreq+0x36>
 80045ce:	e027      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045d0:	4b19      	ldr	r3, [pc, #100]	; (8004638 <HAL_RCC_GetSysClockFreq+0x98>)
 80045d2:	613b      	str	r3, [r7, #16]
      break;
 80045d4:	e027      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	0c9b      	lsrs	r3, r3, #18
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	4a17      	ldr	r2, [pc, #92]	; (800463c <HAL_RCC_GetSysClockFreq+0x9c>)
 80045e0:	5cd3      	ldrb	r3, [r2, r3]
 80045e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d010      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <HAL_RCC_GetSysClockFreq+0x94>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0c5b      	lsrs	r3, r3, #17
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	4a11      	ldr	r2, [pc, #68]	; (8004640 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a0d      	ldr	r2, [pc, #52]	; (8004638 <HAL_RCC_GetSysClockFreq+0x98>)
 8004602:	fb03 f202 	mul.w	r2, r3, r2
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	fbb2 f3f3 	udiv	r3, r2, r3
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e004      	b.n	800461a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0c      	ldr	r2, [pc, #48]	; (8004644 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004614:	fb02 f303 	mul.w	r3, r2, r3
 8004618:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	613b      	str	r3, [r7, #16]
      break;
 800461e:	e002      	b.n	8004626 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <HAL_RCC_GetSysClockFreq+0x98>)
 8004622:	613b      	str	r3, [r7, #16]
      break;
 8004624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004626:	693b      	ldr	r3, [r7, #16]
}
 8004628:	4618      	mov	r0, r3
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40021000 	.word	0x40021000
 8004638:	007a1200 	.word	0x007a1200
 800463c:	08006de0 	.word	0x08006de0
 8004640:	08006df0 	.word	0x08006df0
 8004644:	003d0900 	.word	0x003d0900

08004648 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800464c:	4b02      	ldr	r3, [pc, #8]	; (8004658 <HAL_RCC_GetHCLKFreq+0x10>)
 800464e:	681b      	ldr	r3, [r3, #0]
}
 8004650:	4618      	mov	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	bc80      	pop	{r7}
 8004656:	4770      	bx	lr
 8004658:	20000000 	.word	0x20000000

0800465c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004660:	f7ff fff2 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 8004664:	4602      	mov	r2, r0
 8004666:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	f003 0307 	and.w	r3, r3, #7
 8004670:	4903      	ldr	r1, [pc, #12]	; (8004680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004672:	5ccb      	ldrb	r3, [r1, r3]
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004678:	4618      	mov	r0, r3
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	08006dd8 	.word	0x08006dd8

08004684 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004688:	f7ff ffde 	bl	8004648 <HAL_RCC_GetHCLKFreq>
 800468c:	4602      	mov	r2, r0
 800468e:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	0adb      	lsrs	r3, r3, #11
 8004694:	f003 0307 	and.w	r3, r3, #7
 8004698:	4903      	ldr	r1, [pc, #12]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800469a:	5ccb      	ldrb	r3, [r1, r3]
 800469c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	08006dd8 	.word	0x08006dd8

080046ac <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	220f      	movs	r2, #15
 80046ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046bc:	4b11      	ldr	r3, [pc, #68]	; (8004704 <HAL_RCC_GetClockConfig+0x58>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 0203 	and.w	r2, r3, #3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046c8:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <HAL_RCC_GetClockConfig+0x58>)
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <HAL_RCC_GetClockConfig+0x58>)
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <HAL_RCC_GetClockConfig+0x58>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	08db      	lsrs	r3, r3, #3
 80046e6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ee:	4b06      	ldr	r3, [pc, #24]	; (8004708 <HAL_RCC_GetClockConfig+0x5c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0207 	and.w	r2, r3, #7
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	40021000 	.word	0x40021000
 8004708:	40022000 	.word	0x40022000

0800470c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800470c:	b480      	push	{r7}
 800470e:	b085      	sub	sp, #20
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004714:	4b0a      	ldr	r3, [pc, #40]	; (8004740 <RCC_Delay+0x34>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a0a      	ldr	r2, [pc, #40]	; (8004744 <RCC_Delay+0x38>)
 800471a:	fba2 2303 	umull	r2, r3, r2, r3
 800471e:	0a5b      	lsrs	r3, r3, #9
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004728:	bf00      	nop
  }
  while (Delay --);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	60fa      	str	r2, [r7, #12]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1f9      	bne.n	8004728 <RCC_Delay+0x1c>
}
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	20000000 	.word	0x20000000
 8004744:	10624dd3 	.word	0x10624dd3

08004748 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	613b      	str	r3, [r7, #16]
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b00      	cmp	r3, #0
 8004762:	d07d      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004764:	2300      	movs	r3, #0
 8004766:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004768:	4b4f      	ldr	r3, [pc, #316]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476a:	69db      	ldr	r3, [r3, #28]
 800476c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10d      	bne.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004774:	4b4c      	ldr	r3, [pc, #304]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004776:	69db      	ldr	r3, [r3, #28]
 8004778:	4a4b      	ldr	r2, [pc, #300]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800477a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800477e:	61d3      	str	r3, [r2, #28]
 8004780:	4b49      	ldr	r3, [pc, #292]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004782:	69db      	ldr	r3, [r3, #28]
 8004784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800478c:	2301      	movs	r3, #1
 800478e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d118      	bne.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800479c:	4b43      	ldr	r3, [pc, #268]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a42      	ldr	r2, [pc, #264]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047a8:	f7fe f856 	bl	8002858 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	e008      	b.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047b0:	f7fe f852 	bl	8002858 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b64      	cmp	r3, #100	; 0x64
 80047bc:	d901      	bls.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e06d      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047c2:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047ce:	4b36      	ldr	r3, [pc, #216]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d02e      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d027      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047ec:	4b2e      	ldr	r3, [pc, #184]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047fc:	4b2c      	ldr	r3, [pc, #176]	; (80048b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80047fe:	2200      	movs	r2, #0
 8004800:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004802:	4a29      	ldr	r2, [pc, #164]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d014      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004812:	f7fe f821 	bl	8002858 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004818:	e00a      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800481a:	f7fe f81d 	bl	8002858 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	f241 3288 	movw	r2, #5000	; 0x1388
 8004828:	4293      	cmp	r3, r2
 800482a:	d901      	bls.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e036      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004830:	4b1d      	ldr	r3, [pc, #116]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004832:	6a1b      	ldr	r3, [r3, #32]
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ee      	beq.n	800481a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800483e:	6a1b      	ldr	r3, [r3, #32]
 8004840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	4917      	ldr	r1, [pc, #92]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800484a:	4313      	orrs	r3, r2
 800484c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004854:	4b14      	ldr	r3, [pc, #80]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004856:	69db      	ldr	r3, [r3, #28]
 8004858:	4a13      	ldr	r2, [pc, #76]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800485a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800485e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d008      	beq.n	800487e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800486c:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	490b      	ldr	r1, [pc, #44]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800487a:	4313      	orrs	r3, r2
 800487c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800488a:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	4904      	ldr	r1, [pc, #16]	; (80048a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004898:	4313      	orrs	r3, r2
 800489a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800489c:	2300      	movs	r3, #0
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3718      	adds	r7, #24
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	40021000 	.word	0x40021000
 80048ac:	40007000 	.word	0x40007000
 80048b0:	42420440 	.word	0x42420440

080048b4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	2300      	movs	r3, #0
 80048c2:	61fb      	str	r3, [r7, #28]
 80048c4:	2300      	movs	r3, #0
 80048c6:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]
 80048cc:	2300      	movs	r3, #0
 80048ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b10      	cmp	r3, #16
 80048d4:	d00a      	beq.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b10      	cmp	r3, #16
 80048da:	f200 808a 	bhi.w	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d045      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d075      	beq.n	80049d6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80048ea:	e082      	b.n	80049f2 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80048ec:	4b46      	ldr	r3, [pc, #280]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80048f2:	4b45      	ldr	r3, [pc, #276]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d07b      	beq.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	0c9b      	lsrs	r3, r3, #18
 8004902:	f003 030f 	and.w	r3, r3, #15
 8004906:	4a41      	ldr	r2, [pc, #260]	; (8004a0c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004908:	5cd3      	ldrb	r3, [r2, r3]
 800490a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d015      	beq.n	8004942 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004916:	4b3c      	ldr	r3, [pc, #240]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	0c5b      	lsrs	r3, r3, #17
 800491c:	f003 0301 	and.w	r3, r3, #1
 8004920:	4a3b      	ldr	r2, [pc, #236]	; (8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004922:	5cd3      	ldrb	r3, [r2, r3]
 8004924:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004930:	4a38      	ldr	r2, [pc, #224]	; (8004a14 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	fbb2 f2f3 	udiv	r2, r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	fb02 f303 	mul.w	r3, r2, r3
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	e004      	b.n	800494c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	4a34      	ldr	r2, [pc, #208]	; (8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004946:	fb02 f303 	mul.w	r3, r2, r3
 800494a:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800494c:	4b2e      	ldr	r3, [pc, #184]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004958:	d102      	bne.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	61bb      	str	r3, [r7, #24]
      break;
 800495e:	e04a      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	005b      	lsls	r3, r3, #1
 8004964:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004966:	fba2 2303 	umull	r2, r3, r2, r3
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	61bb      	str	r3, [r7, #24]
      break;
 800496e:	e042      	b.n	80049f6 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004970:	4b25      	ldr	r3, [pc, #148]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800497c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004980:	d108      	bne.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800498c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e01f      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800499a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800499e:	d109      	bne.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80049a0:	4b19      	ldr	r3, [pc, #100]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80049ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	e00f      	b.n	80049d4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049be:	d11c      	bne.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049c0:	4b11      	ldr	r3, [pc, #68]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d016      	beq.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80049cc:	f24f 4324 	movw	r3, #62500	; 0xf424
 80049d0:	61bb      	str	r3, [r7, #24]
      break;
 80049d2:	e012      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80049d4:	e011      	b.n	80049fa <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80049d6:	f7ff fe55 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 80049da:	4602      	mov	r2, r0
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	0b9b      	lsrs	r3, r3, #14
 80049e2:	f003 0303 	and.w	r3, r3, #3
 80049e6:	3301      	adds	r3, #1
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	61bb      	str	r3, [r7, #24]
      break;
 80049f0:	e004      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049f2:	bf00      	nop
 80049f4:	e002      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049f6:	bf00      	nop
 80049f8:	e000      	b.n	80049fc <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80049fa:	bf00      	nop
    }
  }
  return (frequency);
 80049fc:	69bb      	ldr	r3, [r7, #24]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	08006df4 	.word	0x08006df4
 8004a10:	08006e04 	.word	0x08006e04
 8004a14:	007a1200 	.word	0x007a1200
 8004a18:	003d0900 	.word	0x003d0900
 8004a1c:	aaaaaaab 	.word	0xaaaaaaab

08004a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e076      	b.n	8004b20 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d108      	bne.n	8004a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a42:	d009      	beq.n	8004a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	61da      	str	r2, [r3, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d106      	bne.n	8004a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7fd fafc 	bl	8002070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2202      	movs	r2, #2
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	431a      	orrs	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ac8:	431a      	orrs	r2, r3
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004adc:	ea42 0103 	orr.w	r1, r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	699b      	ldr	r3, [r3, #24]
 8004af4:	0c1a      	lsrs	r2, r3, #16
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f002 0204 	and.w	r2, r2, #4
 8004afe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b082      	sub	sp, #8
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e01a      	b.n	8004b70 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7fd fb12 	bl	800217c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b082      	sub	sp, #8
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e041      	b.n	8004c0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f7fd fb1e 	bl	80021e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f000 fac8 	bl	800514c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2201      	movs	r2, #1
 8004c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3708      	adds	r7, #8
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b082      	sub	sp, #8
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2202      	movs	r2, #2
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	6a1a      	ldr	r2, [r3, #32]
 8004c2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c30:	4013      	ands	r3, r2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d10f      	bne.n	8004c56 <HAL_TIM_Base_DeInit+0x40>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6a1a      	ldr	r2, [r3, #32]
 8004c3c:	f240 4344 	movw	r3, #1092	; 0x444
 8004c40:	4013      	ands	r3, r2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d107      	bne.n	8004c56 <HAL_TIM_Base_DeInit+0x40>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f7fd fb06 	bl	8002268 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
	...

08004cc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d001      	beq.n	8004cd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	e03a      	b.n	8004d4e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2202      	movs	r2, #2
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f042 0201 	orr.w	r2, r2, #1
 8004cee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a18      	ldr	r2, [pc, #96]	; (8004d58 <HAL_TIM_Base_Start_IT+0x98>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00e      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x58>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d02:	d009      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x58>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a14      	ldr	r2, [pc, #80]	; (8004d5c <HAL_TIM_Base_Start_IT+0x9c>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d004      	beq.n	8004d18 <HAL_TIM_Base_Start_IT+0x58>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a13      	ldr	r2, [pc, #76]	; (8004d60 <HAL_TIM_Base_Start_IT+0xa0>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d111      	bne.n	8004d3c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b06      	cmp	r3, #6
 8004d28:	d010      	beq.n	8004d4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f042 0201 	orr.w	r2, r2, #1
 8004d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3a:	e007      	b.n	8004d4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bc80      	pop	{r7}
 8004d56:	4770      	bx	lr
 8004d58:	40012c00 	.word	0x40012c00
 8004d5c:	40000400 	.word	0x40000400
 8004d60:	40000800 	.word	0x40000800

08004d64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0302 	and.w	r3, r3, #2
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0202 	mvn.w	r2, #2
 8004d90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f9b4 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f9a7 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f9b6 	bl	8005126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d122      	bne.n	8004e14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0304 	and.w	r3, r3, #4
 8004dd8:	2b04      	cmp	r3, #4
 8004dda:	d11b      	bne.n	8004e14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0204 	mvn.w	r2, #4
 8004de4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2202      	movs	r2, #2
 8004dea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 f98a 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004e00:	e005      	b.n	8004e0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f97d 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f98c 	bl	8005126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2200      	movs	r2, #0
 8004e12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d122      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	f003 0308 	and.w	r3, r3, #8
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d11b      	bne.n	8004e68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f06f 0208 	mvn.w	r2, #8
 8004e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2204      	movs	r2, #4
 8004e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	f003 0303 	and.w	r3, r3, #3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f000 f960 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004e54:	e005      	b.n	8004e62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f953 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 f962 	bl	8005126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0310 	and.w	r3, r3, #16
 8004e72:	2b10      	cmp	r3, #16
 8004e74:	d122      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	2b10      	cmp	r3, #16
 8004e82:	d11b      	bne.n	8004ebc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0210 	mvn.w	r2, #16
 8004e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2208      	movs	r2, #8
 8004e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f936 	bl	8005114 <HAL_TIM_IC_CaptureCallback>
 8004ea8:	e005      	b.n	8004eb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 f929 	bl	8005102 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f938 	bl	8005126 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	691b      	ldr	r3, [r3, #16]
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d10e      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d107      	bne.n	8004ee8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0201 	mvn.w	r2, #1
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc feb4 	bl	8001c50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef2:	2b80      	cmp	r3, #128	; 0x80
 8004ef4:	d10e      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d107      	bne.n	8004f14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 fa7b 	bl	800540a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f1e:	2b40      	cmp	r3, #64	; 0x40
 8004f20:	d10e      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b40      	cmp	r3, #64	; 0x40
 8004f2e:	d107      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f8fc 	bl	8005138 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b20      	cmp	r3, #32
 8004f4c:	d10e      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0320 	and.w	r3, r3, #32
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0220 	mvn.w	r2, #32
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fa46 	bl	80053f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <HAL_TIM_ConfigClockSource+0x1c>
 8004f8c:	2302      	movs	r3, #2
 8004f8e:	e0b4      	b.n	80050fa <HAL_TIM_ConfigClockSource+0x186>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2202      	movs	r2, #2
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fb6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fc8:	d03e      	beq.n	8005048 <HAL_TIM_ConfigClockSource+0xd4>
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fce:	f200 8087 	bhi.w	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd6:	f000 8086 	beq.w	80050e6 <HAL_TIM_ConfigClockSource+0x172>
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fde:	d87f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe0:	2b70      	cmp	r3, #112	; 0x70
 8004fe2:	d01a      	beq.n	800501a <HAL_TIM_ConfigClockSource+0xa6>
 8004fe4:	2b70      	cmp	r3, #112	; 0x70
 8004fe6:	d87b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004fe8:	2b60      	cmp	r3, #96	; 0x60
 8004fea:	d050      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x11a>
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d877      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff0:	2b50      	cmp	r3, #80	; 0x50
 8004ff2:	d03c      	beq.n	800506e <HAL_TIM_ConfigClockSource+0xfa>
 8004ff4:	2b50      	cmp	r3, #80	; 0x50
 8004ff6:	d873      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d058      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x13a>
 8004ffc:	2b40      	cmp	r3, #64	; 0x40
 8004ffe:	d86f      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b30      	cmp	r3, #48	; 0x30
 8005002:	d064      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005004:	2b30      	cmp	r3, #48	; 0x30
 8005006:	d86b      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b20      	cmp	r3, #32
 800500a:	d060      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 800500c:	2b20      	cmp	r3, #32
 800500e:	d867      	bhi.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b00      	cmp	r3, #0
 8005012:	d05c      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005014:	2b10      	cmp	r3, #16
 8005016:	d05a      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x15a>
 8005018:	e062      	b.n	80050e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	f000 f968 	bl	80052fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800503c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	609a      	str	r2, [r3, #8]
      break;
 8005046:	e04f      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	f000 f951 	bl	80052fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	689a      	ldr	r2, [r3, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800506a:	609a      	str	r2, [r3, #8]
      break;
 800506c:	e03c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507a:	461a      	mov	r2, r3
 800507c:	f000 f8c8 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2150      	movs	r1, #80	; 0x50
 8005086:	4618      	mov	r0, r3
 8005088:	f000 f91f 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 800508c:	e02c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800509a:	461a      	mov	r2, r3
 800509c:	f000 f8e6 	bl	800526c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2160      	movs	r1, #96	; 0x60
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 f90f 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 80050ac:	e01c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ba:	461a      	mov	r2, r3
 80050bc:	f000 f8a8 	bl	8005210 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2140      	movs	r1, #64	; 0x40
 80050c6:	4618      	mov	r0, r3
 80050c8:	f000 f8ff 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 80050cc:	e00c      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4619      	mov	r1, r3
 80050d8:	4610      	mov	r0, r2
 80050da:	f000 f8f6 	bl	80052ca <TIM_ITRx_SetConfig>
      break;
 80050de:	e003      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	73fb      	strb	r3, [r7, #15]
      break;
 80050e4:	e000      	b.n	80050e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80050f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3710      	adds	r7, #16
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005102:	b480      	push	{r7}
 8005104:	b083      	sub	sp, #12
 8005106:	af00      	add	r7, sp, #0
 8005108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800510a:	bf00      	nop
 800510c:	370c      	adds	r7, #12
 800510e:	46bd      	mov	sp, r7
 8005110:	bc80      	pop	{r7}
 8005112:	4770      	bx	lr

08005114 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr

08005126 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800512e:	bf00      	nop
 8005130:	370c      	adds	r7, #12
 8005132:	46bd      	mov	sp, r7
 8005134:	bc80      	pop	{r7}
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	bc80      	pop	{r7}
 8005148:	4770      	bx	lr
	...

0800514c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800514c:	b480      	push	{r7}
 800514e:	b085      	sub	sp, #20
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a29      	ldr	r2, [pc, #164]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00b      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800516a:	d007      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a26      	ldr	r2, [pc, #152]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d003      	beq.n	800517c <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a25      	ldr	r2, [pc, #148]	; (800520c <TIM_Base_SetConfig+0xc0>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d108      	bne.n	800518e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00b      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800519c:	d007      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <TIM_Base_SetConfig+0xbc>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d003      	beq.n	80051ae <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a18      	ldr	r2, [pc, #96]	; (800520c <TIM_Base_SetConfig+0xc0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d108      	bne.n	80051c0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4313      	orrs	r3, r2
 80051be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a07      	ldr	r2, [pc, #28]	; (8005204 <TIM_Base_SetConfig+0xb8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d103      	bne.n	80051f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	691a      	ldr	r2, [r3, #16]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	615a      	str	r2, [r3, #20]
}
 80051fa:	bf00      	nop
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	bc80      	pop	{r7}
 8005202:	4770      	bx	lr
 8005204:	40012c00 	.word	0x40012c00
 8005208:	40000400 	.word	0x40000400
 800520c:	40000800 	.word	0x40000800

08005210 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6a1b      	ldr	r3, [r3, #32]
 8005220:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6a1b      	ldr	r3, [r3, #32]
 8005226:	f023 0201 	bic.w	r2, r3, #1
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800523a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	693a      	ldr	r2, [r7, #16]
 8005242:	4313      	orrs	r3, r2
 8005244:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	f023 030a 	bic.w	r3, r3, #10
 800524c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	4313      	orrs	r3, r2
 8005254:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	621a      	str	r2, [r3, #32]
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr

0800526c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	f023 0210 	bic.w	r2, r3, #16
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	031b      	lsls	r3, r3, #12
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	4313      	orrs	r3, r2
 80052a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	011b      	lsls	r3, r3, #4
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bc80      	pop	{r7}
 80052c8:	4770      	bx	lr

080052ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b085      	sub	sp, #20
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
 80052d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	f043 0307 	orr.w	r3, r3, #7
 80052ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]
}
 80052f4:	bf00      	nop
 80052f6:	3714      	adds	r7, #20
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bc80      	pop	{r7}
 80052fc:	4770      	bx	lr

080052fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052fe:	b480      	push	{r7}
 8005300:	b087      	sub	sp, #28
 8005302:	af00      	add	r7, sp, #0
 8005304:	60f8      	str	r0, [r7, #12]
 8005306:	60b9      	str	r1, [r7, #8]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005318:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	021a      	lsls	r2, r3, #8
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	431a      	orrs	r2, r3
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	4313      	orrs	r3, r2
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	4313      	orrs	r3, r2
 800532a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	609a      	str	r2, [r3, #8]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	bc80      	pop	{r7}
 800533a:	4770      	bx	lr

0800533c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005350:	2302      	movs	r3, #2
 8005352:	e046      	b.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a16      	ldr	r2, [pc, #88]	; (80053ec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d00e      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053a0:	d009      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a12      	ldr	r2, [pc, #72]	; (80053f0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d004      	beq.n	80053b6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a10      	ldr	r2, [pc, #64]	; (80053f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10c      	bne.n	80053d0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68ba      	ldr	r2, [r7, #8]
 80053ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bc80      	pop	{r7}
 80053ea:	4770      	bx	lr
 80053ec:	40012c00 	.word	0x40012c00
 80053f0:	40000400 	.word	0x40000400
 80053f4:	40000800 	.word	0x40000800

080053f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	bc80      	pop	{r7}
 8005408:	4770      	bx	lr

0800540a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005412:	bf00      	nop
 8005414:	370c      	adds	r7, #12
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d101      	bne.n	800542e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	e042      	b.n	80054b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005434:	b2db      	uxtb	r3, r3
 8005436:	2b00      	cmp	r3, #0
 8005438:	d106      	bne.n	8005448 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7fc ff42 	bl	80022cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2224      	movs	r2, #36	; 0x24
 800544c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800545e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f9e1 	bl	8005828 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	691a      	ldr	r2, [r3, #16]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005474:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	695a      	ldr	r2, [r3, #20]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005484:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68da      	ldr	r2, [r3, #12]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005494:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3708      	adds	r7, #8
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	e024      	b.n	8005518 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2224      	movs	r2, #36	; 0x24
 80054d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	68da      	ldr	r2, [r3, #12]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e4:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fc ffc4 	bl	8002474 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2200      	movs	r2, #0
 80054f0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005516:	2300      	movs	r3, #0
}
 8005518:	4618      	mov	r0, r3
 800551a:	3708      	adds	r7, #8
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af02      	add	r7, sp, #8
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	603b      	str	r3, [r7, #0]
 800552c:	4613      	mov	r3, r2
 800552e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005530:	2300      	movs	r3, #0
 8005532:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b20      	cmp	r3, #32
 800553e:	d16d      	bne.n	800561c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d002      	beq.n	800554c <HAL_UART_Transmit+0x2c>
 8005546:	88fb      	ldrh	r3, [r7, #6]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	e066      	b.n	800561e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2221      	movs	r2, #33	; 0x21
 800555a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800555e:	f7fd f97b 	bl	8002858 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	88fa      	ldrh	r2, [r7, #6]
 8005568:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	88fa      	ldrh	r2, [r7, #6]
 800556e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005578:	d108      	bne.n	800558c <HAL_UART_Transmit+0x6c>
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d104      	bne.n	800558c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	e003      	b.n	8005594 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005594:	e02a      	b.n	80055ec <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	697b      	ldr	r3, [r7, #20]
 800559c:	2200      	movs	r2, #0
 800559e:	2180      	movs	r1, #128	; 0x80
 80055a0:	68f8      	ldr	r0, [r7, #12]
 80055a2:	f000 f8d2 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055ac:	2303      	movs	r3, #3
 80055ae:	e036      	b.n	800561e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055b0:	69fb      	ldr	r3, [r7, #28]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	881b      	ldrh	r3, [r3, #0]
 80055ba:	461a      	mov	r2, r3
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	3302      	adds	r3, #2
 80055ca:	61bb      	str	r3, [r7, #24]
 80055cc:	e007      	b.n	80055de <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	781a      	ldrb	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	3301      	adds	r3, #1
 80055dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	3b01      	subs	r3, #1
 80055e6:	b29a      	uxth	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1cf      	bne.n	8005596 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	9300      	str	r3, [sp, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	2200      	movs	r2, #0
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f000 f8a2 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 8005606:	4603      	mov	r3, r0
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e006      	b.n	800561e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005618:	2300      	movs	r3, #0
 800561a:	e000      	b.n	800561e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800561c:	2302      	movs	r3, #2
  }
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	b08a      	sub	sp, #40	; 0x28
 800562a:	af02      	add	r7, sp, #8
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	603b      	str	r3, [r7, #0]
 8005632:	4613      	mov	r3, r2
 8005634:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b20      	cmp	r3, #32
 8005644:	d17c      	bne.n	8005740 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_Receive+0x2c>
 800564c:	88fb      	ldrh	r3, [r7, #6]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e075      	b.n	8005742 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2222      	movs	r2, #34	; 0x22
 8005660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800566a:	f7fd f8f5 	bl	8002858 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	88fa      	ldrh	r2, [r7, #6]
 8005674:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	88fa      	ldrh	r2, [r7, #6]
 800567a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005684:	d108      	bne.n	8005698 <HAL_UART_Receive+0x72>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	691b      	ldr	r3, [r3, #16]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d104      	bne.n	8005698 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005692:	68bb      	ldr	r3, [r7, #8]
 8005694:	61bb      	str	r3, [r7, #24]
 8005696:	e003      	b.n	80056a0 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800569c:	2300      	movs	r3, #0
 800569e:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80056a0:	e043      	b.n	800572a <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	2120      	movs	r1, #32
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f84c 	bl	800574a <UART_WaitOnFlagUntilTimeout>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e042      	b.n	8005742 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d10c      	bne.n	80056dc <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80056d4:	69bb      	ldr	r3, [r7, #24]
 80056d6:	3302      	adds	r3, #2
 80056d8:	61bb      	str	r3, [r7, #24]
 80056da:	e01f      	b.n	800571c <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e4:	d007      	beq.n	80056f6 <HAL_UART_Receive+0xd0>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	689b      	ldr	r3, [r3, #8]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10a      	bne.n	8005704 <HAL_UART_Receive+0xde>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	691b      	ldr	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	b2da      	uxtb	r2, r3
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	701a      	strb	r2, [r3, #0]
 8005702:	e008      	b.n	8005716 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005710:	b2da      	uxtb	r2, r3
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	3301      	adds	r3, #1
 800571a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005720:	b29b      	uxth	r3, r3
 8005722:	3b01      	subs	r3, #1
 8005724:	b29a      	uxth	r2, r3
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1b6      	bne.n	80056a2 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 800573c:	2300      	movs	r3, #0
 800573e:	e000      	b.n	8005742 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005740:	2302      	movs	r3, #2
  }
}
 8005742:	4618      	mov	r0, r3
 8005744:	3720      	adds	r7, #32
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b090      	sub	sp, #64	; 0x40
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	603b      	str	r3, [r7, #0]
 8005756:	4613      	mov	r3, r2
 8005758:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800575a:	e050      	b.n	80057fe <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800575c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005762:	d04c      	beq.n	80057fe <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005764:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005766:	2b00      	cmp	r3, #0
 8005768:	d007      	beq.n	800577a <UART_WaitOnFlagUntilTimeout+0x30>
 800576a:	f7fd f875 	bl	8002858 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005776:	429a      	cmp	r2, r3
 8005778:	d241      	bcs.n	80057fe <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	330c      	adds	r3, #12
 8005780:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005790:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800579a:	637a      	str	r2, [r7, #52]	; 0x34
 800579c:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80057a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80057a2:	e841 2300 	strex	r3, r2, [r1]
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80057a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1e5      	bne.n	800577a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	3314      	adds	r3, #20
 80057b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	e853 3f00 	ldrex	r3, [r3]
 80057bc:	613b      	str	r3, [r7, #16]
   return(result);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	f023 0301 	bic.w	r3, r3, #1
 80057c4:	63bb      	str	r3, [r7, #56]	; 0x38
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3314      	adds	r3, #20
 80057cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ce:	623a      	str	r2, [r7, #32]
 80057d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	69f9      	ldr	r1, [r7, #28]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	61bb      	str	r3, [r7, #24]
   return(result);
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e5      	bne.n	80057ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e00f      	b.n	800581e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	4013      	ands	r3, r2
 8005808:	68ba      	ldr	r2, [r7, #8]
 800580a:	429a      	cmp	r2, r3
 800580c:	bf0c      	ite	eq
 800580e:	2301      	moveq	r3, #1
 8005810:	2300      	movne	r3, #0
 8005812:	b2db      	uxtb	r3, r3
 8005814:	461a      	mov	r2, r3
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	429a      	cmp	r2, r3
 800581a:	d09f      	beq.n	800575c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3740      	adds	r7, #64	; 0x40
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	4313      	orrs	r3, r2
 8005856:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005862:	f023 030c 	bic.w	r3, r3, #12
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	6812      	ldr	r2, [r2, #0]
 800586a:	68b9      	ldr	r1, [r7, #8]
 800586c:	430b      	orrs	r3, r1
 800586e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a2c      	ldr	r2, [pc, #176]	; (800593c <UART_SetConfig+0x114>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d103      	bne.n	8005898 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005890:	f7fe fef8 	bl	8004684 <HAL_RCC_GetPCLK2Freq>
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	e002      	b.n	800589e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005898:	f7fe fee0 	bl	800465c <HAL_RCC_GetPCLK1Freq>
 800589c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4613      	mov	r3, r2
 80058a2:	009b      	lsls	r3, r3, #2
 80058a4:	4413      	add	r3, r2
 80058a6:	009a      	lsls	r2, r3, #2
 80058a8:	441a      	add	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b4:	4a22      	ldr	r2, [pc, #136]	; (8005940 <UART_SetConfig+0x118>)
 80058b6:	fba2 2303 	umull	r2, r3, r2, r3
 80058ba:	095b      	lsrs	r3, r3, #5
 80058bc:	0119      	lsls	r1, r3, #4
 80058be:	68fa      	ldr	r2, [r7, #12]
 80058c0:	4613      	mov	r3, r2
 80058c2:	009b      	lsls	r3, r3, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	009a      	lsls	r2, r3, #2
 80058c8:	441a      	add	r2, r3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80058d4:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <UART_SetConfig+0x118>)
 80058d6:	fba3 0302 	umull	r0, r3, r3, r2
 80058da:	095b      	lsrs	r3, r3, #5
 80058dc:	2064      	movs	r0, #100	; 0x64
 80058de:	fb00 f303 	mul.w	r3, r0, r3
 80058e2:	1ad3      	subs	r3, r2, r3
 80058e4:	011b      	lsls	r3, r3, #4
 80058e6:	3332      	adds	r3, #50	; 0x32
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <UART_SetConfig+0x118>)
 80058ea:	fba2 2303 	umull	r2, r3, r2, r3
 80058ee:	095b      	lsrs	r3, r3, #5
 80058f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058f4:	4419      	add	r1, r3
 80058f6:	68fa      	ldr	r2, [r7, #12]
 80058f8:	4613      	mov	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4413      	add	r3, r2
 80058fe:	009a      	lsls	r2, r3, #2
 8005900:	441a      	add	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	fbb2 f2f3 	udiv	r2, r2, r3
 800590c:	4b0c      	ldr	r3, [pc, #48]	; (8005940 <UART_SetConfig+0x118>)
 800590e:	fba3 0302 	umull	r0, r3, r3, r2
 8005912:	095b      	lsrs	r3, r3, #5
 8005914:	2064      	movs	r0, #100	; 0x64
 8005916:	fb00 f303 	mul.w	r3, r0, r3
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	3332      	adds	r3, #50	; 0x32
 8005920:	4a07      	ldr	r2, [pc, #28]	; (8005940 <UART_SetConfig+0x118>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	f003 020f 	and.w	r2, r3, #15
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	440a      	add	r2, r1
 8005932:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005934:	bf00      	nop
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40013800 	.word	0x40013800
 8005940:	51eb851f 	.word	0x51eb851f

08005944 <std>:
 8005944:	2300      	movs	r3, #0
 8005946:	b510      	push	{r4, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	e9c0 3300 	strd	r3, r3, [r0]
 800594e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005952:	6083      	str	r3, [r0, #8]
 8005954:	8181      	strh	r1, [r0, #12]
 8005956:	6643      	str	r3, [r0, #100]	; 0x64
 8005958:	81c2      	strh	r2, [r0, #14]
 800595a:	6183      	str	r3, [r0, #24]
 800595c:	4619      	mov	r1, r3
 800595e:	2208      	movs	r2, #8
 8005960:	305c      	adds	r0, #92	; 0x5c
 8005962:	f000 f9e5 	bl	8005d30 <memset>
 8005966:	4b05      	ldr	r3, [pc, #20]	; (800597c <std+0x38>)
 8005968:	6224      	str	r4, [r4, #32]
 800596a:	6263      	str	r3, [r4, #36]	; 0x24
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <std+0x3c>)
 800596e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005970:	4b04      	ldr	r3, [pc, #16]	; (8005984 <std+0x40>)
 8005972:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005974:	4b04      	ldr	r3, [pc, #16]	; (8005988 <std+0x44>)
 8005976:	6323      	str	r3, [r4, #48]	; 0x30
 8005978:	bd10      	pop	{r4, pc}
 800597a:	bf00      	nop
 800597c:	08005b81 	.word	0x08005b81
 8005980:	08005ba3 	.word	0x08005ba3
 8005984:	08005bdb 	.word	0x08005bdb
 8005988:	08005bff 	.word	0x08005bff

0800598c <stdio_exit_handler>:
 800598c:	4a02      	ldr	r2, [pc, #8]	; (8005998 <stdio_exit_handler+0xc>)
 800598e:	4903      	ldr	r1, [pc, #12]	; (800599c <stdio_exit_handler+0x10>)
 8005990:	4803      	ldr	r0, [pc, #12]	; (80059a0 <stdio_exit_handler+0x14>)
 8005992:	f000 b869 	b.w	8005a68 <_fwalk_sglue>
 8005996:	bf00      	nop
 8005998:	2000000c 	.word	0x2000000c
 800599c:	080066bd 	.word	0x080066bd
 80059a0:	20000018 	.word	0x20000018

080059a4 <cleanup_stdio>:
 80059a4:	6841      	ldr	r1, [r0, #4]
 80059a6:	4b0c      	ldr	r3, [pc, #48]	; (80059d8 <cleanup_stdio+0x34>)
 80059a8:	b510      	push	{r4, lr}
 80059aa:	4299      	cmp	r1, r3
 80059ac:	4604      	mov	r4, r0
 80059ae:	d001      	beq.n	80059b4 <cleanup_stdio+0x10>
 80059b0:	f000 fe84 	bl	80066bc <_fflush_r>
 80059b4:	68a1      	ldr	r1, [r4, #8]
 80059b6:	4b09      	ldr	r3, [pc, #36]	; (80059dc <cleanup_stdio+0x38>)
 80059b8:	4299      	cmp	r1, r3
 80059ba:	d002      	beq.n	80059c2 <cleanup_stdio+0x1e>
 80059bc:	4620      	mov	r0, r4
 80059be:	f000 fe7d 	bl	80066bc <_fflush_r>
 80059c2:	68e1      	ldr	r1, [r4, #12]
 80059c4:	4b06      	ldr	r3, [pc, #24]	; (80059e0 <cleanup_stdio+0x3c>)
 80059c6:	4299      	cmp	r1, r3
 80059c8:	d004      	beq.n	80059d4 <cleanup_stdio+0x30>
 80059ca:	4620      	mov	r0, r4
 80059cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059d0:	f000 be74 	b.w	80066bc <_fflush_r>
 80059d4:	bd10      	pop	{r4, pc}
 80059d6:	bf00      	nop
 80059d8:	20000478 	.word	0x20000478
 80059dc:	200004e0 	.word	0x200004e0
 80059e0:	20000548 	.word	0x20000548

080059e4 <global_stdio_init.part.0>:
 80059e4:	b510      	push	{r4, lr}
 80059e6:	4b0b      	ldr	r3, [pc, #44]	; (8005a14 <global_stdio_init.part.0+0x30>)
 80059e8:	4c0b      	ldr	r4, [pc, #44]	; (8005a18 <global_stdio_init.part.0+0x34>)
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <global_stdio_init.part.0+0x38>)
 80059ec:	4620      	mov	r0, r4
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	2104      	movs	r1, #4
 80059f2:	2200      	movs	r2, #0
 80059f4:	f7ff ffa6 	bl	8005944 <std>
 80059f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80059fc:	2201      	movs	r2, #1
 80059fe:	2109      	movs	r1, #9
 8005a00:	f7ff ffa0 	bl	8005944 <std>
 8005a04:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a08:	2202      	movs	r2, #2
 8005a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a0e:	2112      	movs	r1, #18
 8005a10:	f7ff bf98 	b.w	8005944 <std>
 8005a14:	200005b0 	.word	0x200005b0
 8005a18:	20000478 	.word	0x20000478
 8005a1c:	0800598d 	.word	0x0800598d

08005a20 <__sfp_lock_acquire>:
 8005a20:	4801      	ldr	r0, [pc, #4]	; (8005a28 <__sfp_lock_acquire+0x8>)
 8005a22:	f000 b9fd 	b.w	8005e20 <__retarget_lock_acquire_recursive>
 8005a26:	bf00      	nop
 8005a28:	200005b9 	.word	0x200005b9

08005a2c <__sfp_lock_release>:
 8005a2c:	4801      	ldr	r0, [pc, #4]	; (8005a34 <__sfp_lock_release+0x8>)
 8005a2e:	f000 b9f8 	b.w	8005e22 <__retarget_lock_release_recursive>
 8005a32:	bf00      	nop
 8005a34:	200005b9 	.word	0x200005b9

08005a38 <__sinit>:
 8005a38:	b510      	push	{r4, lr}
 8005a3a:	4604      	mov	r4, r0
 8005a3c:	f7ff fff0 	bl	8005a20 <__sfp_lock_acquire>
 8005a40:	6a23      	ldr	r3, [r4, #32]
 8005a42:	b11b      	cbz	r3, 8005a4c <__sinit+0x14>
 8005a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a48:	f7ff bff0 	b.w	8005a2c <__sfp_lock_release>
 8005a4c:	4b04      	ldr	r3, [pc, #16]	; (8005a60 <__sinit+0x28>)
 8005a4e:	6223      	str	r3, [r4, #32]
 8005a50:	4b04      	ldr	r3, [pc, #16]	; (8005a64 <__sinit+0x2c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f5      	bne.n	8005a44 <__sinit+0xc>
 8005a58:	f7ff ffc4 	bl	80059e4 <global_stdio_init.part.0>
 8005a5c:	e7f2      	b.n	8005a44 <__sinit+0xc>
 8005a5e:	bf00      	nop
 8005a60:	080059a5 	.word	0x080059a5
 8005a64:	200005b0 	.word	0x200005b0

08005a68 <_fwalk_sglue>:
 8005a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	4688      	mov	r8, r1
 8005a70:	4614      	mov	r4, r2
 8005a72:	2600      	movs	r6, #0
 8005a74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a78:	f1b9 0901 	subs.w	r9, r9, #1
 8005a7c:	d505      	bpl.n	8005a8a <_fwalk_sglue+0x22>
 8005a7e:	6824      	ldr	r4, [r4, #0]
 8005a80:	2c00      	cmp	r4, #0
 8005a82:	d1f7      	bne.n	8005a74 <_fwalk_sglue+0xc>
 8005a84:	4630      	mov	r0, r6
 8005a86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a8a:	89ab      	ldrh	r3, [r5, #12]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d907      	bls.n	8005aa0 <_fwalk_sglue+0x38>
 8005a90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a94:	3301      	adds	r3, #1
 8005a96:	d003      	beq.n	8005aa0 <_fwalk_sglue+0x38>
 8005a98:	4629      	mov	r1, r5
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	47c0      	blx	r8
 8005a9e:	4306      	orrs	r6, r0
 8005aa0:	3568      	adds	r5, #104	; 0x68
 8005aa2:	e7e9      	b.n	8005a78 <_fwalk_sglue+0x10>

08005aa4 <iprintf>:
 8005aa4:	b40f      	push	{r0, r1, r2, r3}
 8005aa6:	b507      	push	{r0, r1, r2, lr}
 8005aa8:	4906      	ldr	r1, [pc, #24]	; (8005ac4 <iprintf+0x20>)
 8005aaa:	ab04      	add	r3, sp, #16
 8005aac:	6808      	ldr	r0, [r1, #0]
 8005aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ab2:	6881      	ldr	r1, [r0, #8]
 8005ab4:	9301      	str	r3, [sp, #4]
 8005ab6:	f000 fad1 	bl	800605c <_vfiprintf_r>
 8005aba:	b003      	add	sp, #12
 8005abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ac0:	b004      	add	sp, #16
 8005ac2:	4770      	bx	lr
 8005ac4:	20000064 	.word	0x20000064

08005ac8 <_puts_r>:
 8005ac8:	6a03      	ldr	r3, [r0, #32]
 8005aca:	b570      	push	{r4, r5, r6, lr}
 8005acc:	4605      	mov	r5, r0
 8005ace:	460e      	mov	r6, r1
 8005ad0:	6884      	ldr	r4, [r0, #8]
 8005ad2:	b90b      	cbnz	r3, 8005ad8 <_puts_r+0x10>
 8005ad4:	f7ff ffb0 	bl	8005a38 <__sinit>
 8005ad8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ada:	07db      	lsls	r3, r3, #31
 8005adc:	d405      	bmi.n	8005aea <_puts_r+0x22>
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	0598      	lsls	r0, r3, #22
 8005ae2:	d402      	bmi.n	8005aea <_puts_r+0x22>
 8005ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ae6:	f000 f99b 	bl	8005e20 <__retarget_lock_acquire_recursive>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	0719      	lsls	r1, r3, #28
 8005aee:	d513      	bpl.n	8005b18 <_puts_r+0x50>
 8005af0:	6923      	ldr	r3, [r4, #16]
 8005af2:	b18b      	cbz	r3, 8005b18 <_puts_r+0x50>
 8005af4:	3e01      	subs	r6, #1
 8005af6:	68a3      	ldr	r3, [r4, #8]
 8005af8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005afc:	3b01      	subs	r3, #1
 8005afe:	60a3      	str	r3, [r4, #8]
 8005b00:	b9e9      	cbnz	r1, 8005b3e <_puts_r+0x76>
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da2e      	bge.n	8005b64 <_puts_r+0x9c>
 8005b06:	4622      	mov	r2, r4
 8005b08:	210a      	movs	r1, #10
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	f000 f87b 	bl	8005c06 <__swbuf_r>
 8005b10:	3001      	adds	r0, #1
 8005b12:	d007      	beq.n	8005b24 <_puts_r+0x5c>
 8005b14:	250a      	movs	r5, #10
 8005b16:	e007      	b.n	8005b28 <_puts_r+0x60>
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f000 f8b0 	bl	8005c80 <__swsetup_r>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d0e7      	beq.n	8005af4 <_puts_r+0x2c>
 8005b24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005b28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b2a:	07da      	lsls	r2, r3, #31
 8005b2c:	d405      	bmi.n	8005b3a <_puts_r+0x72>
 8005b2e:	89a3      	ldrh	r3, [r4, #12]
 8005b30:	059b      	lsls	r3, r3, #22
 8005b32:	d402      	bmi.n	8005b3a <_puts_r+0x72>
 8005b34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b36:	f000 f974 	bl	8005e22 <__retarget_lock_release_recursive>
 8005b3a:	4628      	mov	r0, r5
 8005b3c:	bd70      	pop	{r4, r5, r6, pc}
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	da04      	bge.n	8005b4c <_puts_r+0x84>
 8005b42:	69a2      	ldr	r2, [r4, #24]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	dc06      	bgt.n	8005b56 <_puts_r+0x8e>
 8005b48:	290a      	cmp	r1, #10
 8005b4a:	d004      	beq.n	8005b56 <_puts_r+0x8e>
 8005b4c:	6823      	ldr	r3, [r4, #0]
 8005b4e:	1c5a      	adds	r2, r3, #1
 8005b50:	6022      	str	r2, [r4, #0]
 8005b52:	7019      	strb	r1, [r3, #0]
 8005b54:	e7cf      	b.n	8005af6 <_puts_r+0x2e>
 8005b56:	4622      	mov	r2, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f000 f854 	bl	8005c06 <__swbuf_r>
 8005b5e:	3001      	adds	r0, #1
 8005b60:	d1c9      	bne.n	8005af6 <_puts_r+0x2e>
 8005b62:	e7df      	b.n	8005b24 <_puts_r+0x5c>
 8005b64:	250a      	movs	r5, #10
 8005b66:	6823      	ldr	r3, [r4, #0]
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	6022      	str	r2, [r4, #0]
 8005b6c:	701d      	strb	r5, [r3, #0]
 8005b6e:	e7db      	b.n	8005b28 <_puts_r+0x60>

08005b70 <puts>:
 8005b70:	4b02      	ldr	r3, [pc, #8]	; (8005b7c <puts+0xc>)
 8005b72:	4601      	mov	r1, r0
 8005b74:	6818      	ldr	r0, [r3, #0]
 8005b76:	f7ff bfa7 	b.w	8005ac8 <_puts_r>
 8005b7a:	bf00      	nop
 8005b7c:	20000064 	.word	0x20000064

08005b80 <__sread>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	460c      	mov	r4, r1
 8005b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b88:	f000 f8fc 	bl	8005d84 <_read_r>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	bfab      	itete	ge
 8005b90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005b92:	89a3      	ldrhlt	r3, [r4, #12]
 8005b94:	181b      	addge	r3, r3, r0
 8005b96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005b9a:	bfac      	ite	ge
 8005b9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b9e:	81a3      	strhlt	r3, [r4, #12]
 8005ba0:	bd10      	pop	{r4, pc}

08005ba2 <__swrite>:
 8005ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ba6:	461f      	mov	r7, r3
 8005ba8:	898b      	ldrh	r3, [r1, #12]
 8005baa:	4605      	mov	r5, r0
 8005bac:	05db      	lsls	r3, r3, #23
 8005bae:	460c      	mov	r4, r1
 8005bb0:	4616      	mov	r6, r2
 8005bb2:	d505      	bpl.n	8005bc0 <__swrite+0x1e>
 8005bb4:	2302      	movs	r3, #2
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	f000 f8d0 	bl	8005d60 <_lseek_r>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	4632      	mov	r2, r6
 8005bc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bc8:	81a3      	strh	r3, [r4, #12]
 8005bca:	4628      	mov	r0, r5
 8005bcc:	463b      	mov	r3, r7
 8005bce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	f000 b8e7 	b.w	8005da8 <_write_r>

08005bda <__sseek>:
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	460c      	mov	r4, r1
 8005bde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005be2:	f000 f8bd 	bl	8005d60 <_lseek_r>
 8005be6:	1c43      	adds	r3, r0, #1
 8005be8:	89a3      	ldrh	r3, [r4, #12]
 8005bea:	bf15      	itete	ne
 8005bec:	6560      	strne	r0, [r4, #84]	; 0x54
 8005bee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005bf2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005bf6:	81a3      	strheq	r3, [r4, #12]
 8005bf8:	bf18      	it	ne
 8005bfa:	81a3      	strhne	r3, [r4, #12]
 8005bfc:	bd10      	pop	{r4, pc}

08005bfe <__sclose>:
 8005bfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c02:	f000 b89d 	b.w	8005d40 <_close_r>

08005c06 <__swbuf_r>:
 8005c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c08:	460e      	mov	r6, r1
 8005c0a:	4614      	mov	r4, r2
 8005c0c:	4605      	mov	r5, r0
 8005c0e:	b118      	cbz	r0, 8005c18 <__swbuf_r+0x12>
 8005c10:	6a03      	ldr	r3, [r0, #32]
 8005c12:	b90b      	cbnz	r3, 8005c18 <__swbuf_r+0x12>
 8005c14:	f7ff ff10 	bl	8005a38 <__sinit>
 8005c18:	69a3      	ldr	r3, [r4, #24]
 8005c1a:	60a3      	str	r3, [r4, #8]
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	071a      	lsls	r2, r3, #28
 8005c20:	d525      	bpl.n	8005c6e <__swbuf_r+0x68>
 8005c22:	6923      	ldr	r3, [r4, #16]
 8005c24:	b31b      	cbz	r3, 8005c6e <__swbuf_r+0x68>
 8005c26:	6823      	ldr	r3, [r4, #0]
 8005c28:	6922      	ldr	r2, [r4, #16]
 8005c2a:	b2f6      	uxtb	r6, r6
 8005c2c:	1a98      	subs	r0, r3, r2
 8005c2e:	6963      	ldr	r3, [r4, #20]
 8005c30:	4637      	mov	r7, r6
 8005c32:	4283      	cmp	r3, r0
 8005c34:	dc04      	bgt.n	8005c40 <__swbuf_r+0x3a>
 8005c36:	4621      	mov	r1, r4
 8005c38:	4628      	mov	r0, r5
 8005c3a:	f000 fd3f 	bl	80066bc <_fflush_r>
 8005c3e:	b9e0      	cbnz	r0, 8005c7a <__swbuf_r+0x74>
 8005c40:	68a3      	ldr	r3, [r4, #8]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	60a3      	str	r3, [r4, #8]
 8005c46:	6823      	ldr	r3, [r4, #0]
 8005c48:	1c5a      	adds	r2, r3, #1
 8005c4a:	6022      	str	r2, [r4, #0]
 8005c4c:	701e      	strb	r6, [r3, #0]
 8005c4e:	6962      	ldr	r2, [r4, #20]
 8005c50:	1c43      	adds	r3, r0, #1
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d004      	beq.n	8005c60 <__swbuf_r+0x5a>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	07db      	lsls	r3, r3, #31
 8005c5a:	d506      	bpl.n	8005c6a <__swbuf_r+0x64>
 8005c5c:	2e0a      	cmp	r6, #10
 8005c5e:	d104      	bne.n	8005c6a <__swbuf_r+0x64>
 8005c60:	4621      	mov	r1, r4
 8005c62:	4628      	mov	r0, r5
 8005c64:	f000 fd2a 	bl	80066bc <_fflush_r>
 8005c68:	b938      	cbnz	r0, 8005c7a <__swbuf_r+0x74>
 8005c6a:	4638      	mov	r0, r7
 8005c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c6e:	4621      	mov	r1, r4
 8005c70:	4628      	mov	r0, r5
 8005c72:	f000 f805 	bl	8005c80 <__swsetup_r>
 8005c76:	2800      	cmp	r0, #0
 8005c78:	d0d5      	beq.n	8005c26 <__swbuf_r+0x20>
 8005c7a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005c7e:	e7f4      	b.n	8005c6a <__swbuf_r+0x64>

08005c80 <__swsetup_r>:
 8005c80:	b538      	push	{r3, r4, r5, lr}
 8005c82:	4b2a      	ldr	r3, [pc, #168]	; (8005d2c <__swsetup_r+0xac>)
 8005c84:	4605      	mov	r5, r0
 8005c86:	6818      	ldr	r0, [r3, #0]
 8005c88:	460c      	mov	r4, r1
 8005c8a:	b118      	cbz	r0, 8005c94 <__swsetup_r+0x14>
 8005c8c:	6a03      	ldr	r3, [r0, #32]
 8005c8e:	b90b      	cbnz	r3, 8005c94 <__swsetup_r+0x14>
 8005c90:	f7ff fed2 	bl	8005a38 <__sinit>
 8005c94:	89a3      	ldrh	r3, [r4, #12]
 8005c96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c9a:	0718      	lsls	r0, r3, #28
 8005c9c:	d422      	bmi.n	8005ce4 <__swsetup_r+0x64>
 8005c9e:	06d9      	lsls	r1, r3, #27
 8005ca0:	d407      	bmi.n	8005cb2 <__swsetup_r+0x32>
 8005ca2:	2309      	movs	r3, #9
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005caa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005cae:	81a3      	strh	r3, [r4, #12]
 8005cb0:	e034      	b.n	8005d1c <__swsetup_r+0x9c>
 8005cb2:	0758      	lsls	r0, r3, #29
 8005cb4:	d512      	bpl.n	8005cdc <__swsetup_r+0x5c>
 8005cb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cb8:	b141      	cbz	r1, 8005ccc <__swsetup_r+0x4c>
 8005cba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d002      	beq.n	8005cc8 <__swsetup_r+0x48>
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f000 f8ae 	bl	8005e24 <_free_r>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6363      	str	r3, [r4, #52]	; 0x34
 8005ccc:	89a3      	ldrh	r3, [r4, #12]
 8005cce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cd2:	81a3      	strh	r3, [r4, #12]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	6063      	str	r3, [r4, #4]
 8005cd8:	6923      	ldr	r3, [r4, #16]
 8005cda:	6023      	str	r3, [r4, #0]
 8005cdc:	89a3      	ldrh	r3, [r4, #12]
 8005cde:	f043 0308 	orr.w	r3, r3, #8
 8005ce2:	81a3      	strh	r3, [r4, #12]
 8005ce4:	6923      	ldr	r3, [r4, #16]
 8005ce6:	b94b      	cbnz	r3, 8005cfc <__swsetup_r+0x7c>
 8005ce8:	89a3      	ldrh	r3, [r4, #12]
 8005cea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf2:	d003      	beq.n	8005cfc <__swsetup_r+0x7c>
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f000 fd2d 	bl	8006756 <__smakebuf_r>
 8005cfc:	89a0      	ldrh	r0, [r4, #12]
 8005cfe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d02:	f010 0301 	ands.w	r3, r0, #1
 8005d06:	d00a      	beq.n	8005d1e <__swsetup_r+0x9e>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	60a3      	str	r3, [r4, #8]
 8005d0c:	6963      	ldr	r3, [r4, #20]
 8005d0e:	425b      	negs	r3, r3
 8005d10:	61a3      	str	r3, [r4, #24]
 8005d12:	6923      	ldr	r3, [r4, #16]
 8005d14:	b943      	cbnz	r3, 8005d28 <__swsetup_r+0xa8>
 8005d16:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d1a:	d1c4      	bne.n	8005ca6 <__swsetup_r+0x26>
 8005d1c:	bd38      	pop	{r3, r4, r5, pc}
 8005d1e:	0781      	lsls	r1, r0, #30
 8005d20:	bf58      	it	pl
 8005d22:	6963      	ldrpl	r3, [r4, #20]
 8005d24:	60a3      	str	r3, [r4, #8]
 8005d26:	e7f4      	b.n	8005d12 <__swsetup_r+0x92>
 8005d28:	2000      	movs	r0, #0
 8005d2a:	e7f7      	b.n	8005d1c <__swsetup_r+0x9c>
 8005d2c:	20000064 	.word	0x20000064

08005d30 <memset>:
 8005d30:	4603      	mov	r3, r0
 8005d32:	4402      	add	r2, r0
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d100      	bne.n	8005d3a <memset+0xa>
 8005d38:	4770      	bx	lr
 8005d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d3e:	e7f9      	b.n	8005d34 <memset+0x4>

08005d40 <_close_r>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	2300      	movs	r3, #0
 8005d44:	4d05      	ldr	r5, [pc, #20]	; (8005d5c <_close_r+0x1c>)
 8005d46:	4604      	mov	r4, r0
 8005d48:	4608      	mov	r0, r1
 8005d4a:	602b      	str	r3, [r5, #0]
 8005d4c:	f7fc fcc9 	bl	80026e2 <_close>
 8005d50:	1c43      	adds	r3, r0, #1
 8005d52:	d102      	bne.n	8005d5a <_close_r+0x1a>
 8005d54:	682b      	ldr	r3, [r5, #0]
 8005d56:	b103      	cbz	r3, 8005d5a <_close_r+0x1a>
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	bd38      	pop	{r3, r4, r5, pc}
 8005d5c:	200005b4 	.word	0x200005b4

08005d60 <_lseek_r>:
 8005d60:	b538      	push	{r3, r4, r5, lr}
 8005d62:	4604      	mov	r4, r0
 8005d64:	4608      	mov	r0, r1
 8005d66:	4611      	mov	r1, r2
 8005d68:	2200      	movs	r2, #0
 8005d6a:	4d05      	ldr	r5, [pc, #20]	; (8005d80 <_lseek_r+0x20>)
 8005d6c:	602a      	str	r2, [r5, #0]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	f7fc fcdb 	bl	800272a <_lseek>
 8005d74:	1c43      	adds	r3, r0, #1
 8005d76:	d102      	bne.n	8005d7e <_lseek_r+0x1e>
 8005d78:	682b      	ldr	r3, [r5, #0]
 8005d7a:	b103      	cbz	r3, 8005d7e <_lseek_r+0x1e>
 8005d7c:	6023      	str	r3, [r4, #0]
 8005d7e:	bd38      	pop	{r3, r4, r5, pc}
 8005d80:	200005b4 	.word	0x200005b4

08005d84 <_read_r>:
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	4604      	mov	r4, r0
 8005d88:	4608      	mov	r0, r1
 8005d8a:	4611      	mov	r1, r2
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4d05      	ldr	r5, [pc, #20]	; (8005da4 <_read_r+0x20>)
 8005d90:	602a      	str	r2, [r5, #0]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f7fc fc6c 	bl	8002670 <_read>
 8005d98:	1c43      	adds	r3, r0, #1
 8005d9a:	d102      	bne.n	8005da2 <_read_r+0x1e>
 8005d9c:	682b      	ldr	r3, [r5, #0]
 8005d9e:	b103      	cbz	r3, 8005da2 <_read_r+0x1e>
 8005da0:	6023      	str	r3, [r4, #0]
 8005da2:	bd38      	pop	{r3, r4, r5, pc}
 8005da4:	200005b4 	.word	0x200005b4

08005da8 <_write_r>:
 8005da8:	b538      	push	{r3, r4, r5, lr}
 8005daa:	4604      	mov	r4, r0
 8005dac:	4608      	mov	r0, r1
 8005dae:	4611      	mov	r1, r2
 8005db0:	2200      	movs	r2, #0
 8005db2:	4d05      	ldr	r5, [pc, #20]	; (8005dc8 <_write_r+0x20>)
 8005db4:	602a      	str	r2, [r5, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	f7fc fc77 	bl	80026aa <_write>
 8005dbc:	1c43      	adds	r3, r0, #1
 8005dbe:	d102      	bne.n	8005dc6 <_write_r+0x1e>
 8005dc0:	682b      	ldr	r3, [r5, #0]
 8005dc2:	b103      	cbz	r3, 8005dc6 <_write_r+0x1e>
 8005dc4:	6023      	str	r3, [r4, #0]
 8005dc6:	bd38      	pop	{r3, r4, r5, pc}
 8005dc8:	200005b4 	.word	0x200005b4

08005dcc <__errno>:
 8005dcc:	4b01      	ldr	r3, [pc, #4]	; (8005dd4 <__errno+0x8>)
 8005dce:	6818      	ldr	r0, [r3, #0]
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	20000064 	.word	0x20000064

08005dd8 <__libc_init_array>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	2600      	movs	r6, #0
 8005ddc:	4d0c      	ldr	r5, [pc, #48]	; (8005e10 <__libc_init_array+0x38>)
 8005dde:	4c0d      	ldr	r4, [pc, #52]	; (8005e14 <__libc_init_array+0x3c>)
 8005de0:	1b64      	subs	r4, r4, r5
 8005de2:	10a4      	asrs	r4, r4, #2
 8005de4:	42a6      	cmp	r6, r4
 8005de6:	d109      	bne.n	8005dfc <__libc_init_array+0x24>
 8005de8:	f000 fd32 	bl	8006850 <_init>
 8005dec:	2600      	movs	r6, #0
 8005dee:	4d0a      	ldr	r5, [pc, #40]	; (8005e18 <__libc_init_array+0x40>)
 8005df0:	4c0a      	ldr	r4, [pc, #40]	; (8005e1c <__libc_init_array+0x44>)
 8005df2:	1b64      	subs	r4, r4, r5
 8005df4:	10a4      	asrs	r4, r4, #2
 8005df6:	42a6      	cmp	r6, r4
 8005df8:	d105      	bne.n	8005e06 <__libc_init_array+0x2e>
 8005dfa:	bd70      	pop	{r4, r5, r6, pc}
 8005dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e00:	4798      	blx	r3
 8005e02:	3601      	adds	r6, #1
 8005e04:	e7ee      	b.n	8005de4 <__libc_init_array+0xc>
 8005e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e0a:	4798      	blx	r3
 8005e0c:	3601      	adds	r6, #1
 8005e0e:	e7f2      	b.n	8005df6 <__libc_init_array+0x1e>
 8005e10:	08006e3c 	.word	0x08006e3c
 8005e14:	08006e3c 	.word	0x08006e3c
 8005e18:	08006e3c 	.word	0x08006e3c
 8005e1c:	08006e40 	.word	0x08006e40

08005e20 <__retarget_lock_acquire_recursive>:
 8005e20:	4770      	bx	lr

08005e22 <__retarget_lock_release_recursive>:
 8005e22:	4770      	bx	lr

08005e24 <_free_r>:
 8005e24:	b538      	push	{r3, r4, r5, lr}
 8005e26:	4605      	mov	r5, r0
 8005e28:	2900      	cmp	r1, #0
 8005e2a:	d040      	beq.n	8005eae <_free_r+0x8a>
 8005e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e30:	1f0c      	subs	r4, r1, #4
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	bfb8      	it	lt
 8005e36:	18e4      	addlt	r4, r4, r3
 8005e38:	f000 f8dc 	bl	8005ff4 <__malloc_lock>
 8005e3c:	4a1c      	ldr	r2, [pc, #112]	; (8005eb0 <_free_r+0x8c>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	b933      	cbnz	r3, 8005e50 <_free_r+0x2c>
 8005e42:	6063      	str	r3, [r4, #4]
 8005e44:	6014      	str	r4, [r2, #0]
 8005e46:	4628      	mov	r0, r5
 8005e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e4c:	f000 b8d8 	b.w	8006000 <__malloc_unlock>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d908      	bls.n	8005e66 <_free_r+0x42>
 8005e54:	6820      	ldr	r0, [r4, #0]
 8005e56:	1821      	adds	r1, r4, r0
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	bf01      	itttt	eq
 8005e5c:	6819      	ldreq	r1, [r3, #0]
 8005e5e:	685b      	ldreq	r3, [r3, #4]
 8005e60:	1809      	addeq	r1, r1, r0
 8005e62:	6021      	streq	r1, [r4, #0]
 8005e64:	e7ed      	b.n	8005e42 <_free_r+0x1e>
 8005e66:	461a      	mov	r2, r3
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	b10b      	cbz	r3, 8005e70 <_free_r+0x4c>
 8005e6c:	42a3      	cmp	r3, r4
 8005e6e:	d9fa      	bls.n	8005e66 <_free_r+0x42>
 8005e70:	6811      	ldr	r1, [r2, #0]
 8005e72:	1850      	adds	r0, r2, r1
 8005e74:	42a0      	cmp	r0, r4
 8005e76:	d10b      	bne.n	8005e90 <_free_r+0x6c>
 8005e78:	6820      	ldr	r0, [r4, #0]
 8005e7a:	4401      	add	r1, r0
 8005e7c:	1850      	adds	r0, r2, r1
 8005e7e:	4283      	cmp	r3, r0
 8005e80:	6011      	str	r1, [r2, #0]
 8005e82:	d1e0      	bne.n	8005e46 <_free_r+0x22>
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	4408      	add	r0, r1
 8005e8a:	6010      	str	r0, [r2, #0]
 8005e8c:	6053      	str	r3, [r2, #4]
 8005e8e:	e7da      	b.n	8005e46 <_free_r+0x22>
 8005e90:	d902      	bls.n	8005e98 <_free_r+0x74>
 8005e92:	230c      	movs	r3, #12
 8005e94:	602b      	str	r3, [r5, #0]
 8005e96:	e7d6      	b.n	8005e46 <_free_r+0x22>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	1821      	adds	r1, r4, r0
 8005e9c:	428b      	cmp	r3, r1
 8005e9e:	bf01      	itttt	eq
 8005ea0:	6819      	ldreq	r1, [r3, #0]
 8005ea2:	685b      	ldreq	r3, [r3, #4]
 8005ea4:	1809      	addeq	r1, r1, r0
 8005ea6:	6021      	streq	r1, [r4, #0]
 8005ea8:	6063      	str	r3, [r4, #4]
 8005eaa:	6054      	str	r4, [r2, #4]
 8005eac:	e7cb      	b.n	8005e46 <_free_r+0x22>
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	200005bc 	.word	0x200005bc

08005eb4 <sbrk_aligned>:
 8005eb4:	b570      	push	{r4, r5, r6, lr}
 8005eb6:	4e0e      	ldr	r6, [pc, #56]	; (8005ef0 <sbrk_aligned+0x3c>)
 8005eb8:	460c      	mov	r4, r1
 8005eba:	6831      	ldr	r1, [r6, #0]
 8005ebc:	4605      	mov	r5, r0
 8005ebe:	b911      	cbnz	r1, 8005ec6 <sbrk_aligned+0x12>
 8005ec0:	f000 fca8 	bl	8006814 <_sbrk_r>
 8005ec4:	6030      	str	r0, [r6, #0]
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4628      	mov	r0, r5
 8005eca:	f000 fca3 	bl	8006814 <_sbrk_r>
 8005ece:	1c43      	adds	r3, r0, #1
 8005ed0:	d00a      	beq.n	8005ee8 <sbrk_aligned+0x34>
 8005ed2:	1cc4      	adds	r4, r0, #3
 8005ed4:	f024 0403 	bic.w	r4, r4, #3
 8005ed8:	42a0      	cmp	r0, r4
 8005eda:	d007      	beq.n	8005eec <sbrk_aligned+0x38>
 8005edc:	1a21      	subs	r1, r4, r0
 8005ede:	4628      	mov	r0, r5
 8005ee0:	f000 fc98 	bl	8006814 <_sbrk_r>
 8005ee4:	3001      	adds	r0, #1
 8005ee6:	d101      	bne.n	8005eec <sbrk_aligned+0x38>
 8005ee8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005eec:	4620      	mov	r0, r4
 8005eee:	bd70      	pop	{r4, r5, r6, pc}
 8005ef0:	200005c0 	.word	0x200005c0

08005ef4 <_malloc_r>:
 8005ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef8:	1ccd      	adds	r5, r1, #3
 8005efa:	f025 0503 	bic.w	r5, r5, #3
 8005efe:	3508      	adds	r5, #8
 8005f00:	2d0c      	cmp	r5, #12
 8005f02:	bf38      	it	cc
 8005f04:	250c      	movcc	r5, #12
 8005f06:	2d00      	cmp	r5, #0
 8005f08:	4607      	mov	r7, r0
 8005f0a:	db01      	blt.n	8005f10 <_malloc_r+0x1c>
 8005f0c:	42a9      	cmp	r1, r5
 8005f0e:	d905      	bls.n	8005f1c <_malloc_r+0x28>
 8005f10:	230c      	movs	r3, #12
 8005f12:	2600      	movs	r6, #0
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	4630      	mov	r0, r6
 8005f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ff0 <_malloc_r+0xfc>
 8005f20:	f000 f868 	bl	8005ff4 <__malloc_lock>
 8005f24:	f8d8 3000 	ldr.w	r3, [r8]
 8005f28:	461c      	mov	r4, r3
 8005f2a:	bb5c      	cbnz	r4, 8005f84 <_malloc_r+0x90>
 8005f2c:	4629      	mov	r1, r5
 8005f2e:	4638      	mov	r0, r7
 8005f30:	f7ff ffc0 	bl	8005eb4 <sbrk_aligned>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	4604      	mov	r4, r0
 8005f38:	d155      	bne.n	8005fe6 <_malloc_r+0xf2>
 8005f3a:	f8d8 4000 	ldr.w	r4, [r8]
 8005f3e:	4626      	mov	r6, r4
 8005f40:	2e00      	cmp	r6, #0
 8005f42:	d145      	bne.n	8005fd0 <_malloc_r+0xdc>
 8005f44:	2c00      	cmp	r4, #0
 8005f46:	d048      	beq.n	8005fda <_malloc_r+0xe6>
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	4631      	mov	r1, r6
 8005f4c:	4638      	mov	r0, r7
 8005f4e:	eb04 0903 	add.w	r9, r4, r3
 8005f52:	f000 fc5f 	bl	8006814 <_sbrk_r>
 8005f56:	4581      	cmp	r9, r0
 8005f58:	d13f      	bne.n	8005fda <_malloc_r+0xe6>
 8005f5a:	6821      	ldr	r1, [r4, #0]
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	1a6d      	subs	r5, r5, r1
 8005f60:	4629      	mov	r1, r5
 8005f62:	f7ff ffa7 	bl	8005eb4 <sbrk_aligned>
 8005f66:	3001      	adds	r0, #1
 8005f68:	d037      	beq.n	8005fda <_malloc_r+0xe6>
 8005f6a:	6823      	ldr	r3, [r4, #0]
 8005f6c:	442b      	add	r3, r5
 8005f6e:	6023      	str	r3, [r4, #0]
 8005f70:	f8d8 3000 	ldr.w	r3, [r8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d038      	beq.n	8005fea <_malloc_r+0xf6>
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	42a2      	cmp	r2, r4
 8005f7c:	d12b      	bne.n	8005fd6 <_malloc_r+0xe2>
 8005f7e:	2200      	movs	r2, #0
 8005f80:	605a      	str	r2, [r3, #4]
 8005f82:	e00f      	b.n	8005fa4 <_malloc_r+0xb0>
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	1b52      	subs	r2, r2, r5
 8005f88:	d41f      	bmi.n	8005fca <_malloc_r+0xd6>
 8005f8a:	2a0b      	cmp	r2, #11
 8005f8c:	d917      	bls.n	8005fbe <_malloc_r+0xca>
 8005f8e:	1961      	adds	r1, r4, r5
 8005f90:	42a3      	cmp	r3, r4
 8005f92:	6025      	str	r5, [r4, #0]
 8005f94:	bf18      	it	ne
 8005f96:	6059      	strne	r1, [r3, #4]
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	bf08      	it	eq
 8005f9c:	f8c8 1000 	streq.w	r1, [r8]
 8005fa0:	5162      	str	r2, [r4, r5]
 8005fa2:	604b      	str	r3, [r1, #4]
 8005fa4:	4638      	mov	r0, r7
 8005fa6:	f104 060b 	add.w	r6, r4, #11
 8005faa:	f000 f829 	bl	8006000 <__malloc_unlock>
 8005fae:	f026 0607 	bic.w	r6, r6, #7
 8005fb2:	1d23      	adds	r3, r4, #4
 8005fb4:	1af2      	subs	r2, r6, r3
 8005fb6:	d0ae      	beq.n	8005f16 <_malloc_r+0x22>
 8005fb8:	1b9b      	subs	r3, r3, r6
 8005fba:	50a3      	str	r3, [r4, r2]
 8005fbc:	e7ab      	b.n	8005f16 <_malloc_r+0x22>
 8005fbe:	42a3      	cmp	r3, r4
 8005fc0:	6862      	ldr	r2, [r4, #4]
 8005fc2:	d1dd      	bne.n	8005f80 <_malloc_r+0x8c>
 8005fc4:	f8c8 2000 	str.w	r2, [r8]
 8005fc8:	e7ec      	b.n	8005fa4 <_malloc_r+0xb0>
 8005fca:	4623      	mov	r3, r4
 8005fcc:	6864      	ldr	r4, [r4, #4]
 8005fce:	e7ac      	b.n	8005f2a <_malloc_r+0x36>
 8005fd0:	4634      	mov	r4, r6
 8005fd2:	6876      	ldr	r6, [r6, #4]
 8005fd4:	e7b4      	b.n	8005f40 <_malloc_r+0x4c>
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	e7cc      	b.n	8005f74 <_malloc_r+0x80>
 8005fda:	230c      	movs	r3, #12
 8005fdc:	4638      	mov	r0, r7
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	f000 f80e 	bl	8006000 <__malloc_unlock>
 8005fe4:	e797      	b.n	8005f16 <_malloc_r+0x22>
 8005fe6:	6025      	str	r5, [r4, #0]
 8005fe8:	e7dc      	b.n	8005fa4 <_malloc_r+0xb0>
 8005fea:	605b      	str	r3, [r3, #4]
 8005fec:	deff      	udf	#255	; 0xff
 8005fee:	bf00      	nop
 8005ff0:	200005bc 	.word	0x200005bc

08005ff4 <__malloc_lock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_lock+0x8>)
 8005ff6:	f7ff bf13 	b.w	8005e20 <__retarget_lock_acquire_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	200005b8 	.word	0x200005b8

08006000 <__malloc_unlock>:
 8006000:	4801      	ldr	r0, [pc, #4]	; (8006008 <__malloc_unlock+0x8>)
 8006002:	f7ff bf0e 	b.w	8005e22 <__retarget_lock_release_recursive>
 8006006:	bf00      	nop
 8006008:	200005b8 	.word	0x200005b8

0800600c <__sfputc_r>:
 800600c:	6893      	ldr	r3, [r2, #8]
 800600e:	b410      	push	{r4}
 8006010:	3b01      	subs	r3, #1
 8006012:	2b00      	cmp	r3, #0
 8006014:	6093      	str	r3, [r2, #8]
 8006016:	da07      	bge.n	8006028 <__sfputc_r+0x1c>
 8006018:	6994      	ldr	r4, [r2, #24]
 800601a:	42a3      	cmp	r3, r4
 800601c:	db01      	blt.n	8006022 <__sfputc_r+0x16>
 800601e:	290a      	cmp	r1, #10
 8006020:	d102      	bne.n	8006028 <__sfputc_r+0x1c>
 8006022:	bc10      	pop	{r4}
 8006024:	f7ff bdef 	b.w	8005c06 <__swbuf_r>
 8006028:	6813      	ldr	r3, [r2, #0]
 800602a:	1c58      	adds	r0, r3, #1
 800602c:	6010      	str	r0, [r2, #0]
 800602e:	7019      	strb	r1, [r3, #0]
 8006030:	4608      	mov	r0, r1
 8006032:	bc10      	pop	{r4}
 8006034:	4770      	bx	lr

08006036 <__sfputs_r>:
 8006036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006038:	4606      	mov	r6, r0
 800603a:	460f      	mov	r7, r1
 800603c:	4614      	mov	r4, r2
 800603e:	18d5      	adds	r5, r2, r3
 8006040:	42ac      	cmp	r4, r5
 8006042:	d101      	bne.n	8006048 <__sfputs_r+0x12>
 8006044:	2000      	movs	r0, #0
 8006046:	e007      	b.n	8006058 <__sfputs_r+0x22>
 8006048:	463a      	mov	r2, r7
 800604a:	4630      	mov	r0, r6
 800604c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006050:	f7ff ffdc 	bl	800600c <__sfputc_r>
 8006054:	1c43      	adds	r3, r0, #1
 8006056:	d1f3      	bne.n	8006040 <__sfputs_r+0xa>
 8006058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800605c <_vfiprintf_r>:
 800605c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006060:	460d      	mov	r5, r1
 8006062:	4614      	mov	r4, r2
 8006064:	4698      	mov	r8, r3
 8006066:	4606      	mov	r6, r0
 8006068:	b09d      	sub	sp, #116	; 0x74
 800606a:	b118      	cbz	r0, 8006074 <_vfiprintf_r+0x18>
 800606c:	6a03      	ldr	r3, [r0, #32]
 800606e:	b90b      	cbnz	r3, 8006074 <_vfiprintf_r+0x18>
 8006070:	f7ff fce2 	bl	8005a38 <__sinit>
 8006074:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006076:	07d9      	lsls	r1, r3, #31
 8006078:	d405      	bmi.n	8006086 <_vfiprintf_r+0x2a>
 800607a:	89ab      	ldrh	r3, [r5, #12]
 800607c:	059a      	lsls	r2, r3, #22
 800607e:	d402      	bmi.n	8006086 <_vfiprintf_r+0x2a>
 8006080:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006082:	f7ff fecd 	bl	8005e20 <__retarget_lock_acquire_recursive>
 8006086:	89ab      	ldrh	r3, [r5, #12]
 8006088:	071b      	lsls	r3, r3, #28
 800608a:	d501      	bpl.n	8006090 <_vfiprintf_r+0x34>
 800608c:	692b      	ldr	r3, [r5, #16]
 800608e:	b99b      	cbnz	r3, 80060b8 <_vfiprintf_r+0x5c>
 8006090:	4629      	mov	r1, r5
 8006092:	4630      	mov	r0, r6
 8006094:	f7ff fdf4 	bl	8005c80 <__swsetup_r>
 8006098:	b170      	cbz	r0, 80060b8 <_vfiprintf_r+0x5c>
 800609a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609c:	07dc      	lsls	r4, r3, #31
 800609e:	d504      	bpl.n	80060aa <_vfiprintf_r+0x4e>
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	b01d      	add	sp, #116	; 0x74
 80060a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	0598      	lsls	r0, r3, #22
 80060ae:	d4f7      	bmi.n	80060a0 <_vfiprintf_r+0x44>
 80060b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060b2:	f7ff feb6 	bl	8005e22 <__retarget_lock_release_recursive>
 80060b6:	e7f3      	b.n	80060a0 <_vfiprintf_r+0x44>
 80060b8:	2300      	movs	r3, #0
 80060ba:	9309      	str	r3, [sp, #36]	; 0x24
 80060bc:	2320      	movs	r3, #32
 80060be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80060c2:	2330      	movs	r3, #48	; 0x30
 80060c4:	f04f 0901 	mov.w	r9, #1
 80060c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80060cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800627c <_vfiprintf_r+0x220>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80060d4:	4623      	mov	r3, r4
 80060d6:	469a      	mov	sl, r3
 80060d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060dc:	b10a      	cbz	r2, 80060e2 <_vfiprintf_r+0x86>
 80060de:	2a25      	cmp	r2, #37	; 0x25
 80060e0:	d1f9      	bne.n	80060d6 <_vfiprintf_r+0x7a>
 80060e2:	ebba 0b04 	subs.w	fp, sl, r4
 80060e6:	d00b      	beq.n	8006100 <_vfiprintf_r+0xa4>
 80060e8:	465b      	mov	r3, fp
 80060ea:	4622      	mov	r2, r4
 80060ec:	4629      	mov	r1, r5
 80060ee:	4630      	mov	r0, r6
 80060f0:	f7ff ffa1 	bl	8006036 <__sfputs_r>
 80060f4:	3001      	adds	r0, #1
 80060f6:	f000 80a9 	beq.w	800624c <_vfiprintf_r+0x1f0>
 80060fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060fc:	445a      	add	r2, fp
 80060fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006100:	f89a 3000 	ldrb.w	r3, [sl]
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 80a1 	beq.w	800624c <_vfiprintf_r+0x1f0>
 800610a:	2300      	movs	r3, #0
 800610c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006110:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006114:	f10a 0a01 	add.w	sl, sl, #1
 8006118:	9304      	str	r3, [sp, #16]
 800611a:	9307      	str	r3, [sp, #28]
 800611c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006120:	931a      	str	r3, [sp, #104]	; 0x68
 8006122:	4654      	mov	r4, sl
 8006124:	2205      	movs	r2, #5
 8006126:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612a:	4854      	ldr	r0, [pc, #336]	; (800627c <_vfiprintf_r+0x220>)
 800612c:	f000 fb82 	bl	8006834 <memchr>
 8006130:	9a04      	ldr	r2, [sp, #16]
 8006132:	b9d8      	cbnz	r0, 800616c <_vfiprintf_r+0x110>
 8006134:	06d1      	lsls	r1, r2, #27
 8006136:	bf44      	itt	mi
 8006138:	2320      	movmi	r3, #32
 800613a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800613e:	0713      	lsls	r3, r2, #28
 8006140:	bf44      	itt	mi
 8006142:	232b      	movmi	r3, #43	; 0x2b
 8006144:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006148:	f89a 3000 	ldrb.w	r3, [sl]
 800614c:	2b2a      	cmp	r3, #42	; 0x2a
 800614e:	d015      	beq.n	800617c <_vfiprintf_r+0x120>
 8006150:	4654      	mov	r4, sl
 8006152:	2000      	movs	r0, #0
 8006154:	f04f 0c0a 	mov.w	ip, #10
 8006158:	9a07      	ldr	r2, [sp, #28]
 800615a:	4621      	mov	r1, r4
 800615c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006160:	3b30      	subs	r3, #48	; 0x30
 8006162:	2b09      	cmp	r3, #9
 8006164:	d94d      	bls.n	8006202 <_vfiprintf_r+0x1a6>
 8006166:	b1b0      	cbz	r0, 8006196 <_vfiprintf_r+0x13a>
 8006168:	9207      	str	r2, [sp, #28]
 800616a:	e014      	b.n	8006196 <_vfiprintf_r+0x13a>
 800616c:	eba0 0308 	sub.w	r3, r0, r8
 8006170:	fa09 f303 	lsl.w	r3, r9, r3
 8006174:	4313      	orrs	r3, r2
 8006176:	46a2      	mov	sl, r4
 8006178:	9304      	str	r3, [sp, #16]
 800617a:	e7d2      	b.n	8006122 <_vfiprintf_r+0xc6>
 800617c:	9b03      	ldr	r3, [sp, #12]
 800617e:	1d19      	adds	r1, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	9103      	str	r1, [sp, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	bfbb      	ittet	lt
 8006188:	425b      	neglt	r3, r3
 800618a:	f042 0202 	orrlt.w	r2, r2, #2
 800618e:	9307      	strge	r3, [sp, #28]
 8006190:	9307      	strlt	r3, [sp, #28]
 8006192:	bfb8      	it	lt
 8006194:	9204      	strlt	r2, [sp, #16]
 8006196:	7823      	ldrb	r3, [r4, #0]
 8006198:	2b2e      	cmp	r3, #46	; 0x2e
 800619a:	d10c      	bne.n	80061b6 <_vfiprintf_r+0x15a>
 800619c:	7863      	ldrb	r3, [r4, #1]
 800619e:	2b2a      	cmp	r3, #42	; 0x2a
 80061a0:	d134      	bne.n	800620c <_vfiprintf_r+0x1b0>
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	3402      	adds	r4, #2
 80061a6:	1d1a      	adds	r2, r3, #4
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	9203      	str	r2, [sp, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	bfb8      	it	lt
 80061b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006280 <_vfiprintf_r+0x224>
 80061ba:	2203      	movs	r2, #3
 80061bc:	4650      	mov	r0, sl
 80061be:	7821      	ldrb	r1, [r4, #0]
 80061c0:	f000 fb38 	bl	8006834 <memchr>
 80061c4:	b138      	cbz	r0, 80061d6 <_vfiprintf_r+0x17a>
 80061c6:	2240      	movs	r2, #64	; 0x40
 80061c8:	9b04      	ldr	r3, [sp, #16]
 80061ca:	eba0 000a 	sub.w	r0, r0, sl
 80061ce:	4082      	lsls	r2, r0
 80061d0:	4313      	orrs	r3, r2
 80061d2:	3401      	adds	r4, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	2206      	movs	r2, #6
 80061dc:	4829      	ldr	r0, [pc, #164]	; (8006284 <_vfiprintf_r+0x228>)
 80061de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80061e2:	f000 fb27 	bl	8006834 <memchr>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d03f      	beq.n	800626a <_vfiprintf_r+0x20e>
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <_vfiprintf_r+0x22c>)
 80061ec:	bb1b      	cbnz	r3, 8006236 <_vfiprintf_r+0x1da>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	3308      	adds	r3, #8
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061fc:	443b      	add	r3, r7
 80061fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006200:	e768      	b.n	80060d4 <_vfiprintf_r+0x78>
 8006202:	460c      	mov	r4, r1
 8006204:	2001      	movs	r0, #1
 8006206:	fb0c 3202 	mla	r2, ip, r2, r3
 800620a:	e7a6      	b.n	800615a <_vfiprintf_r+0xfe>
 800620c:	2300      	movs	r3, #0
 800620e:	f04f 0c0a 	mov.w	ip, #10
 8006212:	4619      	mov	r1, r3
 8006214:	3401      	adds	r4, #1
 8006216:	9305      	str	r3, [sp, #20]
 8006218:	4620      	mov	r0, r4
 800621a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621e:	3a30      	subs	r2, #48	; 0x30
 8006220:	2a09      	cmp	r2, #9
 8006222:	d903      	bls.n	800622c <_vfiprintf_r+0x1d0>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0c6      	beq.n	80061b6 <_vfiprintf_r+0x15a>
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	e7c4      	b.n	80061b6 <_vfiprintf_r+0x15a>
 800622c:	4604      	mov	r4, r0
 800622e:	2301      	movs	r3, #1
 8006230:	fb0c 2101 	mla	r1, ip, r1, r2
 8006234:	e7f0      	b.n	8006218 <_vfiprintf_r+0x1bc>
 8006236:	ab03      	add	r3, sp, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	462a      	mov	r2, r5
 800623c:	4630      	mov	r0, r6
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <_vfiprintf_r+0x230>)
 8006240:	a904      	add	r1, sp, #16
 8006242:	f3af 8000 	nop.w
 8006246:	4607      	mov	r7, r0
 8006248:	1c78      	adds	r0, r7, #1
 800624a:	d1d6      	bne.n	80061fa <_vfiprintf_r+0x19e>
 800624c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800624e:	07d9      	lsls	r1, r3, #31
 8006250:	d405      	bmi.n	800625e <_vfiprintf_r+0x202>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d402      	bmi.n	800625e <_vfiprintf_r+0x202>
 8006258:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800625a:	f7ff fde2 	bl	8005e22 <__retarget_lock_release_recursive>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	065b      	lsls	r3, r3, #25
 8006262:	f53f af1d 	bmi.w	80060a0 <_vfiprintf_r+0x44>
 8006266:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006268:	e71c      	b.n	80060a4 <_vfiprintf_r+0x48>
 800626a:	ab03      	add	r3, sp, #12
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	462a      	mov	r2, r5
 8006270:	4630      	mov	r0, r6
 8006272:	4b06      	ldr	r3, [pc, #24]	; (800628c <_vfiprintf_r+0x230>)
 8006274:	a904      	add	r1, sp, #16
 8006276:	f000 f87d 	bl	8006374 <_printf_i>
 800627a:	e7e4      	b.n	8006246 <_vfiprintf_r+0x1ea>
 800627c:	08006e06 	.word	0x08006e06
 8006280:	08006e0c 	.word	0x08006e0c
 8006284:	08006e10 	.word	0x08006e10
 8006288:	00000000 	.word	0x00000000
 800628c:	08006037 	.word	0x08006037

08006290 <_printf_common>:
 8006290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006294:	4616      	mov	r6, r2
 8006296:	4699      	mov	r9, r3
 8006298:	688a      	ldr	r2, [r1, #8]
 800629a:	690b      	ldr	r3, [r1, #16]
 800629c:	4607      	mov	r7, r0
 800629e:	4293      	cmp	r3, r2
 80062a0:	bfb8      	it	lt
 80062a2:	4613      	movlt	r3, r2
 80062a4:	6033      	str	r3, [r6, #0]
 80062a6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062aa:	460c      	mov	r4, r1
 80062ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062b0:	b10a      	cbz	r2, 80062b6 <_printf_common+0x26>
 80062b2:	3301      	adds	r3, #1
 80062b4:	6033      	str	r3, [r6, #0]
 80062b6:	6823      	ldr	r3, [r4, #0]
 80062b8:	0699      	lsls	r1, r3, #26
 80062ba:	bf42      	ittt	mi
 80062bc:	6833      	ldrmi	r3, [r6, #0]
 80062be:	3302      	addmi	r3, #2
 80062c0:	6033      	strmi	r3, [r6, #0]
 80062c2:	6825      	ldr	r5, [r4, #0]
 80062c4:	f015 0506 	ands.w	r5, r5, #6
 80062c8:	d106      	bne.n	80062d8 <_printf_common+0x48>
 80062ca:	f104 0a19 	add.w	sl, r4, #25
 80062ce:	68e3      	ldr	r3, [r4, #12]
 80062d0:	6832      	ldr	r2, [r6, #0]
 80062d2:	1a9b      	subs	r3, r3, r2
 80062d4:	42ab      	cmp	r3, r5
 80062d6:	dc2b      	bgt.n	8006330 <_printf_common+0xa0>
 80062d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062dc:	1e13      	subs	r3, r2, #0
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	bf18      	it	ne
 80062e2:	2301      	movne	r3, #1
 80062e4:	0692      	lsls	r2, r2, #26
 80062e6:	d430      	bmi.n	800634a <_printf_common+0xba>
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062f0:	47c0      	blx	r8
 80062f2:	3001      	adds	r0, #1
 80062f4:	d023      	beq.n	800633e <_printf_common+0xae>
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	6922      	ldr	r2, [r4, #16]
 80062fa:	f003 0306 	and.w	r3, r3, #6
 80062fe:	2b04      	cmp	r3, #4
 8006300:	bf14      	ite	ne
 8006302:	2500      	movne	r5, #0
 8006304:	6833      	ldreq	r3, [r6, #0]
 8006306:	f04f 0600 	mov.w	r6, #0
 800630a:	bf08      	it	eq
 800630c:	68e5      	ldreq	r5, [r4, #12]
 800630e:	f104 041a 	add.w	r4, r4, #26
 8006312:	bf08      	it	eq
 8006314:	1aed      	subeq	r5, r5, r3
 8006316:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800631a:	bf08      	it	eq
 800631c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006320:	4293      	cmp	r3, r2
 8006322:	bfc4      	itt	gt
 8006324:	1a9b      	subgt	r3, r3, r2
 8006326:	18ed      	addgt	r5, r5, r3
 8006328:	42b5      	cmp	r5, r6
 800632a:	d11a      	bne.n	8006362 <_printf_common+0xd2>
 800632c:	2000      	movs	r0, #0
 800632e:	e008      	b.n	8006342 <_printf_common+0xb2>
 8006330:	2301      	movs	r3, #1
 8006332:	4652      	mov	r2, sl
 8006334:	4649      	mov	r1, r9
 8006336:	4638      	mov	r0, r7
 8006338:	47c0      	blx	r8
 800633a:	3001      	adds	r0, #1
 800633c:	d103      	bne.n	8006346 <_printf_common+0xb6>
 800633e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006346:	3501      	adds	r5, #1
 8006348:	e7c1      	b.n	80062ce <_printf_common+0x3e>
 800634a:	2030      	movs	r0, #48	; 0x30
 800634c:	18e1      	adds	r1, r4, r3
 800634e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006358:	4422      	add	r2, r4
 800635a:	3302      	adds	r3, #2
 800635c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006360:	e7c2      	b.n	80062e8 <_printf_common+0x58>
 8006362:	2301      	movs	r3, #1
 8006364:	4622      	mov	r2, r4
 8006366:	4649      	mov	r1, r9
 8006368:	4638      	mov	r0, r7
 800636a:	47c0      	blx	r8
 800636c:	3001      	adds	r0, #1
 800636e:	d0e6      	beq.n	800633e <_printf_common+0xae>
 8006370:	3601      	adds	r6, #1
 8006372:	e7d9      	b.n	8006328 <_printf_common+0x98>

08006374 <_printf_i>:
 8006374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006378:	7e0f      	ldrb	r7, [r1, #24]
 800637a:	4691      	mov	r9, r2
 800637c:	2f78      	cmp	r7, #120	; 0x78
 800637e:	4680      	mov	r8, r0
 8006380:	460c      	mov	r4, r1
 8006382:	469a      	mov	sl, r3
 8006384:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800638a:	d807      	bhi.n	800639c <_printf_i+0x28>
 800638c:	2f62      	cmp	r7, #98	; 0x62
 800638e:	d80a      	bhi.n	80063a6 <_printf_i+0x32>
 8006390:	2f00      	cmp	r7, #0
 8006392:	f000 80d5 	beq.w	8006540 <_printf_i+0x1cc>
 8006396:	2f58      	cmp	r7, #88	; 0x58
 8006398:	f000 80c1 	beq.w	800651e <_printf_i+0x1aa>
 800639c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80063a4:	e03a      	b.n	800641c <_printf_i+0xa8>
 80063a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80063aa:	2b15      	cmp	r3, #21
 80063ac:	d8f6      	bhi.n	800639c <_printf_i+0x28>
 80063ae:	a101      	add	r1, pc, #4	; (adr r1, 80063b4 <_printf_i+0x40>)
 80063b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063b4:	0800640d 	.word	0x0800640d
 80063b8:	08006421 	.word	0x08006421
 80063bc:	0800639d 	.word	0x0800639d
 80063c0:	0800639d 	.word	0x0800639d
 80063c4:	0800639d 	.word	0x0800639d
 80063c8:	0800639d 	.word	0x0800639d
 80063cc:	08006421 	.word	0x08006421
 80063d0:	0800639d 	.word	0x0800639d
 80063d4:	0800639d 	.word	0x0800639d
 80063d8:	0800639d 	.word	0x0800639d
 80063dc:	0800639d 	.word	0x0800639d
 80063e0:	08006527 	.word	0x08006527
 80063e4:	0800644d 	.word	0x0800644d
 80063e8:	080064e1 	.word	0x080064e1
 80063ec:	0800639d 	.word	0x0800639d
 80063f0:	0800639d 	.word	0x0800639d
 80063f4:	08006549 	.word	0x08006549
 80063f8:	0800639d 	.word	0x0800639d
 80063fc:	0800644d 	.word	0x0800644d
 8006400:	0800639d 	.word	0x0800639d
 8006404:	0800639d 	.word	0x0800639d
 8006408:	080064e9 	.word	0x080064e9
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	1d1a      	adds	r2, r3, #4
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	602a      	str	r2, [r5, #0]
 8006414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800641c:	2301      	movs	r3, #1
 800641e:	e0a0      	b.n	8006562 <_printf_i+0x1ee>
 8006420:	6820      	ldr	r0, [r4, #0]
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	0607      	lsls	r7, r0, #24
 8006426:	f103 0104 	add.w	r1, r3, #4
 800642a:	6029      	str	r1, [r5, #0]
 800642c:	d501      	bpl.n	8006432 <_printf_i+0xbe>
 800642e:	681e      	ldr	r6, [r3, #0]
 8006430:	e003      	b.n	800643a <_printf_i+0xc6>
 8006432:	0646      	lsls	r6, r0, #25
 8006434:	d5fb      	bpl.n	800642e <_printf_i+0xba>
 8006436:	f9b3 6000 	ldrsh.w	r6, [r3]
 800643a:	2e00      	cmp	r6, #0
 800643c:	da03      	bge.n	8006446 <_printf_i+0xd2>
 800643e:	232d      	movs	r3, #45	; 0x2d
 8006440:	4276      	negs	r6, r6
 8006442:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006446:	230a      	movs	r3, #10
 8006448:	4859      	ldr	r0, [pc, #356]	; (80065b0 <_printf_i+0x23c>)
 800644a:	e012      	b.n	8006472 <_printf_i+0xfe>
 800644c:	682b      	ldr	r3, [r5, #0]
 800644e:	6820      	ldr	r0, [r4, #0]
 8006450:	1d19      	adds	r1, r3, #4
 8006452:	6029      	str	r1, [r5, #0]
 8006454:	0605      	lsls	r5, r0, #24
 8006456:	d501      	bpl.n	800645c <_printf_i+0xe8>
 8006458:	681e      	ldr	r6, [r3, #0]
 800645a:	e002      	b.n	8006462 <_printf_i+0xee>
 800645c:	0641      	lsls	r1, r0, #25
 800645e:	d5fb      	bpl.n	8006458 <_printf_i+0xe4>
 8006460:	881e      	ldrh	r6, [r3, #0]
 8006462:	2f6f      	cmp	r7, #111	; 0x6f
 8006464:	bf0c      	ite	eq
 8006466:	2308      	moveq	r3, #8
 8006468:	230a      	movne	r3, #10
 800646a:	4851      	ldr	r0, [pc, #324]	; (80065b0 <_printf_i+0x23c>)
 800646c:	2100      	movs	r1, #0
 800646e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006472:	6865      	ldr	r5, [r4, #4]
 8006474:	2d00      	cmp	r5, #0
 8006476:	bfa8      	it	ge
 8006478:	6821      	ldrge	r1, [r4, #0]
 800647a:	60a5      	str	r5, [r4, #8]
 800647c:	bfa4      	itt	ge
 800647e:	f021 0104 	bicge.w	r1, r1, #4
 8006482:	6021      	strge	r1, [r4, #0]
 8006484:	b90e      	cbnz	r6, 800648a <_printf_i+0x116>
 8006486:	2d00      	cmp	r5, #0
 8006488:	d04b      	beq.n	8006522 <_printf_i+0x1ae>
 800648a:	4615      	mov	r5, r2
 800648c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006490:	fb03 6711 	mls	r7, r3, r1, r6
 8006494:	5dc7      	ldrb	r7, [r0, r7]
 8006496:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800649a:	4637      	mov	r7, r6
 800649c:	42bb      	cmp	r3, r7
 800649e:	460e      	mov	r6, r1
 80064a0:	d9f4      	bls.n	800648c <_printf_i+0x118>
 80064a2:	2b08      	cmp	r3, #8
 80064a4:	d10b      	bne.n	80064be <_printf_i+0x14a>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	07de      	lsls	r6, r3, #31
 80064aa:	d508      	bpl.n	80064be <_printf_i+0x14a>
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	6861      	ldr	r1, [r4, #4]
 80064b0:	4299      	cmp	r1, r3
 80064b2:	bfde      	ittt	le
 80064b4:	2330      	movle	r3, #48	; 0x30
 80064b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80064be:	1b52      	subs	r2, r2, r5
 80064c0:	6122      	str	r2, [r4, #16]
 80064c2:	464b      	mov	r3, r9
 80064c4:	4621      	mov	r1, r4
 80064c6:	4640      	mov	r0, r8
 80064c8:	f8cd a000 	str.w	sl, [sp]
 80064cc:	aa03      	add	r2, sp, #12
 80064ce:	f7ff fedf 	bl	8006290 <_printf_common>
 80064d2:	3001      	adds	r0, #1
 80064d4:	d14a      	bne.n	800656c <_printf_i+0x1f8>
 80064d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064da:	b004      	add	sp, #16
 80064dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e0:	6823      	ldr	r3, [r4, #0]
 80064e2:	f043 0320 	orr.w	r3, r3, #32
 80064e6:	6023      	str	r3, [r4, #0]
 80064e8:	2778      	movs	r7, #120	; 0x78
 80064ea:	4832      	ldr	r0, [pc, #200]	; (80065b4 <_printf_i+0x240>)
 80064ec:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6829      	ldr	r1, [r5, #0]
 80064f4:	061f      	lsls	r7, r3, #24
 80064f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80064fa:	d402      	bmi.n	8006502 <_printf_i+0x18e>
 80064fc:	065f      	lsls	r7, r3, #25
 80064fe:	bf48      	it	mi
 8006500:	b2b6      	uxthmi	r6, r6
 8006502:	07df      	lsls	r7, r3, #31
 8006504:	bf48      	it	mi
 8006506:	f043 0320 	orrmi.w	r3, r3, #32
 800650a:	6029      	str	r1, [r5, #0]
 800650c:	bf48      	it	mi
 800650e:	6023      	strmi	r3, [r4, #0]
 8006510:	b91e      	cbnz	r6, 800651a <_printf_i+0x1a6>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	f023 0320 	bic.w	r3, r3, #32
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	2310      	movs	r3, #16
 800651c:	e7a6      	b.n	800646c <_printf_i+0xf8>
 800651e:	4824      	ldr	r0, [pc, #144]	; (80065b0 <_printf_i+0x23c>)
 8006520:	e7e4      	b.n	80064ec <_printf_i+0x178>
 8006522:	4615      	mov	r5, r2
 8006524:	e7bd      	b.n	80064a2 <_printf_i+0x12e>
 8006526:	682b      	ldr	r3, [r5, #0]
 8006528:	6826      	ldr	r6, [r4, #0]
 800652a:	1d18      	adds	r0, r3, #4
 800652c:	6961      	ldr	r1, [r4, #20]
 800652e:	6028      	str	r0, [r5, #0]
 8006530:	0635      	lsls	r5, r6, #24
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	d501      	bpl.n	800653a <_printf_i+0x1c6>
 8006536:	6019      	str	r1, [r3, #0]
 8006538:	e002      	b.n	8006540 <_printf_i+0x1cc>
 800653a:	0670      	lsls	r0, r6, #25
 800653c:	d5fb      	bpl.n	8006536 <_printf_i+0x1c2>
 800653e:	8019      	strh	r1, [r3, #0]
 8006540:	2300      	movs	r3, #0
 8006542:	4615      	mov	r5, r2
 8006544:	6123      	str	r3, [r4, #16]
 8006546:	e7bc      	b.n	80064c2 <_printf_i+0x14e>
 8006548:	682b      	ldr	r3, [r5, #0]
 800654a:	2100      	movs	r1, #0
 800654c:	1d1a      	adds	r2, r3, #4
 800654e:	602a      	str	r2, [r5, #0]
 8006550:	681d      	ldr	r5, [r3, #0]
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	4628      	mov	r0, r5
 8006556:	f000 f96d 	bl	8006834 <memchr>
 800655a:	b108      	cbz	r0, 8006560 <_printf_i+0x1ec>
 800655c:	1b40      	subs	r0, r0, r5
 800655e:	6060      	str	r0, [r4, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	2300      	movs	r3, #0
 8006566:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800656a:	e7aa      	b.n	80064c2 <_printf_i+0x14e>
 800656c:	462a      	mov	r2, r5
 800656e:	4649      	mov	r1, r9
 8006570:	4640      	mov	r0, r8
 8006572:	6923      	ldr	r3, [r4, #16]
 8006574:	47d0      	blx	sl
 8006576:	3001      	adds	r0, #1
 8006578:	d0ad      	beq.n	80064d6 <_printf_i+0x162>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	079b      	lsls	r3, r3, #30
 800657e:	d413      	bmi.n	80065a8 <_printf_i+0x234>
 8006580:	68e0      	ldr	r0, [r4, #12]
 8006582:	9b03      	ldr	r3, [sp, #12]
 8006584:	4298      	cmp	r0, r3
 8006586:	bfb8      	it	lt
 8006588:	4618      	movlt	r0, r3
 800658a:	e7a6      	b.n	80064da <_printf_i+0x166>
 800658c:	2301      	movs	r3, #1
 800658e:	4632      	mov	r2, r6
 8006590:	4649      	mov	r1, r9
 8006592:	4640      	mov	r0, r8
 8006594:	47d0      	blx	sl
 8006596:	3001      	adds	r0, #1
 8006598:	d09d      	beq.n	80064d6 <_printf_i+0x162>
 800659a:	3501      	adds	r5, #1
 800659c:	68e3      	ldr	r3, [r4, #12]
 800659e:	9903      	ldr	r1, [sp, #12]
 80065a0:	1a5b      	subs	r3, r3, r1
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	dcf2      	bgt.n	800658c <_printf_i+0x218>
 80065a6:	e7eb      	b.n	8006580 <_printf_i+0x20c>
 80065a8:	2500      	movs	r5, #0
 80065aa:	f104 0619 	add.w	r6, r4, #25
 80065ae:	e7f5      	b.n	800659c <_printf_i+0x228>
 80065b0:	08006e17 	.word	0x08006e17
 80065b4:	08006e28 	.word	0x08006e28

080065b8 <__sflush_r>:
 80065b8:	898a      	ldrh	r2, [r1, #12]
 80065ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065bc:	4605      	mov	r5, r0
 80065be:	0710      	lsls	r0, r2, #28
 80065c0:	460c      	mov	r4, r1
 80065c2:	d457      	bmi.n	8006674 <__sflush_r+0xbc>
 80065c4:	684b      	ldr	r3, [r1, #4]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	dc04      	bgt.n	80065d4 <__sflush_r+0x1c>
 80065ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	dc01      	bgt.n	80065d4 <__sflush_r+0x1c>
 80065d0:	2000      	movs	r0, #0
 80065d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80065d6:	2e00      	cmp	r6, #0
 80065d8:	d0fa      	beq.n	80065d0 <__sflush_r+0x18>
 80065da:	2300      	movs	r3, #0
 80065dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80065e0:	682f      	ldr	r7, [r5, #0]
 80065e2:	6a21      	ldr	r1, [r4, #32]
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	d032      	beq.n	800664e <__sflush_r+0x96>
 80065e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	075a      	lsls	r2, r3, #29
 80065ee:	d505      	bpl.n	80065fc <__sflush_r+0x44>
 80065f0:	6863      	ldr	r3, [r4, #4]
 80065f2:	1ac0      	subs	r0, r0, r3
 80065f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80065f6:	b10b      	cbz	r3, 80065fc <__sflush_r+0x44>
 80065f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80065fa:	1ac0      	subs	r0, r0, r3
 80065fc:	2300      	movs	r3, #0
 80065fe:	4602      	mov	r2, r0
 8006600:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006602:	4628      	mov	r0, r5
 8006604:	6a21      	ldr	r1, [r4, #32]
 8006606:	47b0      	blx	r6
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	89a3      	ldrh	r3, [r4, #12]
 800660c:	d106      	bne.n	800661c <__sflush_r+0x64>
 800660e:	6829      	ldr	r1, [r5, #0]
 8006610:	291d      	cmp	r1, #29
 8006612:	d82b      	bhi.n	800666c <__sflush_r+0xb4>
 8006614:	4a28      	ldr	r2, [pc, #160]	; (80066b8 <__sflush_r+0x100>)
 8006616:	410a      	asrs	r2, r1
 8006618:	07d6      	lsls	r6, r2, #31
 800661a:	d427      	bmi.n	800666c <__sflush_r+0xb4>
 800661c:	2200      	movs	r2, #0
 800661e:	6062      	str	r2, [r4, #4]
 8006620:	6922      	ldr	r2, [r4, #16]
 8006622:	04d9      	lsls	r1, r3, #19
 8006624:	6022      	str	r2, [r4, #0]
 8006626:	d504      	bpl.n	8006632 <__sflush_r+0x7a>
 8006628:	1c42      	adds	r2, r0, #1
 800662a:	d101      	bne.n	8006630 <__sflush_r+0x78>
 800662c:	682b      	ldr	r3, [r5, #0]
 800662e:	b903      	cbnz	r3, 8006632 <__sflush_r+0x7a>
 8006630:	6560      	str	r0, [r4, #84]	; 0x54
 8006632:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006634:	602f      	str	r7, [r5, #0]
 8006636:	2900      	cmp	r1, #0
 8006638:	d0ca      	beq.n	80065d0 <__sflush_r+0x18>
 800663a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800663e:	4299      	cmp	r1, r3
 8006640:	d002      	beq.n	8006648 <__sflush_r+0x90>
 8006642:	4628      	mov	r0, r5
 8006644:	f7ff fbee 	bl	8005e24 <_free_r>
 8006648:	2000      	movs	r0, #0
 800664a:	6360      	str	r0, [r4, #52]	; 0x34
 800664c:	e7c1      	b.n	80065d2 <__sflush_r+0x1a>
 800664e:	2301      	movs	r3, #1
 8006650:	4628      	mov	r0, r5
 8006652:	47b0      	blx	r6
 8006654:	1c41      	adds	r1, r0, #1
 8006656:	d1c8      	bne.n	80065ea <__sflush_r+0x32>
 8006658:	682b      	ldr	r3, [r5, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d0c5      	beq.n	80065ea <__sflush_r+0x32>
 800665e:	2b1d      	cmp	r3, #29
 8006660:	d001      	beq.n	8006666 <__sflush_r+0xae>
 8006662:	2b16      	cmp	r3, #22
 8006664:	d101      	bne.n	800666a <__sflush_r+0xb2>
 8006666:	602f      	str	r7, [r5, #0]
 8006668:	e7b2      	b.n	80065d0 <__sflush_r+0x18>
 800666a:	89a3      	ldrh	r3, [r4, #12]
 800666c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006670:	81a3      	strh	r3, [r4, #12]
 8006672:	e7ae      	b.n	80065d2 <__sflush_r+0x1a>
 8006674:	690f      	ldr	r7, [r1, #16]
 8006676:	2f00      	cmp	r7, #0
 8006678:	d0aa      	beq.n	80065d0 <__sflush_r+0x18>
 800667a:	0793      	lsls	r3, r2, #30
 800667c:	bf18      	it	ne
 800667e:	2300      	movne	r3, #0
 8006680:	680e      	ldr	r6, [r1, #0]
 8006682:	bf08      	it	eq
 8006684:	694b      	ldreq	r3, [r1, #20]
 8006686:	1bf6      	subs	r6, r6, r7
 8006688:	600f      	str	r7, [r1, #0]
 800668a:	608b      	str	r3, [r1, #8]
 800668c:	2e00      	cmp	r6, #0
 800668e:	dd9f      	ble.n	80065d0 <__sflush_r+0x18>
 8006690:	4633      	mov	r3, r6
 8006692:	463a      	mov	r2, r7
 8006694:	4628      	mov	r0, r5
 8006696:	6a21      	ldr	r1, [r4, #32]
 8006698:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800669c:	47e0      	blx	ip
 800669e:	2800      	cmp	r0, #0
 80066a0:	dc06      	bgt.n	80066b0 <__sflush_r+0xf8>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ac:	81a3      	strh	r3, [r4, #12]
 80066ae:	e790      	b.n	80065d2 <__sflush_r+0x1a>
 80066b0:	4407      	add	r7, r0
 80066b2:	1a36      	subs	r6, r6, r0
 80066b4:	e7ea      	b.n	800668c <__sflush_r+0xd4>
 80066b6:	bf00      	nop
 80066b8:	dfbffffe 	.word	0xdfbffffe

080066bc <_fflush_r>:
 80066bc:	b538      	push	{r3, r4, r5, lr}
 80066be:	690b      	ldr	r3, [r1, #16]
 80066c0:	4605      	mov	r5, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	b913      	cbnz	r3, 80066cc <_fflush_r+0x10>
 80066c6:	2500      	movs	r5, #0
 80066c8:	4628      	mov	r0, r5
 80066ca:	bd38      	pop	{r3, r4, r5, pc}
 80066cc:	b118      	cbz	r0, 80066d6 <_fflush_r+0x1a>
 80066ce:	6a03      	ldr	r3, [r0, #32]
 80066d0:	b90b      	cbnz	r3, 80066d6 <_fflush_r+0x1a>
 80066d2:	f7ff f9b1 	bl	8005a38 <__sinit>
 80066d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d0f3      	beq.n	80066c6 <_fflush_r+0xa>
 80066de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066e0:	07d0      	lsls	r0, r2, #31
 80066e2:	d404      	bmi.n	80066ee <_fflush_r+0x32>
 80066e4:	0599      	lsls	r1, r3, #22
 80066e6:	d402      	bmi.n	80066ee <_fflush_r+0x32>
 80066e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80066ea:	f7ff fb99 	bl	8005e20 <__retarget_lock_acquire_recursive>
 80066ee:	4628      	mov	r0, r5
 80066f0:	4621      	mov	r1, r4
 80066f2:	f7ff ff61 	bl	80065b8 <__sflush_r>
 80066f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80066f8:	4605      	mov	r5, r0
 80066fa:	07da      	lsls	r2, r3, #31
 80066fc:	d4e4      	bmi.n	80066c8 <_fflush_r+0xc>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	059b      	lsls	r3, r3, #22
 8006702:	d4e1      	bmi.n	80066c8 <_fflush_r+0xc>
 8006704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006706:	f7ff fb8c 	bl	8005e22 <__retarget_lock_release_recursive>
 800670a:	e7dd      	b.n	80066c8 <_fflush_r+0xc>

0800670c <__swhatbuf_r>:
 800670c:	b570      	push	{r4, r5, r6, lr}
 800670e:	460c      	mov	r4, r1
 8006710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006714:	4615      	mov	r5, r2
 8006716:	2900      	cmp	r1, #0
 8006718:	461e      	mov	r6, r3
 800671a:	b096      	sub	sp, #88	; 0x58
 800671c:	da0c      	bge.n	8006738 <__swhatbuf_r+0x2c>
 800671e:	89a3      	ldrh	r3, [r4, #12]
 8006720:	2100      	movs	r1, #0
 8006722:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006726:	bf0c      	ite	eq
 8006728:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800672c:	2340      	movne	r3, #64	; 0x40
 800672e:	2000      	movs	r0, #0
 8006730:	6031      	str	r1, [r6, #0]
 8006732:	602b      	str	r3, [r5, #0]
 8006734:	b016      	add	sp, #88	; 0x58
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	466a      	mov	r2, sp
 800673a:	f000 f849 	bl	80067d0 <_fstat_r>
 800673e:	2800      	cmp	r0, #0
 8006740:	dbed      	blt.n	800671e <__swhatbuf_r+0x12>
 8006742:	9901      	ldr	r1, [sp, #4]
 8006744:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006748:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800674c:	4259      	negs	r1, r3
 800674e:	4159      	adcs	r1, r3
 8006750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006754:	e7eb      	b.n	800672e <__swhatbuf_r+0x22>

08006756 <__smakebuf_r>:
 8006756:	898b      	ldrh	r3, [r1, #12]
 8006758:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800675a:	079d      	lsls	r5, r3, #30
 800675c:	4606      	mov	r6, r0
 800675e:	460c      	mov	r4, r1
 8006760:	d507      	bpl.n	8006772 <__smakebuf_r+0x1c>
 8006762:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006766:	6023      	str	r3, [r4, #0]
 8006768:	6123      	str	r3, [r4, #16]
 800676a:	2301      	movs	r3, #1
 800676c:	6163      	str	r3, [r4, #20]
 800676e:	b002      	add	sp, #8
 8006770:	bd70      	pop	{r4, r5, r6, pc}
 8006772:	466a      	mov	r2, sp
 8006774:	ab01      	add	r3, sp, #4
 8006776:	f7ff ffc9 	bl	800670c <__swhatbuf_r>
 800677a:	9900      	ldr	r1, [sp, #0]
 800677c:	4605      	mov	r5, r0
 800677e:	4630      	mov	r0, r6
 8006780:	f7ff fbb8 	bl	8005ef4 <_malloc_r>
 8006784:	b948      	cbnz	r0, 800679a <__smakebuf_r+0x44>
 8006786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800678a:	059a      	lsls	r2, r3, #22
 800678c:	d4ef      	bmi.n	800676e <__smakebuf_r+0x18>
 800678e:	f023 0303 	bic.w	r3, r3, #3
 8006792:	f043 0302 	orr.w	r3, r3, #2
 8006796:	81a3      	strh	r3, [r4, #12]
 8006798:	e7e3      	b.n	8006762 <__smakebuf_r+0xc>
 800679a:	89a3      	ldrh	r3, [r4, #12]
 800679c:	6020      	str	r0, [r4, #0]
 800679e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a2:	81a3      	strh	r3, [r4, #12]
 80067a4:	9b00      	ldr	r3, [sp, #0]
 80067a6:	6120      	str	r0, [r4, #16]
 80067a8:	6163      	str	r3, [r4, #20]
 80067aa:	9b01      	ldr	r3, [sp, #4]
 80067ac:	b15b      	cbz	r3, 80067c6 <__smakebuf_r+0x70>
 80067ae:	4630      	mov	r0, r6
 80067b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80067b4:	f000 f81e 	bl	80067f4 <_isatty_r>
 80067b8:	b128      	cbz	r0, 80067c6 <__smakebuf_r+0x70>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	f023 0303 	bic.w	r3, r3, #3
 80067c0:	f043 0301 	orr.w	r3, r3, #1
 80067c4:	81a3      	strh	r3, [r4, #12]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	431d      	orrs	r5, r3
 80067ca:	81a5      	strh	r5, [r4, #12]
 80067cc:	e7cf      	b.n	800676e <__smakebuf_r+0x18>
	...

080067d0 <_fstat_r>:
 80067d0:	b538      	push	{r3, r4, r5, lr}
 80067d2:	2300      	movs	r3, #0
 80067d4:	4d06      	ldr	r5, [pc, #24]	; (80067f0 <_fstat_r+0x20>)
 80067d6:	4604      	mov	r4, r0
 80067d8:	4608      	mov	r0, r1
 80067da:	4611      	mov	r1, r2
 80067dc:	602b      	str	r3, [r5, #0]
 80067de:	f7fb ff8b 	bl	80026f8 <_fstat>
 80067e2:	1c43      	adds	r3, r0, #1
 80067e4:	d102      	bne.n	80067ec <_fstat_r+0x1c>
 80067e6:	682b      	ldr	r3, [r5, #0]
 80067e8:	b103      	cbz	r3, 80067ec <_fstat_r+0x1c>
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	bd38      	pop	{r3, r4, r5, pc}
 80067ee:	bf00      	nop
 80067f0:	200005b4 	.word	0x200005b4

080067f4 <_isatty_r>:
 80067f4:	b538      	push	{r3, r4, r5, lr}
 80067f6:	2300      	movs	r3, #0
 80067f8:	4d05      	ldr	r5, [pc, #20]	; (8006810 <_isatty_r+0x1c>)
 80067fa:	4604      	mov	r4, r0
 80067fc:	4608      	mov	r0, r1
 80067fe:	602b      	str	r3, [r5, #0]
 8006800:	f7fb ff89 	bl	8002716 <_isatty>
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	d102      	bne.n	800680e <_isatty_r+0x1a>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b103      	cbz	r3, 800680e <_isatty_r+0x1a>
 800680c:	6023      	str	r3, [r4, #0]
 800680e:	bd38      	pop	{r3, r4, r5, pc}
 8006810:	200005b4 	.word	0x200005b4

08006814 <_sbrk_r>:
 8006814:	b538      	push	{r3, r4, r5, lr}
 8006816:	2300      	movs	r3, #0
 8006818:	4d05      	ldr	r5, [pc, #20]	; (8006830 <_sbrk_r+0x1c>)
 800681a:	4604      	mov	r4, r0
 800681c:	4608      	mov	r0, r1
 800681e:	602b      	str	r3, [r5, #0]
 8006820:	f7fb ff90 	bl	8002744 <_sbrk>
 8006824:	1c43      	adds	r3, r0, #1
 8006826:	d102      	bne.n	800682e <_sbrk_r+0x1a>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b103      	cbz	r3, 800682e <_sbrk_r+0x1a>
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	bd38      	pop	{r3, r4, r5, pc}
 8006830:	200005b4 	.word	0x200005b4

08006834 <memchr>:
 8006834:	4603      	mov	r3, r0
 8006836:	b510      	push	{r4, lr}
 8006838:	b2c9      	uxtb	r1, r1
 800683a:	4402      	add	r2, r0
 800683c:	4293      	cmp	r3, r2
 800683e:	4618      	mov	r0, r3
 8006840:	d101      	bne.n	8006846 <memchr+0x12>
 8006842:	2000      	movs	r0, #0
 8006844:	e003      	b.n	800684e <memchr+0x1a>
 8006846:	7804      	ldrb	r4, [r0, #0]
 8006848:	3301      	adds	r3, #1
 800684a:	428c      	cmp	r4, r1
 800684c:	d1f6      	bne.n	800683c <memchr+0x8>
 800684e:	bd10      	pop	{r4, pc}

08006850 <_init>:
 8006850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006852:	bf00      	nop
 8006854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006856:	bc08      	pop	{r3}
 8006858:	469e      	mov	lr, r3
 800685a:	4770      	bx	lr

0800685c <_fini>:
 800685c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800685e:	bf00      	nop
 8006860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006862:	bc08      	pop	{r3}
 8006864:	469e      	mov	lr, r3
 8006866:	4770      	bx	lr
