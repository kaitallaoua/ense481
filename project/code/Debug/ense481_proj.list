
ense481_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006954  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007198  08007198  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08007198  08007198  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007198  08007198  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007198  08007198  00017198  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800719c  0800719c  0001719c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080071a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000055c  20000068  08007208  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005c4  08007208  000205c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014261  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b87  00000000  00000000  00034335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014d0  00000000  00000000  00036ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000105a  00000000  00000000  00038390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a3cd  00000000  00000000  000393ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001684f  00000000  00000000  000537b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098070  00000000  00000000  0006a006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061d0  00000000  00000000  00102078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00108248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08006a4c 	.word	0x08006a4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08006a4c 	.word	0x08006a4c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	; 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__aeabi_d2uiz>:
 8000900:	004a      	lsls	r2, r1, #1
 8000902:	d211      	bcs.n	8000928 <__aeabi_d2uiz+0x28>
 8000904:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000908:	d211      	bcs.n	800092e <__aeabi_d2uiz+0x2e>
 800090a:	d50d      	bpl.n	8000928 <__aeabi_d2uiz+0x28>
 800090c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000910:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000914:	d40e      	bmi.n	8000934 <__aeabi_d2uiz+0x34>
 8000916:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800091a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	4770      	bx	lr
 8000928:	f04f 0000 	mov.w	r0, #0
 800092c:	4770      	bx	lr
 800092e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000932:	d102      	bne.n	800093a <__aeabi_d2uiz+0x3a>
 8000934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000938:	4770      	bx	lr
 800093a:	f04f 0000 	mov.w	r0, #0
 800093e:	4770      	bx	lr

08000940 <__aeabi_frsub>:
 8000940:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000944:	e002      	b.n	800094c <__addsf3>
 8000946:	bf00      	nop

08000948 <__aeabi_fsub>:
 8000948:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800094c <__addsf3>:
 800094c:	0042      	lsls	r2, r0, #1
 800094e:	bf1f      	itttt	ne
 8000950:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000954:	ea92 0f03 	teqne	r2, r3
 8000958:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800095c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000960:	d06a      	beq.n	8000a38 <__addsf3+0xec>
 8000962:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000966:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800096a:	bfc1      	itttt	gt
 800096c:	18d2      	addgt	r2, r2, r3
 800096e:	4041      	eorgt	r1, r0
 8000970:	4048      	eorgt	r0, r1
 8000972:	4041      	eorgt	r1, r0
 8000974:	bfb8      	it	lt
 8000976:	425b      	neglt	r3, r3
 8000978:	2b19      	cmp	r3, #25
 800097a:	bf88      	it	hi
 800097c:	4770      	bxhi	lr
 800097e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000982:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000986:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800098a:	bf18      	it	ne
 800098c:	4240      	negne	r0, r0
 800098e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000992:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000996:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800099a:	bf18      	it	ne
 800099c:	4249      	negne	r1, r1
 800099e:	ea92 0f03 	teq	r2, r3
 80009a2:	d03f      	beq.n	8000a24 <__addsf3+0xd8>
 80009a4:	f1a2 0201 	sub.w	r2, r2, #1
 80009a8:	fa41 fc03 	asr.w	ip, r1, r3
 80009ac:	eb10 000c 	adds.w	r0, r0, ip
 80009b0:	f1c3 0320 	rsb	r3, r3, #32
 80009b4:	fa01 f103 	lsl.w	r1, r1, r3
 80009b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009bc:	d502      	bpl.n	80009c4 <__addsf3+0x78>
 80009be:	4249      	negs	r1, r1
 80009c0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009c8:	d313      	bcc.n	80009f2 <__addsf3+0xa6>
 80009ca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ce:	d306      	bcc.n	80009de <__addsf3+0x92>
 80009d0:	0840      	lsrs	r0, r0, #1
 80009d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80009d6:	f102 0201 	add.w	r2, r2, #1
 80009da:	2afe      	cmp	r2, #254	; 0xfe
 80009dc:	d251      	bcs.n	8000a82 <__addsf3+0x136>
 80009de:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	ea40 0003 	orr.w	r0, r0, r3
 80009f0:	4770      	bx	lr
 80009f2:	0049      	lsls	r1, r1, #1
 80009f4:	eb40 0000 	adc.w	r0, r0, r0
 80009f8:	3a01      	subs	r2, #1
 80009fa:	bf28      	it	cs
 80009fc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a00:	d2ed      	bcs.n	80009de <__addsf3+0x92>
 8000a02:	fab0 fc80 	clz	ip, r0
 8000a06:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a0a:	ebb2 020c 	subs.w	r2, r2, ip
 8000a0e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a12:	bfaa      	itet	ge
 8000a14:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a18:	4252      	neglt	r2, r2
 8000a1a:	4318      	orrge	r0, r3
 8000a1c:	bfbc      	itt	lt
 8000a1e:	40d0      	lsrlt	r0, r2
 8000a20:	4318      	orrlt	r0, r3
 8000a22:	4770      	bx	lr
 8000a24:	f092 0f00 	teq	r2, #0
 8000a28:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a2c:	bf06      	itte	eq
 8000a2e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a32:	3201      	addeq	r2, #1
 8000a34:	3b01      	subne	r3, #1
 8000a36:	e7b5      	b.n	80009a4 <__addsf3+0x58>
 8000a38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a46:	d021      	beq.n	8000a8c <__addsf3+0x140>
 8000a48:	ea92 0f03 	teq	r2, r3
 8000a4c:	d004      	beq.n	8000a58 <__addsf3+0x10c>
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	bf08      	it	eq
 8000a54:	4608      	moveq	r0, r1
 8000a56:	4770      	bx	lr
 8000a58:	ea90 0f01 	teq	r0, r1
 8000a5c:	bf1c      	itt	ne
 8000a5e:	2000      	movne	r0, #0
 8000a60:	4770      	bxne	lr
 8000a62:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a66:	d104      	bne.n	8000a72 <__addsf3+0x126>
 8000a68:	0040      	lsls	r0, r0, #1
 8000a6a:	bf28      	it	cs
 8000a6c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	4770      	bx	lr
 8000a72:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a76:	bf3c      	itt	cc
 8000a78:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bxcc	lr
 8000a7e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a82:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a86:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a8a:	4770      	bx	lr
 8000a8c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a90:	bf16      	itet	ne
 8000a92:	4608      	movne	r0, r1
 8000a94:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a98:	4601      	movne	r1, r0
 8000a9a:	0242      	lsls	r2, r0, #9
 8000a9c:	bf06      	itte	eq
 8000a9e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aa2:	ea90 0f01 	teqeq	r0, r1
 8000aa6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000aaa:	4770      	bx	lr

08000aac <__aeabi_ui2f>:
 8000aac:	f04f 0300 	mov.w	r3, #0
 8000ab0:	e004      	b.n	8000abc <__aeabi_i2f+0x8>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_i2f>:
 8000ab4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ab8:	bf48      	it	mi
 8000aba:	4240      	negmi	r0, r0
 8000abc:	ea5f 0c00 	movs.w	ip, r0
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ac8:	4601      	mov	r1, r0
 8000aca:	f04f 0000 	mov.w	r0, #0
 8000ace:	e01c      	b.n	8000b0a <__aeabi_l2f+0x2a>

08000ad0 <__aeabi_ul2f>:
 8000ad0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad4:	bf08      	it	eq
 8000ad6:	4770      	bxeq	lr
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	e00a      	b.n	8000af4 <__aeabi_l2f+0x14>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_l2f>:
 8000ae0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ae4:	bf08      	it	eq
 8000ae6:	4770      	bxeq	lr
 8000ae8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000aec:	d502      	bpl.n	8000af4 <__aeabi_l2f+0x14>
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	ea5f 0c01 	movs.w	ip, r1
 8000af8:	bf02      	ittt	eq
 8000afa:	4684      	moveq	ip, r0
 8000afc:	4601      	moveq	r1, r0
 8000afe:	2000      	moveq	r0, #0
 8000b00:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b04:	bf08      	it	eq
 8000b06:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b0a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b0e:	fabc f28c 	clz	r2, ip
 8000b12:	3a08      	subs	r2, #8
 8000b14:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b18:	db10      	blt.n	8000b3c <__aeabi_l2f+0x5c>
 8000b1a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b1e:	4463      	add	r3, ip
 8000b20:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b24:	f1c2 0220 	rsb	r2, r2, #32
 8000b28:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b2c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b30:	eb43 0002 	adc.w	r0, r3, r2
 8000b34:	bf08      	it	eq
 8000b36:	f020 0001 	biceq.w	r0, r0, #1
 8000b3a:	4770      	bx	lr
 8000b3c:	f102 0220 	add.w	r2, r2, #32
 8000b40:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b44:	f1c2 0220 	rsb	r2, r2, #32
 8000b48:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b4c:	fa21 f202 	lsr.w	r2, r1, r2
 8000b50:	eb43 0002 	adc.w	r0, r3, r2
 8000b54:	bf08      	it	eq
 8000b56:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b5a:	4770      	bx	lr

08000b5c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b64:	1d39      	adds	r1, r7, #4
 8000b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <__io_putchar+0x20>)
 8000b6e:	f004 fdd5 	bl	800571c <HAL_UART_Transmit>
  return ch;
 8000b72:	687b      	ldr	r3, [r7, #4]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	2000033c 	.word	0x2000033c

08000b80 <HAL_GPIO_EXTI_Callback>:
const uint32_t CLI_timeout_ms = 100*1000;
const uint32_t delay_in_test_for_ms = 10*1000;
const uint32_t time_per_periph_ms = 1* 1000;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]
  HAL_ResumeTick();
 8000b8a:	f001 fdc1 	bl	8002710 <HAL_ResumeTick>
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <select_adc_channel>:
  * @brief Select ADC1 channel function
  * @param None
  * @retval None
  */
void select_adc_channel(int channel)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000ba0:	f107 030c 	add.w	r3, r7, #12
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
    //sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000bac:	2301      	movs	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
    switch (channel)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2b0f      	cmp	r3, #15
 8000bb4:	f200 812d 	bhi.w	8000e12 <select_adc_channel+0x27a>
 8000bb8:	a201      	add	r2, pc, #4	; (adr r2, 8000bc0 <select_adc_channel+0x28>)
 8000bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbe:	bf00      	nop
 8000bc0:	08000c01 	.word	0x08000c01
 8000bc4:	08000c23 	.word	0x08000c23
 8000bc8:	08000c45 	.word	0x08000c45
 8000bcc:	08000c67 	.word	0x08000c67
 8000bd0:	08000c89 	.word	0x08000c89
 8000bd4:	08000cab 	.word	0x08000cab
 8000bd8:	08000ccd 	.word	0x08000ccd
 8000bdc:	08000cef 	.word	0x08000cef
 8000be0:	08000d11 	.word	0x08000d11
 8000be4:	08000d33 	.word	0x08000d33
 8000be8:	08000d53 	.word	0x08000d53
 8000bec:	08000d73 	.word	0x08000d73
 8000bf0:	08000d93 	.word	0x08000d93
 8000bf4:	08000db3 	.word	0x08000db3
 8000bf8:	08000dd3 	.word	0x08000dd3
 8000bfc:	08000df3 	.word	0x08000df3
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	613b      	str	r3, [r7, #16]

              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4893      	ldr	r0, [pc, #588]	; (8000e5c <select_adc_channel+0x2c4>)
 8000c10:	f002 fa44 	bl	800309c <HAL_ADC_ConfigChannel>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 80fd 	beq.w	8000e16 <select_adc_channel+0x27e>
              {
                Error_Handler();
 8000c1c:	f001 f8a4 	bl	8001d68 <Error_Handler>
              }
              break;
 8000c20:	e0f9      	b.n	8000e16 <select_adc_channel+0x27e>

        case 1:
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
              sConfig.Channel = ADC_CHANNEL_1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c26:	2301      	movs	r3, #1
 8000c28:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	488a      	ldr	r0, [pc, #552]	; (8000e5c <select_adc_channel+0x2c4>)
 8000c32:	f002 fa33 	bl	800309c <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f000 80ee 	beq.w	8000e1a <select_adc_channel+0x282>
              {
                Error_Handler();
 8000c3e:	f001 f893 	bl	8001d68 <Error_Handler>
              }
              break;
 8000c42:	e0ea      	b.n	8000e1a <select_adc_channel+0x282>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 2:
              sConfig.Channel = ADC_CHANNEL_2;
 8000c44:	2302      	movs	r3, #2
 8000c46:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	4619      	mov	r1, r3
 8000c52:	4882      	ldr	r0, [pc, #520]	; (8000e5c <select_adc_channel+0x2c4>)
 8000c54:	f002 fa22 	bl	800309c <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	f000 80df 	beq.w	8000e1e <select_adc_channel+0x286>
              {
                Error_Handler();
 8000c60:	f001 f882 	bl	8001d68 <Error_Handler>
              }
              break;
 8000c64:	e0db      	b.n	8000e1e <select_adc_channel+0x286>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 3:
              sConfig.Channel = ADC_CHANNEL_3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	4879      	ldr	r0, [pc, #484]	; (8000e5c <select_adc_channel+0x2c4>)
 8000c76:	f002 fa11 	bl	800309c <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	f000 80d0 	beq.w	8000e22 <select_adc_channel+0x28a>
              {
                Error_Handler();
 8000c82:	f001 f871 	bl	8001d68 <Error_Handler>
              }
              break;
 8000c86:	e0cc      	b.n	8000e22 <select_adc_channel+0x28a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 4:
              sConfig.Channel = ADC_CHANNEL_4;
 8000c88:	2304      	movs	r3, #4
 8000c8a:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c90:	f107 030c 	add.w	r3, r7, #12
 8000c94:	4619      	mov	r1, r3
 8000c96:	4871      	ldr	r0, [pc, #452]	; (8000e5c <select_adc_channel+0x2c4>)
 8000c98:	f002 fa00 	bl	800309c <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	f000 80c1 	beq.w	8000e26 <select_adc_channel+0x28e>
              {
                Error_Handler();
 8000ca4:	f001 f860 	bl	8001d68 <Error_Handler>
              }
              break;
 8000ca8:	e0bd      	b.n	8000e26 <select_adc_channel+0x28e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 5:
              sConfig.Channel = ADC_CHANNEL_5;
 8000caa:	2305      	movs	r3, #5
 8000cac:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4868      	ldr	r0, [pc, #416]	; (8000e5c <select_adc_channel+0x2c4>)
 8000cba:	f002 f9ef 	bl	800309c <HAL_ADC_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 80b2 	beq.w	8000e2a <select_adc_channel+0x292>
              {
                Error_Handler();
 8000cc6:	f001 f84f 	bl	8001d68 <Error_Handler>
              }
              break;
 8000cca:	e0ae      	b.n	8000e2a <select_adc_channel+0x292>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 6:
              sConfig.Channel = ADC_CHANNEL_6;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4860      	ldr	r0, [pc, #384]	; (8000e5c <select_adc_channel+0x2c4>)
 8000cdc:	f002 f9de 	bl	800309c <HAL_ADC_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	f000 80a3 	beq.w	8000e2e <select_adc_channel+0x296>
              {
                Error_Handler();
 8000ce8:	f001 f83e 	bl	8001d68 <Error_Handler>
              }
              break;
 8000cec:	e09f      	b.n	8000e2e <select_adc_channel+0x296>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 7:
              sConfig.Channel = ADC_CHANNEL_7;
 8000cee:	2307      	movs	r3, #7
 8000cf0:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4857      	ldr	r0, [pc, #348]	; (8000e5c <select_adc_channel+0x2c4>)
 8000cfe:	f002 f9cd 	bl	800309c <HAL_ADC_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	f000 8094 	beq.w	8000e32 <select_adc_channel+0x29a>
              {
                Error_Handler();
 8000d0a:	f001 f82d 	bl	8001d68 <Error_Handler>
              }
              break;
 8000d0e:	e090      	b.n	8000e32 <select_adc_channel+0x29a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 8:
              sConfig.Channel = ADC_CHANNEL_8;
 8000d10:	2308      	movs	r3, #8
 8000d12:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 9;
 8000d14:	2309      	movs	r3, #9
 8000d16:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	484f      	ldr	r0, [pc, #316]	; (8000e5c <select_adc_channel+0x2c4>)
 8000d20:	f002 f9bc 	bl	800309c <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	f000 8085 	beq.w	8000e36 <select_adc_channel+0x29e>
              {
                Error_Handler();
 8000d2c:	f001 f81c 	bl	8001d68 <Error_Handler>
              }
              break;
 8000d30:	e081      	b.n	8000e36 <select_adc_channel+0x29e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 9:
              sConfig.Channel = ADC_CHANNEL_9;
 8000d32:	2309      	movs	r3, #9
 8000d34:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d36:	2301      	movs	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4846      	ldr	r0, [pc, #280]	; (8000e5c <select_adc_channel+0x2c4>)
 8000d42:	f002 f9ab 	bl	800309c <HAL_ADC_ConfigChannel>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d076      	beq.n	8000e3a <select_adc_channel+0x2a2>
              {
                Error_Handler();
 8000d4c:	f001 f80c 	bl	8001d68 <Error_Handler>
              }
              break;
 8000d50:	e073      	b.n	8000e3a <select_adc_channel+0x2a2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 10:
              sConfig.Channel = ADC_CHANNEL_10;
 8000d52:	230a      	movs	r3, #10
 8000d54:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d56:	2301      	movs	r3, #1
 8000d58:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4619      	mov	r1, r3
 8000d60:	483e      	ldr	r0, [pc, #248]	; (8000e5c <select_adc_channel+0x2c4>)
 8000d62:	f002 f99b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d068      	beq.n	8000e3e <select_adc_channel+0x2a6>
              {
                Error_Handler();
 8000d6c:	f000 fffc 	bl	8001d68 <Error_Handler>
              }
              break;
 8000d70:	e065      	b.n	8000e3e <select_adc_channel+0x2a6>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 11:
              sConfig.Channel = ADC_CHANNEL_11;
 8000d72:	230b      	movs	r3, #11
 8000d74:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4836      	ldr	r0, [pc, #216]	; (8000e5c <select_adc_channel+0x2c4>)
 8000d82:	f002 f98b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d05a      	beq.n	8000e42 <select_adc_channel+0x2aa>
              {
                Error_Handler();
 8000d8c:	f000 ffec 	bl	8001d68 <Error_Handler>
              }
              break;
 8000d90:	e057      	b.n	8000e42 <select_adc_channel+0x2aa>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 12:
              sConfig.Channel = ADC_CHANNEL_12;
 8000d92:	230c      	movs	r3, #12
 8000d94:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d96:	2301      	movs	r3, #1
 8000d98:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d9a:	f107 030c 	add.w	r3, r7, #12
 8000d9e:	4619      	mov	r1, r3
 8000da0:	482e      	ldr	r0, [pc, #184]	; (8000e5c <select_adc_channel+0x2c4>)
 8000da2:	f002 f97b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d04c      	beq.n	8000e46 <select_adc_channel+0x2ae>
              {
                Error_Handler();
 8000dac:	f000 ffdc 	bl	8001d68 <Error_Handler>
              }
              break;
 8000db0:	e049      	b.n	8000e46 <select_adc_channel+0x2ae>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 13:
              sConfig.Channel = ADC_CHANNEL_13;
 8000db2:	230d      	movs	r3, #13
 8000db4:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4826      	ldr	r0, [pc, #152]	; (8000e5c <select_adc_channel+0x2c4>)
 8000dc2:	f002 f96b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03e      	beq.n	8000e4a <select_adc_channel+0x2b2>
              {
                Error_Handler();
 8000dcc:	f000 ffcc 	bl	8001d68 <Error_Handler>
              }
              break;
 8000dd0:	e03b      	b.n	8000e4a <select_adc_channel+0x2b2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 14:
              sConfig.Channel = ADC_CHANNEL_14;
 8000dd2:	230e      	movs	r3, #14
 8000dd4:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dda:	f107 030c 	add.w	r3, r7, #12
 8000dde:	4619      	mov	r1, r3
 8000de0:	481e      	ldr	r0, [pc, #120]	; (8000e5c <select_adc_channel+0x2c4>)
 8000de2:	f002 f95b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d030      	beq.n	8000e4e <select_adc_channel+0x2b6>
              {
                Error_Handler();
 8000dec:	f000 ffbc 	bl	8001d68 <Error_Handler>
              }
              break;
 8000df0:	e02d      	b.n	8000e4e <select_adc_channel+0x2b6>
        case 15:
              sConfig.Channel = ADC_CHANNEL_15;
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000df6:	2301      	movs	r3, #1
 8000df8:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dfa:	f107 030c 	add.w	r3, r7, #12
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4816      	ldr	r0, [pc, #88]	; (8000e5c <select_adc_channel+0x2c4>)
 8000e02:	f002 f94b 	bl	800309c <HAL_ADC_ConfigChannel>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d022      	beq.n	8000e52 <select_adc_channel+0x2ba>
              {
                Error_Handler();
 8000e0c:	f000 ffac 	bl	8001d68 <Error_Handler>
              }
              break;
 8000e10:	e01f      	b.n	8000e52 <select_adc_channel+0x2ba>
        default:
            break;
 8000e12:	bf00      	nop
 8000e14:	e01e      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e16:	bf00      	nop
 8000e18:	e01c      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e1a:	bf00      	nop
 8000e1c:	e01a      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e1e:	bf00      	nop
 8000e20:	e018      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e22:	bf00      	nop
 8000e24:	e016      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e26:	bf00      	nop
 8000e28:	e014      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e2a:	bf00      	nop
 8000e2c:	e012      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e2e:	bf00      	nop
 8000e30:	e010      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e32:	bf00      	nop
 8000e34:	e00e      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e36:	bf00      	nop
 8000e38:	e00c      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e3a:	bf00      	nop
 8000e3c:	e00a      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e3e:	bf00      	nop
 8000e40:	e008      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e42:	bf00      	nop
 8000e44:	e006      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e46:	bf00      	nop
 8000e48:	e004      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e4a:	bf00      	nop
 8000e4c:	e002      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e4e:	bf00      	nop
 8000e50:	e000      	b.n	8000e54 <select_adc_channel+0x2bc>
              break;
 8000e52:	bf00      	nop
    }
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20000084 	.word	0x20000084

08000e60 <print_pwr>:

void print_pwr(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0

	  printf("-------------------------------\r\n");
 8000e66:	4872      	ldr	r0, [pc, #456]	; (8001030 <print_pwr+0x1d0>)
 8000e68:	f004 ff80 	bl	8005d6c <puts>
	  for (uint16_t i = 0; i < 2; i++) {
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	80fb      	strh	r3, [r7, #6]
 8000e70:	e031      	b.n	8000ed6 <print_pwr+0x76>



			  select_adc_channel(i);
 8000e72:	88fb      	ldrh	r3, [r7, #6]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff fe8f 	bl	8000b98 <select_adc_channel>
			  // Get each ADC value from the group (2 channels in this case)
			  HAL_ADC_Start(&hadc1);
 8000e7a:	486e      	ldr	r0, [pc, #440]	; (8001034 <print_pwr+0x1d4>)
 8000e7c:	f001 ff4e 	bl	8002d1c <HAL_ADC_Start>
			  // Wait for regular group conversion to be completed
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e84:	486b      	ldr	r0, [pc, #428]	; (8001034 <print_pwr+0x1d4>)
 8000e86:	f001 fff7 	bl	8002e78 <HAL_ADC_PollForConversion>

			  if (i == 0) {
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d10e      	bne.n	8000eae <print_pwr+0x4e>
				  source_V_q = HAL_ADC_GetValue(&hadc1);
 8000e90:	4868      	ldr	r0, [pc, #416]	; (8001034 <print_pwr+0x1d4>)
 8000e92:	f002 f8f7 	bl	8003084 <HAL_ADC_GetValue>
 8000e96:	4603      	mov	r3, r0
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b67      	ldr	r3, [pc, #412]	; (8001038 <print_pwr+0x1d8>)
 8000e9c:	801a      	strh	r2, [r3, #0]
				  printf("Quantized Source Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) source_V_q);
 8000e9e:	88fb      	ldrh	r3, [r7, #6]
 8000ea0:	4a65      	ldr	r2, [pc, #404]	; (8001038 <print_pwr+0x1d8>)
 8000ea2:	8812      	ldrh	r2, [r2, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4865      	ldr	r0, [pc, #404]	; (800103c <print_pwr+0x1dc>)
 8000ea8:	f004 fefa 	bl	8005ca0 <iprintf>
 8000eac:	e010      	b.n	8000ed0 <print_pwr+0x70>
			  } else if (i == 1) {
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d10d      	bne.n	8000ed0 <print_pwr+0x70>
				  mcu_V_q = HAL_ADC_GetValue(&hadc1);
 8000eb4:	485f      	ldr	r0, [pc, #380]	; (8001034 <print_pwr+0x1d4>)
 8000eb6:	f002 f8e5 	bl	8003084 <HAL_ADC_GetValue>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b60      	ldr	r3, [pc, #384]	; (8001040 <print_pwr+0x1e0>)
 8000ec0:	801a      	strh	r2, [r3, #0]
				  printf("Quantized MCU Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) mcu_V_q);
 8000ec2:	88fb      	ldrh	r3, [r7, #6]
 8000ec4:	4a5e      	ldr	r2, [pc, #376]	; (8001040 <print_pwr+0x1e0>)
 8000ec6:	8812      	ldrh	r2, [r2, #0]
 8000ec8:	4619      	mov	r1, r3
 8000eca:	485e      	ldr	r0, [pc, #376]	; (8001044 <print_pwr+0x1e4>)
 8000ecc:	f004 fee8 	bl	8005ca0 <iprintf>
	  for (uint16_t i = 0; i < 2; i++) {
 8000ed0:	88fb      	ldrh	r3, [r7, #6]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	80fb      	strh	r3, [r7, #6]
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d9ca      	bls.n	8000e72 <print_pwr+0x12>
			  }
		  }

		  shunt_resistor_V_q = source_V_q - mcu_V_q;
 8000edc:	4b56      	ldr	r3, [pc, #344]	; (8001038 <print_pwr+0x1d8>)
 8000ede:	881a      	ldrh	r2, [r3, #0]
 8000ee0:	4b57      	ldr	r3, [pc, #348]	; (8001040 <print_pwr+0x1e0>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <print_pwr+0x1e8>)
 8000eea:	801a      	strh	r2, [r3, #0]
		  shunt_resistor_mV = (uint16_t) (((float) (shunt_resistor_V_q * 1000)) / 4095.0) * 3.3;
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <print_pwr+0x1e8>)
 8000eee:	881b      	ldrh	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fb02 f303 	mul.w	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fdda 	bl	8000ab4 <__aeabi_i2f>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fa92 	bl	800042c <__aeabi_f2d>
 8000f08:	a345      	add	r3, pc, #276	; (adr r3, 8001020 <print_pwr+0x1c0>)
 8000f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0e:	f7ff fc0f 	bl	8000730 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fcf1 	bl	8000900 <__aeabi_d2uiz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fa70 	bl	8000408 <__aeabi_i2d>
 8000f28:	a33f      	add	r3, pc, #252	; (adr r3, 8001028 <print_pwr+0x1c8>)
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	f7ff fad5 	bl	80004dc <__aeabi_dmul>
 8000f32:	4602      	mov	r2, r0
 8000f34:	460b      	mov	r3, r1
 8000f36:	4610      	mov	r0, r2
 8000f38:	4619      	mov	r1, r3
 8000f3a:	f7ff fce1 	bl	8000900 <__aeabi_d2uiz>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	b29a      	uxth	r2, r3
 8000f42:	4b42      	ldr	r3, [pc, #264]	; (800104c <print_pwr+0x1ec>)
 8000f44:	801a      	strh	r2, [r3, #0]
		  mcu_mV = (uint16_t) (((float) (mcu_V_q * 1000)) / 4095.0) * 3.3;
 8000f46:	4b3e      	ldr	r3, [pc, #248]	; (8001040 <print_pwr+0x1e0>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fdad 	bl	8000ab4 <__aeabi_i2f>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fa65 	bl	800042c <__aeabi_f2d>
 8000f62:	a32f      	add	r3, pc, #188	; (adr r3, 8001020 <print_pwr+0x1c0>)
 8000f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f68:	f7ff fbe2 	bl	8000730 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4610      	mov	r0, r2
 8000f72:	4619      	mov	r1, r3
 8000f74:	f7ff fcc4 	bl	8000900 <__aeabi_d2uiz>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa43 	bl	8000408 <__aeabi_i2d>
 8000f82:	a329      	add	r3, pc, #164	; (adr r3, 8001028 <print_pwr+0x1c8>)
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	f7ff faa8 	bl	80004dc <__aeabi_dmul>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	4610      	mov	r0, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f7ff fcb4 	bl	8000900 <__aeabi_d2uiz>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b2c      	ldr	r3, [pc, #176]	; (8001050 <print_pwr+0x1f0>)
 8000f9e:	801a      	strh	r2, [r3, #0]


		  printf("shunt resistor voltage: %u [mV]\r\n", shunt_resistor_mV);
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	; (800104c <print_pwr+0x1ec>)
 8000fa2:	881b      	ldrh	r3, [r3, #0]
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482b      	ldr	r0, [pc, #172]	; (8001054 <print_pwr+0x1f4>)
 8000fa8:	f004 fe7a 	bl	8005ca0 <iprintf>
		  printf("mcu voltage: %u [mV]\r\n", mcu_mV);
 8000fac:	4b28      	ldr	r3, [pc, #160]	; (8001050 <print_pwr+0x1f0>)
 8000fae:	881b      	ldrh	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <print_pwr+0x1f8>)
 8000fb4:	f004 fe74 	bl	8005ca0 <iprintf>

		  // since 1 ohm (assumed constant) shunt resistor
		  // I = V / R
		  // I = V
		  circuit_mA = shunt_resistor_mV;
 8000fb8:	4b24      	ldr	r3, [pc, #144]	; (800104c <print_pwr+0x1ec>)
 8000fba:	881a      	ldrh	r2, [r3, #0]
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <print_pwr+0x1fc>)
 8000fbe:	801a      	strh	r2, [r3, #0]
		  printf("Circuit current: %u [mA]\r\n", circuit_mA);
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <print_pwr+0x1fc>)
 8000fc2:	881b      	ldrh	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4826      	ldr	r0, [pc, #152]	; (8001060 <print_pwr+0x200>)
 8000fc8:	f004 fe6a 	bl	8005ca0 <iprintf>

		  mcu_mW = circuit_mA * (mcu_mV / 1000);
 8000fcc:	4b20      	ldr	r3, [pc, #128]	; (8001050 <print_pwr+0x1f0>)
 8000fce:	881b      	ldrh	r3, [r3, #0]
 8000fd0:	4a24      	ldr	r2, [pc, #144]	; (8001064 <print_pwr+0x204>)
 8000fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd6:	099b      	lsrs	r3, r3, #6
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <print_pwr+0x1fc>)
 8000fdc:	8812      	ldrh	r2, [r2, #0]
 8000fde:	fb02 f303 	mul.w	r3, r2, r3
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <print_pwr+0x208>)
 8000fe6:	801a      	strh	r2, [r3, #0]

		  shunt_resistor_uW = circuit_mA * (shunt_resistor_mV);
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <print_pwr+0x1fc>)
 8000fea:	881b      	ldrh	r3, [r3, #0]
 8000fec:	4a17      	ldr	r2, [pc, #92]	; (800104c <print_pwr+0x1ec>)
 8000fee:	8812      	ldrh	r2, [r2, #0]
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	b29a      	uxth	r2, r3
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	; (800106c <print_pwr+0x20c>)
 8000ff8:	801a      	strh	r2, [r3, #0]

		  printf("shunt resistor power: %u [uW]\r\n", shunt_resistor_uW);
 8000ffa:	4b1c      	ldr	r3, [pc, #112]	; (800106c <print_pwr+0x20c>)
 8000ffc:	881b      	ldrh	r3, [r3, #0]
 8000ffe:	4619      	mov	r1, r3
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <print_pwr+0x210>)
 8001002:	f004 fe4d 	bl	8005ca0 <iprintf>
		  printf("mcu power: %u [mW]\r\n", mcu_mW);
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <print_pwr+0x208>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	4819      	ldr	r0, [pc, #100]	; (8001074 <print_pwr+0x214>)
 800100e:	f004 fe47 	bl	8005ca0 <iprintf>



}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	f3af 8000 	nop.w
 8001020:	00000000 	.word	0x00000000
 8001024:	40affe00 	.word	0x40affe00
 8001028:	66666666 	.word	0x66666666
 800102c:	400a6666 	.word	0x400a6666
 8001030:	08006a64 	.word	0x08006a64
 8001034:	20000084 	.word	0x20000084
 8001038:	20000414 	.word	0x20000414
 800103c:	08006a88 	.word	0x08006a88
 8001040:	20000416 	.word	0x20000416
 8001044:	08006ac0 	.word	0x08006ac0
 8001048:	20000418 	.word	0x20000418
 800104c:	2000041a 	.word	0x2000041a
 8001050:	2000041c 	.word	0x2000041c
 8001054:	08006af4 	.word	0x08006af4
 8001058:	08006b18 	.word	0x08006b18
 800105c:	2000041e 	.word	0x2000041e
 8001060:	08006b30 	.word	0x08006b30
 8001064:	10624dd3 	.word	0x10624dd3
 8001068:	20000420 	.word	0x20000420
 800106c:	20000422 	.word	0x20000422
 8001070:	08006b4c 	.word	0x08006b4c
 8001074:	08006b6c 	.word	0x08006b6c

08001078 <print_help>:

void print_help(void) {
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
	printf("Help: \r\n");
 800107c:	480f      	ldr	r0, [pc, #60]	; (80010bc <print_help+0x44>)
 800107e:	f004 fe75 	bl	8005d6c <puts>
	printf("    max : power consumption test enabling all clocks and peripherals\r\n");
 8001082:	480f      	ldr	r0, [pc, #60]	; (80010c0 <print_help+0x48>)
 8001084:	f004 fe72 	bl	8005d6c <puts>
	printf("    typ : power consumption test for this program: USART1, ADC1, TIM3\r\n");
 8001088:	480e      	ldr	r0, [pc, #56]	; (80010c4 <print_help+0x4c>)
 800108a:	f004 fe6f 	bl	8005d6c <puts>
	printf("    min : power consumption test all peripherals disabled (except TIM4), \r\n	only CPU enabled CANNOT GATHER INFO IN THIS MODE\r\n");
 800108e:	480e      	ldr	r0, [pc, #56]	; (80010c8 <print_help+0x50>)
 8001090:	f004 fe6c 	bl	8005d6c <puts>
	printf("    pwr : free-running print of power readings\r\n");
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <print_help+0x54>)
 8001096:	f004 fe69 	bl	8005d6c <puts>
	printf("    ver : print version info\r\n");
 800109a:	480d      	ldr	r0, [pc, #52]	; (80010d0 <print_help+0x58>)
 800109c:	f004 fe66 	bl	8005d6c <puts>
	printf("    hel : this message\r\n");
 80010a0:	480c      	ldr	r0, [pc, #48]	; (80010d4 <print_help+0x5c>)
 80010a2:	f004 fe63 	bl	8005d6c <puts>
	printf("    sle : enter sleep mode\r\n");
 80010a6:	480c      	ldr	r0, [pc, #48]	; (80010d8 <print_help+0x60>)
 80010a8:	f004 fe60 	bl	8005d6c <puts>
	printf("    sto : enter stop mode\r\n");
 80010ac:	480b      	ldr	r0, [pc, #44]	; (80010dc <print_help+0x64>)
 80010ae:	f004 fe5d 	bl	8005d6c <puts>
	printf("    sta : enter standby mode\r\n");
 80010b2:	480b      	ldr	r0, [pc, #44]	; (80010e0 <print_help+0x68>)
 80010b4:	f004 fe5a 	bl	8005d6c <puts>

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	08006b84 	.word	0x08006b84
 80010c0:	08006b8c 	.word	0x08006b8c
 80010c4:	08006bd4 	.word	0x08006bd4
 80010c8:	08006c1c 	.word	0x08006c1c
 80010cc:	08006c9c 	.word	0x08006c9c
 80010d0:	08006ccc 	.word	0x08006ccc
 80010d4:	08006cec 	.word	0x08006cec
 80010d8:	08006d04 	.word	0x08006d04
 80010dc:	08006d20 	.word	0x08006d20
 80010e0:	08006d3c 	.word	0x08006d3c

080010e4 <print_version>:

void print_version(void) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	printf("Version: REV B April 1th, 2024\r\n");
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <print_version+0x10>)
 80010ea:	f004 fe3f 	bl	8005d6c <puts>
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	08006d5c 	.word	0x08006d5c

080010f8 <test_max>:

// power consumption test enabling all clocks and peripherals
void test_max(void) {
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 80010fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001100:	4619      	mov	r1, r3
 8001102:	485e      	ldr	r0, [pc, #376]	; (800127c <test_max+0x184>)
 8001104:	f004 fdcc 	bl	8005ca0 <iprintf>

	MX_GPIO_Init();
 8001108:	f000 fdc2 	bl	8001c90 <MX_GPIO_Init>
	printf("GPIO INIT\r\n");
 800110c:	485c      	ldr	r0, [pc, #368]	; (8001280 <test_max+0x188>)
 800110e:	f004 fe2d 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001112:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001116:	4618      	mov	r0, r3
 8001118:	f001 fc42 	bl	80029a0 <HAL_Delay>

	MX_USART1_UART_Init();
 800111c:	f000 fd3a 	bl	8001b94 <MX_USART1_UART_Init>
	printf("USART1 INIT\r\n");
 8001120:	4858      	ldr	r0, [pc, #352]	; (8001284 <test_max+0x18c>)
 8001122:	f004 fe23 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001126:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fc38 	bl	80029a0 <HAL_Delay>

	MX_ADC1_Init();
 8001130:	f000 face 	bl	80016d0 <MX_ADC1_Init>
	printf("ADC1 INIT\r\n");
 8001134:	4854      	ldr	r0, [pc, #336]	; (8001288 <test_max+0x190>)
 8001136:	f004 fe19 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	4618      	mov	r0, r3
 8001140:	f001 fc2e 	bl	80029a0 <HAL_Delay>

	MX_ADC2_Init();
 8001144:	f000 fb02 	bl	800174c <MX_ADC2_Init>
	printf("ADC2 INIT\r\n");
 8001148:	4850      	ldr	r0, [pc, #320]	; (800128c <test_max+0x194>)
 800114a:	f004 fe0f 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 800114e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fc24 	bl	80029a0 <HAL_Delay>

	MX_CAN_Init();
 8001158:	f000 fb36 	bl	80017c8 <MX_CAN_Init>
	printf("CANBUS INIT\r\n");
 800115c:	484c      	ldr	r0, [pc, #304]	; (8001290 <test_max+0x198>)
 800115e:	f004 fe05 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001162:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001166:	4618      	mov	r0, r3
 8001168:	f001 fc1a 	bl	80029a0 <HAL_Delay>

	MX_I2C1_Init();
 800116c:	f000 fb60 	bl	8001830 <MX_I2C1_Init>
	printf("I2C1 INIT\r\n");
 8001170:	4848      	ldr	r0, [pc, #288]	; (8001294 <test_max+0x19c>)
 8001172:	f004 fdfb 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	4618      	mov	r0, r3
 800117c:	f001 fc10 	bl	80029a0 <HAL_Delay>

	MX_I2C2_Init();
 8001180:	f000 fb84 	bl	800188c <MX_I2C2_Init>
	printf("I2C2 INIT\r\n");
 8001184:	4844      	ldr	r0, [pc, #272]	; (8001298 <test_max+0x1a0>)
 8001186:	f004 fdf1 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 800118a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800118e:	4618      	mov	r0, r3
 8001190:	f001 fc06 	bl	80029a0 <HAL_Delay>

	MX_SPI1_Init();
 8001194:	f000 fba8 	bl	80018e8 <MX_SPI1_Init>
	printf("SPI1 INIT\r\n");
 8001198:	4840      	ldr	r0, [pc, #256]	; (800129c <test_max+0x1a4>)
 800119a:	f004 fde7 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fbfc 	bl	80029a0 <HAL_Delay>

	MX_SPI2_Init();
 80011a8:	f000 fbd4 	bl	8001954 <MX_SPI2_Init>
	printf("SPI2 INIT\r\n");
 80011ac:	483c      	ldr	r0, [pc, #240]	; (80012a0 <test_max+0x1a8>)
 80011ae:	f004 fddd 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	4618      	mov	r0, r3
 80011b8:	f001 fbf2 	bl	80029a0 <HAL_Delay>

	MX_TIM1_Init();
 80011bc:	f000 fc00 	bl	80019c0 <MX_TIM1_Init>
	printf("TIM1 INIT\r\n");
 80011c0:	4838      	ldr	r0, [pc, #224]	; (80012a4 <test_max+0x1ac>)
 80011c2:	f004 fdd3 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 80011c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ca:	4618      	mov	r0, r3
 80011cc:	f001 fbe8 	bl	80029a0 <HAL_Delay>

	MX_TIM2_Init();
 80011d0:	f000 fc46 	bl	8001a60 <MX_TIM2_Init>
	printf("TIM2 INIT\r\n");
 80011d4:	4834      	ldr	r0, [pc, #208]	; (80012a8 <test_max+0x1b0>)
 80011d6:	f004 fdc9 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 80011da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fbde 	bl	80029a0 <HAL_Delay>

	MX_TIM3_Init();
 80011e4:	f000 fc88 	bl	8001af8 <MX_TIM3_Init>
	printf("TIM3 INIT\r\n");
 80011e8:	4830      	ldr	r0, [pc, #192]	; (80012ac <test_max+0x1b4>)
 80011ea:	f004 fdbf 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 80011ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011f2:	4618      	mov	r0, r3
 80011f4:	f001 fbd4 	bl	80029a0 <HAL_Delay>

	MX_USART2_UART_Init();
 80011f8:	f000 fcf6 	bl	8001be8 <MX_USART2_UART_Init>
	printf("USART2 INIT\r\n");
 80011fc:	482c      	ldr	r0, [pc, #176]	; (80012b0 <test_max+0x1b8>)
 80011fe:	f004 fdb5 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	4618      	mov	r0, r3
 8001208:	f001 fbca 	bl	80029a0 <HAL_Delay>

	MX_USART3_UART_Init();
 800120c:	f000 fd16 	bl	8001c3c <MX_USART3_UART_Init>
	printf("USART3 INIT\r\n");
 8001210:	4828      	ldr	r0, [pc, #160]	; (80012b4 <test_max+0x1bc>)
 8001212:	f004 fdab 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001216:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fbc0 	bl	80029a0 <HAL_Delay>


	printf("DeINIT non typical periph\r\n");
 8001220:	4825      	ldr	r0, [pc, #148]	; (80012b8 <test_max+0x1c0>)
 8001222:	f004 fda3 	bl	8005d6c <puts>
	HAL_Delay(time_per_periph_ms);
 8001226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122a:	4618      	mov	r0, r3
 800122c:	f001 fbb8 	bl	80029a0 <HAL_Delay>

	HAL_ADC_DeInit(&hadc2);
 8001230:	4822      	ldr	r0, [pc, #136]	; (80012bc <test_max+0x1c4>)
 8001232:	f001 fcb1 	bl	8002b98 <HAL_ADC_DeInit>
	HAL_CAN_DeInit(&hcan);
 8001236:	4822      	ldr	r0, [pc, #136]	; (80012c0 <test_max+0x1c8>)
 8001238:	f002 f9be 	bl	80035b8 <HAL_CAN_DeInit>
	HAL_I2C_DeInit(&hi2c1);
 800123c:	4821      	ldr	r0, [pc, #132]	; (80012c4 <test_max+0x1cc>)
 800123e:	f002 fea3 	bl	8003f88 <HAL_I2C_DeInit>
	HAL_I2C_DeInit(&hi2c2);
 8001242:	4821      	ldr	r0, [pc, #132]	; (80012c8 <test_max+0x1d0>)
 8001244:	f002 fea0 	bl	8003f88 <HAL_I2C_DeInit>
	HAL_SPI_DeInit(&hspi1);
 8001248:	4820      	ldr	r0, [pc, #128]	; (80012cc <test_max+0x1d4>)
 800124a:	f003 fd6b 	bl	8004d24 <HAL_SPI_DeInit>
	HAL_SPI_DeInit(&hspi2);
 800124e:	4820      	ldr	r0, [pc, #128]	; (80012d0 <test_max+0x1d8>)
 8001250:	f003 fd68 	bl	8004d24 <HAL_SPI_DeInit>
	HAL_TIM_Base_DeInit(&htim1);
 8001254:	481f      	ldr	r0, [pc, #124]	; (80012d4 <test_max+0x1dc>)
 8001256:	f003 fddc 	bl	8004e12 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim2);
 800125a:	481f      	ldr	r0, [pc, #124]	; (80012d8 <test_max+0x1e0>)
 800125c:	f003 fdd9 	bl	8004e12 <HAL_TIM_Base_DeInit>
	HAL_TIM_Base_DeInit(&htim3);
 8001260:	481e      	ldr	r0, [pc, #120]	; (80012dc <test_max+0x1e4>)
 8001262:	f003 fdd6 	bl	8004e12 <HAL_TIM_Base_DeInit>
	HAL_UART_DeInit(&huart2);
 8001266:	481e      	ldr	r0, [pc, #120]	; (80012e0 <test_max+0x1e8>)
 8001268:	f004 fa26 	bl	80056b8 <HAL_UART_DeInit>
	HAL_UART_DeInit(&huart3);
 800126c:	481d      	ldr	r0, [pc, #116]	; (80012e4 <test_max+0x1ec>)
 800126e:	f004 fa23 	bl	80056b8 <HAL_UART_DeInit>

	printf("Max Test Done\r\n");
 8001272:	481d      	ldr	r0, [pc, #116]	; (80012e8 <test_max+0x1f0>)
 8001274:	f004 fd7a 	bl	8005d6c <puts>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	08006d7c 	.word	0x08006d7c
 8001280:	08006de4 	.word	0x08006de4
 8001284:	08006df0 	.word	0x08006df0
 8001288:	08006e00 	.word	0x08006e00
 800128c:	08006e0c 	.word	0x08006e0c
 8001290:	08006e18 	.word	0x08006e18
 8001294:	08006e28 	.word	0x08006e28
 8001298:	08006e34 	.word	0x08006e34
 800129c:	08006e40 	.word	0x08006e40
 80012a0:	08006e4c 	.word	0x08006e4c
 80012a4:	08006e58 	.word	0x08006e58
 80012a8:	08006e64 	.word	0x08006e64
 80012ac:	08006e70 	.word	0x08006e70
 80012b0:	08006e7c 	.word	0x08006e7c
 80012b4:	08006e8c 	.word	0x08006e8c
 80012b8:	08006e9c 	.word	0x08006e9c
 80012bc:	200000b4 	.word	0x200000b4
 80012c0:	200000e4 	.word	0x200000e4
 80012c4:	2000010c 	.word	0x2000010c
 80012c8:	20000160 	.word	0x20000160
 80012cc:	200001b4 	.word	0x200001b4
 80012d0:	2000020c 	.word	0x2000020c
 80012d4:	20000264 	.word	0x20000264
 80012d8:	200002ac 	.word	0x200002ac
 80012dc:	200002f4 	.word	0x200002f4
 80012e0:	20000384 	.word	0x20000384
 80012e4:	200003cc 	.word	0x200003cc
 80012e8:	08006eb8 	.word	0x08006eb8

080012ec <test_typ>:

// power consumption test for this program: USART1, ADC1, TIM3
void test_typ(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
	printf("Entering typical test mode, ensure external power meter connected. Each periph will delay for %lu ms\r\n", time_per_periph_ms);
 80012f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f4:	4619      	mov	r1, r3
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <test_typ+0x24>)
 80012f8:	f004 fcd2 	bl	8005ca0 <iprintf>
	HAL_Delay(time_per_periph_ms);
 80012fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001300:	4618      	mov	r0, r3
 8001302:	f001 fb4d 	bl	80029a0 <HAL_Delay>

	printf("Typical Test Done\r\n");
 8001306:	4803      	ldr	r0, [pc, #12]	; (8001314 <test_typ+0x28>)
 8001308:	f004 fd30 	bl	8005d6c <puts>

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	08006d7c 	.word	0x08006d7c
 8001314:	08006ec8 	.word	0x08006ec8

08001318 <test_min>:

// power consumption test all peripherals disabled, only CPU enabled
void test_min(void) {
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	printf("Entering typical minimum mode, ensure external power meter connected. Will auto exit in %lu ms\r\n", delay_in_test_for_ms);
 800131c:	f242 7310 	movw	r3, #10000	; 0x2710
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <test_min+0x50>)
 8001324:	f004 fcbc 	bl	8005ca0 <iprintf>
	HAL_Delay(delay_in_test_for_ms);
 8001328:	f242 7310 	movw	r3, #10000	; 0x2710
 800132c:	4618      	mov	r0, r3
 800132e:	f001 fb37 	bl	80029a0 <HAL_Delay>

	HAL_UART_DeInit(&huart1);
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <test_min+0x54>)
 8001334:	f004 f9c0 	bl	80056b8 <HAL_UART_DeInit>
	// printf's wont work..
	HAL_Delay(delay_in_test_for_ms);
 8001338:	f242 7310 	movw	r3, #10000	; 0x2710
 800133c:	4618      	mov	r0, r3
 800133e:	f001 fb2f 	bl	80029a0 <HAL_Delay>

	HAL_ADC_DeInit(&hadc1);
 8001342:	480b      	ldr	r0, [pc, #44]	; (8001370 <test_min+0x58>)
 8001344:	f001 fc28 	bl	8002b98 <HAL_ADC_DeInit>
	HAL_Delay(10*1000);
 8001348:	f242 7010 	movw	r0, #10000	; 0x2710
 800134c:	f001 fb28 	bl	80029a0 <HAL_Delay>

	MX_GPIO_Init();
 8001350:	f000 fc9e 	bl	8001c90 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001354:	f000 fc1e 	bl	8001b94 <MX_USART1_UART_Init>
	MX_ADC1_Init();
 8001358:	f000 f9ba 	bl	80016d0 <MX_ADC1_Init>

	printf("Minimum Test Done\r\n");
 800135c:	4805      	ldr	r0, [pc, #20]	; (8001374 <test_min+0x5c>)
 800135e:	f004 fd05 	bl	8005d6c <puts>

}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	08006edc 	.word	0x08006edc
 800136c:	2000033c 	.word	0x2000033c
 8001370:	20000084 	.word	0x20000084
 8001374:	08006f40 	.word	0x08006f40

08001378 <test_pwr>:

void test_pwr(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
	printf("Entering free-running power mode, press `q` three times quickly to exit\r\n");
 800137c:	480b      	ldr	r0, [pc, #44]	; (80013ac <test_pwr+0x34>)
 800137e:	f004 fcf5 	bl	8005d6c <puts>
	while (1) {

		print_pwr();
 8001382:	f7ff fd6d 	bl	8000e60 <print_pwr>
		HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, 2000);
 8001386:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800138a:	2203      	movs	r2, #3
 800138c:	4908      	ldr	r1, [pc, #32]	; (80013b0 <test_pwr+0x38>)
 800138e:	4809      	ldr	r0, [pc, #36]	; (80013b4 <test_pwr+0x3c>)
 8001390:	f004 fa47 	bl	8005822 <HAL_UART_Receive>

		if (strcmp(UART1_rxBuffer, "qqq") == 0) {
 8001394:	4908      	ldr	r1, [pc, #32]	; (80013b8 <test_pwr+0x40>)
 8001396:	4806      	ldr	r0, [pc, #24]	; (80013b0 <test_pwr+0x38>)
 8001398:	f7fe feda 	bl	8000150 <strcmp>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d1ef      	bne.n	8001382 <test_pwr+0xa>
			printf("Exiting `pwr` mode\r\n");
 80013a2:	4806      	ldr	r0, [pc, #24]	; (80013bc <test_pwr+0x44>)
 80013a4:	f004 fce2 	bl	8005d6c <puts>
			return;
 80013a8:	bf00      	nop

		}
	}


}
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	08006f54 	.word	0x08006f54
 80013b0:	20000424 	.word	0x20000424
 80013b4:	2000033c 	.word	0x2000033c
 80013b8:	08006fa0 	.word	0x08006fa0
 80013bc:	08006fa4 	.word	0x08006fa4

080013c0 <test_sleep>:


// sleep mode implementation details from:
// https://controllerstech.com/low-power-modes-in-stm32/
void test_sleep(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	printf("Entering sleep mode, press blue user button to awake. \r\n\r\n");
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <test_sleep+0x20>)
 80013c6:	f004 fcd1 	bl	8005d6c <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 80013ca:	f001 f991 	bl	80026f0 <HAL_SuspendTick>

	// enter sleep
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013ce:	2101      	movs	r1, #1
 80013d0:	2000      	movs	r0, #0
 80013d2:	f002 fe11 	bl	8003ff8 <HAL_PWR_EnterSLEEPMode>

	// Any interrupt from NVIC will awake MCU, we use EXTI on blue button
	// After servicing that ISR, which re-enabled the HAL tick, we resume here where we left off

	printf("Awoke from sleep\r\n");
 80013d6:	4803      	ldr	r0, [pc, #12]	; (80013e4 <test_sleep+0x24>)
 80013d8:	f004 fcc8 	bl	8005d6c <puts>

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	08006fb8 	.word	0x08006fb8
 80013e4:	08006ff4 	.word	0x08006ff4

080013e8 <test_stop>:

void test_stop(void) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	printf("Entering stop mode, press blue user button to awake. \r\n\r\n");
 80013ec:	4807      	ldr	r0, [pc, #28]	; (800140c <test_stop+0x24>)
 80013ee:	f004 fcbd 	bl	8005d6c <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 80013f2:	f001 f97d 	bl	80026f0 <HAL_SuspendTick>

	// enter stop
	HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2001      	movs	r0, #1
 80013fa:	f002 fe19 	bl	8004030 <HAL_PWR_EnterSTOPMode>
	// Any interrupt from NVIC will awake MCU, we use EXTI on blue button
	// After servicing that ISR, which re-enabled the HAL tick, we resume here where we left off

	// Must reconfigure system clocks as they were disabled
	SystemClock_Config();
 80013fe:	f000 f911 	bl	8001624 <SystemClock_Config>

	printf("Awoke from sleep\r\n");
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <test_stop+0x28>)
 8001404:	f004 fcb2 	bl	8005d6c <puts>

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	08007008 	.word	0x08007008
 8001410:	08006ff4 	.word	0x08006ff4

08001414 <test_standby>:

void test_standby(void) {
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	printf("Entering standby mode, WKUP pin rising edge, RTC alarm, tamper event, NRST, or IWDG used to reset MCU. \r\n\r\n");
 8001418:	4807      	ldr	r0, [pc, #28]	; (8001438 <test_standby+0x24>)
 800141a:	f004 fca7 	bl	8005d6c <puts>

	// since the HAL uses TIM4 interrupt for its timebase, disable so we dont wake
	HAL_SuspendTick();
 800141e:	f001 f967 	bl	80026f0 <HAL_SuspendTick>

	/* Clear the WU FLAG */
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001422:	4b06      	ldr	r3, [pc, #24]	; (800143c <test_standby+0x28>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <test_standby+0x28>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6013      	str	r3, [r2, #0]

	 // consider RTC or wakeup pin config if desired

	// enter standby
	// there is no recovery, think of standby as `shutdown` on a computer. The `wakeup` is a cpu reset
	HAL_PWR_EnterSTANDBYMode();
 800142e:	f002 fe31 	bl	8004094 <HAL_PWR_EnterSTANDBYMode>



}
 8001432:	bf00      	nop
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	08007044 	.word	0x08007044
 800143c:	40007000 	.word	0x40007000

08001440 <read_cli>:
// CLI commands
// max, typ, min, pwr
void read_cli(void) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 3; i++) {
 8001446:	2300      	movs	r3, #0
 8001448:	71fb      	strb	r3, [r7, #7]
 800144a:	e005      	b.n	8001458 <read_cli+0x18>
		UART1_rxBuffer[0] = 0;
 800144c:	4b35      	ldr	r3, [pc, #212]	; (8001524 <read_cli+0xe4>)
 800144e:	2200      	movs	r2, #0
 8001450:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 3; i++) {
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	3301      	adds	r3, #1
 8001456:	71fb      	strb	r3, [r7, #7]
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d9f6      	bls.n	800144c <read_cli+0xc>
	}
	// need to type the command in the timeout
	while(HAL_UART_Receive (&huart1, (uint8_t*) UART1_rxBuffer, 3, CLI_timeout_ms) != HAL_OK);
 800145e:	bf00      	nop
 8001460:	4b31      	ldr	r3, [pc, #196]	; (8001528 <read_cli+0xe8>)
 8001462:	2203      	movs	r2, #3
 8001464:	492f      	ldr	r1, [pc, #188]	; (8001524 <read_cli+0xe4>)
 8001466:	4831      	ldr	r0, [pc, #196]	; (800152c <read_cli+0xec>)
 8001468:	f004 f9db 	bl	8005822 <HAL_UART_Receive>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1f6      	bne.n	8001460 <read_cli+0x20>
	printf("Your command: %s\r\n", UART1_rxBuffer);
 8001472:	492c      	ldr	r1, [pc, #176]	; (8001524 <read_cli+0xe4>)
 8001474:	482e      	ldr	r0, [pc, #184]	; (8001530 <read_cli+0xf0>)
 8001476:	f004 fc13 	bl	8005ca0 <iprintf>

	if (strcmp(UART1_rxBuffer, "max") == 0) {
 800147a:	492e      	ldr	r1, [pc, #184]	; (8001534 <read_cli+0xf4>)
 800147c:	4829      	ldr	r0, [pc, #164]	; (8001524 <read_cli+0xe4>)
 800147e:	f7fe fe67 	bl	8000150 <strcmp>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d101      	bne.n	800148c <read_cli+0x4c>
		test_max();
 8001488:	f7ff fe36 	bl	80010f8 <test_max>

	}

	if (strcmp(UART1_rxBuffer, "typ") == 0) {
 800148c:	492a      	ldr	r1, [pc, #168]	; (8001538 <read_cli+0xf8>)
 800148e:	4825      	ldr	r0, [pc, #148]	; (8001524 <read_cli+0xe4>)
 8001490:	f7fe fe5e 	bl	8000150 <strcmp>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d101      	bne.n	800149e <read_cli+0x5e>
		test_typ();
 800149a:	f7ff ff27 	bl	80012ec <test_typ>
	}

	if (strcmp(UART1_rxBuffer, "min") == 0) {
 800149e:	4927      	ldr	r1, [pc, #156]	; (800153c <read_cli+0xfc>)
 80014a0:	4820      	ldr	r0, [pc, #128]	; (8001524 <read_cli+0xe4>)
 80014a2:	f7fe fe55 	bl	8000150 <strcmp>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <read_cli+0x70>
		test_min();
 80014ac:	f7ff ff34 	bl	8001318 <test_min>

	}

	if (strcmp(UART1_rxBuffer, "pwr") == 0) {
 80014b0:	4923      	ldr	r1, [pc, #140]	; (8001540 <read_cli+0x100>)
 80014b2:	481c      	ldr	r0, [pc, #112]	; (8001524 <read_cli+0xe4>)
 80014b4:	f7fe fe4c 	bl	8000150 <strcmp>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <read_cli+0x82>
		test_pwr();
 80014be:	f7ff ff5b 	bl	8001378 <test_pwr>

	}

	if (strcmp(UART1_rxBuffer, "ver") == 0) {
 80014c2:	4920      	ldr	r1, [pc, #128]	; (8001544 <read_cli+0x104>)
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <read_cli+0xe4>)
 80014c6:	f7fe fe43 	bl	8000150 <strcmp>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d101      	bne.n	80014d4 <read_cli+0x94>
		print_version();
 80014d0:	f7ff fe08 	bl	80010e4 <print_version>

	}

	if (strcmp(UART1_rxBuffer, "hel") == 0) {
 80014d4:	491c      	ldr	r1, [pc, #112]	; (8001548 <read_cli+0x108>)
 80014d6:	4813      	ldr	r0, [pc, #76]	; (8001524 <read_cli+0xe4>)
 80014d8:	f7fe fe3a 	bl	8000150 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d101      	bne.n	80014e6 <read_cli+0xa6>
		print_help();
 80014e2:	f7ff fdc9 	bl	8001078 <print_help>

	}

	if (strcmp(UART1_rxBuffer, "sle") == 0) {
 80014e6:	4919      	ldr	r1, [pc, #100]	; (800154c <read_cli+0x10c>)
 80014e8:	480e      	ldr	r0, [pc, #56]	; (8001524 <read_cli+0xe4>)
 80014ea:	f7fe fe31 	bl	8000150 <strcmp>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d101      	bne.n	80014f8 <read_cli+0xb8>
		test_sleep();
 80014f4:	f7ff ff64 	bl	80013c0 <test_sleep>

	}

	if (strcmp(UART1_rxBuffer, "sto") == 0) {
 80014f8:	4915      	ldr	r1, [pc, #84]	; (8001550 <read_cli+0x110>)
 80014fa:	480a      	ldr	r0, [pc, #40]	; (8001524 <read_cli+0xe4>)
 80014fc:	f7fe fe28 	bl	8000150 <strcmp>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d101      	bne.n	800150a <read_cli+0xca>
		test_stop();
 8001506:	f7ff ff6f 	bl	80013e8 <test_stop>

	}

	if (strcmp(UART1_rxBuffer, "sta") == 0) {
 800150a:	4912      	ldr	r1, [pc, #72]	; (8001554 <read_cli+0x114>)
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <read_cli+0xe4>)
 800150e:	f7fe fe1f 	bl	8000150 <strcmp>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <read_cli+0xdc>
		test_standby();
 8001518:	f7ff ff7c 	bl	8001414 <test_standby>

	}

}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000424 	.word	0x20000424
 8001528:	000186a0 	.word	0x000186a0
 800152c:	2000033c 	.word	0x2000033c
 8001530:	080070b0 	.word	0x080070b0
 8001534:	080070c4 	.word	0x080070c4
 8001538:	080070c8 	.word	0x080070c8
 800153c:	080070cc 	.word	0x080070cc
 8001540:	080070d0 	.word	0x080070d0
 8001544:	080070d4 	.word	0x080070d4
 8001548:	080070d8 	.word	0x080070d8
 800154c:	080070dc 	.word	0x080070dc
 8001550:	080070e0 	.word	0x080070e0
 8001554:	080070e4 	.word	0x080070e4

08001558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155c:	f001 f9ee 	bl	800293c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001560:	f000 f860 	bl	8001624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001564:	f000 fb94 	bl	8001c90 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001568:	f000 fb14 	bl	8001b94 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800156c:	f000 f8b0 	bl	80016d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8001570:	f000 f8ec 	bl	800174c <MX_ADC2_Init>
  MX_CAN_Init();
 8001574:	f000 f928 	bl	80017c8 <MX_CAN_Init>
  MX_I2C1_Init();
 8001578:	f000 f95a 	bl	8001830 <MX_I2C1_Init>
  MX_I2C2_Init();
 800157c:	f000 f986 	bl	800188c <MX_I2C2_Init>
  MX_SPI1_Init();
 8001580:	f000 f9b2 	bl	80018e8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001584:	f000 f9e6 	bl	8001954 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001588:	f000 fa1a 	bl	80019c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800158c:	f000 fa68 	bl	8001a60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001590:	f000 fab2 	bl	8001af8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001594:	f000 fb28 	bl	8001be8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001598:	f000 fb50 	bl	8001c3c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  // above autogenerated code should not be modified, it will be overwritten on changes
  // for consistency, disable the non-typical periphrials
  HAL_ADC_DeInit(&hadc2);
 800159c:	4814      	ldr	r0, [pc, #80]	; (80015f0 <main+0x98>)
 800159e:	f001 fafb 	bl	8002b98 <HAL_ADC_DeInit>
  HAL_CAN_DeInit(&hcan);
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <main+0x9c>)
 80015a4:	f002 f808 	bl	80035b8 <HAL_CAN_DeInit>
  HAL_I2C_DeInit(&hi2c1);
 80015a8:	4813      	ldr	r0, [pc, #76]	; (80015f8 <main+0xa0>)
 80015aa:	f002 fced 	bl	8003f88 <HAL_I2C_DeInit>
  HAL_I2C_DeInit(&hi2c2);
 80015ae:	4813      	ldr	r0, [pc, #76]	; (80015fc <main+0xa4>)
 80015b0:	f002 fcea 	bl	8003f88 <HAL_I2C_DeInit>
  HAL_SPI_DeInit(&hspi1);
 80015b4:	4812      	ldr	r0, [pc, #72]	; (8001600 <main+0xa8>)
 80015b6:	f003 fbb5 	bl	8004d24 <HAL_SPI_DeInit>
  HAL_SPI_DeInit(&hspi2);
 80015ba:	4812      	ldr	r0, [pc, #72]	; (8001604 <main+0xac>)
 80015bc:	f003 fbb2 	bl	8004d24 <HAL_SPI_DeInit>
  HAL_TIM_Base_DeInit(&htim1);
 80015c0:	4811      	ldr	r0, [pc, #68]	; (8001608 <main+0xb0>)
 80015c2:	f003 fc26 	bl	8004e12 <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim2);
 80015c6:	4811      	ldr	r0, [pc, #68]	; (800160c <main+0xb4>)
 80015c8:	f003 fc23 	bl	8004e12 <HAL_TIM_Base_DeInit>
  HAL_TIM_Base_DeInit(&htim3);
 80015cc:	4810      	ldr	r0, [pc, #64]	; (8001610 <main+0xb8>)
 80015ce:	f003 fc20 	bl	8004e12 <HAL_TIM_Base_DeInit>
  HAL_UART_DeInit(&huart2);
 80015d2:	4810      	ldr	r0, [pc, #64]	; (8001614 <main+0xbc>)
 80015d4:	f004 f870 	bl	80056b8 <HAL_UART_DeInit>
  HAL_UART_DeInit(&huart3);
 80015d8:	480f      	ldr	r0, [pc, #60]	; (8001618 <main+0xc0>)
 80015da:	f004 f86d 	bl	80056b8 <HAL_UART_DeInit>




  // display firmware version+build info
  printf("REV B April 1th, 2024\r\n\r\n");
 80015de:	480f      	ldr	r0, [pc, #60]	; (800161c <main+0xc4>)
 80015e0:	f004 fbc4 	bl	8005d6c <puts>
  printf("Power Consumption CLI\r\n");
 80015e4:	480e      	ldr	r0, [pc, #56]	; (8001620 <main+0xc8>)
 80015e6:	f004 fbc1 	bl	8005d6c <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  read_cli();
 80015ea:	f7ff ff29 	bl	8001440 <read_cli>
 80015ee:	e7fc      	b.n	80015ea <main+0x92>
 80015f0:	200000b4 	.word	0x200000b4
 80015f4:	200000e4 	.word	0x200000e4
 80015f8:	2000010c 	.word	0x2000010c
 80015fc:	20000160 	.word	0x20000160
 8001600:	200001b4 	.word	0x200001b4
 8001604:	2000020c 	.word	0x2000020c
 8001608:	20000264 	.word	0x20000264
 800160c:	200002ac 	.word	0x200002ac
 8001610:	200002f4 	.word	0x200002f4
 8001614:	20000384 	.word	0x20000384
 8001618:	200003cc 	.word	0x200003cc
 800161c:	080070e8 	.word	0x080070e8
 8001620:	08007104 	.word	0x08007104

08001624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b094      	sub	sp, #80	; 0x50
 8001628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800162e:	2228      	movs	r2, #40	; 0x28
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fc7a 	bl	8005f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001648:	1d3b      	adds	r3, r7, #4
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	605a      	str	r2, [r3, #4]
 8001650:	609a      	str	r2, [r3, #8]
 8001652:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001654:	2302      	movs	r3, #2
 8001656:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001658:	2301      	movs	r3, #1
 800165a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165c:	2310      	movs	r3, #16
 800165e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	2302      	movs	r3, #2
 8001662:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001664:	2300      	movs	r3, #0
 8001666:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001668:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800166c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001672:	4618      	mov	r0, r3
 8001674:	f002 fd26 	bl	80040c4 <HAL_RCC_OscConfig>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800167e:	f000 fb73 	bl	8001d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001682:	230f      	movs	r3, #15
 8001684:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001686:	2302      	movs	r3, #2
 8001688:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800168a:	2300      	movs	r3, #0
 800168c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800168e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001692:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001694:	2300      	movs	r3, #0
 8001696:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f002 ff92 	bl	80045c8 <HAL_RCC_ClockConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80016aa:	f000 fb5d 	bl	8001d68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80016ae:	2302      	movs	r3, #2
 80016b0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	4618      	mov	r0, r3
 80016ba:	f003 f943 	bl	8004944 <HAL_RCCEx_PeriphCLKConfig>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80016c4:	f000 fb50 	bl	8001d68 <Error_Handler>
  }
}
 80016c8:	bf00      	nop
 80016ca:	3750      	adds	r7, #80	; 0x50
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]
 80016dc:	605a      	str	r2, [r3, #4]
 80016de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80016e0:	4b18      	ldr	r3, [pc, #96]	; (8001744 <MX_ADC1_Init+0x74>)
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <MX_ADC1_Init+0x78>)
 80016e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_ADC1_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_ADC1_Init+0x74>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_ADC1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_ADC1_Init+0x74>)
 80016fa:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80016fe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001700:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_ADC1_Init+0x74>)
 8001702:	2200      	movs	r2, #0
 8001704:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_ADC1_Init+0x74>)
 8001708:	2201      	movs	r2, #1
 800170a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_ADC1_Init+0x74>)
 800170e:	f001 f96b 	bl	80029e8 <HAL_ADC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001718:	f000 fb26 	bl	8001d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001720:	2301      	movs	r3, #1
 8001722:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001724:	2301      	movs	r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001728:	1d3b      	adds	r3, r7, #4
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_ADC1_Init+0x74>)
 800172e:	f001 fcb5 	bl	800309c <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001738:	f000 fb16 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000084 	.word	0x20000084
 8001748:	40012400 	.word	0x40012400

0800174c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b084      	sub	sp, #16
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800175c:	4b18      	ldr	r3, [pc, #96]	; (80017c0 <MX_ADC2_Init+0x74>)
 800175e:	4a19      	ldr	r2, [pc, #100]	; (80017c4 <MX_ADC2_Init+0x78>)
 8001760:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001762:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <MX_ADC2_Init+0x74>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8001768:	4b15      	ldr	r3, [pc, #84]	; (80017c0 <MX_ADC2_Init+0x74>)
 800176a:	2201      	movs	r2, #1
 800176c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800176e:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_ADC2_Init+0x74>)
 8001770:	2200      	movs	r2, #0
 8001772:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001774:	4b12      	ldr	r3, [pc, #72]	; (80017c0 <MX_ADC2_Init+0x74>)
 8001776:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800177a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800177c:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <MX_ADC2_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8001782:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_ADC2_Init+0x74>)
 8001784:	2201      	movs	r2, #1
 8001786:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001788:	480d      	ldr	r0, [pc, #52]	; (80017c0 <MX_ADC2_Init+0x74>)
 800178a:	f001 f92d 	bl	80029e8 <HAL_ADC_Init>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8001794:	f000 fae8 	bl	8001d68 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001798:	230f      	movs	r3, #15
 800179a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800179c:	2301      	movs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80017a4:	1d3b      	adds	r3, r7, #4
 80017a6:	4619      	mov	r1, r3
 80017a8:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_ADC2_Init+0x74>)
 80017aa:	f001 fc77 	bl	800309c <HAL_ADC_ConfigChannel>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 80017b4:	f000 fad8 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	3710      	adds	r7, #16
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	200000b4 	.word	0x200000b4
 80017c4:	40012800 	.word	0x40012800

080017c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80017cc:	4b16      	ldr	r3, [pc, #88]	; (8001828 <MX_CAN_Init+0x60>)
 80017ce:	4a17      	ldr	r2, [pc, #92]	; (800182c <MX_CAN_Init+0x64>)
 80017d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <MX_CAN_Init+0x60>)
 80017d4:	2210      	movs	r2, #16
 80017d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80017d8:	4b13      	ldr	r3, [pc, #76]	; (8001828 <MX_CAN_Init+0x60>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <MX_CAN_Init+0x60>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <MX_CAN_Init+0x60>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <MX_CAN_Init+0x60>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80017f0:	4b0d      	ldr	r3, [pc, #52]	; (8001828 <MX_CAN_Init+0x60>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	; (8001828 <MX_CAN_Init+0x60>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80017fc:	4b0a      	ldr	r3, [pc, #40]	; (8001828 <MX_CAN_Init+0x60>)
 80017fe:	2200      	movs	r2, #0
 8001800:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8001802:	4b09      	ldr	r3, [pc, #36]	; (8001828 <MX_CAN_Init+0x60>)
 8001804:	2200      	movs	r2, #0
 8001806:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8001808:	4b07      	ldr	r3, [pc, #28]	; (8001828 <MX_CAN_Init+0x60>)
 800180a:	2200      	movs	r2, #0
 800180c:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_CAN_Init+0x60>)
 8001810:	2200      	movs	r2, #0
 8001812:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <MX_CAN_Init+0x60>)
 8001816:	f001 fdd4 	bl	80033c2 <HAL_CAN_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8001820:	f000 faa2 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}
 8001828:	200000e4 	.word	0x200000e4
 800182c:	40006400 	.word	0x40006400

08001830 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_I2C1_Init+0x50>)
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <MX_I2C1_Init+0x54>)
 8001838:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800183a:	4b11      	ldr	r3, [pc, #68]	; (8001880 <MX_I2C1_Init+0x50>)
 800183c:	4a12      	ldr	r2, [pc, #72]	; (8001888 <MX_I2C1_Init+0x58>)
 800183e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001840:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_I2C1_Init+0x50>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001846:	4b0e      	ldr	r3, [pc, #56]	; (8001880 <MX_I2C1_Init+0x50>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800184c:	4b0c      	ldr	r3, [pc, #48]	; (8001880 <MX_I2C1_Init+0x50>)
 800184e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001852:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001854:	4b0a      	ldr	r3, [pc, #40]	; (8001880 <MX_I2C1_Init+0x50>)
 8001856:	2200      	movs	r2, #0
 8001858:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <MX_I2C1_Init+0x50>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800186c:	4804      	ldr	r0, [pc, #16]	; (8001880 <MX_I2C1_Init+0x50>)
 800186e:	f002 fa47 	bl	8003d00 <HAL_I2C_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001878:	f000 fa76 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	2000010c 	.word	0x2000010c
 8001884:	40005400 	.word	0x40005400
 8001888:	000186a0 	.word	0x000186a0

0800188c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <MX_I2C2_Init+0x50>)
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <MX_I2C2_Init+0x54>)
 8001894:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001896:	4b11      	ldr	r3, [pc, #68]	; (80018dc <MX_I2C2_Init+0x50>)
 8001898:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_I2C2_Init+0x58>)
 800189a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800189c:	4b0f      	ldr	r3, [pc, #60]	; (80018dc <MX_I2C2_Init+0x50>)
 800189e:	2200      	movs	r2, #0
 80018a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80018a2:	4b0e      	ldr	r3, [pc, #56]	; (80018dc <MX_I2C2_Init+0x50>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <MX_I2C2_Init+0x50>)
 80018aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <MX_I2C2_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <MX_I2C2_Init+0x50>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018bc:	4b07      	ldr	r3, [pc, #28]	; (80018dc <MX_I2C2_Init+0x50>)
 80018be:	2200      	movs	r2, #0
 80018c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <MX_I2C2_Init+0x50>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018c8:	4804      	ldr	r0, [pc, #16]	; (80018dc <MX_I2C2_Init+0x50>)
 80018ca:	f002 fa19 	bl	8003d00 <HAL_I2C_Init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018d4:	f000 fa48 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018d8:	bf00      	nop
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000160 	.word	0x20000160
 80018e0:	40005800 	.word	0x40005800
 80018e4:	000186a0 	.word	0x000186a0

080018e8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_SPI1_Init+0x64>)
 80018ee:	4a18      	ldr	r2, [pc, #96]	; (8001950 <MX_SPI1_Init+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_SPI1_Init+0x64>)
 80018f4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018f8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_SPI1_Init+0x64>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <MX_SPI1_Init+0x64>)
 8001902:	2200      	movs	r2, #0
 8001904:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001906:	4b11      	ldr	r3, [pc, #68]	; (800194c <MX_SPI1_Init+0x64>)
 8001908:	2200      	movs	r2, #0
 800190a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800190c:	4b0f      	ldr	r3, [pc, #60]	; (800194c <MX_SPI1_Init+0x64>)
 800190e:	2200      	movs	r2, #0
 8001910:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001912:	4b0e      	ldr	r3, [pc, #56]	; (800194c <MX_SPI1_Init+0x64>)
 8001914:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001918:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <MX_SPI1_Init+0x64>)
 800191c:	2200      	movs	r2, #0
 800191e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001920:	4b0a      	ldr	r3, [pc, #40]	; (800194c <MX_SPI1_Init+0x64>)
 8001922:	2200      	movs	r2, #0
 8001924:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <MX_SPI1_Init+0x64>)
 8001928:	2200      	movs	r2, #0
 800192a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800192c:	4b07      	ldr	r3, [pc, #28]	; (800194c <MX_SPI1_Init+0x64>)
 800192e:	2200      	movs	r2, #0
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <MX_SPI1_Init+0x64>)
 8001934:	220a      	movs	r2, #10
 8001936:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_SPI1_Init+0x64>)
 800193a:	f003 f96f 	bl	8004c1c <HAL_SPI_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001944:	f000 fa10 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	200001b4 	.word	0x200001b4
 8001950:	40013000 	.word	0x40013000

08001954 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <MX_SPI2_Init+0x64>)
 800195a:	4a18      	ldr	r2, [pc, #96]	; (80019bc <MX_SPI2_Init+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001960:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001964:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001966:	4b14      	ldr	r3, [pc, #80]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_SPI2_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_SPI2_Init+0x64>)
 800197a:	2200      	movs	r2, #0
 800197c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001984:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001986:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_SPI2_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_SPI2_Init+0x64>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_SPI2_Init+0x64>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_SPI2_Init+0x64>)
 80019a0:	220a      	movs	r2, #10
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_SPI2_Init+0x64>)
 80019a6:	f003 f939 	bl	8004c1c <HAL_SPI_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019b0:	f000 f9da 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	2000020c 	.word	0x2000020c
 80019bc:	40003800 	.word	0x40003800

080019c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0308 	add.w	r3, r7, #8
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	463b      	mov	r3, r7
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <MX_TIM1_Init+0x9c>)
 80019e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019e2:	4b1d      	ldr	r3, [pc, #116]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_TIM1_Init+0x98>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <MX_TIM1_Init+0x98>)
 8001a04:	2280      	movs	r2, #128	; 0x80
 8001a06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <MX_TIM1_Init+0x98>)
 8001a0a:	f003 f9b3 	bl	8004d74 <HAL_TIM_Base_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001a14:	f000 f9a8 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001a1e:	f107 0308 	add.w	r3, r7, #8
 8001a22:	4619      	mov	r1, r3
 8001a24:	480c      	ldr	r0, [pc, #48]	; (8001a58 <MX_TIM1_Init+0x98>)
 8001a26:	f003 fba3 	bl	8005170 <HAL_TIM_ConfigClockSource>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001a30:	f000 f99a 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_TIM1_Init+0x98>)
 8001a42:	f003 fd79 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001a4c:	f000 f98c 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20000264 	.word	0x20000264
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a66:	f107 0308 	add.w	r3, r7, #8
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
 8001a72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a74:	463b      	mov	r3, r7
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001a7e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a82:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001a90:	4b18      	ldr	r3, [pc, #96]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a96:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001aa0:	2280      	movs	r2, #128	; 0x80
 8001aa2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aa4:	4813      	ldr	r0, [pc, #76]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001aa6:	f003 f965 	bl	8004d74 <HAL_TIM_Base_Init>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ab0:	f000 f95a 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	4619      	mov	r1, r3
 8001ac0:	480c      	ldr	r0, [pc, #48]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001ac2:	f003 fb55 	bl	8005170 <HAL_TIM_ConfigClockSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001acc:	f000 f94c 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ad8:	463b      	mov	r3, r7
 8001ada:	4619      	mov	r1, r3
 8001adc:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM2_Init+0x94>)
 8001ade:	f003 fd2b 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ae8:	f000 f93e 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	3718      	adds	r7, #24
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200002ac 	.word	0x200002ac

08001af8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0308 	add.w	r3, r7, #8
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b16:	4a1e      	ldr	r2, [pc, #120]	; (8001b90 <MX_TIM3_Init+0x98>)
 8001b18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b1a:	4b1c      	ldr	r3, [pc, #112]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b20:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b26:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b2e:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b34:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b3a:	4814      	ldr	r0, [pc, #80]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b3c:	f003 f91a 	bl	8004d74 <HAL_TIM_Base_Init>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001b46:	f000 f90f 	bl	8001d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b50:	f107 0308 	add.w	r3, r7, #8
 8001b54:	4619      	mov	r1, r3
 8001b56:	480d      	ldr	r0, [pc, #52]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b58:	f003 fb0a 	bl	8005170 <HAL_TIM_ConfigClockSource>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001b62:	f000 f901 	bl	8001d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b6e:	463b      	mov	r3, r7
 8001b70:	4619      	mov	r1, r3
 8001b72:	4806      	ldr	r0, [pc, #24]	; (8001b8c <MX_TIM3_Init+0x94>)
 8001b74:	f003 fce0 	bl	8005538 <HAL_TIMEx_MasterConfigSynchronization>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001b7e:	f000 f8f3 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	3718      	adds	r7, #24
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200002f4 	.word	0x200002f4
 8001b90:	40000400 	.word	0x40000400

08001b94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <MX_USART1_UART_Init+0x50>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b0e      	ldr	r3, [pc, #56]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0b      	ldr	r3, [pc, #44]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	f003 fd24 	bl	8005618 <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bd6:	f000 f8c7 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000033c 	.word	0x2000033c
 8001be4:	40013800 	.word	0x40013800

08001be8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001bec:	4b11      	ldr	r3, [pc, #68]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_USART2_UART_Init+0x50>)
 8001bf0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bfa:	4b0e      	ldr	r3, [pc, #56]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c00:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c0c:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c0e:	220c      	movs	r2, #12
 8001c10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c12:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c1e:	4805      	ldr	r0, [pc, #20]	; (8001c34 <MX_USART2_UART_Init+0x4c>)
 8001c20:	f003 fcfa 	bl	8005618 <HAL_UART_Init>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d001      	beq.n	8001c2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c2a:	f000 f89d 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	20000384 	.word	0x20000384
 8001c38:	40004400 	.word	0x40004400

08001c3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c42:	4a12      	ldr	r2, [pc, #72]	; (8001c8c <MX_USART3_UART_Init+0x50>)
 8001c44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c46:	4b10      	ldr	r3, [pc, #64]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4e:	4b0e      	ldr	r3, [pc, #56]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c60:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c62:	220c      	movs	r2, #12
 8001c64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c66:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <MX_USART3_UART_Init+0x4c>)
 8001c74:	f003 fcd0 	bl	8005618 <HAL_UART_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c7e:	f000 f873 	bl	8001d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c82:	bf00      	nop
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	200003cc 	.word	0x200003cc
 8001c8c:	40004800 	.word	0x40004800

08001c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c96:	f107 0310 	add.w	r3, r7, #16
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	605a      	str	r2, [r3, #4]
 8001ca0:	609a      	str	r2, [r3, #8]
 8001ca2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ca4:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	4a23      	ldr	r2, [pc, #140]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001caa:	f043 0310 	orr.w	r3, r3, #16
 8001cae:	6193      	str	r3, [r2, #24]
 8001cb0:	4b21      	ldr	r3, [pc, #132]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	60fb      	str	r3, [r7, #12]
 8001cba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	4a1d      	ldr	r2, [pc, #116]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cc2:	f043 0320 	orr.w	r3, r3, #32
 8001cc6:	6193      	str	r3, [r2, #24]
 8001cc8:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd4:	4b18      	ldr	r3, [pc, #96]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	4a17      	ldr	r2, [pc, #92]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cda:	f043 0304 	orr.w	r3, r3, #4
 8001cde:	6193      	str	r3, [r2, #24]
 8001ce0:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	4a11      	ldr	r2, [pc, #68]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cf2:	f043 0308 	orr.w	r3, r3, #8
 8001cf6:	6193      	str	r3, [r2, #24]
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_GPIO_Init+0xa8>)
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001d04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_GPIO_Init+0xac>)
 8001d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d12:	f107 0310 	add.w	r3, r7, #16
 8001d16:	4619      	mov	r1, r3
 8001d18:	4809      	ldr	r0, [pc, #36]	; (8001d40 <MX_GPIO_Init+0xb0>)
 8001d1a:	f001 fd99 	bl	8003850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	2028      	movs	r0, #40	; 0x28
 8001d24:	f001 fd69 	bl	80037fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d28:	2028      	movs	r0, #40	; 0x28
 8001d2a:	f001 fd82 	bl	8003832 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d2e:	bf00      	nop
 8001d30:	3720      	adds	r7, #32
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	10110000 	.word	0x10110000
 8001d40:	40011000 	.word	0x40011000

08001d44 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a04      	ldr	r2, [pc, #16]	; (8001d64 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d101      	bne.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001d56:	f000 fe07 	bl	8002968 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40000800 	.word	0x40000800

08001d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d6c:	b672      	cpsid	i
}
 8001d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Bricked");
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <Error_Handler+0x18>)
 8001d72:	f003 ff95 	bl	8005ca0 <iprintf>
	  HAL_Delay(1000);
 8001d76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d7a:	f000 fe11 	bl	80029a0 <HAL_Delay>
	  printf("Bricked");
 8001d7e:	e7f7      	b.n	8001d70 <Error_Handler+0x8>
 8001d80:	0800711c 	.word	0x0800711c

08001d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_MspInit+0x5c>)
 8001d8c:	699b      	ldr	r3, [r3, #24]
 8001d8e:	4a14      	ldr	r2, [pc, #80]	; (8001de0 <HAL_MspInit+0x5c>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6193      	str	r3, [r2, #24]
 8001d96:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <HAL_MspInit+0x5c>)
 8001d98:	699b      	ldr	r3, [r3, #24]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001da2:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_MspInit+0x5c>)
 8001da4:	69db      	ldr	r3, [r3, #28]
 8001da6:	4a0e      	ldr	r2, [pc, #56]	; (8001de0 <HAL_MspInit+0x5c>)
 8001da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dac:	61d3      	str	r3, [r2, #28]
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <HAL_MspInit+0x5c>)
 8001db0:	69db      	ldr	r3, [r3, #28]
 8001db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db6:	607b      	str	r3, [r7, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_MspInit+0x60>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001dc6:	60fb      	str	r3, [r7, #12]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001dce:	60fb      	str	r3, [r7, #12]
 8001dd0:	4a04      	ldr	r2, [pc, #16]	; (8001de4 <HAL_MspInit+0x60>)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000
 8001de4:	40010000 	.word	0x40010000

08001de8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0318 	add.w	r3, r7, #24
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a28      	ldr	r2, [pc, #160]	; (8001ea4 <HAL_ADC_MspInit+0xbc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d122      	bne.n	8001e4e <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e12:	6193      	str	r3, [r2, #24]
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e26:	f043 0304 	orr.w	r3, r3, #4
 8001e2a:	6193      	str	r3, [r2, #24]
 8001e2c:	4b1e      	ldr	r3, [pc, #120]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e40:	f107 0318 	add.w	r3, r7, #24
 8001e44:	4619      	mov	r1, r3
 8001e46:	4819      	ldr	r0, [pc, #100]	; (8001eac <HAL_ADC_MspInit+0xc4>)
 8001e48:	f001 fd02 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001e4c:	e026      	b.n	8001e9c <HAL_ADC_MspInit+0xb4>
  else if(hadc->Instance==ADC2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a17      	ldr	r2, [pc, #92]	; (8001eb0 <HAL_ADC_MspInit+0xc8>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d121      	bne.n	8001e9c <HAL_ADC_MspInit+0xb4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001e58:	4b13      	ldr	r3, [pc, #76]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e62:	6193      	str	r3, [r2, #24]
 8001e64:	4b10      	ldr	r3, [pc, #64]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e70:	4b0d      	ldr	r3, [pc, #52]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e72:	699b      	ldr	r3, [r3, #24]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6193      	str	r3, [r2, #24]
 8001e7c:	4b0a      	ldr	r3, [pc, #40]	; (8001ea8 <HAL_ADC_MspInit+0xc0>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	f003 0310 	and.w	r3, r3, #16
 8001e84:	60bb      	str	r3, [r7, #8]
 8001e86:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e88:	2320      	movs	r3, #32
 8001e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0318 	add.w	r3, r7, #24
 8001e94:	4619      	mov	r1, r3
 8001e96:	4807      	ldr	r0, [pc, #28]	; (8001eb4 <HAL_ADC_MspInit+0xcc>)
 8001e98:	f001 fcda 	bl	8003850 <HAL_GPIO_Init>
}
 8001e9c:	bf00      	nop
 8001e9e:	3728      	adds	r7, #40	; 0x28
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40012400 	.word	0x40012400
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40010800 	.word	0x40010800
 8001eb0:	40012800 	.word	0x40012800
 8001eb4:	40011000 	.word	0x40011000

08001eb8 <HAL_ADC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_ADC_MspDeInit+0x50>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_MspDeInit+0x28>
  {
  /* USER CODE BEGIN ADC1_MspDeInit 0 */

  /* USER CODE END ADC1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8001eca:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <HAL_ADC_MspDeInit+0x54>)
 8001ecc:	699b      	ldr	r3, [r3, #24]
 8001ece:	4a0f      	ldr	r2, [pc, #60]	; (8001f0c <HAL_ADC_MspDeInit+0x54>)
 8001ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001ed4:	6193      	str	r3, [r2, #24]

    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_1);
 8001ed6:	2103      	movs	r1, #3
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <HAL_ADC_MspDeInit+0x58>)
 8001eda:	f001 fe3d 	bl	8003b58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN ADC2_MspDeInit 1 */

  /* USER CODE END ADC2_MspDeInit 1 */
  }

}
 8001ede:	e00e      	b.n	8001efe <HAL_ADC_MspDeInit+0x46>
  else if(hadc->Instance==ADC2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <HAL_ADC_MspDeInit+0x5c>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d109      	bne.n	8001efe <HAL_ADC_MspDeInit+0x46>
    __HAL_RCC_ADC2_CLK_DISABLE();
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_ADC_MspDeInit+0x54>)
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_ADC_MspDeInit+0x54>)
 8001ef0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001ef4:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_5);
 8001ef6:	2120      	movs	r1, #32
 8001ef8:	4807      	ldr	r0, [pc, #28]	; (8001f18 <HAL_ADC_MspDeInit+0x60>)
 8001efa:	f001 fe2d 	bl	8003b58 <HAL_GPIO_DeInit>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40012400 	.word	0x40012400
 8001f0c:	40021000 	.word	0x40021000
 8001f10:	40010800 	.word	0x40010800
 8001f14:	40012800 	.word	0x40012800
 8001f18:	40011000 	.word	0x40011000

08001f1c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b08a      	sub	sp, #40	; 0x28
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0314 	add.w	r3, r7, #20
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_CAN_MspInit+0xb0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d143      	bne.n	8001fc4 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f3e:	69db      	ldr	r3, [r3, #28]
 8001f40:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f46:	61d3      	str	r3, [r2, #28]
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f4a:	69db      	ldr	r3, [r3, #28]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f5a:	f043 0308 	orr.w	r3, r3, #8
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b1b      	ldr	r3, [pc, #108]	; (8001fd0 <HAL_CAN_MspInit+0xb4>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0308 	and.w	r3, r3, #8
 8001f68:	60fb      	str	r3, [r7, #12]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f72:	2300      	movs	r3, #0
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7a:	f107 0314 	add.w	r3, r7, #20
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4814      	ldr	r0, [pc, #80]	; (8001fd4 <HAL_CAN_MspInit+0xb8>)
 8001f82:	f001 fc65 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f90:	2303      	movs	r3, #3
 8001f92:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480e      	ldr	r0, [pc, #56]	; (8001fd4 <HAL_CAN_MspInit+0xb8>)
 8001f9c:	f001 fc58 	bl	8003850 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_CAN_MspInit+0xbc>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f423 43c0 	bic.w	r3, r3, #24576	; 0x6000
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbe:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_CAN_MspInit+0xbc>)
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001fc4:	bf00      	nop
 8001fc6:	3728      	adds	r7, #40	; 0x28
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40006400 	.word	0x40006400
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010c00 	.word	0x40010c00
 8001fd8:	40010000 	.word	0x40010000

08001fdc <HAL_CAN_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspDeInit(CAN_HandleTypeDef* hcan)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  if(hcan->Instance==CAN1)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a08      	ldr	r2, [pc, #32]	; (800200c <HAL_CAN_MspDeInit+0x30>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d10a      	bne.n	8002004 <HAL_CAN_MspDeInit+0x28>
  {
  /* USER CODE BEGIN CAN1_MspDeInit 0 */

  /* USER CODE END CAN1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CAN1_CLK_DISABLE();
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_CAN_MspDeInit+0x34>)
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	4a07      	ldr	r2, [pc, #28]	; (8002010 <HAL_CAN_MspDeInit+0x34>)
 8001ff4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8001ff8:	61d3      	str	r3, [r2, #28]

    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8|GPIO_PIN_9);
 8001ffa:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <HAL_CAN_MspDeInit+0x38>)
 8002000:	f001 fdaa 	bl	8003b58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN CAN1_MspDeInit 1 */

  /* USER CODE END CAN1_MspDeInit 1 */
  }

}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40006400 	.word	0x40006400
 8002010:	40021000 	.word	0x40021000
 8002014:	40010c00 	.word	0x40010c00

08002018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	; 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0318 	add.w	r3, r7, #24
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a2b      	ldr	r2, [pc, #172]	; (80020e0 <HAL_I2C_MspInit+0xc8>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d124      	bne.n	8002082 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002038:	4b2a      	ldr	r3, [pc, #168]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	4a29      	ldr	r2, [pc, #164]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800203e:	f043 0308 	orr.w	r3, r3, #8
 8002042:	6193      	str	r3, [r2, #24]
 8002044:	4b27      	ldr	r3, [pc, #156]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	f003 0308 	and.w	r3, r3, #8
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23c0      	movs	r3, #192	; 0xc0
 8002052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002054:	2312      	movs	r3, #18
 8002056:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	4619      	mov	r1, r3
 8002062:	4821      	ldr	r0, [pc, #132]	; (80020e8 <HAL_I2C_MspInit+0xd0>)
 8002064:	f001 fbf4 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002068:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	4a1d      	ldr	r2, [pc, #116]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800206e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002072:	61d3      	str	r3, [r2, #28]
 8002074:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002080:	e029      	b.n	80020d6 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a19      	ldr	r2, [pc, #100]	; (80020ec <HAL_I2C_MspInit+0xd4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d124      	bne.n	80020d6 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020aa:	2312      	movs	r3, #18
 80020ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0318 	add.w	r3, r7, #24
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_I2C_MspInit+0xd0>)
 80020ba:	f001 fbc9 	bl	8003850 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_I2C_MspInit+0xcc>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	; 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005400 	.word	0x40005400
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010c00 	.word	0x40010c00
 80020ec:	40005800 	.word	0x40005800

080020f0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a15      	ldr	r2, [pc, #84]	; (8002154 <HAL_I2C_MspDeInit+0x64>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10e      	bne.n	8002120 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8002102:	4b15      	ldr	r3, [pc, #84]	; (8002158 <HAL_I2C_MspDeInit+0x68>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a14      	ldr	r2, [pc, #80]	; (8002158 <HAL_I2C_MspDeInit+0x68>)
 8002108:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800210c:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800210e:	2140      	movs	r1, #64	; 0x40
 8002110:	4812      	ldr	r0, [pc, #72]	; (800215c <HAL_I2C_MspDeInit+0x6c>)
 8002112:	f001 fd21 	bl	8003b58 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	4810      	ldr	r0, [pc, #64]	; (800215c <HAL_I2C_MspDeInit+0x6c>)
 800211a:	f001 fd1d 	bl	8003b58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800211e:	e014      	b.n	800214a <HAL_I2C_MspDeInit+0x5a>
  else if(hi2c->Instance==I2C2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a0e      	ldr	r2, [pc, #56]	; (8002160 <HAL_I2C_MspDeInit+0x70>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10f      	bne.n	800214a <HAL_I2C_MspDeInit+0x5a>
    __HAL_RCC_I2C2_CLK_DISABLE();
 800212a:	4b0b      	ldr	r3, [pc, #44]	; (8002158 <HAL_I2C_MspDeInit+0x68>)
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <HAL_I2C_MspDeInit+0x68>)
 8002130:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002134:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 8002136:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213a:	4808      	ldr	r0, [pc, #32]	; (800215c <HAL_I2C_MspDeInit+0x6c>)
 800213c:	f001 fd0c 	bl	8003b58 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4805      	ldr	r0, [pc, #20]	; (800215c <HAL_I2C_MspDeInit+0x6c>)
 8002146:	f001 fd07 	bl	8003b58 <HAL_GPIO_DeInit>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40005400 	.word	0x40005400
 8002158:	40021000 	.word	0x40021000
 800215c:	40010c00 	.word	0x40010c00
 8002160:	40005800 	.word	0x40005800

08002164 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216c:	f107 0318 	add.w	r3, r7, #24
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
 8002178:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a37      	ldr	r2, [pc, #220]	; (800225c <HAL_SPI_MspInit+0xf8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d130      	bne.n	80021e6 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002184:	4b36      	ldr	r3, [pc, #216]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	4a35      	ldr	r2, [pc, #212]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 800218a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800218e:	6193      	str	r3, [r2, #24]
 8002190:	4b33      	ldr	r3, [pc, #204]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219c:	4b30      	ldr	r3, [pc, #192]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	4a2f      	ldr	r2, [pc, #188]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 80021a2:	f043 0304 	orr.w	r3, r3, #4
 80021a6:	6193      	str	r3, [r2, #24]
 80021a8:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	f003 0304 	and.w	r3, r3, #4
 80021b0:	613b      	str	r3, [r7, #16]
 80021b2:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80021b4:	23a0      	movs	r3, #160	; 0xa0
 80021b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b8:	2302      	movs	r3, #2
 80021ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021bc:	2303      	movs	r3, #3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c0:	f107 0318 	add.w	r3, r7, #24
 80021c4:	4619      	mov	r1, r3
 80021c6:	4827      	ldr	r0, [pc, #156]	; (8002264 <HAL_SPI_MspInit+0x100>)
 80021c8:	f001 fb42 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021cc:	2340      	movs	r3, #64	; 0x40
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d4:	2300      	movs	r3, #0
 80021d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d8:	f107 0318 	add.w	r3, r7, #24
 80021dc:	4619      	mov	r1, r3
 80021de:	4821      	ldr	r0, [pc, #132]	; (8002264 <HAL_SPI_MspInit+0x100>)
 80021e0:	f001 fb36 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80021e4:	e036      	b.n	8002254 <HAL_SPI_MspInit+0xf0>
  else if(hspi->Instance==SPI2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1f      	ldr	r2, [pc, #124]	; (8002268 <HAL_SPI_MspInit+0x104>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d131      	bne.n	8002254 <HAL_SPI_MspInit+0xf0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80021f0:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 80021f2:	69db      	ldr	r3, [r3, #28]
 80021f4:	4a1a      	ldr	r2, [pc, #104]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 80021f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021fa:	61d3      	str	r3, [r2, #28]
 80021fc:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002208:	4b15      	ldr	r3, [pc, #84]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	4a14      	ldr	r2, [pc, #80]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 800220e:	f043 0308 	orr.w	r3, r3, #8
 8002212:	6193      	str	r3, [r2, #24]
 8002214:	4b12      	ldr	r3, [pc, #72]	; (8002260 <HAL_SPI_MspInit+0xfc>)
 8002216:	699b      	ldr	r3, [r3, #24]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8002220:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8002224:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222a:	2303      	movs	r3, #3
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 0318 	add.w	r3, r7, #24
 8002232:	4619      	mov	r1, r3
 8002234:	480d      	ldr	r0, [pc, #52]	; (800226c <HAL_SPI_MspInit+0x108>)
 8002236:	f001 fb0b 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800223a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800223e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002240:	2300      	movs	r3, #0
 8002242:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	4619      	mov	r1, r3
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <HAL_SPI_MspInit+0x108>)
 8002250:	f001 fafe 	bl	8003850 <HAL_GPIO_Init>
}
 8002254:	bf00      	nop
 8002256:	3728      	adds	r7, #40	; 0x28
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40013000 	.word	0x40013000
 8002260:	40021000 	.word	0x40021000
 8002264:	40010800 	.word	0x40010800
 8002268:	40003800 	.word	0x40003800
 800226c:	40010c00 	.word	0x40010c00

08002270 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_SPI_MspDeInit+0x50>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d10a      	bne.n	8002298 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8002282:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <HAL_SPI_MspDeInit+0x54>)
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	4a0f      	ldr	r2, [pc, #60]	; (80022c4 <HAL_SPI_MspDeInit+0x54>)
 8002288:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800228c:	6193      	str	r3, [r2, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800228e:	21e0      	movs	r1, #224	; 0xe0
 8002290:	480d      	ldr	r0, [pc, #52]	; (80022c8 <HAL_SPI_MspDeInit+0x58>)
 8002292:	f001 fc61 	bl	8003b58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 8002296:	e00f      	b.n	80022b8 <HAL_SPI_MspDeInit+0x48>
  else if(hspi->Instance==SPI2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <HAL_SPI_MspDeInit+0x5c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d10a      	bne.n	80022b8 <HAL_SPI_MspDeInit+0x48>
    __HAL_RCC_SPI2_CLK_DISABLE();
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_SPI_MspDeInit+0x54>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	4a07      	ldr	r2, [pc, #28]	; (80022c4 <HAL_SPI_MspDeInit+0x54>)
 80022a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ac:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15);
 80022ae:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80022b2:	4807      	ldr	r0, [pc, #28]	; (80022d0 <HAL_SPI_MspDeInit+0x60>)
 80022b4:	f001 fc50 	bl	8003b58 <HAL_GPIO_DeInit>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40013000 	.word	0x40013000
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40010800 	.word	0x40010800
 80022cc:	40003800 	.word	0x40003800
 80022d0:	40010c00 	.word	0x40010c00

080022d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_TIM_Base_MspInit+0x7c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10c      	bne.n	8002300 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 80022ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022f0:	6193      	str	r3, [r2, #24]
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022fe:	e022      	b.n	8002346 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002308:	d10c      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800230a:	4b12      	ldr	r3, [pc, #72]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	61d3      	str	r3, [r2, #28]
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	613b      	str	r3, [r7, #16]
 8002320:	693b      	ldr	r3, [r7, #16]
}
 8002322:	e010      	b.n	8002346 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0b      	ldr	r2, [pc, #44]	; (8002358 <HAL_TIM_Base_MspInit+0x84>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10b      	bne.n	8002346 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800232e:	4b09      	ldr	r3, [pc, #36]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	4a08      	ldr	r2, [pc, #32]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 8002334:	f043 0302 	orr.w	r3, r3, #2
 8002338:	61d3      	str	r3, [r2, #28]
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_TIM_Base_MspInit+0x80>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]
}
 8002346:	bf00      	nop
 8002348:	371c      	adds	r7, #28
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40021000 	.word	0x40021000
 8002358:	40000400 	.word	0x40000400

0800235c <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a12      	ldr	r2, [pc, #72]	; (80023b4 <HAL_TIM_Base_MspDeInit+0x58>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d106      	bne.n	800237c <HAL_TIM_Base_MspDeInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspDeInit 0 */

  /* USER CODE END TIM1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM1_CLK_DISABLE();
 800236e:	4b12      	ldr	r3, [pc, #72]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	4a11      	ldr	r2, [pc, #68]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002374:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002378:	6193      	str	r3, [r2, #24]
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 800237a:	e016      	b.n	80023aa <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_MspDeInit+0x38>
    __HAL_RCC_TIM2_CLK_DISABLE();
 8002386:	4b0c      	ldr	r3, [pc, #48]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a0b      	ldr	r2, [pc, #44]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 800238c:	f023 0301 	bic.w	r3, r3, #1
 8002390:	61d3      	str	r3, [r2, #28]
}
 8002392:	e00a      	b.n	80023aa <HAL_TIM_Base_MspDeInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a08      	ldr	r2, [pc, #32]	; (80023bc <HAL_TIM_Base_MspDeInit+0x60>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d105      	bne.n	80023aa <HAL_TIM_Base_MspDeInit+0x4e>
    __HAL_RCC_TIM3_CLK_DISABLE();
 800239e:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a05      	ldr	r2, [pc, #20]	; (80023b8 <HAL_TIM_Base_MspDeInit+0x5c>)
 80023a4:	f023 0302 	bic.w	r3, r3, #2
 80023a8:	61d3      	str	r3, [r2, #28]
}
 80023aa:	bf00      	nop
 80023ac:	370c      	adds	r7, #12
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bc80      	pop	{r7}
 80023b2:	4770      	bx	lr
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40000400 	.word	0x40000400

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08e      	sub	sp, #56	; 0x38
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a5c      	ldr	r2, [pc, #368]	; (800254c <HAL_UART_MspInit+0x18c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d132      	bne.n	8002446 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <HAL_UART_MspInit+0x190>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	4a5a      	ldr	r2, [pc, #360]	; (8002550 <HAL_UART_MspInit+0x190>)
 80023e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ea:	6193      	str	r3, [r2, #24]
 80023ec:	4b58      	ldr	r3, [pc, #352]	; (8002550 <HAL_UART_MspInit+0x190>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f4:	623b      	str	r3, [r7, #32]
 80023f6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f8:	4b55      	ldr	r3, [pc, #340]	; (8002550 <HAL_UART_MspInit+0x190>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	4a54      	ldr	r2, [pc, #336]	; (8002550 <HAL_UART_MspInit+0x190>)
 80023fe:	f043 0304 	orr.w	r3, r3, #4
 8002402:	6193      	str	r3, [r2, #24]
 8002404:	4b52      	ldr	r3, [pc, #328]	; (8002550 <HAL_UART_MspInit+0x190>)
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	61fb      	str	r3, [r7, #28]
 800240e:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002410:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002414:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002416:	2302      	movs	r3, #2
 8002418:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241a:	2303      	movs	r3, #3
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002422:	4619      	mov	r1, r3
 8002424:	484b      	ldr	r0, [pc, #300]	; (8002554 <HAL_UART_MspInit+0x194>)
 8002426:	f001 fa13 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800242a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800242e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002430:	2300      	movs	r3, #0
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002438:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800243c:	4619      	mov	r1, r3
 800243e:	4845      	ldr	r0, [pc, #276]	; (8002554 <HAL_UART_MspInit+0x194>)
 8002440:	f001 fa06 	bl	8003850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002444:	e07e      	b.n	8002544 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART2)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a43      	ldr	r2, [pc, #268]	; (8002558 <HAL_UART_MspInit+0x198>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d130      	bne.n	80024b2 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002450:	4b3f      	ldr	r3, [pc, #252]	; (8002550 <HAL_UART_MspInit+0x190>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	4a3e      	ldr	r2, [pc, #248]	; (8002550 <HAL_UART_MspInit+0x190>)
 8002456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800245a:	61d3      	str	r3, [r2, #28]
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <HAL_UART_MspInit+0x190>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002464:	61bb      	str	r3, [r7, #24]
 8002466:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002468:	4b39      	ldr	r3, [pc, #228]	; (8002550 <HAL_UART_MspInit+0x190>)
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	4a38      	ldr	r2, [pc, #224]	; (8002550 <HAL_UART_MspInit+0x190>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6193      	str	r3, [r2, #24]
 8002474:	4b36      	ldr	r3, [pc, #216]	; (8002550 <HAL_UART_MspInit+0x190>)
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0304 	and.w	r3, r3, #4
 800247c:	617b      	str	r3, [r7, #20]
 800247e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002480:	2304      	movs	r3, #4
 8002482:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002488:	2303      	movs	r3, #3
 800248a:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	4619      	mov	r1, r3
 8002492:	4830      	ldr	r0, [pc, #192]	; (8002554 <HAL_UART_MspInit+0x194>)
 8002494:	f001 f9dc 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002498:	2308      	movs	r3, #8
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800249c:	2300      	movs	r3, #0
 800249e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a0:	2300      	movs	r3, #0
 80024a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a8:	4619      	mov	r1, r3
 80024aa:	482a      	ldr	r0, [pc, #168]	; (8002554 <HAL_UART_MspInit+0x194>)
 80024ac:	f001 f9d0 	bl	8003850 <HAL_GPIO_Init>
}
 80024b0:	e048      	b.n	8002544 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART3)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_UART_MspInit+0x19c>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d143      	bne.n	8002544 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	4a23      	ldr	r2, [pc, #140]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024c6:	61d3      	str	r3, [r2, #28]
 80024c8:	4b21      	ldr	r3, [pc, #132]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d4:	4b1e      	ldr	r3, [pc, #120]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	4a1d      	ldr	r2, [pc, #116]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024da:	f043 0310 	orr.w	r3, r3, #16
 80024de:	6193      	str	r3, [r2, #24]
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_UART_MspInit+0x190>)
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f003 0310 	and.w	r3, r3, #16
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80024ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f2:	2302      	movs	r3, #2
 80024f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024fe:	4619      	mov	r1, r3
 8002500:	4817      	ldr	r0, [pc, #92]	; (8002560 <HAL_UART_MspInit+0x1a0>)
 8002502:	f001 f9a5 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800250a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800250c:	2300      	movs	r3, #0
 800250e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002514:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002518:	4619      	mov	r1, r3
 800251a:	4811      	ldr	r0, [pc, #68]	; (8002560 <HAL_UART_MspInit+0x1a0>)
 800251c:	f001 f998 	bl	8003850 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002520:	4b10      	ldr	r3, [pc, #64]	; (8002564 <HAL_UART_MspInit+0x1a4>)
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	637b      	str	r3, [r7, #52]	; 0x34
 8002526:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002528:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800252c:	637b      	str	r3, [r7, #52]	; 0x34
 800252e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002530:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
 8002536:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002538:	f043 0310 	orr.w	r3, r3, #16
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	4a09      	ldr	r2, [pc, #36]	; (8002564 <HAL_UART_MspInit+0x1a4>)
 8002540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002542:	6053      	str	r3, [r2, #4]
}
 8002544:	bf00      	nop
 8002546:	3738      	adds	r7, #56	; 0x38
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	40013800 	.word	0x40013800
 8002550:	40021000 	.word	0x40021000
 8002554:	40010800 	.word	0x40010800
 8002558:	40004400 	.word	0x40004400
 800255c:	40004800 	.word	0x40004800
 8002560:	40011000 	.word	0x40011000
 8002564:	40010000 	.word	0x40010000

08002568 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_UART_MspDeInit+0x74>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d10b      	bne.n	8002592 <HAL_UART_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800257a:	4b19      	ldr	r3, [pc, #100]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 8002580:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002584:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8002586:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800258a:	4816      	ldr	r0, [pc, #88]	; (80025e4 <HAL_UART_MspDeInit+0x7c>)
 800258c:	f001 fae4 	bl	8003b58 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }

}
 8002590:	e01f      	b.n	80025d2 <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a14      	ldr	r2, [pc, #80]	; (80025e8 <HAL_UART_MspDeInit+0x80>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d10a      	bne.n	80025b2 <HAL_UART_MspDeInit+0x4a>
    __HAL_RCC_USART2_CLK_DISABLE();
 800259c:	4b10      	ldr	r3, [pc, #64]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 80025a2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80025a6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80025a8:	210c      	movs	r1, #12
 80025aa:	480e      	ldr	r0, [pc, #56]	; (80025e4 <HAL_UART_MspDeInit+0x7c>)
 80025ac:	f001 fad4 	bl	8003b58 <HAL_GPIO_DeInit>
}
 80025b0:	e00f      	b.n	80025d2 <HAL_UART_MspDeInit+0x6a>
  else if(huart->Instance==USART3)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a0d      	ldr	r2, [pc, #52]	; (80025ec <HAL_UART_MspDeInit+0x84>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d10a      	bne.n	80025d2 <HAL_UART_MspDeInit+0x6a>
    __HAL_RCC_USART3_CLK_DISABLE();
 80025bc:	4b08      	ldr	r3, [pc, #32]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	4a07      	ldr	r2, [pc, #28]	; (80025e0 <HAL_UART_MspDeInit+0x78>)
 80025c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025c6:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_10|GPIO_PIN_11);
 80025c8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80025cc:	4808      	ldr	r0, [pc, #32]	; (80025f0 <HAL_UART_MspDeInit+0x88>)
 80025ce:	f001 fac3 	bl	8003b58 <HAL_GPIO_DeInit>
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40013800 	.word	0x40013800
 80025e0:	40021000 	.word	0x40021000
 80025e4:	40010800 	.word	0x40010800
 80025e8:	40004400 	.word	0x40004400
 80025ec:	40004800 	.word	0x40004800
 80025f0:	40011000 	.word	0x40011000

080025f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	; 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800260a:	4b34      	ldr	r3, [pc, #208]	; (80026dc <HAL_InitTick+0xe8>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	4a33      	ldr	r2, [pc, #204]	; (80026dc <HAL_InitTick+0xe8>)
 8002610:	f043 0304 	orr.w	r3, r3, #4
 8002614:	61d3      	str	r3, [r2, #28]
 8002616:	4b31      	ldr	r3, [pc, #196]	; (80026dc <HAL_InitTick+0xe8>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002622:	f107 0210 	add.w	r2, r7, #16
 8002626:	f107 0314 	add.w	r3, r7, #20
 800262a:	4611      	mov	r1, r2
 800262c:	4618      	mov	r0, r3
 800262e:	f002 f93b 	bl	80048a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	2b00      	cmp	r3, #0
 800263a:	d103      	bne.n	8002644 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800263c:	f002 f90c 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8002640:	6378      	str	r0, [r7, #52]	; 0x34
 8002642:	e004      	b.n	800264e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002644:	f002 f908 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8002648:	4603      	mov	r3, r0
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002650:	4a23      	ldr	r2, [pc, #140]	; (80026e0 <HAL_InitTick+0xec>)
 8002652:	fba2 2303 	umull	r2, r3, r2, r3
 8002656:	0c9b      	lsrs	r3, r3, #18
 8002658:	3b01      	subs	r3, #1
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <HAL_InitTick+0xf0>)
 800265e:	4a22      	ldr	r2, [pc, #136]	; (80026e8 <HAL_InitTick+0xf4>)
 8002660:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002662:	4b20      	ldr	r3, [pc, #128]	; (80026e4 <HAL_InitTick+0xf0>)
 8002664:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002668:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800266a:	4a1e      	ldr	r2, [pc, #120]	; (80026e4 <HAL_InitTick+0xf0>)
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002670:	4b1c      	ldr	r3, [pc, #112]	; (80026e4 <HAL_InitTick+0xf0>)
 8002672:	2200      	movs	r2, #0
 8002674:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002676:	4b1b      	ldr	r3, [pc, #108]	; (80026e4 <HAL_InitTick+0xf0>)
 8002678:	2200      	movs	r2, #0
 800267a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800267c:	4b19      	ldr	r3, [pc, #100]	; (80026e4 <HAL_InitTick+0xf0>)
 800267e:	2200      	movs	r2, #0
 8002680:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002682:	4818      	ldr	r0, [pc, #96]	; (80026e4 <HAL_InitTick+0xf0>)
 8002684:	f002 fb76 	bl	8004d74 <HAL_TIM_Base_Init>
 8002688:	4603      	mov	r3, r0
 800268a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800268e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11b      	bne.n	80026ce <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002696:	4813      	ldr	r0, [pc, #76]	; (80026e4 <HAL_InitTick+0xf0>)
 8002698:	f002 fc10 	bl	8004ebc <HAL_TIM_Base_Start_IT>
 800269c:	4603      	mov	r3, r0
 800269e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80026a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d111      	bne.n	80026ce <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80026aa:	201e      	movs	r0, #30
 80026ac:	f001 f8c1 	bl	8003832 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b0f      	cmp	r3, #15
 80026b4:	d808      	bhi.n	80026c8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80026b6:	2200      	movs	r2, #0
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	201e      	movs	r0, #30
 80026bc:	f001 f89d 	bl	80037fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026c0:	4a0a      	ldr	r2, [pc, #40]	; (80026ec <HAL_InitTick+0xf8>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	e002      	b.n	80026ce <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80026ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3738      	adds	r7, #56	; 0x38
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	431bde83 	.word	0x431bde83
 80026e4:	20000428 	.word	0x20000428
 80026e8:	40000800 	.word	0x40000800
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
  /* Disable TIM4 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim4, TIM_IT_UPDATE);
 80026f4:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_SuspendTick+0x1c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	4b04      	ldr	r3, [pc, #16]	; (800270c <HAL_SuspendTick+0x1c>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	60da      	str	r2, [r3, #12]
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	bc80      	pop	{r7}
 800270a:	4770      	bx	lr
 800270c:	20000428 	.word	0x20000428

08002710 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM4 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
  /* Enable TIM4 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim4, TIM_IT_UPDATE);
 8002714:	4b05      	ldr	r3, [pc, #20]	; (800272c <HAL_ResumeTick+0x1c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	4b04      	ldr	r3, [pc, #16]	; (800272c <HAL_ResumeTick+0x1c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	60da      	str	r2, [r3, #12]
}
 8002724:	bf00      	nop
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000428 	.word	0x20000428

08002730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002734:	e7fe      	b.n	8002734 <NMI_Handler+0x4>

08002736 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800273a:	e7fe      	b.n	800273a <HardFault_Handler+0x4>

0800273c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002740:	e7fe      	b.n	8002740 <MemManage_Handler+0x4>

08002742 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002742:	b480      	push	{r7}
 8002744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002746:	e7fe      	b.n	8002746 <BusFault_Handler+0x4>

08002748 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800274c:	e7fe      	b.n	800274c <UsageFault_Handler+0x4>

0800274e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002752:	bf00      	nop
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800275e:	bf00      	nop
 8002760:	46bd      	mov	sp, r7
 8002762:	bc80      	pop	{r7}
 8002764:	4770      	bx	lr

08002766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	bc80      	pop	{r7}
 8002770:	4770      	bx	lr

08002772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr
	...

08002780 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <TIM4_IRQHandler+0x10>)
 8002786:	f002 fbeb 	bl	8004f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	20000428 	.word	0x20000428

08002794 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002798:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800279c:	f001 fa98 	bl	8003cd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
 80027b4:	e00a      	b.n	80027cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027b6:	f3af 8000 	nop.w
 80027ba:	4601      	mov	r1, r0
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	1c5a      	adds	r2, r3, #1
 80027c0:	60ba      	str	r2, [r7, #8]
 80027c2:	b2ca      	uxtb	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3301      	adds	r3, #1
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	dbf0      	blt.n	80027b6 <_read+0x12>
  }

  return len;
 80027d4:	687b      	ldr	r3, [r7, #4]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3718      	adds	r7, #24
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b086      	sub	sp, #24
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	e009      	b.n	8002804 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1c5a      	adds	r2, r3, #1
 80027f4:	60ba      	str	r2, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7fe f9af 	bl	8000b5c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	3301      	adds	r3, #1
 8002802:	617b      	str	r3, [r7, #20]
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	dbf1      	blt.n	80027f0 <_write+0x12>
  }
  return len;
 800280c:	687b      	ldr	r3, [r7, #4]
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}

08002816 <_close>:

int _close(int file)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800281e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002822:	4618      	mov	r0, r3
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283c:	605a      	str	r2, [r3, #4]
  return 0;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	bc80      	pop	{r7}
 8002848:	4770      	bx	lr

0800284a <_isatty>:

int _isatty(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	bc80      	pop	{r7}
 800285c:	4770      	bx	lr

0800285e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800285e:	b480      	push	{r7}
 8002860:	b085      	sub	sp, #20
 8002862:	af00      	add	r7, sp, #0
 8002864:	60f8      	str	r0, [r7, #12]
 8002866:	60b9      	str	r1, [r7, #8]
 8002868:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3714      	adds	r7, #20
 8002870:	46bd      	mov	sp, r7
 8002872:	bc80      	pop	{r7}
 8002874:	4770      	bx	lr
	...

08002878 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002880:	4a14      	ldr	r2, [pc, #80]	; (80028d4 <_sbrk+0x5c>)
 8002882:	4b15      	ldr	r3, [pc, #84]	; (80028d8 <_sbrk+0x60>)
 8002884:	1ad3      	subs	r3, r2, r3
 8002886:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800288c:	4b13      	ldr	r3, [pc, #76]	; (80028dc <_sbrk+0x64>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d102      	bne.n	800289a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002894:	4b11      	ldr	r3, [pc, #68]	; (80028dc <_sbrk+0x64>)
 8002896:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <_sbrk+0x68>)
 8002898:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289a:	4b10      	ldr	r3, [pc, #64]	; (80028dc <_sbrk+0x64>)
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4413      	add	r3, r2
 80028a2:	693a      	ldr	r2, [r7, #16]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d207      	bcs.n	80028b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028a8:	f003 fb8e 	bl	8005fc8 <__errno>
 80028ac:	4603      	mov	r3, r0
 80028ae:	220c      	movs	r2, #12
 80028b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b6:	e009      	b.n	80028cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <_sbrk+0x64>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028be:	4b07      	ldr	r3, [pc, #28]	; (80028dc <_sbrk+0x64>)
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4413      	add	r3, r2
 80028c6:	4a05      	ldr	r2, [pc, #20]	; (80028dc <_sbrk+0x64>)
 80028c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ca:	68fb      	ldr	r3, [r7, #12]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20005000 	.word	0x20005000
 80028d8:	00000400 	.word	0x00000400
 80028dc:	20000470 	.word	0x20000470
 80028e0:	200005c8 	.word	0x200005c8

080028e4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bc80      	pop	{r7}
 80028ee:	4770      	bx	lr

080028f0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028f0:	f7ff fff8 	bl	80028e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028f4:	480b      	ldr	r0, [pc, #44]	; (8002924 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028f6:	490c      	ldr	r1, [pc, #48]	; (8002928 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <LoopFillZerobss+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028fc:	e002      	b.n	8002904 <LoopCopyDataInit>

080028fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002900:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002902:	3304      	adds	r3, #4

08002904 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002904:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002906:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002908:	d3f9      	bcc.n	80028fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800290a:	4a09      	ldr	r2, [pc, #36]	; (8002930 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800290c:	4c09      	ldr	r4, [pc, #36]	; (8002934 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800290e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002910:	e001      	b.n	8002916 <LoopFillZerobss>

08002912 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002912:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002914:	3204      	adds	r2, #4

08002916 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002916:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002918:	d3fb      	bcc.n	8002912 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800291a:	f003 fb5b 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800291e:	f7fe fe1b 	bl	8001558 <main>
  bx lr
 8002922:	4770      	bx	lr
  ldr r0, =_sdata
 8002924:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002928:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800292c:	080071a0 	.word	0x080071a0
  ldr r2, =_sbss
 8002930:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002934:	200005c4 	.word	0x200005c4

08002938 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002938:	e7fe      	b.n	8002938 <ADC1_2_IRQHandler>
	...

0800293c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002940:	4b08      	ldr	r3, [pc, #32]	; (8002964 <HAL_Init+0x28>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a07      	ldr	r2, [pc, #28]	; (8002964 <HAL_Init+0x28>)
 8002946:	f043 0310 	orr.w	r3, r3, #16
 800294a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800294c:	2003      	movs	r0, #3
 800294e:	f000 ff49 	bl	80037e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002952:	200f      	movs	r0, #15
 8002954:	f7ff fe4e 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002958:	f7ff fa14 	bl	8001d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800295c:	2300      	movs	r3, #0
}
 800295e:	4618      	mov	r0, r3
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40022000 	.word	0x40022000

08002968 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800296c:	4b05      	ldr	r3, [pc, #20]	; (8002984 <HAL_IncTick+0x1c>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	461a      	mov	r2, r3
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_IncTick+0x20>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4413      	add	r3, r2
 8002978:	4a03      	ldr	r2, [pc, #12]	; (8002988 <HAL_IncTick+0x20>)
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000008 	.word	0x20000008
 8002988:	20000474 	.word	0x20000474

0800298c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return uwTick;
 8002990:	4b02      	ldr	r3, [pc, #8]	; (800299c <HAL_GetTick+0x10>)
 8002992:	681b      	ldr	r3, [r3, #0]
}
 8002994:	4618      	mov	r0, r3
 8002996:	46bd      	mov	sp, r7
 8002998:	bc80      	pop	{r7}
 800299a:	4770      	bx	lr
 800299c:	20000474 	.word	0x20000474

080029a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b084      	sub	sp, #16
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029a8:	f7ff fff0 	bl	800298c <HAL_GetTick>
 80029ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029b8:	d005      	beq.n	80029c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ba:	4b0a      	ldr	r3, [pc, #40]	; (80029e4 <HAL_Delay+0x44>)
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffe0 	bl	800298c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d8f7      	bhi.n	80029c8 <HAL_Delay+0x28>
  {
  }
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000008 	.word	0x20000008

080029e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029f0:	2300      	movs	r3, #0
 80029f2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e0be      	b.n	8002b88 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f7ff f9de 	bl	8001de8 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fc87 	bl	8003340 <ADC_ConversionStop_Disable>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	f003 0310 	and.w	r3, r3, #16
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8099 	bne.w	8002b76 <HAL_ADC_Init+0x18e>
 8002a44:	7dfb      	ldrb	r3, [r7, #23]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f040 8095 	bne.w	8002b76 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a50:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a54:	f023 0302 	bic.w	r3, r3, #2
 8002a58:	f043 0202 	orr.w	r2, r3, #2
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a68:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	7b1b      	ldrb	r3, [r3, #12]
 8002a6e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002a70:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a80:	d003      	beq.n	8002a8a <HAL_ADC_Init+0xa2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d102      	bne.n	8002a90 <HAL_ADC_Init+0xa8>
 8002a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a8e:	e000      	b.n	8002a92 <HAL_ADC_Init+0xaa>
 8002a90:	2300      	movs	r3, #0
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	7d1b      	ldrb	r3, [r3, #20]
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d119      	bne.n	8002ad4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7b1b      	ldrb	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	035a      	lsls	r2, r3, #13
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ab8:	613b      	str	r3, [r7, #16]
 8002aba:	e00b      	b.n	8002ad4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	4b28      	ldr	r3, [pc, #160]	; (8002b90 <HAL_ADC_Init+0x1a8>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	68b9      	ldr	r1, [r7, #8]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b04:	d003      	beq.n	8002b0e <HAL_ADC_Init+0x126>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d104      	bne.n	8002b18 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	051b      	lsls	r3, r3, #20
 8002b16:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b1e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	4b18      	ldr	r3, [pc, #96]	; (8002b94 <HAL_ADC_Init+0x1ac>)
 8002b34:	4013      	ands	r3, r2
 8002b36:	68ba      	ldr	r2, [r7, #8]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d10b      	bne.n	8002b54 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	f043 0201 	orr.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b52:	e018      	b.n	8002b86 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f023 0312 	bic.w	r3, r3, #18
 8002b5c:	f043 0210 	orr.w	r2, r3, #16
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002b74:	e007      	b.n	8002b86 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002b86:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3718      	adds	r7, #24
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	ffe1f7fd 	.word	0xffe1f7fd
 8002b94:	ff1f0efe 	.word	0xff1f0efe

08002b98 <HAL_ADC_DeInit>:
  *         function HAL_ADC_MspDeInit().
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_DeInit+0x16>
  {
     return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0ad      	b.n	8002d0a <HAL_ADC_DeInit+0x172>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb2:	f043 0202 	orr.w	r2, r3, #2
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 fbc0 	bl	8003340 <ADC_ConversionStop_Disable>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	73fb      	strb	r3, [r7, #15]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status == HAL_OK)
 8002bc4:	7bfb      	ldrb	r3, [r7, #15]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	f040 809a 	bne.w	8002d00 <HAL_ADC_DeInit+0x168>




    /* Reset register SR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_JEOC | ADC_FLAG_EOC |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 021f 	mvn.w	r2, #31
 8002bd4:	601a      	str	r2, [r3, #0]
                                ADC_FLAG_JSTRT | ADC_FLAG_STRT));
                         
    /* Reset register CR1 */
    CLEAR_BIT(hadc->Instance->CR1, (ADC_CR1_AWDEN   | ADC_CR1_JAWDEN | ADC_CR1_DISCNUM | 
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	6859      	ldr	r1, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b4c      	ldr	r3, [pc, #304]	; (8002d14 <HAL_ADC_DeInit+0x17c>)
 8002be2:	400b      	ands	r3, r1
 8002be4:	6053      	str	r3, [r2, #4]
                                    ADC_CR1_JDISCEN | ADC_CR1_DISCEN | ADC_CR1_JAUTO   | 
                                    ADC_CR1_AWDSGL  | ADC_CR1_SCAN   | ADC_CR1_JEOCIE  |   
                                    ADC_CR1_AWDIE   | ADC_CR1_EOCIE  | ADC_CR1_AWDCH    ));
    
    /* Reset register CR2 */
    CLEAR_BIT(hadc->Instance->CR2, (ADC_CR2_TSVREFE | ADC_CR2_SWSTART | ADC_CR2_JSWSTART | 
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6899      	ldr	r1, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <HAL_ADC_DeInit+0x180>)
 8002bf2:	400b      	ands	r3, r1
 8002bf4:	6093      	str	r3, [r2, #8]
                                    ADC_CR2_JEXTSEL | ADC_CR2_ALIGN   | ADC_CR2_DMA      |        
                                    ADC_CR2_RSTCAL  | ADC_CR2_CAL     | ADC_CR2_CONT     |          
                                    ADC_CR2_ADON                                          ));
    
    /* Reset register SMPR1 */
    CLEAR_BIT(hadc->Instance->SMPR1, (ADC_SMPR1_SMP17 | ADC_SMPR1_SMP16 | ADC_SMPR1_SMP15 | 
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68da      	ldr	r2, [r3, #12]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c04:	60da      	str	r2, [r3, #12]
                                      ADC_SMPR1_SMP14 | ADC_SMPR1_SMP13 | ADC_SMPR1_SMP12 | 
                                      ADC_SMPR1_SMP11 | ADC_SMPR1_SMP10                    ));
    
    /* Reset register SMPR2 */
    CLEAR_BIT(hadc->Instance->SMPR2, (ADC_SMPR2_SMP9 | ADC_SMPR2_SMP8 | ADC_SMPR2_SMP7 | 
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002c14:	611a      	str	r2, [r3, #16]
                                      ADC_SMPR2_SMP6 | ADC_SMPR2_SMP5 | ADC_SMPR2_SMP4 | 
                                      ADC_SMPR2_SMP3 | ADC_SMPR2_SMP2 | ADC_SMPR2_SMP1 | 
                                      ADC_SMPR2_SMP0                                    ));

    /* Reset register JOFR1 */
    CLEAR_BIT(hadc->Instance->JOFR1, ADC_JOFR1_JOFFSET1);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c24:	f023 030f 	bic.w	r3, r3, #15
 8002c28:	6153      	str	r3, [r2, #20]
    /* Reset register JOFR2 */
    CLEAR_BIT(hadc->Instance->JOFR2, ADC_JOFR2_JOFFSET2);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6812      	ldr	r2, [r2, #0]
 8002c34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c38:	f023 030f 	bic.w	r3, r3, #15
 8002c3c:	6193      	str	r3, [r2, #24]
    /* Reset register JOFR3 */
    CLEAR_BIT(hadc->Instance->JOFR3, ADC_JOFR3_JOFFSET3);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	69db      	ldr	r3, [r3, #28]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6812      	ldr	r2, [r2, #0]
 8002c48:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c4c:	f023 030f 	bic.w	r3, r3, #15
 8002c50:	61d3      	str	r3, [r2, #28]
    /* Reset register JOFR4 */
    CLEAR_BIT(hadc->Instance->JOFR4, ADC_JOFR4_JOFFSET4);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	6812      	ldr	r2, [r2, #0]
 8002c5c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c60:	f023 030f 	bic.w	r3, r3, #15
 8002c64:	6213      	str	r3, [r2, #32]
    
    /* Reset register HTR */
    CLEAR_BIT(hadc->Instance->HTR, ADC_HTR_HT);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c74:	f023 030f 	bic.w	r3, r3, #15
 8002c78:	6253      	str	r3, [r2, #36]	; 0x24
    /* Reset register LTR */
    CLEAR_BIT(hadc->Instance->LTR, ADC_LTR_LT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002c88:	f023 030f 	bic.w	r3, r3, #15
 8002c8c:	6293      	str	r3, [r2, #40]	; 0x28
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002c9c:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR1 */
    CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L    |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c
                                    ADC_SQR1_SQ16 | ADC_SQR1_SQ15 | 
                                    ADC_SQR1_SQ14 | ADC_SQR1_SQ13  );
    
    /* Reset register SQR2 */
    CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ12 | ADC_SQR2_SQ11 | ADC_SQR2_SQ10 | 
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002cbc:	631a      	str	r2, [r3, #48]	; 0x30
                                    ADC_SQR2_SQ9  | ADC_SQR2_SQ8  | ADC_SQR2_SQ7   );
    
    /* Reset register SQR3 */
    CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ6 | ADC_SQR3_SQ5 | ADC_SQR3_SQ4 | 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f002 4240 	and.w	r2, r2, #3221225472	; 0xc0000000
 8002ccc:	635a      	str	r2, [r3, #52]	; 0x34
                                    ADC_SQR3_SQ3 | ADC_SQR3_SQ2 | ADC_SQR3_SQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	0d9b      	lsrs	r3, r3, #22
 8002cda:	059b      	lsls	r3, r3, #22
 8002cdc:	6393      	str	r3, [r2, #56]	; 0x38
                                    ADC_JSQR_JSQ4 | ADC_JSQR_JSQ3 | 
                                    ADC_JSQR_JSQ2 | ADC_JSQR_JSQ1  );
    
    /* Reset register JSQR */
    CLEAR_BIT(hadc->Instance->JSQR, ADC_JSQR_JL |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6812      	ldr	r2, [r2, #0]
 8002ce8:	0d9b      	lsrs	r3, r3, #22
 8002cea:	059b      	lsls	r3, r3, #22
 8002cec:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* DeInit the low level hardware */
    hadc->MspDeInitCallback(hadc);
#else
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff f8e2 	bl	8001eb8 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	629a      	str	r2, [r3, #40]	; 0x28
  
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	ff3f0000 	.word	0xff3f0000
 8002d18:	ff0106f0 	.word	0xff0106f0

08002d1c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <HAL_ADC_Start+0x1a>
 8002d32:	2302      	movs	r3, #2
 8002d34:	e098      	b.n	8002e68 <HAL_ADC_Start+0x14c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2201      	movs	r2, #1
 8002d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 faa4 	bl	800328c <ADC_Enable>
 8002d44:	4603      	mov	r3, r0
 8002d46:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f040 8087 	bne.w	8002e5e <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a41      	ldr	r2, [pc, #260]	; (8002e70 <HAL_ADC_Start+0x154>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d105      	bne.n	8002d7a <HAL_ADC_Start+0x5e>
 8002d6e:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <HAL_ADC_Start+0x158>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d115      	bne.n	8002da6 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d026      	beq.n	8002de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002d9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002da4:	e01d      	b.n	8002de2 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002daa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <HAL_ADC_Start+0x158>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Start+0xaa>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2b      	ldr	r2, [pc, #172]	; (8002e70 <HAL_ADC_Start+0x154>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d10d      	bne.n	8002de2 <HAL_ADC_Start+0xc6>
 8002dc6:	4b2b      	ldr	r3, [pc, #172]	; (8002e74 <HAL_ADC_Start+0x158>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d007      	beq.n	8002de2 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002dda:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df2:	f023 0206 	bic.w	r2, r3, #6
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dfa:	e002      	b.n	8002e02 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f06f 0202 	mvn.w	r2, #2
 8002e12:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002e1e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002e22:	d113      	bne.n	8002e4c <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e28:	4a11      	ldr	r2, [pc, #68]	; (8002e70 <HAL_ADC_Start+0x154>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <HAL_ADC_Start+0x158>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d108      	bne.n	8002e4c <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002e48:	609a      	str	r2, [r3, #8]
 8002e4a:	e00c      	b.n	8002e66 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	e003      	b.n	8002e66 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40012800 	.word	0x40012800
 8002e74:	40012400 	.word	0x40012400

08002e78 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002e78:	b590      	push	{r4, r7, lr}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002e8e:	f7ff fd7d 	bl	800298c <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d00b      	beq.n	8002eba <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea6:	f043 0220 	orr.w	r2, r3, #32
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e0d3      	b.n	8003062 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d131      	bne.n	8002f2c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ece:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d12a      	bne.n	8002f2c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ed6:	e021      	b.n	8002f1c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ede:	d01d      	beq.n	8002f1c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_ADC_PollForConversion+0x7e>
 8002ee6:	f7ff fd51 	bl	800298c <HAL_GetTick>
 8002eea:	4602      	mov	r2, r0
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d212      	bcs.n	8002f1c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10b      	bne.n	8002f1c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	f043 0204 	orr.w	r2, r3, #4
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0a2      	b.n	8003062 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0d6      	beq.n	8002ed8 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002f2a:	e070      	b.n	800300e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002f2c:	4b4f      	ldr	r3, [pc, #316]	; (800306c <HAL_ADC_PollForConversion+0x1f4>)
 8002f2e:	681c      	ldr	r4, [r3, #0]
 8002f30:	2002      	movs	r0, #2
 8002f32:	f001 fdbd 	bl	8004ab0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002f36:	4603      	mov	r3, r0
 8002f38:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6919      	ldr	r1, [r3, #16]
 8002f42:	4b4b      	ldr	r3, [pc, #300]	; (8003070 <HAL_ADC_PollForConversion+0x1f8>)
 8002f44:	400b      	ands	r3, r1
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d118      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x104>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68d9      	ldr	r1, [r3, #12]
 8002f50:	4b48      	ldr	r3, [pc, #288]	; (8003074 <HAL_ADC_PollForConversion+0x1fc>)
 8002f52:	400b      	ands	r3, r1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d111      	bne.n	8002f7c <HAL_ADC_PollForConversion+0x104>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6919      	ldr	r1, [r3, #16]
 8002f5e:	4b46      	ldr	r3, [pc, #280]	; (8003078 <HAL_ADC_PollForConversion+0x200>)
 8002f60:	400b      	ands	r3, r1
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x100>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68d9      	ldr	r1, [r3, #12]
 8002f6c:	4b43      	ldr	r3, [pc, #268]	; (800307c <HAL_ADC_PollForConversion+0x204>)
 8002f6e:	400b      	ands	r3, r1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_ADC_PollForConversion+0x100>
 8002f74:	2314      	movs	r3, #20
 8002f76:	e020      	b.n	8002fba <HAL_ADC_PollForConversion+0x142>
 8002f78:	2329      	movs	r3, #41	; 0x29
 8002f7a:	e01e      	b.n	8002fba <HAL_ADC_PollForConversion+0x142>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6919      	ldr	r1, [r3, #16]
 8002f82:	4b3d      	ldr	r3, [pc, #244]	; (8003078 <HAL_ADC_PollForConversion+0x200>)
 8002f84:	400b      	ands	r3, r1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d106      	bne.n	8002f98 <HAL_ADC_PollForConversion+0x120>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	68d9      	ldr	r1, [r3, #12]
 8002f90:	4b3a      	ldr	r3, [pc, #232]	; (800307c <HAL_ADC_PollForConversion+0x204>)
 8002f92:	400b      	ands	r3, r1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_ADC_PollForConversion+0x13c>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6919      	ldr	r1, [r3, #16]
 8002f9e:	4b38      	ldr	r3, [pc, #224]	; (8003080 <HAL_ADC_PollForConversion+0x208>)
 8002fa0:	400b      	ands	r3, r1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d108      	bne.n	8002fb8 <HAL_ADC_PollForConversion+0x140>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	4b34      	ldr	r3, [pc, #208]	; (8003080 <HAL_ADC_PollForConversion+0x208>)
 8002fae:	400b      	ands	r3, r1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <HAL_ADC_PollForConversion+0x140>
 8002fb4:	2354      	movs	r3, #84	; 0x54
 8002fb6:	e000      	b.n	8002fba <HAL_ADC_PollForConversion+0x142>
 8002fb8:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fc0:	e021      	b.n	8003006 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fc8:	d01a      	beq.n	8003000 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d007      	beq.n	8002fe0 <HAL_ADC_PollForConversion+0x168>
 8002fd0:	f7ff fcdc 	bl	800298c <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d20f      	bcs.n	8003000 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d90b      	bls.n	8003000 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f043 0204 	orr.w	r2, r3, #4
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e030      	b.n	8003062 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	3301      	adds	r3, #1
 8003004:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	429a      	cmp	r2, r3
 800300c:	d8d9      	bhi.n	8002fc2 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f06f 0212 	mvn.w	r2, #18
 8003016:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800302e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003032:	d115      	bne.n	8003060 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003038:	2b00      	cmp	r3, #0
 800303a:	d111      	bne.n	8003060 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003060:	2300      	movs	r3, #0
}
 8003062:	4618      	mov	r0, r3
 8003064:	371c      	adds	r7, #28
 8003066:	46bd      	mov	sp, r7
 8003068:	bd90      	pop	{r4, r7, pc}
 800306a:	bf00      	nop
 800306c:	20000000 	.word	0x20000000
 8003070:	24924924 	.word	0x24924924
 8003074:	00924924 	.word	0x00924924
 8003078:	12492492 	.word	0x12492492
 800307c:	00492492 	.word	0x00492492
 8003080:	00249249 	.word	0x00249249

08003084 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003092:	4618      	mov	r0, r3
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d101      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x20>
 80030b8:	2302      	movs	r3, #2
 80030ba:	e0dc      	b.n	8003276 <HAL_ADC_ConfigChannel+0x1da>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d81c      	bhi.n	8003106 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	685a      	ldr	r2, [r3, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	3b05      	subs	r3, #5
 80030de:	221f      	movs	r2, #31
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	4019      	ands	r1, r3
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6818      	ldr	r0, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3b05      	subs	r3, #5
 80030f8:	fa00 f203 	lsl.w	r2, r0, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	430a      	orrs	r2, r1
 8003102:	635a      	str	r2, [r3, #52]	; 0x34
 8003104:	e03c      	b.n	8003180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2b0c      	cmp	r3, #12
 800310c:	d81c      	bhi.n	8003148 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	3b23      	subs	r3, #35	; 0x23
 8003120:	221f      	movs	r2, #31
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43db      	mvns	r3, r3
 8003128:	4019      	ands	r1, r3
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b23      	subs	r3, #35	; 0x23
 800313a:	fa00 f203 	lsl.w	r2, r0, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
 8003146:	e01b      	b.n	8003180 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	4413      	add	r3, r2
 8003158:	3b41      	subs	r3, #65	; 0x41
 800315a:	221f      	movs	r2, #31
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	43db      	mvns	r3, r3
 8003162:	4019      	ands	r1, r3
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	3b41      	subs	r3, #65	; 0x41
 8003174:	fa00 f203 	lsl.w	r2, r0, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2b09      	cmp	r3, #9
 8003186:	d91c      	bls.n	80031c2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4613      	mov	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4413      	add	r3, r2
 8003198:	3b1e      	subs	r3, #30
 800319a:	2207      	movs	r2, #7
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	4019      	ands	r1, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6898      	ldr	r0, [r3, #8]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	3b1e      	subs	r3, #30
 80031b4:	fa00 f203 	lsl.w	r2, r0, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	430a      	orrs	r2, r1
 80031be:	60da      	str	r2, [r3, #12]
 80031c0:	e019      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6919      	ldr	r1, [r3, #16]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	2207      	movs	r2, #7
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	43db      	mvns	r3, r3
 80031da:	4019      	ands	r1, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6898      	ldr	r0, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	4413      	add	r3, r2
 80031ea:	fa00 f203 	lsl.w	r2, r0, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2b10      	cmp	r3, #16
 80031fc:	d003      	beq.n	8003206 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003202:	2b11      	cmp	r3, #17
 8003204:	d132      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a1d      	ldr	r2, [pc, #116]	; (8003280 <HAL_ADC_ConfigChannel+0x1e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d125      	bne.n	800325c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d126      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800322c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b10      	cmp	r3, #16
 8003234:	d11a      	bne.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003236:	4b13      	ldr	r3, [pc, #76]	; (8003284 <HAL_ADC_ConfigChannel+0x1e8>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <HAL_ADC_ConfigChannel+0x1ec>)
 800323c:	fba2 2303 	umull	r2, r3, r2, r3
 8003240:	0c9a      	lsrs	r2, r3, #18
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800324c:	e002      	b.n	8003254 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f9      	bne.n	800324e <HAL_ADC_ConfigChannel+0x1b2>
 800325a:	e007      	b.n	800326c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003268:	2301      	movs	r3, #1
 800326a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003274:	7bfb      	ldrb	r3, [r7, #15]
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	40012400 	.word	0x40012400
 8003284:	20000000 	.word	0x20000000
 8003288:	431bde83 	.word	0x431bde83

0800328c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	f003 0301 	and.w	r3, r3, #1
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d040      	beq.n	800332c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f042 0201 	orr.w	r2, r2, #1
 80032b8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032ba:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <ADC_Enable+0xac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <ADC_Enable+0xb0>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032c8:	e002      	b.n	80032d0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	3b01      	subs	r3, #1
 80032ce:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f9      	bne.n	80032ca <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032d6:	f7ff fb59 	bl	800298c <HAL_GetTick>
 80032da:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032dc:	e01f      	b.n	800331e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80032de:	f7ff fb55 	bl	800298c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d918      	bls.n	800331e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d011      	beq.n	800331e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e007      	b.n	800332e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d1d8      	bne.n	80032de <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	20000000 	.word	0x20000000
 800333c:	431bde83 	.word	0x431bde83

08003340 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	2b01      	cmp	r3, #1
 8003358:	d12e      	bne.n	80033b8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800336a:	f7ff fb0f 	bl	800298c <HAL_GetTick>
 800336e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003370:	e01b      	b.n	80033aa <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003372:	f7ff fb0b 	bl	800298c <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d914      	bls.n	80033aa <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 0301 	and.w	r3, r3, #1
 800338a:	2b01      	cmp	r3, #1
 800338c:	d10d      	bne.n	80033aa <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003392:	f043 0210 	orr.w	r2, r3, #16
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339e:	f043 0201 	orr.w	r2, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e007      	b.n	80033ba <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d0dc      	beq.n	8003372 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e0ed      	b.n	80035b0 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f7fe fd9b 	bl	8001f1c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0201 	orr.w	r2, r2, #1
 80033f4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033f6:	f7ff fac9 	bl	800298c <HAL_GetTick>
 80033fa:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80033fc:	e012      	b.n	8003424 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80033fe:	f7ff fac5 	bl	800298c <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	2b0a      	cmp	r3, #10
 800340a:	d90b      	bls.n	8003424 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2205      	movs	r2, #5
 800341c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0c5      	b.n	80035b0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0e5      	beq.n	80033fe <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f022 0202 	bic.w	r2, r2, #2
 8003440:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003442:	f7ff faa3 	bl	800298c <HAL_GetTick>
 8003446:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003448:	e012      	b.n	8003470 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800344a:	f7ff fa9f 	bl	800298c <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b0a      	cmp	r3, #10
 8003456:	d90b      	bls.n	8003470 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2205      	movs	r2, #5
 8003468:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e09f      	b.n	80035b0 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0302 	and.w	r3, r3, #2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1e5      	bne.n	800344a <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7e1b      	ldrb	r3, [r3, #24]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d108      	bne.n	8003498 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003494:	601a      	str	r2, [r3, #0]
 8003496:	e007      	b.n	80034a8 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7e5b      	ldrb	r3, [r3, #25]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d108      	bne.n	80034c2 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034be:	601a      	str	r2, [r3, #0]
 80034c0:	e007      	b.n	80034d2 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80034d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7e9b      	ldrb	r3, [r3, #26]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d108      	bne.n	80034ec <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0220 	orr.w	r2, r2, #32
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	e007      	b.n	80034fc <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0220 	bic.w	r2, r2, #32
 80034fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	7edb      	ldrb	r3, [r3, #27]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d108      	bne.n	8003516 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f022 0210 	bic.w	r2, r2, #16
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	e007      	b.n	8003526 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f042 0210 	orr.w	r2, r2, #16
 8003524:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	7f1b      	ldrb	r3, [r3, #28]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d108      	bne.n	8003540 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0208 	orr.w	r2, r2, #8
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	e007      	b.n	8003550 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0208 	bic.w	r2, r2, #8
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	7f5b      	ldrb	r3, [r3, #29]
 8003554:	2b01      	cmp	r3, #1
 8003556:	d108      	bne.n	800356a <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0204 	orr.w	r2, r2, #4
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	e007      	b.n	800357a <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0204 	bic.w	r2, r2, #4
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689a      	ldr	r2, [r3, #8]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	ea42 0103 	orr.w	r1, r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	1e5a      	subs	r2, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HAL_CAN_DeInit>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeInit(CAN_HandleTypeDef *hcan)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check CAN handle */
  if (hcan == NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d101      	bne.n	80035ca <HAL_CAN_DeInit+0x12>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e015      	b.n	80035f6 <HAL_CAN_DeInit+0x3e>

  /* Check the parameters */
  assert_param(IS_CAN_ALL_INSTANCE(hcan->Instance));

  /* Stop the CAN module */
  (void)HAL_CAN_Stop(hcan);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f817 	bl	80035fe <HAL_CAN_Stop>
  /* DeInit the low level hardware: CLOCK, NVIC */
  hcan->MspDeInitCallback(hcan);

#else
  /* DeInit the low level hardware: CLOCK, NVIC */
  HAL_CAN_MspDeInit(hcan);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f7fe fd03 	bl	8001fdc <HAL_CAN_MspDeInit>
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Reset the CAN peripheral */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_RESET);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e4:	601a      	str	r2, [r3, #0]

  /* Reset the CAN ErrorCode */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change CAN state */
  hcan->State = HAL_CAN_STATE_RESET;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d133      	bne.n	800367a <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0201 	orr.w	r2, r2, #1
 8003620:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003622:	f7ff f9b3 	bl	800298c <HAL_GetTick>
 8003626:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003628:	e012      	b.n	8003650 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800362a:	f7ff f9af 	bl	800298c <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	2b0a      	cmp	r3, #10
 8003636:	d90b      	bls.n	8003650 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2205      	movs	r2, #5
 8003648:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e01b      	b.n	8003688 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0e5      	beq.n	800362a <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0202 	bic.w	r2, r2, #2
 800366c:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e006      	b.n	8003688 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
  }
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a0:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c2:	4a04      	ldr	r2, [pc, #16]	; (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bc80      	pop	{r7}
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <__NVIC_GetPriorityGrouping+0x18>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0307 	and.w	r3, r3, #7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bc80      	pop	{r7}
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db0b      	blt.n	800371e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4906      	ldr	r1, [pc, #24]	; (8003728 <__NVIC_EnableIRQ+0x34>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	bc80      	pop	{r7}
 8003726:	4770      	bx	lr
 8003728:	e000e100 	.word	0xe000e100

0800372c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800372c:	b480      	push	{r7}
 800372e:	b083      	sub	sp, #12
 8003730:	af00      	add	r7, sp, #0
 8003732:	4603      	mov	r3, r0
 8003734:	6039      	str	r1, [r7, #0]
 8003736:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373c:	2b00      	cmp	r3, #0
 800373e:	db0a      	blt.n	8003756 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	b2da      	uxtb	r2, r3
 8003744:	490c      	ldr	r1, [pc, #48]	; (8003778 <__NVIC_SetPriority+0x4c>)
 8003746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374a:	0112      	lsls	r2, r2, #4
 800374c:	b2d2      	uxtb	r2, r2
 800374e:	440b      	add	r3, r1
 8003750:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003754:	e00a      	b.n	800376c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	b2da      	uxtb	r2, r3
 800375a:	4908      	ldr	r1, [pc, #32]	; (800377c <__NVIC_SetPriority+0x50>)
 800375c:	79fb      	ldrb	r3, [r7, #7]
 800375e:	f003 030f 	and.w	r3, r3, #15
 8003762:	3b04      	subs	r3, #4
 8003764:	0112      	lsls	r2, r2, #4
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	440b      	add	r3, r1
 800376a:	761a      	strb	r2, [r3, #24]
}
 800376c:	bf00      	nop
 800376e:	370c      	adds	r7, #12
 8003770:	46bd      	mov	sp, r7
 8003772:	bc80      	pop	{r7}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	e000e100 	.word	0xe000e100
 800377c:	e000ed00 	.word	0xe000ed00

08003780 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003780:	b480      	push	{r7}
 8003782:	b089      	sub	sp, #36	; 0x24
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f003 0307 	and.w	r3, r3, #7
 8003792:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	f1c3 0307 	rsb	r3, r3, #7
 800379a:	2b04      	cmp	r3, #4
 800379c:	bf28      	it	cs
 800379e:	2304      	movcs	r3, #4
 80037a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3304      	adds	r3, #4
 80037a6:	2b06      	cmp	r3, #6
 80037a8:	d902      	bls.n	80037b0 <NVIC_EncodePriority+0x30>
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3b03      	subs	r3, #3
 80037ae:	e000      	b.n	80037b2 <NVIC_EncodePriority+0x32>
 80037b0:	2300      	movs	r3, #0
 80037b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43da      	mvns	r2, r3
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	401a      	ands	r2, r3
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	43d9      	mvns	r1, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	4313      	orrs	r3, r2
         );
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3724      	adds	r7, #36	; 0x24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bc80      	pop	{r7}
 80037e2:	4770      	bx	lr

080037e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f7ff ff4f 	bl	8003690 <__NVIC_SetPriorityGrouping>
}
 80037f2:	bf00      	nop
 80037f4:	3708      	adds	r7, #8
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b086      	sub	sp, #24
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	60b9      	str	r1, [r7, #8]
 8003804:	607a      	str	r2, [r7, #4]
 8003806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003808:	2300      	movs	r3, #0
 800380a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800380c:	f7ff ff64 	bl	80036d8 <__NVIC_GetPriorityGrouping>
 8003810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68b9      	ldr	r1, [r7, #8]
 8003816:	6978      	ldr	r0, [r7, #20]
 8003818:	f7ff ffb2 	bl	8003780 <NVIC_EncodePriority>
 800381c:	4602      	mov	r2, r0
 800381e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff ff81 	bl	800372c <__NVIC_SetPriority>
}
 800382a:	bf00      	nop
 800382c:	3718      	adds	r7, #24
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}

08003832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003832:	b580      	push	{r7, lr}
 8003834:	b082      	sub	sp, #8
 8003836:	af00      	add	r7, sp, #0
 8003838:	4603      	mov	r3, r0
 800383a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	4618      	mov	r0, r3
 8003842:	f7ff ff57 	bl	80036f4 <__NVIC_EnableIRQ>
}
 8003846:	bf00      	nop
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b08b      	sub	sp, #44	; 0x2c
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800385a:	2300      	movs	r3, #0
 800385c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800385e:	2300      	movs	r3, #0
 8003860:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003862:	e169      	b.n	8003b38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003864:	2201      	movs	r2, #1
 8003866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69fa      	ldr	r2, [r7, #28]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	429a      	cmp	r2, r3
 800387e:	f040 8158 	bne.w	8003b32 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	4a9a      	ldr	r2, [pc, #616]	; (8003af0 <HAL_GPIO_Init+0x2a0>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d05e      	beq.n	800394a <HAL_GPIO_Init+0xfa>
 800388c:	4a98      	ldr	r2, [pc, #608]	; (8003af0 <HAL_GPIO_Init+0x2a0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d875      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 8003892:	4a98      	ldr	r2, [pc, #608]	; (8003af4 <HAL_GPIO_Init+0x2a4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d058      	beq.n	800394a <HAL_GPIO_Init+0xfa>
 8003898:	4a96      	ldr	r2, [pc, #600]	; (8003af4 <HAL_GPIO_Init+0x2a4>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d86f      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 800389e:	4a96      	ldr	r2, [pc, #600]	; (8003af8 <HAL_GPIO_Init+0x2a8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d052      	beq.n	800394a <HAL_GPIO_Init+0xfa>
 80038a4:	4a94      	ldr	r2, [pc, #592]	; (8003af8 <HAL_GPIO_Init+0x2a8>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d869      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 80038aa:	4a94      	ldr	r2, [pc, #592]	; (8003afc <HAL_GPIO_Init+0x2ac>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d04c      	beq.n	800394a <HAL_GPIO_Init+0xfa>
 80038b0:	4a92      	ldr	r2, [pc, #584]	; (8003afc <HAL_GPIO_Init+0x2ac>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d863      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 80038b6:	4a92      	ldr	r2, [pc, #584]	; (8003b00 <HAL_GPIO_Init+0x2b0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d046      	beq.n	800394a <HAL_GPIO_Init+0xfa>
 80038bc:	4a90      	ldr	r2, [pc, #576]	; (8003b00 <HAL_GPIO_Init+0x2b0>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d85d      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 80038c2:	2b12      	cmp	r3, #18
 80038c4:	d82a      	bhi.n	800391c <HAL_GPIO_Init+0xcc>
 80038c6:	2b12      	cmp	r3, #18
 80038c8:	d859      	bhi.n	800397e <HAL_GPIO_Init+0x12e>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <HAL_GPIO_Init+0x80>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	0800394b 	.word	0x0800394b
 80038d4:	08003925 	.word	0x08003925
 80038d8:	08003937 	.word	0x08003937
 80038dc:	08003979 	.word	0x08003979
 80038e0:	0800397f 	.word	0x0800397f
 80038e4:	0800397f 	.word	0x0800397f
 80038e8:	0800397f 	.word	0x0800397f
 80038ec:	0800397f 	.word	0x0800397f
 80038f0:	0800397f 	.word	0x0800397f
 80038f4:	0800397f 	.word	0x0800397f
 80038f8:	0800397f 	.word	0x0800397f
 80038fc:	0800397f 	.word	0x0800397f
 8003900:	0800397f 	.word	0x0800397f
 8003904:	0800397f 	.word	0x0800397f
 8003908:	0800397f 	.word	0x0800397f
 800390c:	0800397f 	.word	0x0800397f
 8003910:	0800397f 	.word	0x0800397f
 8003914:	0800392d 	.word	0x0800392d
 8003918:	08003941 	.word	0x08003941
 800391c:	4a79      	ldr	r2, [pc, #484]	; (8003b04 <HAL_GPIO_Init+0x2b4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d013      	beq.n	800394a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003922:	e02c      	b.n	800397e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	623b      	str	r3, [r7, #32]
          break;
 800392a:	e029      	b.n	8003980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	3304      	adds	r3, #4
 8003932:	623b      	str	r3, [r7, #32]
          break;
 8003934:	e024      	b.n	8003980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	3308      	adds	r3, #8
 800393c:	623b      	str	r3, [r7, #32]
          break;
 800393e:	e01f      	b.n	8003980 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	330c      	adds	r3, #12
 8003946:	623b      	str	r3, [r7, #32]
          break;
 8003948:	e01a      	b.n	8003980 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003952:	2304      	movs	r3, #4
 8003954:	623b      	str	r3, [r7, #32]
          break;
 8003956:	e013      	b.n	8003980 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d105      	bne.n	800396c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003960:	2308      	movs	r3, #8
 8003962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69fa      	ldr	r2, [r7, #28]
 8003968:	611a      	str	r2, [r3, #16]
          break;
 800396a:	e009      	b.n	8003980 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800396c:	2308      	movs	r3, #8
 800396e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	69fa      	ldr	r2, [r7, #28]
 8003974:	615a      	str	r2, [r3, #20]
          break;
 8003976:	e003      	b.n	8003980 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
          break;
 800397c:	e000      	b.n	8003980 <HAL_GPIO_Init+0x130>
          break;
 800397e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2bff      	cmp	r3, #255	; 0xff
 8003984:	d801      	bhi.n	800398a <HAL_GPIO_Init+0x13a>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	e001      	b.n	800398e <HAL_GPIO_Init+0x13e>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2bff      	cmp	r3, #255	; 0xff
 8003994:	d802      	bhi.n	800399c <HAL_GPIO_Init+0x14c>
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	e002      	b.n	80039a2 <HAL_GPIO_Init+0x152>
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	3b08      	subs	r3, #8
 80039a0:	009b      	lsls	r3, r3, #2
 80039a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	210f      	movs	r1, #15
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	fa01 f303 	lsl.w	r3, r1, r3
 80039b0:	43db      	mvns	r3, r3
 80039b2:	401a      	ands	r2, r3
 80039b4:	6a39      	ldr	r1, [r7, #32]
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	fa01 f303 	lsl.w	r3, r1, r3
 80039bc:	431a      	orrs	r2, r3
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	f000 80b1 	beq.w	8003b32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80039d0:	4b4d      	ldr	r3, [pc, #308]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	4a4c      	ldr	r2, [pc, #304]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039d6:	f043 0301 	orr.w	r3, r3, #1
 80039da:	6193      	str	r3, [r2, #24]
 80039dc:	4b4a      	ldr	r3, [pc, #296]	; (8003b08 <HAL_GPIO_Init+0x2b8>)
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	60bb      	str	r3, [r7, #8]
 80039e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80039e8:	4a48      	ldr	r2, [pc, #288]	; (8003b0c <HAL_GPIO_Init+0x2bc>)
 80039ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ec:	089b      	lsrs	r3, r3, #2
 80039ee:	3302      	adds	r3, #2
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	220f      	movs	r2, #15
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a40      	ldr	r2, [pc, #256]	; (8003b10 <HAL_GPIO_Init+0x2c0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d013      	beq.n	8003a3c <HAL_GPIO_Init+0x1ec>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a3f      	ldr	r2, [pc, #252]	; (8003b14 <HAL_GPIO_Init+0x2c4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00d      	beq.n	8003a38 <HAL_GPIO_Init+0x1e8>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <HAL_GPIO_Init+0x2c8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <HAL_GPIO_Init+0x1e4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a3d      	ldr	r2, [pc, #244]	; (8003b1c <HAL_GPIO_Init+0x2cc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <HAL_GPIO_Init+0x1e0>
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e006      	b.n	8003a3e <HAL_GPIO_Init+0x1ee>
 8003a30:	2304      	movs	r3, #4
 8003a32:	e004      	b.n	8003a3e <HAL_GPIO_Init+0x1ee>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e002      	b.n	8003a3e <HAL_GPIO_Init+0x1ee>
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e000      	b.n	8003a3e <HAL_GPIO_Init+0x1ee>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a40:	f002 0203 	and.w	r2, r2, #3
 8003a44:	0092      	lsls	r2, r2, #2
 8003a46:	4093      	lsls	r3, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003a4e:	492f      	ldr	r1, [pc, #188]	; (8003b0c <HAL_GPIO_Init+0x2bc>)
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	089b      	lsrs	r3, r3, #2
 8003a54:	3302      	adds	r3, #2
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d006      	beq.n	8003a76 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003a68:	4b2d      	ldr	r3, [pc, #180]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	492c      	ldr	r1, [pc, #176]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
 8003a74:	e006      	b.n	8003a84 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003a76:	4b2a      	ldr	r3, [pc, #168]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	43db      	mvns	r3, r3
 8003a7e:	4928      	ldr	r1, [pc, #160]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a80:	4013      	ands	r3, r2
 8003a82:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d006      	beq.n	8003a9e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003a90:	4b23      	ldr	r3, [pc, #140]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	4922      	ldr	r1, [pc, #136]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	60cb      	str	r3, [r1, #12]
 8003a9c:	e006      	b.n	8003aac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003a9e:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	491e      	ldr	r1, [pc, #120]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d006      	beq.n	8003ac6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003ab8:	4b19      	ldr	r3, [pc, #100]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4918      	ldr	r1, [pc, #96]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
 8003ac4:	e006      	b.n	8003ad4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ac6:	4b16      	ldr	r3, [pc, #88]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	43db      	mvns	r3, r3
 8003ace:	4914      	ldr	r1, [pc, #80]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d021      	beq.n	8003b24 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ae0:	4b0f      	ldr	r3, [pc, #60]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	490e      	ldr	r1, [pc, #56]	; (8003b20 <HAL_GPIO_Init+0x2d0>)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e021      	b.n	8003b32 <HAL_GPIO_Init+0x2e2>
 8003aee:	bf00      	nop
 8003af0:	10320000 	.word	0x10320000
 8003af4:	10310000 	.word	0x10310000
 8003af8:	10220000 	.word	0x10220000
 8003afc:	10210000 	.word	0x10210000
 8003b00:	10120000 	.word	0x10120000
 8003b04:	10110000 	.word	0x10110000
 8003b08:	40021000 	.word	0x40021000
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40010800 	.word	0x40010800
 8003b14:	40010c00 	.word	0x40010c00
 8003b18:	40011000 	.word	0x40011000
 8003b1c:	40011400 	.word	0x40011400
 8003b20:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003b24:	4b0b      	ldr	r3, [pc, #44]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	43db      	mvns	r3, r3
 8003b2c:	4909      	ldr	r1, [pc, #36]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b34:	3301      	adds	r3, #1
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f47f ae8e 	bne.w	8003864 <HAL_GPIO_Init+0x14>
  }
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	372c      	adds	r7, #44	; 0x2c
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	40010400 	.word	0x40010400

08003b58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b089      	sub	sp, #36	; 0x24
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003b66:	e09a      	b.n	8003c9e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 808d 	beq.w	8003c98 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003b7e:	4a4e      	ldr	r2, [pc, #312]	; (8003cb8 <HAL_GPIO_DeInit+0x160>)
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a46      	ldr	r2, [pc, #280]	; (8003cbc <HAL_GPIO_DeInit+0x164>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d013      	beq.n	8003bd0 <HAL_GPIO_DeInit+0x78>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a45      	ldr	r2, [pc, #276]	; (8003cc0 <HAL_GPIO_DeInit+0x168>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00d      	beq.n	8003bcc <HAL_GPIO_DeInit+0x74>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a44      	ldr	r2, [pc, #272]	; (8003cc4 <HAL_GPIO_DeInit+0x16c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <HAL_GPIO_DeInit+0x70>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a43      	ldr	r2, [pc, #268]	; (8003cc8 <HAL_GPIO_DeInit+0x170>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d101      	bne.n	8003bc4 <HAL_GPIO_DeInit+0x6c>
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e006      	b.n	8003bd2 <HAL_GPIO_DeInit+0x7a>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e004      	b.n	8003bd2 <HAL_GPIO_DeInit+0x7a>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e002      	b.n	8003bd2 <HAL_GPIO_DeInit+0x7a>
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e000      	b.n	8003bd2 <HAL_GPIO_DeInit+0x7a>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	69fa      	ldr	r2, [r7, #28]
 8003bd4:	f002 0203 	and.w	r2, r2, #3
 8003bd8:	0092      	lsls	r2, r2, #2
 8003bda:	4093      	lsls	r3, r2
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	d132      	bne.n	8003c48 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003be2:	4b3a      	ldr	r3, [pc, #232]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	4938      	ldr	r1, [pc, #224]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003bec:	4013      	ands	r3, r2
 8003bee:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003bf0:	4b36      	ldr	r3, [pc, #216]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	69bb      	ldr	r3, [r7, #24]
 8003bf6:	43db      	mvns	r3, r3
 8003bf8:	4934      	ldr	r1, [pc, #208]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003bfe:	4b33      	ldr	r3, [pc, #204]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	4931      	ldr	r1, [pc, #196]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003c0c:	4b2f      	ldr	r3, [pc, #188]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	492d      	ldr	r1, [pc, #180]	; (8003ccc <HAL_GPIO_DeInit+0x174>)
 8003c16:	4013      	ands	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	220f      	movs	r2, #15
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8003c2a:	4a23      	ldr	r2, [pc, #140]	; (8003cb8 <HAL_GPIO_DeInit+0x160>)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	089b      	lsrs	r3, r3, #2
 8003c30:	3302      	adds	r3, #2
 8003c32:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	43da      	mvns	r2, r3
 8003c3a:	481f      	ldr	r0, [pc, #124]	; (8003cb8 <HAL_GPIO_DeInit+0x160>)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	089b      	lsrs	r3, r3, #2
 8003c40:	400a      	ands	r2, r1
 8003c42:	3302      	adds	r3, #2
 8003c44:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d801      	bhi.n	8003c52 <HAL_GPIO_DeInit+0xfa>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	e001      	b.n	8003c56 <HAL_GPIO_DeInit+0xfe>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	3304      	adds	r3, #4
 8003c56:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2bff      	cmp	r3, #255	; 0xff
 8003c5c:	d802      	bhi.n	8003c64 <HAL_GPIO_DeInit+0x10c>
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	e002      	b.n	8003c6a <HAL_GPIO_DeInit+0x112>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3b08      	subs	r3, #8
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	210f      	movs	r1, #15
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	fa01 f303 	lsl.w	r3, r1, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	401a      	ands	r2, r3
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	fa01 f303 	lsl.w	r3, r1, r3
 8003c84:	431a      	orrs	r2, r3
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	401a      	ands	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]
    }

    position++;
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8003c9e:	683a      	ldr	r2, [r7, #0]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f47f af5e 	bne.w	8003b68 <HAL_GPIO_DeInit+0x10>
  }
}
 8003cac:	bf00      	nop
 8003cae:	bf00      	nop
 8003cb0:	3724      	adds	r7, #36	; 0x24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bc80      	pop	{r7}
 8003cb6:	4770      	bx	lr
 8003cb8:	40010000 	.word	0x40010000
 8003cbc:	40010800 	.word	0x40010800
 8003cc0:	40010c00 	.word	0x40010c00
 8003cc4:	40011000 	.word	0x40011000
 8003cc8:	40011400 	.word	0x40011400
 8003ccc:	40010400 	.word	0x40010400

08003cd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cda:	4b08      	ldr	r3, [pc, #32]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003cdc:	695a      	ldr	r2, [r3, #20]
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d006      	beq.n	8003cf4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ce6:	4a05      	ldr	r2, [pc, #20]	; (8003cfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ce8:	88fb      	ldrh	r3, [r7, #6]
 8003cea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003cec:	88fb      	ldrh	r3, [r7, #6]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc ff46 	bl	8000b80 <HAL_GPIO_EXTI_Callback>
  }
}
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40010400 	.word	0x40010400

08003d00 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e12b      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d106      	bne.n	8003d2c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f7fe f976 	bl	8002018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2224      	movs	r2, #36	; 0x24
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d52:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d62:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d64:	f000 fd78 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8003d68:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	4a81      	ldr	r2, [pc, #516]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d807      	bhi.n	8003d84 <HAL_I2C_Init+0x84>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a80      	ldr	r2, [pc, #512]	; (8003f78 <HAL_I2C_Init+0x278>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	bf94      	ite	ls
 8003d7c:	2301      	movls	r3, #1
 8003d7e:	2300      	movhi	r3, #0
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e006      	b.n	8003d92 <HAL_I2C_Init+0x92>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a7d      	ldr	r2, [pc, #500]	; (8003f7c <HAL_I2C_Init+0x27c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	bf94      	ite	ls
 8003d8c:	2301      	movls	r3, #1
 8003d8e:	2300      	movhi	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0e7      	b.n	8003f6a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a78      	ldr	r2, [pc, #480]	; (8003f80 <HAL_I2C_Init+0x280>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	0c9b      	lsrs	r3, r3, #18
 8003da4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68ba      	ldr	r2, [r7, #8]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6a1b      	ldr	r3, [r3, #32]
 8003dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a6a      	ldr	r2, [pc, #424]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d802      	bhi.n	8003dd4 <HAL_I2C_Init+0xd4>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	e009      	b.n	8003de8 <HAL_I2C_Init+0xe8>
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003dda:	fb02 f303 	mul.w	r3, r2, r3
 8003dde:	4a69      	ldr	r2, [pc, #420]	; (8003f84 <HAL_I2C_Init+0x284>)
 8003de0:	fba2 2303 	umull	r2, r3, r2, r3
 8003de4:	099b      	lsrs	r3, r3, #6
 8003de6:	3301      	adds	r3, #1
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	6812      	ldr	r2, [r2, #0]
 8003dec:	430b      	orrs	r3, r1
 8003dee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003dfa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	495c      	ldr	r1, [pc, #368]	; (8003f74 <HAL_I2C_Init+0x274>)
 8003e04:	428b      	cmp	r3, r1
 8003e06:	d819      	bhi.n	8003e3c <HAL_I2C_Init+0x13c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	1e59      	subs	r1, r3, #1
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	005b      	lsls	r3, r3, #1
 8003e12:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e16:	1c59      	adds	r1, r3, #1
 8003e18:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e1c:	400b      	ands	r3, r1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_I2C_Init+0x138>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1e59      	subs	r1, r3, #1
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	005b      	lsls	r3, r3, #1
 8003e2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e30:	3301      	adds	r3, #1
 8003e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e36:	e051      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	e04f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d111      	bne.n	8003e68 <HAL_I2C_Init+0x168>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	1e58      	subs	r0, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6859      	ldr	r1, [r3, #4]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	440b      	add	r3, r1
 8003e52:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e56:	3301      	adds	r3, #1
 8003e58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	bf0c      	ite	eq
 8003e60:	2301      	moveq	r3, #1
 8003e62:	2300      	movne	r3, #0
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	e012      	b.n	8003e8e <HAL_I2C_Init+0x18e>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1e58      	subs	r0, r3, #1
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6859      	ldr	r1, [r3, #4]
 8003e70:	460b      	mov	r3, r1
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	0099      	lsls	r1, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d001      	beq.n	8003e96 <HAL_I2C_Init+0x196>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e022      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10e      	bne.n	8003ebc <HAL_I2C_Init+0x1bc>
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e58      	subs	r0, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6859      	ldr	r1, [r3, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	440b      	add	r3, r1
 8003eac:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eba:	e00f      	b.n	8003edc <HAL_I2C_Init+0x1dc>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	1e58      	subs	r0, r3, #1
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6859      	ldr	r1, [r3, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	440b      	add	r3, r1
 8003eca:	0099      	lsls	r1, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed2:	3301      	adds	r3, #1
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	6809      	ldr	r1, [r1, #0]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69da      	ldr	r2, [r3, #28]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	430a      	orrs	r2, r1
 8003efe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	6911      	ldr	r1, [r2, #16]
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	68d2      	ldr	r2, [r2, #12]
 8003f16:	4311      	orrs	r1, r2
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695a      	ldr	r2, [r3, #20]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	699b      	ldr	r3, [r3, #24]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	430a      	orrs	r2, r1
 8003f3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f042 0201 	orr.w	r2, r2, #1
 8003f4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	000186a0 	.word	0x000186a0
 8003f78:	001e847f 	.word	0x001e847f
 8003f7c:	003d08ff 	.word	0x003d08ff
 8003f80:	431bde83 	.word	0x431bde83
 8003f84:	10624dd3 	.word	0x10624dd3

08003f88 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e021      	b.n	8003fde <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2224      	movs	r2, #36	; 0x24
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0201 	bic.w	r2, r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fe f89c 	bl	80020f0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 8003fea:	bf20      	wfe
  __asm volatile( "nop" );
 8003fec:	bf00      	nop
}
 8003fee:	bf00      	nop
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bc80      	pop	{r7}
 8003ff4:	4770      	bx	lr
	...

08003ff8 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  UNUSED(Regulator);

  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_PWR_EnterSLEEPMode+0x34>)
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	4a08      	ldr	r2, [pc, #32]	; (800402c <HAL_PWR_EnterSLEEPMode+0x34>)
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004010:	78fb      	ldrb	r3, [r7, #3]
 8004012:	2b01      	cmp	r3, #1
 8004014:	d101      	bne.n	800401a <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004016:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8004018:	e002      	b.n	8004020 <HAL_PWR_EnterSLEEPMode+0x28>
    __SEV();
 800401a:	bf40      	sev
    __WFE();
 800401c:	bf20      	wfe
    __WFE();
 800401e:	bf20      	wfe
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	bc80      	pop	{r7}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	e000ed00 	.word	0xe000ed00

08004030 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b082      	sub	sp, #8
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	460b      	mov	r3, r1
 800403a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <HAL_PWR_EnterSTOPMode+0x5c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <HAL_PWR_EnterSTOPMode+0x5c>)
 8004042:	f023 0302 	bic.w	r3, r3, #2
 8004046:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 8004048:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_PWR_EnterSTOPMode+0x5c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f023 0201 	bic.w	r2, r3, #1
 8004050:	490e      	ldr	r1, [pc, #56]	; (800408c <HAL_PWR_EnterSTOPMode+0x5c>)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004058:	4b0d      	ldr	r3, [pc, #52]	; (8004090 <HAL_PWR_EnterSTOPMode+0x60>)
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	4a0c      	ldr	r2, [pc, #48]	; (8004090 <HAL_PWR_EnterSTOPMode+0x60>)
 800405e:	f043 0304 	orr.w	r3, r3, #4
 8004062:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004064:	78fb      	ldrb	r3, [r7, #3]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d101      	bne.n	800406e <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800406a:	bf30      	wfi
 800406c:	e004      	b.n	8004078 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800406e:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004070:	f7ff ffb9 	bl	8003fe6 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 8004074:	f7ff ffb7 	bl	8003fe6 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <HAL_PWR_EnterSTOPMode+0x60>)
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	4a04      	ldr	r2, [pc, #16]	; (8004090 <HAL_PWR_EnterSTOPMode+0x60>)
 800407e:	f023 0304 	bic.w	r3, r3, #4
 8004082:	6113      	str	r3, [r2, #16]
}
 8004084:	bf00      	nop
 8004086:	3708      	adds	r7, #8
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}
 800408c:	40007000 	.word	0x40007000
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <HAL_PWR_EnterSTANDBYMode>:
  *          - TAMPER pin if configured for tamper or calibration out.
  *          - WKUP pin (PA0) if enabled.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 8004094:	b480      	push	{r7}
 8004096:	af00      	add	r7, sp, #0
  /* Select Standby mode */
  SET_BIT(PWR->CR, PWR_CR_PDDS);
 8004098:	4b08      	ldr	r3, [pc, #32]	; (80040bc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a07      	ldr	r2, [pc, #28]	; (80040bc <HAL_PWR_EnterSTANDBYMode+0x28>)
 800409e:	f043 0302 	orr.w	r3, r3, #2
 80040a2:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	4a05      	ldr	r2, [pc, #20]	; (80040c0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80040aa:	f043 0304 	orr.w	r3, r3, #4
 80040ae:	6113      	str	r3, [r2, #16]
  /* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80040b0:	bf30      	wfi
}
 80040b2:	bf00      	nop
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bc80      	pop	{r7}
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40007000 	.word	0x40007000
 80040c0:	e000ed00 	.word	0xe000ed00

080040c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e272      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f000 8087 	beq.w	80041f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80040e4:	4b92      	ldr	r3, [pc, #584]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f003 030c 	and.w	r3, r3, #12
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d00c      	beq.n	800410a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80040f0:	4b8f      	ldr	r3, [pc, #572]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f003 030c 	and.w	r3, r3, #12
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d112      	bne.n	8004122 <HAL_RCC_OscConfig+0x5e>
 80040fc:	4b8c      	ldr	r3, [pc, #560]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d10b      	bne.n	8004122 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800410a:	4b89      	ldr	r3, [pc, #548]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d06c      	beq.n	80041f0 <HAL_RCC_OscConfig+0x12c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d168      	bne.n	80041f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e24c      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800412a:	d106      	bne.n	800413a <HAL_RCC_OscConfig+0x76>
 800412c:	4b80      	ldr	r3, [pc, #512]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a7f      	ldr	r2, [pc, #508]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004132:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	e02e      	b.n	8004198 <HAL_RCC_OscConfig+0xd4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10c      	bne.n	800415c <HAL_RCC_OscConfig+0x98>
 8004142:	4b7b      	ldr	r3, [pc, #492]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a7a      	ldr	r2, [pc, #488]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	4b78      	ldr	r3, [pc, #480]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a77      	ldr	r2, [pc, #476]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004154:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	e01d      	b.n	8004198 <HAL_RCC_OscConfig+0xd4>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004164:	d10c      	bne.n	8004180 <HAL_RCC_OscConfig+0xbc>
 8004166:	4b72      	ldr	r3, [pc, #456]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a71      	ldr	r2, [pc, #452]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800416c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	4b6f      	ldr	r3, [pc, #444]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a6e      	ldr	r2, [pc, #440]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800417c:	6013      	str	r3, [r2, #0]
 800417e:	e00b      	b.n	8004198 <HAL_RCC_OscConfig+0xd4>
 8004180:	4b6b      	ldr	r3, [pc, #428]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a6a      	ldr	r2, [pc, #424]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004186:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	4b68      	ldr	r3, [pc, #416]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a67      	ldr	r2, [pc, #412]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004192:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004196:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d013      	beq.n	80041c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a0:	f7fe fbf4 	bl	800298c <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a8:	f7fe fbf0 	bl	800298c <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	; 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e200      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ba:	4b5d      	ldr	r3, [pc, #372]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0xe4>
 80041c6:	e014      	b.n	80041f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7fe fbe0 	bl	800298c <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041d0:	f7fe fbdc 	bl	800298c <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b64      	cmp	r3, #100	; 0x64
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e1ec      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e2:	4b53      	ldr	r3, [pc, #332]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x10c>
 80041ee:	e000      	b.n	80041f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d063      	beq.n	80042c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041fe:	4b4c      	ldr	r3, [pc, #304]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f003 030c 	and.w	r3, r3, #12
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00b      	beq.n	8004222 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800420a:	4b49      	ldr	r3, [pc, #292]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b08      	cmp	r3, #8
 8004214:	d11c      	bne.n	8004250 <HAL_RCC_OscConfig+0x18c>
 8004216:	4b46      	ldr	r3, [pc, #280]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d116      	bne.n	8004250 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004222:	4b43      	ldr	r3, [pc, #268]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_RCC_OscConfig+0x176>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d001      	beq.n	800423a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e1c0      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800423a:	4b3d      	ldr	r3, [pc, #244]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	4939      	ldr	r1, [pc, #228]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800424e:	e03a      	b.n	80042c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d020      	beq.n	800429a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800425e:	f7fe fb95 	bl	800298c <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004266:	f7fe fb91 	bl	800298c <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e1a1      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004278:	4b2d      	ldr	r3, [pc, #180]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0302 	and.w	r3, r3, #2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004284:	4b2a      	ldr	r3, [pc, #168]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	695b      	ldr	r3, [r3, #20]
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4927      	ldr	r1, [pc, #156]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 8004294:	4313      	orrs	r3, r2
 8004296:	600b      	str	r3, [r1, #0]
 8004298:	e015      	b.n	80042c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCC_OscConfig+0x270>)
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a0:	f7fe fb74 	bl	800298c <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042a8:	f7fe fb70 	bl	800298c <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e180      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ba:	4b1d      	ldr	r3, [pc, #116]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f0      	bne.n	80042a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03a      	beq.n	8004348 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d019      	beq.n	800430e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042da:	4b17      	ldr	r3, [pc, #92]	; (8004338 <HAL_RCC_OscConfig+0x274>)
 80042dc:	2201      	movs	r2, #1
 80042de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042e0:	f7fe fb54 	bl	800298c <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fe fb50 	bl	800298c <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e160      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fa:	4b0d      	ldr	r3, [pc, #52]	; (8004330 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d0f0      	beq.n	80042e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004306:	2001      	movs	r0, #1
 8004308:	f000 fafe 	bl	8004908 <RCC_Delay>
 800430c:	e01c      	b.n	8004348 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430e:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <HAL_RCC_OscConfig+0x274>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004314:	f7fe fb3a 	bl	800298c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431a:	e00f      	b.n	800433c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800431c:	f7fe fb36 	bl	800298c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d908      	bls.n	800433c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e146      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
 800432e:	bf00      	nop
 8004330:	40021000 	.word	0x40021000
 8004334:	42420000 	.word	0x42420000
 8004338:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800433c:	4b92      	ldr	r3, [pc, #584]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e9      	bne.n	800431c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 80a6 	beq.w	80044a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004356:	2300      	movs	r3, #0
 8004358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435a:	4b8b      	ldr	r3, [pc, #556]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10d      	bne.n	8004382 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	4b88      	ldr	r3, [pc, #544]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004368:	69db      	ldr	r3, [r3, #28]
 800436a:	4a87      	ldr	r2, [pc, #540]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800436c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004370:	61d3      	str	r3, [r2, #28]
 8004372:	4b85      	ldr	r3, [pc, #532]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800437a:	60bb      	str	r3, [r7, #8]
 800437c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800437e:	2301      	movs	r3, #1
 8004380:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004382:	4b82      	ldr	r3, [pc, #520]	; (800458c <HAL_RCC_OscConfig+0x4c8>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438a:	2b00      	cmp	r3, #0
 800438c:	d118      	bne.n	80043c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <HAL_RCC_OscConfig+0x4c8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7e      	ldr	r2, [pc, #504]	; (800458c <HAL_RCC_OscConfig+0x4c8>)
 8004394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004398:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800439a:	f7fe faf7 	bl	800298c <HAL_GetTick>
 800439e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043a0:	e008      	b.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a2:	f7fe faf3 	bl	800298c <HAL_GetTick>
 80043a6:	4602      	mov	r2, r0
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	1ad3      	subs	r3, r2, r3
 80043ac:	2b64      	cmp	r3, #100	; 0x64
 80043ae:	d901      	bls.n	80043b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80043b0:	2303      	movs	r3, #3
 80043b2:	e103      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	4b75      	ldr	r3, [pc, #468]	; (800458c <HAL_RCC_OscConfig+0x4c8>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d0f0      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d106      	bne.n	80043d6 <HAL_RCC_OscConfig+0x312>
 80043c8:	4b6f      	ldr	r3, [pc, #444]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043ca:	6a1b      	ldr	r3, [r3, #32]
 80043cc:	4a6e      	ldr	r2, [pc, #440]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043ce:	f043 0301 	orr.w	r3, r3, #1
 80043d2:	6213      	str	r3, [r2, #32]
 80043d4:	e02d      	b.n	8004432 <HAL_RCC_OscConfig+0x36e>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d10c      	bne.n	80043f8 <HAL_RCC_OscConfig+0x334>
 80043de:	4b6a      	ldr	r3, [pc, #424]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4a69      	ldr	r2, [pc, #420]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	f023 0301 	bic.w	r3, r3, #1
 80043e8:	6213      	str	r3, [r2, #32]
 80043ea:	4b67      	ldr	r3, [pc, #412]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a66      	ldr	r2, [pc, #408]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	f023 0304 	bic.w	r3, r3, #4
 80043f4:	6213      	str	r3, [r2, #32]
 80043f6:	e01c      	b.n	8004432 <HAL_RCC_OscConfig+0x36e>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	2b05      	cmp	r3, #5
 80043fe:	d10c      	bne.n	800441a <HAL_RCC_OscConfig+0x356>
 8004400:	4b61      	ldr	r3, [pc, #388]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	4a60      	ldr	r2, [pc, #384]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004406:	f043 0304 	orr.w	r3, r3, #4
 800440a:	6213      	str	r3, [r2, #32]
 800440c:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	4a5d      	ldr	r2, [pc, #372]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004412:	f043 0301 	orr.w	r3, r3, #1
 8004416:	6213      	str	r3, [r2, #32]
 8004418:	e00b      	b.n	8004432 <HAL_RCC_OscConfig+0x36e>
 800441a:	4b5b      	ldr	r3, [pc, #364]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	4a5a      	ldr	r2, [pc, #360]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004420:	f023 0301 	bic.w	r3, r3, #1
 8004424:	6213      	str	r3, [r2, #32]
 8004426:	4b58      	ldr	r3, [pc, #352]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	4a57      	ldr	r2, [pc, #348]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800442c:	f023 0304 	bic.w	r3, r3, #4
 8004430:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fe faa7 	bl	800298c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fe faa3 	bl	800298c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0b1      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004458:	4b4b      	ldr	r3, [pc, #300]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0ee      	beq.n	8004442 <HAL_RCC_OscConfig+0x37e>
 8004464:	e014      	b.n	8004490 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004466:	f7fe fa91 	bl	800298c <HAL_GetTick>
 800446a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800446c:	e00a      	b.n	8004484 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800446e:	f7fe fa8d 	bl	800298c <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	f241 3288 	movw	r2, #5000	; 0x1388
 800447c:	4293      	cmp	r3, r2
 800447e:	d901      	bls.n	8004484 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e09b      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004484:	4b40      	ldr	r3, [pc, #256]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004486:	6a1b      	ldr	r3, [r3, #32]
 8004488:	f003 0302 	and.w	r3, r3, #2
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1ee      	bne.n	800446e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004490:	7dfb      	ldrb	r3, [r7, #23]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d105      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004496:	4b3c      	ldr	r3, [pc, #240]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8087 	beq.w	80045ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80044ac:	4b36      	ldr	r3, [pc, #216]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f003 030c 	and.w	r3, r3, #12
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d061      	beq.n	800457c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d146      	bne.n	800454e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044c0:	4b33      	ldr	r3, [pc, #204]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fe fa61 	bl	800298c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe fa5d 	bl	800298c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e06d      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044e0:	4b29      	ldr	r3, [pc, #164]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f0      	bne.n	80044ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044f4:	d108      	bne.n	8004508 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80044f6:	4b24      	ldr	r3, [pc, #144]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4921      	ldr	r1, [pc, #132]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004508:	4b1f      	ldr	r3, [pc, #124]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a19      	ldr	r1, [r3, #32]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	430b      	orrs	r3, r1
 800451a:	491b      	ldr	r1, [pc, #108]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 800451c:	4313      	orrs	r3, r2
 800451e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004522:	2201      	movs	r2, #1
 8004524:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004526:	f7fe fa31 	bl	800298c <HAL_GetTick>
 800452a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800452c:	e008      	b.n	8004540 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800452e:	f7fe fa2d 	bl	800298c <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b02      	cmp	r3, #2
 800453a:	d901      	bls.n	8004540 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	e03d      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004540:	4b11      	ldr	r3, [pc, #68]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d0f0      	beq.n	800452e <HAL_RCC_OscConfig+0x46a>
 800454c:	e035      	b.n	80045ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800454e:	4b10      	ldr	r3, [pc, #64]	; (8004590 <HAL_RCC_OscConfig+0x4cc>)
 8004550:	2200      	movs	r2, #0
 8004552:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004554:	f7fe fa1a 	bl	800298c <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fe fa16 	bl	800298c <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e026      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800456e:	4b06      	ldr	r3, [pc, #24]	; (8004588 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x498>
 800457a:	e01e      	b.n	80045ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e019      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
 8004588:	40021000 	.word	0x40021000
 800458c:	40007000 	.word	0x40007000
 8004590:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004594:	4b0b      	ldr	r3, [pc, #44]	; (80045c4 <HAL_RCC_OscConfig+0x500>)
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d106      	bne.n	80045b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d001      	beq.n	80045ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3718      	adds	r7, #24
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000

080045c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
 80045d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d101      	bne.n	80045dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e0d0      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045dc:	4b6a      	ldr	r3, [pc, #424]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d910      	bls.n	800460c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f023 0207 	bic.w	r2, r3, #7
 80045f2:	4965      	ldr	r1, [pc, #404]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fa:	4b63      	ldr	r3, [pc, #396]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	429a      	cmp	r2, r3
 8004606:	d001      	beq.n	800460c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e0b8      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d020      	beq.n	800465a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004624:	4b59      	ldr	r3, [pc, #356]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	4a58      	ldr	r2, [pc, #352]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 800462a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800462e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0308 	and.w	r3, r3, #8
 8004638:	2b00      	cmp	r3, #0
 800463a:	d005      	beq.n	8004648 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800463c:	4b53      	ldr	r3, [pc, #332]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a52      	ldr	r2, [pc, #328]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004642:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004646:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004648:	4b50      	ldr	r3, [pc, #320]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	494d      	ldr	r1, [pc, #308]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004656:	4313      	orrs	r3, r2
 8004658:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d040      	beq.n	80046e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d107      	bne.n	800467e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466e:	4b47      	ldr	r3, [pc, #284]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d115      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e07f      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b02      	cmp	r3, #2
 8004684:	d107      	bne.n	8004696 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004686:	4b41      	ldr	r3, [pc, #260]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d109      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e073      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004696:	4b3d      	ldr	r3, [pc, #244]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0302 	and.w	r3, r3, #2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e06b      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046a6:	4b39      	ldr	r3, [pc, #228]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f023 0203 	bic.w	r2, r3, #3
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	4936      	ldr	r1, [pc, #216]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80046b4:	4313      	orrs	r3, r2
 80046b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046b8:	f7fe f968 	bl	800298c <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046be:	e00a      	b.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c0:	f7fe f964 	bl	800298c <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e053      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d6:	4b2d      	ldr	r3, [pc, #180]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f003 020c 	and.w	r2, r3, #12
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d1eb      	bne.n	80046c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	683a      	ldr	r2, [r7, #0]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d210      	bcs.n	8004718 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046f6:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f023 0207 	bic.w	r2, r3, #7
 80046fe:	4922      	ldr	r1, [pc, #136]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	4313      	orrs	r3, r2
 8004704:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b20      	ldr	r3, [pc, #128]	; (8004788 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e032      	b.n	800477e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0304 	and.w	r3, r3, #4
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004724:	4b19      	ldr	r3, [pc, #100]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	4916      	ldr	r1, [pc, #88]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d009      	beq.n	8004756 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004742:	4b12      	ldr	r3, [pc, #72]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	490e      	ldr	r1, [pc, #56]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 8004752:	4313      	orrs	r3, r2
 8004754:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004756:	f000 f821 	bl	800479c <HAL_RCC_GetSysClockFreq>
 800475a:	4602      	mov	r2, r0
 800475c:	4b0b      	ldr	r3, [pc, #44]	; (800478c <HAL_RCC_ClockConfig+0x1c4>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	091b      	lsrs	r3, r3, #4
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	490a      	ldr	r1, [pc, #40]	; (8004790 <HAL_RCC_ClockConfig+0x1c8>)
 8004768:	5ccb      	ldrb	r3, [r1, r3]
 800476a:	fa22 f303 	lsr.w	r3, r2, r3
 800476e:	4a09      	ldr	r2, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1cc>)
 8004770:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_RCC_ClockConfig+0x1d0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7fd ff3c 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40022000 	.word	0x40022000
 800478c:	40021000 	.word	0x40021000
 8004790:	08007124 	.word	0x08007124
 8004794:	20000000 	.word	0x20000000
 8004798:	20000004 	.word	0x20000004

0800479c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	2300      	movs	r3, #0
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	2300      	movs	r3, #0
 80047b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80047b2:	2300      	movs	r3, #0
 80047b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_RCC_GetSysClockFreq+0x94>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b04      	cmp	r3, #4
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x30>
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x36>
 80047ca:	e027      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80047cc:	4b19      	ldr	r3, [pc, #100]	; (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 80047ce:	613b      	str	r3, [r7, #16]
      break;
 80047d0:	e027      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	0c9b      	lsrs	r3, r3, #18
 80047d6:	f003 030f 	and.w	r3, r3, #15
 80047da:	4a17      	ldr	r2, [pc, #92]	; (8004838 <HAL_RCC_GetSysClockFreq+0x9c>)
 80047dc:	5cd3      	ldrb	r3, [r2, r3]
 80047de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d010      	beq.n	800480c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80047ea:	4b11      	ldr	r3, [pc, #68]	; (8004830 <HAL_RCC_GetSysClockFreq+0x94>)
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	0c5b      	lsrs	r3, r3, #17
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	4a11      	ldr	r2, [pc, #68]	; (800483c <HAL_RCC_GetSysClockFreq+0xa0>)
 80047f6:	5cd3      	ldrb	r3, [r2, r3]
 80047f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a0d      	ldr	r2, [pc, #52]	; (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 80047fe:	fb03 f202 	mul.w	r2, r3, r2
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	fbb2 f3f3 	udiv	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	e004      	b.n	8004816 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0c      	ldr	r2, [pc, #48]	; (8004840 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004810:	fb02 f303 	mul.w	r3, r2, r3
 8004814:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	613b      	str	r3, [r7, #16]
      break;
 800481a:	e002      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetSysClockFreq+0x98>)
 800481e:	613b      	str	r3, [r7, #16]
      break;
 8004820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004822:	693b      	ldr	r3, [r7, #16]
}
 8004824:	4618      	mov	r0, r3
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	007a1200 	.word	0x007a1200
 8004838:	0800713c 	.word	0x0800713c
 800483c:	0800714c 	.word	0x0800714c
 8004840:	003d0900 	.word	0x003d0900

08004844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004848:	4b02      	ldr	r3, [pc, #8]	; (8004854 <HAL_RCC_GetHCLKFreq+0x10>)
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	46bd      	mov	sp, r7
 8004850:	bc80      	pop	{r7}
 8004852:	4770      	bx	lr
 8004854:	20000000 	.word	0x20000000

08004858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800485c:	f7ff fff2 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004860:	4602      	mov	r2, r0
 8004862:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	0a1b      	lsrs	r3, r3, #8
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	4903      	ldr	r1, [pc, #12]	; (800487c <HAL_RCC_GetPCLK1Freq+0x24>)
 800486e:	5ccb      	ldrb	r3, [r1, r3]
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	08007134 	.word	0x08007134

08004880 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004884:	f7ff ffde 	bl	8004844 <HAL_RCC_GetHCLKFreq>
 8004888:	4602      	mov	r2, r0
 800488a:	4b05      	ldr	r3, [pc, #20]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	0adb      	lsrs	r3, r3, #11
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	4903      	ldr	r1, [pc, #12]	; (80048a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004896:	5ccb      	ldrb	r3, [r1, r3]
 8004898:	fa22 f303 	lsr.w	r3, r2, r3
}
 800489c:	4618      	mov	r0, r3
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	40021000 	.word	0x40021000
 80048a4:	08007134 	.word	0x08007134

080048a8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	220f      	movs	r2, #15
 80048b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048b8:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_RCC_GetClockConfig+0x58>)
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80048c4:	4b0e      	ldr	r3, [pc, #56]	; (8004900 <HAL_RCC_GetClockConfig+0x58>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80048d0:	4b0b      	ldr	r3, [pc, #44]	; (8004900 <HAL_RCC_GetClockConfig+0x58>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80048dc:	4b08      	ldr	r3, [pc, #32]	; (8004900 <HAL_RCC_GetClockConfig+0x58>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	08db      	lsrs	r3, r3, #3
 80048e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <HAL_RCC_GetClockConfig+0x5c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 0207 	and.w	r2, r3, #7
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bc80      	pop	{r7}
 80048fe:	4770      	bx	lr
 8004900:	40021000 	.word	0x40021000
 8004904:	40022000 	.word	0x40022000

08004908 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004910:	4b0a      	ldr	r3, [pc, #40]	; (800493c <RCC_Delay+0x34>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a0a      	ldr	r2, [pc, #40]	; (8004940 <RCC_Delay+0x38>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	0a5b      	lsrs	r3, r3, #9
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	fb02 f303 	mul.w	r3, r2, r3
 8004922:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004924:	bf00      	nop
  }
  while (Delay --);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1e5a      	subs	r2, r3, #1
 800492a:	60fa      	str	r2, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f9      	bne.n	8004924 <RCC_Delay+0x1c>
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	20000000 	.word	0x20000000
 8004940:	10624dd3 	.word	0x10624dd3

08004944 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	2300      	movs	r3, #0
 8004952:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d07d      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004960:	2300      	movs	r3, #0
 8004962:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004964:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004966:	69db      	ldr	r3, [r3, #28]
 8004968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d10d      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004970:	4b4c      	ldr	r3, [pc, #304]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004972:	69db      	ldr	r3, [r3, #28]
 8004974:	4a4b      	ldr	r2, [pc, #300]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800497a:	61d3      	str	r3, [r2, #28]
 800497c:	4b49      	ldr	r3, [pc, #292]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004988:	2301      	movs	r3, #1
 800498a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800498c:	4b46      	ldr	r3, [pc, #280]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004994:	2b00      	cmp	r3, #0
 8004996:	d118      	bne.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004998:	4b43      	ldr	r3, [pc, #268]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a42      	ldr	r2, [pc, #264]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800499e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049a4:	f7fd fff2 	bl	800298c <HAL_GetTick>
 80049a8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049aa:	e008      	b.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049ac:	f7fd ffee 	bl	800298c <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	2b64      	cmp	r3, #100	; 0x64
 80049b8:	d901      	bls.n	80049be <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e06d      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049be:	4b3a      	ldr	r3, [pc, #232]	; (8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d0f0      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80049ca:	4b36      	ldr	r3, [pc, #216]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049cc:	6a1b      	ldr	r3, [r3, #32]
 80049ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049d2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d02e      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d027      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80049e8:	4b2e      	ldr	r3, [pc, #184]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80049ea:	6a1b      	ldr	r3, [r3, #32]
 80049ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049f0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80049f2:	4b2e      	ldr	r3, [pc, #184]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049f4:	2201      	movs	r2, #1
 80049f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80049f8:	4b2c      	ldr	r3, [pc, #176]	; (8004aac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80049fe:	4a29      	ldr	r2, [pc, #164]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d014      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a0e:	f7fd ffbd 	bl	800298c <HAL_GetTick>
 8004a12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a14:	e00a      	b.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a16:	f7fd ffb9 	bl	800298c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d901      	bls.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e036      	b.n	8004a9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a2c:	4b1d      	ldr	r3, [pc, #116]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	f003 0302 	and.w	r3, r3, #2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d0ee      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a38:	4b1a      	ldr	r3, [pc, #104]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a3a:	6a1b      	ldr	r3, [r3, #32]
 8004a3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	4917      	ldr	r1, [pc, #92]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a4a:	7dfb      	ldrb	r3, [r7, #23]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d105      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a50:	4b14      	ldr	r3, [pc, #80]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a52:	69db      	ldr	r3, [r3, #28]
 8004a54:	4a13      	ldr	r2, [pc, #76]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d008      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	490b      	ldr	r1, [pc, #44]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0310 	and.w	r3, r3, #16
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d008      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a86:	4b07      	ldr	r3, [pc, #28]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4904      	ldr	r1, [pc, #16]	; (8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3718      	adds	r7, #24
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40021000 	.word	0x40021000
 8004aa8:	40007000 	.word	0x40007000
 8004aac:	42420440 	.word	0x42420440

08004ab0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	2300      	movs	r3, #0
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b10      	cmp	r3, #16
 8004ad0:	d00a      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b10      	cmp	r3, #16
 8004ad6:	f200 808a 	bhi.w	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d045      	beq.n	8004b6c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	d075      	beq.n	8004bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004ae6:	e082      	b.n	8004bee <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8004ae8:	4b46      	ldr	r3, [pc, #280]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8004aee:	4b45      	ldr	r3, [pc, #276]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d07b      	beq.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	0c9b      	lsrs	r3, r3, #18
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8004b04:	5cd3      	ldrb	r3, [r2, r3]
 8004b06:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d015      	beq.n	8004b3e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004b12:	4b3c      	ldr	r3, [pc, #240]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	0c5b      	lsrs	r3, r3, #17
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	4a3b      	ldr	r2, [pc, #236]	; (8004c0c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8004b1e:	5cd3      	ldrb	r3, [r2, r3]
 8004b20:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00d      	beq.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8004b2c:	4a38      	ldr	r2, [pc, #224]	; (8004c10 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	fb02 f303 	mul.w	r3, r2, r3
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e004      	b.n	8004b48 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	4a34      	ldr	r2, [pc, #208]	; (8004c14 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004b48:	4b2e      	ldr	r3, [pc, #184]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b54:	d102      	bne.n	8004b5c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	61bb      	str	r3, [r7, #24]
      break;
 8004b5a:	e04a      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4a2d      	ldr	r2, [pc, #180]	; (8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8004b62:	fba2 2303 	umull	r2, r3, r2, r3
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	61bb      	str	r3, [r7, #24]
      break;
 8004b6a:	e042      	b.n	8004bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b7c:	d108      	bne.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d003      	beq.n	8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8004b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b8c:	61bb      	str	r3, [r7, #24]
 8004b8e:	e01f      	b.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b9a:	d109      	bne.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8004b9c:	4b19      	ldr	r3, [pc, #100]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8004ba8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8004bac:	61bb      	str	r3, [r7, #24]
 8004bae:	e00f      	b.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004bba:	d11c      	bne.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004bbc:	4b11      	ldr	r3, [pc, #68]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d016      	beq.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8004bc8:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004bcc:	61bb      	str	r3, [r7, #24]
      break;
 8004bce:	e012      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8004bd0:	e011      	b.n	8004bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004bd2:	f7ff fe55 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	4b0a      	ldr	r3, [pc, #40]	; (8004c04 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	0b9b      	lsrs	r3, r3, #14
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	3301      	adds	r3, #1
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bea:	61bb      	str	r3, [r7, #24]
      break;
 8004bec:	e004      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8004bf6:	bf00      	nop
    }
  }
  return (frequency);
 8004bf8:	69bb      	ldr	r3, [r7, #24]
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3720      	adds	r7, #32
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	08007150 	.word	0x08007150
 8004c0c:	08007160 	.word	0x08007160
 8004c10:	007a1200 	.word	0x007a1200
 8004c14:	003d0900 	.word	0x003d0900
 8004c18:	aaaaaaab 	.word	0xaaaaaaab

08004c1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e076      	b.n	8004d1c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d108      	bne.n	8004c48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c3e:	d009      	beq.n	8004c54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	61da      	str	r2, [r3, #28]
 8004c46:	e005      	b.n	8004c54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fd fa78 	bl	8002164 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c9c:	431a      	orrs	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0302 	and.w	r3, r3, #2
 8004cb0:	431a      	orrs	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0301 	and.w	r3, r3, #1
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	69db      	ldr	r3, [r3, #28]
 8004cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cce:	431a      	orrs	r2, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cd8:	ea42 0103 	orr.w	r1, r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	0c1a      	lsrs	r2, r3, #16
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f002 0204 	and.w	r2, r2, #4
 8004cfa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69da      	ldr	r2, [r3, #28]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d0a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3708      	adds	r7, #8
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e01a      	b.n	8004d6c <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2202      	movs	r2, #2
 8004d3a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d4c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fd fa8e 	bl	8002270 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2200      	movs	r2, #0
 8004d58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e041      	b.n	8004e0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d106      	bne.n	8004da0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7fd fa9a 	bl	80022d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3304      	adds	r3, #4
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f000 fac8 	bl	8005348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b082      	sub	sp, #8
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a1a      	ldr	r2, [r3, #32]
 8004e28:	f241 1311 	movw	r3, #4369	; 0x1111
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <HAL_TIM_Base_DeInit+0x40>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	6a1a      	ldr	r2, [r3, #32]
 8004e38:	f240 4344 	movw	r3, #1092	; 0x444
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d107      	bne.n	8004e52 <HAL_TIM_Base_DeInit+0x40>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0201 	bic.w	r2, r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fa82 	bl	800235c <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d001      	beq.n	8004ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e03a      	b.n	8004f4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68da      	ldr	r2, [r3, #12]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <HAL_TIM_Base_Start_IT+0x98>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00e      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d009      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a14      	ldr	r2, [pc, #80]	; (8004f58 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d004      	beq.n	8004f14 <HAL_TIM_Base_Start_IT+0x58>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_TIM_Base_Start_IT+0xa0>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d111      	bne.n	8004f38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 0307 	and.w	r3, r3, #7
 8004f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b06      	cmp	r3, #6
 8004f24:	d010      	beq.n	8004f48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f042 0201 	orr.w	r2, r2, #1
 8004f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f36:	e007      	b.n	8004f48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0201 	orr.w	r2, r2, #1
 8004f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40000400 	.word	0x40000400
 8004f5c:	40000800 	.word	0x40000800

08004f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d122      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0302 	and.w	r3, r3, #2
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d11b      	bne.n	8004fbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0202 	mvn.w	r2, #2
 8004f8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9b4 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8004fa8:	e005      	b.n	8004fb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f9a7 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f9b6 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d122      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f003 0304 	and.w	r3, r3, #4
 8004fd4:	2b04      	cmp	r3, #4
 8004fd6:	d11b      	bne.n	8005010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f06f 0204 	mvn.w	r2, #4
 8004fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	699b      	ldr	r3, [r3, #24]
 8004fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f98a 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8004ffc:	e005      	b.n	800500a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f97d 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 f98c 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	f003 0308 	and.w	r3, r3, #8
 800501a:	2b08      	cmp	r3, #8
 800501c:	d122      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f003 0308 	and.w	r3, r3, #8
 8005028:	2b08      	cmp	r3, #8
 800502a:	d11b      	bne.n	8005064 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f06f 0208 	mvn.w	r2, #8
 8005034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2204      	movs	r2, #4
 800503a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	f003 0303 	and.w	r3, r3, #3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d003      	beq.n	8005052 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f960 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 8005050:	e005      	b.n	800505e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f953 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 f962 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	f003 0310 	and.w	r3, r3, #16
 800506e:	2b10      	cmp	r3, #16
 8005070:	d122      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0310 	and.w	r3, r3, #16
 800507c:	2b10      	cmp	r3, #16
 800507e:	d11b      	bne.n	80050b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f06f 0210 	mvn.w	r2, #16
 8005088:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2208      	movs	r2, #8
 800508e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f936 	bl	8005310 <HAL_TIM_IC_CaptureCallback>
 80050a4:	e005      	b.n	80050b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 f929 	bl	80052fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 f938 	bl	8005322 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b01      	cmp	r3, #1
 80050c4:	d10e      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d107      	bne.n	80050e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f06f 0201 	mvn.w	r2, #1
 80050dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7fc fe30 	bl	8001d44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ee:	2b80      	cmp	r3, #128	; 0x80
 80050f0:	d10e      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050fc:	2b80      	cmp	r3, #128	; 0x80
 80050fe:	d107      	bne.n	8005110 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 fa7b 	bl	8005606 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d10e      	bne.n	800513c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b40      	cmp	r3, #64	; 0x40
 800512a:	d107      	bne.n	800513c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8fc 	bl	8005334 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f003 0320 	and.w	r3, r3, #32
 8005146:	2b20      	cmp	r3, #32
 8005148:	d10e      	bne.n	8005168 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	f003 0320 	and.w	r3, r3, #32
 8005154:	2b20      	cmp	r3, #32
 8005156:	d107      	bne.n	8005168 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f06f 0220 	mvn.w	r2, #32
 8005160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 fa46 	bl	80055f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005184:	2b01      	cmp	r3, #1
 8005186:	d101      	bne.n	800518c <HAL_TIM_ConfigClockSource+0x1c>
 8005188:	2302      	movs	r3, #2
 800518a:	e0b4      	b.n	80052f6 <HAL_TIM_ConfigClockSource+0x186>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2202      	movs	r2, #2
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80051aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c4:	d03e      	beq.n	8005244 <HAL_TIM_ConfigClockSource+0xd4>
 80051c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051ca:	f200 8087 	bhi.w	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	f000 8086 	beq.w	80052e2 <HAL_TIM_ConfigClockSource+0x172>
 80051d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051da:	d87f      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b70      	cmp	r3, #112	; 0x70
 80051de:	d01a      	beq.n	8005216 <HAL_TIM_ConfigClockSource+0xa6>
 80051e0:	2b70      	cmp	r3, #112	; 0x70
 80051e2:	d87b      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b60      	cmp	r3, #96	; 0x60
 80051e6:	d050      	beq.n	800528a <HAL_TIM_ConfigClockSource+0x11a>
 80051e8:	2b60      	cmp	r3, #96	; 0x60
 80051ea:	d877      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b50      	cmp	r3, #80	; 0x50
 80051ee:	d03c      	beq.n	800526a <HAL_TIM_ConfigClockSource+0xfa>
 80051f0:	2b50      	cmp	r3, #80	; 0x50
 80051f2:	d873      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b40      	cmp	r3, #64	; 0x40
 80051f6:	d058      	beq.n	80052aa <HAL_TIM_ConfigClockSource+0x13a>
 80051f8:	2b40      	cmp	r3, #64	; 0x40
 80051fa:	d86f      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b30      	cmp	r3, #48	; 0x30
 80051fe:	d064      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	2b30      	cmp	r3, #48	; 0x30
 8005202:	d86b      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 8005204:	2b20      	cmp	r3, #32
 8005206:	d060      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x15a>
 8005208:	2b20      	cmp	r3, #32
 800520a:	d867      	bhi.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d05c      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x15a>
 8005210:	2b10      	cmp	r3, #16
 8005212:	d05a      	beq.n	80052ca <HAL_TIM_ConfigClockSource+0x15a>
 8005214:	e062      	b.n	80052dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005226:	f000 f968 	bl	80054fa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005238:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	609a      	str	r2, [r3, #8]
      break;
 8005242:	e04f      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005254:	f000 f951 	bl	80054fa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005266:	609a      	str	r2, [r3, #8]
      break;
 8005268:	e03c      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005276:	461a      	mov	r2, r3
 8005278:	f000 f8c8 	bl	800540c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2150      	movs	r1, #80	; 0x50
 8005282:	4618      	mov	r0, r3
 8005284:	f000 f91f 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 8005288:	e02c      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005296:	461a      	mov	r2, r3
 8005298:	f000 f8e6 	bl	8005468 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2160      	movs	r1, #96	; 0x60
 80052a2:	4618      	mov	r0, r3
 80052a4:	f000 f90f 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 80052a8:	e01c      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052b6:	461a      	mov	r2, r3
 80052b8:	f000 f8a8 	bl	800540c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2140      	movs	r1, #64	; 0x40
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f8ff 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 80052c8:	e00c      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4619      	mov	r1, r3
 80052d4:	4610      	mov	r0, r2
 80052d6:	f000 f8f6 	bl	80054c6 <TIM_ITRx_SetConfig>
      break;
 80052da:	e003      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      break;
 80052e0:	e000      	b.n	80052e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3710      	adds	r7, #16
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}

080052fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005306:	bf00      	nop
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	bc80      	pop	{r7}
 800530e:	4770      	bx	lr

08005310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005322:	b480      	push	{r7}
 8005324:	b083      	sub	sp, #12
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800532a:	bf00      	nop
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	bc80      	pop	{r7}
 8005344:	4770      	bx	lr
	...

08005348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a29      	ldr	r2, [pc, #164]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a26      	ldr	r2, [pc, #152]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x30>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a25      	ldr	r2, [pc, #148]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a1c      	ldr	r2, [pc, #112]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d00b      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005398:	d007      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_Base_SetConfig+0xbc>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d003      	beq.n	80053aa <TIM_Base_SetConfig+0x62>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_Base_SetConfig+0xc0>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	689a      	ldr	r2, [r3, #8]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a07      	ldr	r2, [pc, #28]	; (8005400 <TIM_Base_SetConfig+0xb8>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d103      	bne.n	80053f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	691a      	ldr	r2, [r3, #16]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	615a      	str	r2, [r3, #20]
}
 80053f6:	bf00      	nop
 80053f8:	3714      	adds	r7, #20
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bc80      	pop	{r7}
 80053fe:	4770      	bx	lr
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800

0800540c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540c:	b480      	push	{r7}
 800540e:	b087      	sub	sp, #28
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	f023 0201 	bic.w	r2, r3, #1
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005436:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	f023 030a 	bic.w	r3, r3, #10
 8005448:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	4313      	orrs	r3, r2
 8005450:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	621a      	str	r2, [r3, #32]
}
 800545e:	bf00      	nop
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	699b      	ldr	r3, [r3, #24]
 800548a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	031b      	lsls	r3, r3, #12
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054a4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	011b      	lsls	r3, r3, #4
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	621a      	str	r2, [r3, #32]
}
 80054bc:	bf00      	nop
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bc80      	pop	{r7}
 80054c4:	4770      	bx	lr

080054c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054c6:	b480      	push	{r7}
 80054c8:	b085      	sub	sp, #20
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
 80054ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	4313      	orrs	r3, r2
 80054e4:	f043 0307 	orr.w	r3, r3, #7
 80054e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	609a      	str	r2, [r3, #8]
}
 80054f0:	bf00      	nop
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bc80      	pop	{r7}
 80054f8:	4770      	bx	lr

080054fa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	607a      	str	r2, [r7, #4]
 8005506:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005514:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	021a      	lsls	r2, r3, #8
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	431a      	orrs	r2, r3
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4313      	orrs	r3, r2
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	609a      	str	r2, [r3, #8]
}
 800552e:	bf00      	nop
 8005530:	371c      	adds	r7, #28
 8005532:	46bd      	mov	sp, r7
 8005534:	bc80      	pop	{r7}
 8005536:	4770      	bx	lr

08005538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005548:	2b01      	cmp	r3, #1
 800554a:	d101      	bne.n	8005550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800554c:	2302      	movs	r3, #2
 800554e:	e046      	b.n	80055de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2202      	movs	r2, #2
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	689b      	ldr	r3, [r3, #8]
 800556e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005576:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	4313      	orrs	r3, r2
 8005580:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00e      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d009      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a12      	ldr	r2, [pc, #72]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d004      	beq.n	80055b2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d10c      	bne.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bc80      	pop	{r7}
 80055e6:	4770      	bx	lr
 80055e8:	40012c00 	.word	0x40012c00
 80055ec:	40000400 	.word	0x40000400
 80055f0:	40000800 	.word	0x40000800

080055f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	bc80      	pop	{r7}
 8005604:	4770      	bx	lr

08005606 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	bc80      	pop	{r7}
 8005616:	4770      	bx	lr

08005618 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b082      	sub	sp, #8
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d101      	bne.n	800562a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e042      	b.n	80056b0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b00      	cmp	r3, #0
 8005634:	d106      	bne.n	8005644 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7fc febe 	bl	80023c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	; 0x24
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800565a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 f9e1 	bl	8005a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005670:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695a      	ldr	r2, [r3, #20]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005680:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005690:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2220      	movs	r2, #32
 800569c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2220      	movs	r2, #32
 80056a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e024      	b.n	8005714 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2224      	movs	r2, #36	; 0x24
 80056ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	68da      	ldr	r2, [r3, #12]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056e0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fc ff40 	bl	8002568 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_RESET;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	631a      	str	r2, [r3, #48]	; 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	635a      	str	r2, [r3, #52]	; 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b08a      	sub	sp, #40	; 0x28
 8005720:	af02      	add	r7, sp, #8
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	603b      	str	r3, [r7, #0]
 8005728:	4613      	mov	r3, r2
 800572a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b20      	cmp	r3, #32
 800573a:	d16d      	bne.n	8005818 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <HAL_UART_Transmit+0x2c>
 8005742:	88fb      	ldrh	r3, [r7, #6]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e066      	b.n	800581a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2221      	movs	r2, #33	; 0x21
 8005756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800575a:	f7fd f917 	bl	800298c <HAL_GetTick>
 800575e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	88fa      	ldrh	r2, [r7, #6]
 8005764:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	88fa      	ldrh	r2, [r7, #6]
 800576a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d108      	bne.n	8005788 <HAL_UART_Transmit+0x6c>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005790:	e02a      	b.n	80057e8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f8d2 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e036      	b.n	800581a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e007      	b.n	80057da <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1cf      	bne.n	8005792 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2140      	movs	r1, #64	; 0x40
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f8a2 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b08a      	sub	sp, #40	; 0x28
 8005826:	af02      	add	r7, sp, #8
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	4613      	mov	r3, r2
 8005830:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005832:	2300      	movs	r3, #0
 8005834:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b20      	cmp	r3, #32
 8005840:	d17c      	bne.n	800593c <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d002      	beq.n	800584e <HAL_UART_Receive+0x2c>
 8005848:	88fb      	ldrh	r3, [r7, #6]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e075      	b.n	800593e <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	2200      	movs	r2, #0
 8005856:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2222      	movs	r2, #34	; 0x22
 800585c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2200      	movs	r2, #0
 8005864:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005866:	f7fd f891 	bl	800298c <HAL_GetTick>
 800586a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	88fa      	ldrh	r2, [r7, #6]
 8005870:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d108      	bne.n	8005894 <HAL_UART_Receive+0x72>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e003      	b.n	800589c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800589c:	e043      	b.n	8005926 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2200      	movs	r2, #0
 80058a6:	2120      	movs	r1, #32
 80058a8:	68f8      	ldr	r0, [r7, #12]
 80058aa:	f000 f84c 	bl	8005946 <UART_WaitOnFlagUntilTimeout>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d001      	beq.n	80058b8 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e042      	b.n	800593e <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d10c      	bne.n	80058d8 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	3302      	adds	r3, #2
 80058d4:	61bb      	str	r3, [r7, #24]
 80058d6:	e01f      	b.n	8005918 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e0:	d007      	beq.n	80058f2 <HAL_UART_Receive+0xd0>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <HAL_UART_Receive+0xde>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d106      	bne.n	8005900 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	b2da      	uxtb	r2, r3
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	701a      	strb	r2, [r3, #0]
 80058fe:	e008      	b.n	8005912 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	b2db      	uxtb	r3, r3
 8005908:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800590c:	b2da      	uxtb	r2, r3
 800590e:	69fb      	ldr	r3, [r7, #28]
 8005910:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	3301      	adds	r3, #1
 8005916:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b29a      	uxth	r2, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800592a:	b29b      	uxth	r3, r3
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1b6      	bne.n	800589e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2220      	movs	r2, #32
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8005938:	2300      	movs	r3, #0
 800593a:	e000      	b.n	800593e <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800593c:	2302      	movs	r3, #2
  }
}
 800593e:	4618      	mov	r0, r3
 8005940:	3720      	adds	r7, #32
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b090      	sub	sp, #64	; 0x40
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	60b9      	str	r1, [r7, #8]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	4613      	mov	r3, r2
 8005954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005956:	e050      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005958:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800595a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800595e:	d04c      	beq.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005962:	2b00      	cmp	r3, #0
 8005964:	d007      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
 8005966:	f7fd f811 	bl	800298c <HAL_GetTick>
 800596a:	4602      	mov	r2, r0
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	1ad3      	subs	r3, r2, r3
 8005970:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005972:	429a      	cmp	r2, r3
 8005974:	d241      	bcs.n	80059fa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	330c      	adds	r3, #12
 800597c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800598c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	330c      	adds	r3, #12
 8005994:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005996:	637a      	str	r2, [r7, #52]	; 0x34
 8005998:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800599c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800599e:	e841 2300 	strex	r3, r2, [r1]
 80059a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1e5      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	3314      	adds	r3, #20
 80059b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	e853 3f00 	ldrex	r3, [r3]
 80059b8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	3314      	adds	r3, #20
 80059c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80059ca:	623a      	str	r2, [r7, #32]
 80059cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ce:	69f9      	ldr	r1, [r7, #28]
 80059d0:	6a3a      	ldr	r2, [r7, #32]
 80059d2:	e841 2300 	strex	r3, r2, [r1]
 80059d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d1e5      	bne.n	80059aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2220      	movs	r2, #32
 80059e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2220      	movs	r2, #32
 80059ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e00f      	b.n	8005a1a <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4013      	ands	r3, r2
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	bf0c      	ite	eq
 8005a0a:	2301      	moveq	r3, #1
 8005a0c:	2300      	movne	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	461a      	mov	r2, r3
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d09f      	beq.n	8005958 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3740      	adds	r7, #64	; 0x40
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
	...

08005a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68da      	ldr	r2, [r3, #12]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a5e:	f023 030c 	bic.w	r3, r3, #12
 8005a62:	687a      	ldr	r2, [r7, #4]
 8005a64:	6812      	ldr	r2, [r2, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	430a      	orrs	r2, r1
 8005a80:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a2c      	ldr	r2, [pc, #176]	; (8005b38 <UART_SetConfig+0x114>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d103      	bne.n	8005a94 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a8c:	f7fe fef8 	bl	8004880 <HAL_RCC_GetPCLK2Freq>
 8005a90:	60f8      	str	r0, [r7, #12]
 8005a92:	e002      	b.n	8005a9a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a94:	f7fe fee0 	bl	8004858 <HAL_RCC_GetPCLK1Freq>
 8005a98:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009a      	lsls	r2, r3, #2
 8005aa4:	441a      	add	r2, r3
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	009b      	lsls	r3, r3, #2
 8005aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <UART_SetConfig+0x118>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	0119      	lsls	r1, r3, #4
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4613      	mov	r3, r2
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	4413      	add	r3, r2
 8005ac2:	009a      	lsls	r2, r3, #2
 8005ac4:	441a      	add	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ad0:	4b1a      	ldr	r3, [pc, #104]	; (8005b3c <UART_SetConfig+0x118>)
 8005ad2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ad6:	095b      	lsrs	r3, r3, #5
 8005ad8:	2064      	movs	r0, #100	; 0x64
 8005ada:	fb00 f303 	mul.w	r3, r0, r3
 8005ade:	1ad3      	subs	r3, r2, r3
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	3332      	adds	r3, #50	; 0x32
 8005ae4:	4a15      	ldr	r2, [pc, #84]	; (8005b3c <UART_SetConfig+0x118>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af0:	4419      	add	r1, r3
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4613      	mov	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4413      	add	r3, r2
 8005afa:	009a      	lsls	r2, r3, #2
 8005afc:	441a      	add	r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b08:	4b0c      	ldr	r3, [pc, #48]	; (8005b3c <UART_SetConfig+0x118>)
 8005b0a:	fba3 0302 	umull	r0, r3, r3, r2
 8005b0e:	095b      	lsrs	r3, r3, #5
 8005b10:	2064      	movs	r0, #100	; 0x64
 8005b12:	fb00 f303 	mul.w	r3, r0, r3
 8005b16:	1ad3      	subs	r3, r2, r3
 8005b18:	011b      	lsls	r3, r3, #4
 8005b1a:	3332      	adds	r3, #50	; 0x32
 8005b1c:	4a07      	ldr	r2, [pc, #28]	; (8005b3c <UART_SetConfig+0x118>)
 8005b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b22:	095b      	lsrs	r3, r3, #5
 8005b24:	f003 020f 	and.w	r2, r3, #15
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	440a      	add	r2, r1
 8005b2e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005b30:	bf00      	nop
 8005b32:	3710      	adds	r7, #16
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	40013800 	.word	0x40013800
 8005b3c:	51eb851f 	.word	0x51eb851f

08005b40 <std>:
 8005b40:	2300      	movs	r3, #0
 8005b42:	b510      	push	{r4, lr}
 8005b44:	4604      	mov	r4, r0
 8005b46:	e9c0 3300 	strd	r3, r3, [r0]
 8005b4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b4e:	6083      	str	r3, [r0, #8]
 8005b50:	8181      	strh	r1, [r0, #12]
 8005b52:	6643      	str	r3, [r0, #100]	; 0x64
 8005b54:	81c2      	strh	r2, [r0, #14]
 8005b56:	6183      	str	r3, [r0, #24]
 8005b58:	4619      	mov	r1, r3
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	305c      	adds	r0, #92	; 0x5c
 8005b5e:	f000 f9e5 	bl	8005f2c <memset>
 8005b62:	4b05      	ldr	r3, [pc, #20]	; (8005b78 <std+0x38>)
 8005b64:	6224      	str	r4, [r4, #32]
 8005b66:	6263      	str	r3, [r4, #36]	; 0x24
 8005b68:	4b04      	ldr	r3, [pc, #16]	; (8005b7c <std+0x3c>)
 8005b6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b6c:	4b04      	ldr	r3, [pc, #16]	; (8005b80 <std+0x40>)
 8005b6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b70:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <std+0x44>)
 8005b72:	6323      	str	r3, [r4, #48]	; 0x30
 8005b74:	bd10      	pop	{r4, pc}
 8005b76:	bf00      	nop
 8005b78:	08005d7d 	.word	0x08005d7d
 8005b7c:	08005d9f 	.word	0x08005d9f
 8005b80:	08005dd7 	.word	0x08005dd7
 8005b84:	08005dfb 	.word	0x08005dfb

08005b88 <stdio_exit_handler>:
 8005b88:	4a02      	ldr	r2, [pc, #8]	; (8005b94 <stdio_exit_handler+0xc>)
 8005b8a:	4903      	ldr	r1, [pc, #12]	; (8005b98 <stdio_exit_handler+0x10>)
 8005b8c:	4803      	ldr	r0, [pc, #12]	; (8005b9c <stdio_exit_handler+0x14>)
 8005b8e:	f000 b869 	b.w	8005c64 <_fwalk_sglue>
 8005b92:	bf00      	nop
 8005b94:	2000000c 	.word	0x2000000c
 8005b98:	080068b9 	.word	0x080068b9
 8005b9c:	20000018 	.word	0x20000018

08005ba0 <cleanup_stdio>:
 8005ba0:	6841      	ldr	r1, [r0, #4]
 8005ba2:	4b0c      	ldr	r3, [pc, #48]	; (8005bd4 <cleanup_stdio+0x34>)
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	4299      	cmp	r1, r3
 8005ba8:	4604      	mov	r4, r0
 8005baa:	d001      	beq.n	8005bb0 <cleanup_stdio+0x10>
 8005bac:	f000 fe84 	bl	80068b8 <_fflush_r>
 8005bb0:	68a1      	ldr	r1, [r4, #8]
 8005bb2:	4b09      	ldr	r3, [pc, #36]	; (8005bd8 <cleanup_stdio+0x38>)
 8005bb4:	4299      	cmp	r1, r3
 8005bb6:	d002      	beq.n	8005bbe <cleanup_stdio+0x1e>
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f000 fe7d 	bl	80068b8 <_fflush_r>
 8005bbe:	68e1      	ldr	r1, [r4, #12]
 8005bc0:	4b06      	ldr	r3, [pc, #24]	; (8005bdc <cleanup_stdio+0x3c>)
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	d004      	beq.n	8005bd0 <cleanup_stdio+0x30>
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bcc:	f000 be74 	b.w	80068b8 <_fflush_r>
 8005bd0:	bd10      	pop	{r4, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000478 	.word	0x20000478
 8005bd8:	200004e0 	.word	0x200004e0
 8005bdc:	20000548 	.word	0x20000548

08005be0 <global_stdio_init.part.0>:
 8005be0:	b510      	push	{r4, lr}
 8005be2:	4b0b      	ldr	r3, [pc, #44]	; (8005c10 <global_stdio_init.part.0+0x30>)
 8005be4:	4c0b      	ldr	r4, [pc, #44]	; (8005c14 <global_stdio_init.part.0+0x34>)
 8005be6:	4a0c      	ldr	r2, [pc, #48]	; (8005c18 <global_stdio_init.part.0+0x38>)
 8005be8:	4620      	mov	r0, r4
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	2104      	movs	r1, #4
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f7ff ffa6 	bl	8005b40 <std>
 8005bf4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	2109      	movs	r1, #9
 8005bfc:	f7ff ffa0 	bl	8005b40 <std>
 8005c00:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005c04:	2202      	movs	r2, #2
 8005c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c0a:	2112      	movs	r1, #18
 8005c0c:	f7ff bf98 	b.w	8005b40 <std>
 8005c10:	200005b0 	.word	0x200005b0
 8005c14:	20000478 	.word	0x20000478
 8005c18:	08005b89 	.word	0x08005b89

08005c1c <__sfp_lock_acquire>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	; (8005c24 <__sfp_lock_acquire+0x8>)
 8005c1e:	f000 b9fd 	b.w	800601c <__retarget_lock_acquire_recursive>
 8005c22:	bf00      	nop
 8005c24:	200005b9 	.word	0x200005b9

08005c28 <__sfp_lock_release>:
 8005c28:	4801      	ldr	r0, [pc, #4]	; (8005c30 <__sfp_lock_release+0x8>)
 8005c2a:	f000 b9f8 	b.w	800601e <__retarget_lock_release_recursive>
 8005c2e:	bf00      	nop
 8005c30:	200005b9 	.word	0x200005b9

08005c34 <__sinit>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4604      	mov	r4, r0
 8005c38:	f7ff fff0 	bl	8005c1c <__sfp_lock_acquire>
 8005c3c:	6a23      	ldr	r3, [r4, #32]
 8005c3e:	b11b      	cbz	r3, 8005c48 <__sinit+0x14>
 8005c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c44:	f7ff bff0 	b.w	8005c28 <__sfp_lock_release>
 8005c48:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <__sinit+0x28>)
 8005c4a:	6223      	str	r3, [r4, #32]
 8005c4c:	4b04      	ldr	r3, [pc, #16]	; (8005c60 <__sinit+0x2c>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1f5      	bne.n	8005c40 <__sinit+0xc>
 8005c54:	f7ff ffc4 	bl	8005be0 <global_stdio_init.part.0>
 8005c58:	e7f2      	b.n	8005c40 <__sinit+0xc>
 8005c5a:	bf00      	nop
 8005c5c:	08005ba1 	.word	0x08005ba1
 8005c60:	200005b0 	.word	0x200005b0

08005c64 <_fwalk_sglue>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	4607      	mov	r7, r0
 8005c6a:	4688      	mov	r8, r1
 8005c6c:	4614      	mov	r4, r2
 8005c6e:	2600      	movs	r6, #0
 8005c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c74:	f1b9 0901 	subs.w	r9, r9, #1
 8005c78:	d505      	bpl.n	8005c86 <_fwalk_sglue+0x22>
 8005c7a:	6824      	ldr	r4, [r4, #0]
 8005c7c:	2c00      	cmp	r4, #0
 8005c7e:	d1f7      	bne.n	8005c70 <_fwalk_sglue+0xc>
 8005c80:	4630      	mov	r0, r6
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	89ab      	ldrh	r3, [r5, #12]
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d907      	bls.n	8005c9c <_fwalk_sglue+0x38>
 8005c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c90:	3301      	adds	r3, #1
 8005c92:	d003      	beq.n	8005c9c <_fwalk_sglue+0x38>
 8005c94:	4629      	mov	r1, r5
 8005c96:	4638      	mov	r0, r7
 8005c98:	47c0      	blx	r8
 8005c9a:	4306      	orrs	r6, r0
 8005c9c:	3568      	adds	r5, #104	; 0x68
 8005c9e:	e7e9      	b.n	8005c74 <_fwalk_sglue+0x10>

08005ca0 <iprintf>:
 8005ca0:	b40f      	push	{r0, r1, r2, r3}
 8005ca2:	b507      	push	{r0, r1, r2, lr}
 8005ca4:	4906      	ldr	r1, [pc, #24]	; (8005cc0 <iprintf+0x20>)
 8005ca6:	ab04      	add	r3, sp, #16
 8005ca8:	6808      	ldr	r0, [r1, #0]
 8005caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cae:	6881      	ldr	r1, [r0, #8]
 8005cb0:	9301      	str	r3, [sp, #4]
 8005cb2:	f000 fad1 	bl	8006258 <_vfiprintf_r>
 8005cb6:	b003      	add	sp, #12
 8005cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cbc:	b004      	add	sp, #16
 8005cbe:	4770      	bx	lr
 8005cc0:	20000064 	.word	0x20000064

08005cc4 <_puts_r>:
 8005cc4:	6a03      	ldr	r3, [r0, #32]
 8005cc6:	b570      	push	{r4, r5, r6, lr}
 8005cc8:	4605      	mov	r5, r0
 8005cca:	460e      	mov	r6, r1
 8005ccc:	6884      	ldr	r4, [r0, #8]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_puts_r+0x10>
 8005cd0:	f7ff ffb0 	bl	8005c34 <__sinit>
 8005cd4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d405      	bmi.n	8005ce6 <_puts_r+0x22>
 8005cda:	89a3      	ldrh	r3, [r4, #12]
 8005cdc:	0598      	lsls	r0, r3, #22
 8005cde:	d402      	bmi.n	8005ce6 <_puts_r+0x22>
 8005ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ce2:	f000 f99b 	bl	800601c <__retarget_lock_acquire_recursive>
 8005ce6:	89a3      	ldrh	r3, [r4, #12]
 8005ce8:	0719      	lsls	r1, r3, #28
 8005cea:	d513      	bpl.n	8005d14 <_puts_r+0x50>
 8005cec:	6923      	ldr	r3, [r4, #16]
 8005cee:	b18b      	cbz	r3, 8005d14 <_puts_r+0x50>
 8005cf0:	3e01      	subs	r6, #1
 8005cf2:	68a3      	ldr	r3, [r4, #8]
 8005cf4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	60a3      	str	r3, [r4, #8]
 8005cfc:	b9e9      	cbnz	r1, 8005d3a <_puts_r+0x76>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	da2e      	bge.n	8005d60 <_puts_r+0x9c>
 8005d02:	4622      	mov	r2, r4
 8005d04:	210a      	movs	r1, #10
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 f87b 	bl	8005e02 <__swbuf_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d007      	beq.n	8005d20 <_puts_r+0x5c>
 8005d10:	250a      	movs	r5, #10
 8005d12:	e007      	b.n	8005d24 <_puts_r+0x60>
 8005d14:	4621      	mov	r1, r4
 8005d16:	4628      	mov	r0, r5
 8005d18:	f000 f8b0 	bl	8005e7c <__swsetup_r>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d0e7      	beq.n	8005cf0 <_puts_r+0x2c>
 8005d20:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005d24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d26:	07da      	lsls	r2, r3, #31
 8005d28:	d405      	bmi.n	8005d36 <_puts_r+0x72>
 8005d2a:	89a3      	ldrh	r3, [r4, #12]
 8005d2c:	059b      	lsls	r3, r3, #22
 8005d2e:	d402      	bmi.n	8005d36 <_puts_r+0x72>
 8005d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d32:	f000 f974 	bl	800601e <__retarget_lock_release_recursive>
 8005d36:	4628      	mov	r0, r5
 8005d38:	bd70      	pop	{r4, r5, r6, pc}
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	da04      	bge.n	8005d48 <_puts_r+0x84>
 8005d3e:	69a2      	ldr	r2, [r4, #24]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	dc06      	bgt.n	8005d52 <_puts_r+0x8e>
 8005d44:	290a      	cmp	r1, #10
 8005d46:	d004      	beq.n	8005d52 <_puts_r+0x8e>
 8005d48:	6823      	ldr	r3, [r4, #0]
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	6022      	str	r2, [r4, #0]
 8005d4e:	7019      	strb	r1, [r3, #0]
 8005d50:	e7cf      	b.n	8005cf2 <_puts_r+0x2e>
 8005d52:	4622      	mov	r2, r4
 8005d54:	4628      	mov	r0, r5
 8005d56:	f000 f854 	bl	8005e02 <__swbuf_r>
 8005d5a:	3001      	adds	r0, #1
 8005d5c:	d1c9      	bne.n	8005cf2 <_puts_r+0x2e>
 8005d5e:	e7df      	b.n	8005d20 <_puts_r+0x5c>
 8005d60:	250a      	movs	r5, #10
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	1c5a      	adds	r2, r3, #1
 8005d66:	6022      	str	r2, [r4, #0]
 8005d68:	701d      	strb	r5, [r3, #0]
 8005d6a:	e7db      	b.n	8005d24 <_puts_r+0x60>

08005d6c <puts>:
 8005d6c:	4b02      	ldr	r3, [pc, #8]	; (8005d78 <puts+0xc>)
 8005d6e:	4601      	mov	r1, r0
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	f7ff bfa7 	b.w	8005cc4 <_puts_r>
 8005d76:	bf00      	nop
 8005d78:	20000064 	.word	0x20000064

08005d7c <__sread>:
 8005d7c:	b510      	push	{r4, lr}
 8005d7e:	460c      	mov	r4, r1
 8005d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d84:	f000 f8fc 	bl	8005f80 <_read_r>
 8005d88:	2800      	cmp	r0, #0
 8005d8a:	bfab      	itete	ge
 8005d8c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d90:	181b      	addge	r3, r3, r0
 8005d92:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d96:	bfac      	ite	ge
 8005d98:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d9a:	81a3      	strhlt	r3, [r4, #12]
 8005d9c:	bd10      	pop	{r4, pc}

08005d9e <__swrite>:
 8005d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005da2:	461f      	mov	r7, r3
 8005da4:	898b      	ldrh	r3, [r1, #12]
 8005da6:	4605      	mov	r5, r0
 8005da8:	05db      	lsls	r3, r3, #23
 8005daa:	460c      	mov	r4, r1
 8005dac:	4616      	mov	r6, r2
 8005dae:	d505      	bpl.n	8005dbc <__swrite+0x1e>
 8005db0:	2302      	movs	r3, #2
 8005db2:	2200      	movs	r2, #0
 8005db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005db8:	f000 f8d0 	bl	8005f5c <_lseek_r>
 8005dbc:	89a3      	ldrh	r3, [r4, #12]
 8005dbe:	4632      	mov	r2, r6
 8005dc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005dc4:	81a3      	strh	r3, [r4, #12]
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	463b      	mov	r3, r7
 8005dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005dd2:	f000 b8e7 	b.w	8005fa4 <_write_r>

08005dd6 <__sseek>:
 8005dd6:	b510      	push	{r4, lr}
 8005dd8:	460c      	mov	r4, r1
 8005dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dde:	f000 f8bd 	bl	8005f5c <_lseek_r>
 8005de2:	1c43      	adds	r3, r0, #1
 8005de4:	89a3      	ldrh	r3, [r4, #12]
 8005de6:	bf15      	itete	ne
 8005de8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005dea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005df2:	81a3      	strheq	r3, [r4, #12]
 8005df4:	bf18      	it	ne
 8005df6:	81a3      	strhne	r3, [r4, #12]
 8005df8:	bd10      	pop	{r4, pc}

08005dfa <__sclose>:
 8005dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dfe:	f000 b89d 	b.w	8005f3c <_close_r>

08005e02 <__swbuf_r>:
 8005e02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e04:	460e      	mov	r6, r1
 8005e06:	4614      	mov	r4, r2
 8005e08:	4605      	mov	r5, r0
 8005e0a:	b118      	cbz	r0, 8005e14 <__swbuf_r+0x12>
 8005e0c:	6a03      	ldr	r3, [r0, #32]
 8005e0e:	b90b      	cbnz	r3, 8005e14 <__swbuf_r+0x12>
 8005e10:	f7ff ff10 	bl	8005c34 <__sinit>
 8005e14:	69a3      	ldr	r3, [r4, #24]
 8005e16:	60a3      	str	r3, [r4, #8]
 8005e18:	89a3      	ldrh	r3, [r4, #12]
 8005e1a:	071a      	lsls	r2, r3, #28
 8005e1c:	d525      	bpl.n	8005e6a <__swbuf_r+0x68>
 8005e1e:	6923      	ldr	r3, [r4, #16]
 8005e20:	b31b      	cbz	r3, 8005e6a <__swbuf_r+0x68>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	6922      	ldr	r2, [r4, #16]
 8005e26:	b2f6      	uxtb	r6, r6
 8005e28:	1a98      	subs	r0, r3, r2
 8005e2a:	6963      	ldr	r3, [r4, #20]
 8005e2c:	4637      	mov	r7, r6
 8005e2e:	4283      	cmp	r3, r0
 8005e30:	dc04      	bgt.n	8005e3c <__swbuf_r+0x3a>
 8005e32:	4621      	mov	r1, r4
 8005e34:	4628      	mov	r0, r5
 8005e36:	f000 fd3f 	bl	80068b8 <_fflush_r>
 8005e3a:	b9e0      	cbnz	r0, 8005e76 <__swbuf_r+0x74>
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	60a3      	str	r3, [r4, #8]
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	6022      	str	r2, [r4, #0]
 8005e48:	701e      	strb	r6, [r3, #0]
 8005e4a:	6962      	ldr	r2, [r4, #20]
 8005e4c:	1c43      	adds	r3, r0, #1
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d004      	beq.n	8005e5c <__swbuf_r+0x5a>
 8005e52:	89a3      	ldrh	r3, [r4, #12]
 8005e54:	07db      	lsls	r3, r3, #31
 8005e56:	d506      	bpl.n	8005e66 <__swbuf_r+0x64>
 8005e58:	2e0a      	cmp	r6, #10
 8005e5a:	d104      	bne.n	8005e66 <__swbuf_r+0x64>
 8005e5c:	4621      	mov	r1, r4
 8005e5e:	4628      	mov	r0, r5
 8005e60:	f000 fd2a 	bl	80068b8 <_fflush_r>
 8005e64:	b938      	cbnz	r0, 8005e76 <__swbuf_r+0x74>
 8005e66:	4638      	mov	r0, r7
 8005e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	4628      	mov	r0, r5
 8005e6e:	f000 f805 	bl	8005e7c <__swsetup_r>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d0d5      	beq.n	8005e22 <__swbuf_r+0x20>
 8005e76:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e7a:	e7f4      	b.n	8005e66 <__swbuf_r+0x64>

08005e7c <__swsetup_r>:
 8005e7c:	b538      	push	{r3, r4, r5, lr}
 8005e7e:	4b2a      	ldr	r3, [pc, #168]	; (8005f28 <__swsetup_r+0xac>)
 8005e80:	4605      	mov	r5, r0
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	460c      	mov	r4, r1
 8005e86:	b118      	cbz	r0, 8005e90 <__swsetup_r+0x14>
 8005e88:	6a03      	ldr	r3, [r0, #32]
 8005e8a:	b90b      	cbnz	r3, 8005e90 <__swsetup_r+0x14>
 8005e8c:	f7ff fed2 	bl	8005c34 <__sinit>
 8005e90:	89a3      	ldrh	r3, [r4, #12]
 8005e92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e96:	0718      	lsls	r0, r3, #28
 8005e98:	d422      	bmi.n	8005ee0 <__swsetup_r+0x64>
 8005e9a:	06d9      	lsls	r1, r3, #27
 8005e9c:	d407      	bmi.n	8005eae <__swsetup_r+0x32>
 8005e9e:	2309      	movs	r3, #9
 8005ea0:	602b      	str	r3, [r5, #0]
 8005ea2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005ea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	e034      	b.n	8005f18 <__swsetup_r+0x9c>
 8005eae:	0758      	lsls	r0, r3, #29
 8005eb0:	d512      	bpl.n	8005ed8 <__swsetup_r+0x5c>
 8005eb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eb4:	b141      	cbz	r1, 8005ec8 <__swsetup_r+0x4c>
 8005eb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	d002      	beq.n	8005ec4 <__swsetup_r+0x48>
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f8ae 	bl	8006020 <_free_r>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	6363      	str	r3, [r4, #52]	; 0x34
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005ece:	81a3      	strh	r3, [r4, #12]
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	6063      	str	r3, [r4, #4]
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6023      	str	r3, [r4, #0]
 8005ed8:	89a3      	ldrh	r3, [r4, #12]
 8005eda:	f043 0308 	orr.w	r3, r3, #8
 8005ede:	81a3      	strh	r3, [r4, #12]
 8005ee0:	6923      	ldr	r3, [r4, #16]
 8005ee2:	b94b      	cbnz	r3, 8005ef8 <__swsetup_r+0x7c>
 8005ee4:	89a3      	ldrh	r3, [r4, #12]
 8005ee6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eee:	d003      	beq.n	8005ef8 <__swsetup_r+0x7c>
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	4628      	mov	r0, r5
 8005ef4:	f000 fd2d 	bl	8006952 <__smakebuf_r>
 8005ef8:	89a0      	ldrh	r0, [r4, #12]
 8005efa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005efe:	f010 0301 	ands.w	r3, r0, #1
 8005f02:	d00a      	beq.n	8005f1a <__swsetup_r+0x9e>
 8005f04:	2300      	movs	r3, #0
 8005f06:	60a3      	str	r3, [r4, #8]
 8005f08:	6963      	ldr	r3, [r4, #20]
 8005f0a:	425b      	negs	r3, r3
 8005f0c:	61a3      	str	r3, [r4, #24]
 8005f0e:	6923      	ldr	r3, [r4, #16]
 8005f10:	b943      	cbnz	r3, 8005f24 <__swsetup_r+0xa8>
 8005f12:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f16:	d1c4      	bne.n	8005ea2 <__swsetup_r+0x26>
 8005f18:	bd38      	pop	{r3, r4, r5, pc}
 8005f1a:	0781      	lsls	r1, r0, #30
 8005f1c:	bf58      	it	pl
 8005f1e:	6963      	ldrpl	r3, [r4, #20]
 8005f20:	60a3      	str	r3, [r4, #8]
 8005f22:	e7f4      	b.n	8005f0e <__swsetup_r+0x92>
 8005f24:	2000      	movs	r0, #0
 8005f26:	e7f7      	b.n	8005f18 <__swsetup_r+0x9c>
 8005f28:	20000064 	.word	0x20000064

08005f2c <memset>:
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	4402      	add	r2, r0
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d100      	bne.n	8005f36 <memset+0xa>
 8005f34:	4770      	bx	lr
 8005f36:	f803 1b01 	strb.w	r1, [r3], #1
 8005f3a:	e7f9      	b.n	8005f30 <memset+0x4>

08005f3c <_close_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	2300      	movs	r3, #0
 8005f40:	4d05      	ldr	r5, [pc, #20]	; (8005f58 <_close_r+0x1c>)
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fc fc65 	bl	8002816 <_close>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_close_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_close_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	200005b4 	.word	0x200005b4

08005f5c <_lseek_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4604      	mov	r4, r0
 8005f60:	4608      	mov	r0, r1
 8005f62:	4611      	mov	r1, r2
 8005f64:	2200      	movs	r2, #0
 8005f66:	4d05      	ldr	r5, [pc, #20]	; (8005f7c <_lseek_r+0x20>)
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fc fc77 	bl	800285e <_lseek>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_lseek_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_lseek_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	200005b4 	.word	0x200005b4

08005f80 <_read_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4604      	mov	r4, r0
 8005f84:	4608      	mov	r0, r1
 8005f86:	4611      	mov	r1, r2
 8005f88:	2200      	movs	r2, #0
 8005f8a:	4d05      	ldr	r5, [pc, #20]	; (8005fa0 <_read_r+0x20>)
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fc fc08 	bl	80027a4 <_read>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_read_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_read_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	200005b4 	.word	0x200005b4

08005fa4 <_write_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4604      	mov	r4, r0
 8005fa8:	4608      	mov	r0, r1
 8005faa:	4611      	mov	r1, r2
 8005fac:	2200      	movs	r2, #0
 8005fae:	4d05      	ldr	r5, [pc, #20]	; (8005fc4 <_write_r+0x20>)
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fc fc13 	bl	80027de <_write>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_write_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_write_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	200005b4 	.word	0x200005b4

08005fc8 <__errno>:
 8005fc8:	4b01      	ldr	r3, [pc, #4]	; (8005fd0 <__errno+0x8>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	20000064 	.word	0x20000064

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	2600      	movs	r6, #0
 8005fd8:	4d0c      	ldr	r5, [pc, #48]	; (800600c <__libc_init_array+0x38>)
 8005fda:	4c0d      	ldr	r4, [pc, #52]	; (8006010 <__libc_init_array+0x3c>)
 8005fdc:	1b64      	subs	r4, r4, r5
 8005fde:	10a4      	asrs	r4, r4, #2
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	f000 fd32 	bl	8006a4c <_init>
 8005fe8:	2600      	movs	r6, #0
 8005fea:	4d0a      	ldr	r5, [pc, #40]	; (8006014 <__libc_init_array+0x40>)
 8005fec:	4c0a      	ldr	r4, [pc, #40]	; (8006018 <__libc_init_array+0x44>)
 8005fee:	1b64      	subs	r4, r4, r5
 8005ff0:	10a4      	asrs	r4, r4, #2
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	08007198 	.word	0x08007198
 8006010:	08007198 	.word	0x08007198
 8006014:	08007198 	.word	0x08007198
 8006018:	0800719c 	.word	0x0800719c

0800601c <__retarget_lock_acquire_recursive>:
 800601c:	4770      	bx	lr

0800601e <__retarget_lock_release_recursive>:
 800601e:	4770      	bx	lr

08006020 <_free_r>:
 8006020:	b538      	push	{r3, r4, r5, lr}
 8006022:	4605      	mov	r5, r0
 8006024:	2900      	cmp	r1, #0
 8006026:	d040      	beq.n	80060aa <_free_r+0x8a>
 8006028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800602c:	1f0c      	subs	r4, r1, #4
 800602e:	2b00      	cmp	r3, #0
 8006030:	bfb8      	it	lt
 8006032:	18e4      	addlt	r4, r4, r3
 8006034:	f000 f8dc 	bl	80061f0 <__malloc_lock>
 8006038:	4a1c      	ldr	r2, [pc, #112]	; (80060ac <_free_r+0x8c>)
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	b933      	cbnz	r3, 800604c <_free_r+0x2c>
 800603e:	6063      	str	r3, [r4, #4]
 8006040:	6014      	str	r4, [r2, #0]
 8006042:	4628      	mov	r0, r5
 8006044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006048:	f000 b8d8 	b.w	80061fc <__malloc_unlock>
 800604c:	42a3      	cmp	r3, r4
 800604e:	d908      	bls.n	8006062 <_free_r+0x42>
 8006050:	6820      	ldr	r0, [r4, #0]
 8006052:	1821      	adds	r1, r4, r0
 8006054:	428b      	cmp	r3, r1
 8006056:	bf01      	itttt	eq
 8006058:	6819      	ldreq	r1, [r3, #0]
 800605a:	685b      	ldreq	r3, [r3, #4]
 800605c:	1809      	addeq	r1, r1, r0
 800605e:	6021      	streq	r1, [r4, #0]
 8006060:	e7ed      	b.n	800603e <_free_r+0x1e>
 8006062:	461a      	mov	r2, r3
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	b10b      	cbz	r3, 800606c <_free_r+0x4c>
 8006068:	42a3      	cmp	r3, r4
 800606a:	d9fa      	bls.n	8006062 <_free_r+0x42>
 800606c:	6811      	ldr	r1, [r2, #0]
 800606e:	1850      	adds	r0, r2, r1
 8006070:	42a0      	cmp	r0, r4
 8006072:	d10b      	bne.n	800608c <_free_r+0x6c>
 8006074:	6820      	ldr	r0, [r4, #0]
 8006076:	4401      	add	r1, r0
 8006078:	1850      	adds	r0, r2, r1
 800607a:	4283      	cmp	r3, r0
 800607c:	6011      	str	r1, [r2, #0]
 800607e:	d1e0      	bne.n	8006042 <_free_r+0x22>
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	4408      	add	r0, r1
 8006086:	6010      	str	r0, [r2, #0]
 8006088:	6053      	str	r3, [r2, #4]
 800608a:	e7da      	b.n	8006042 <_free_r+0x22>
 800608c:	d902      	bls.n	8006094 <_free_r+0x74>
 800608e:	230c      	movs	r3, #12
 8006090:	602b      	str	r3, [r5, #0]
 8006092:	e7d6      	b.n	8006042 <_free_r+0x22>
 8006094:	6820      	ldr	r0, [r4, #0]
 8006096:	1821      	adds	r1, r4, r0
 8006098:	428b      	cmp	r3, r1
 800609a:	bf01      	itttt	eq
 800609c:	6819      	ldreq	r1, [r3, #0]
 800609e:	685b      	ldreq	r3, [r3, #4]
 80060a0:	1809      	addeq	r1, r1, r0
 80060a2:	6021      	streq	r1, [r4, #0]
 80060a4:	6063      	str	r3, [r4, #4]
 80060a6:	6054      	str	r4, [r2, #4]
 80060a8:	e7cb      	b.n	8006042 <_free_r+0x22>
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	200005bc 	.word	0x200005bc

080060b0 <sbrk_aligned>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4e0e      	ldr	r6, [pc, #56]	; (80060ec <sbrk_aligned+0x3c>)
 80060b4:	460c      	mov	r4, r1
 80060b6:	6831      	ldr	r1, [r6, #0]
 80060b8:	4605      	mov	r5, r0
 80060ba:	b911      	cbnz	r1, 80060c2 <sbrk_aligned+0x12>
 80060bc:	f000 fca8 	bl	8006a10 <_sbrk_r>
 80060c0:	6030      	str	r0, [r6, #0]
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 fca3 	bl	8006a10 <_sbrk_r>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d00a      	beq.n	80060e4 <sbrk_aligned+0x34>
 80060ce:	1cc4      	adds	r4, r0, #3
 80060d0:	f024 0403 	bic.w	r4, r4, #3
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	d007      	beq.n	80060e8 <sbrk_aligned+0x38>
 80060d8:	1a21      	subs	r1, r4, r0
 80060da:	4628      	mov	r0, r5
 80060dc:	f000 fc98 	bl	8006a10 <_sbrk_r>
 80060e0:	3001      	adds	r0, #1
 80060e2:	d101      	bne.n	80060e8 <sbrk_aligned+0x38>
 80060e4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060e8:	4620      	mov	r0, r4
 80060ea:	bd70      	pop	{r4, r5, r6, pc}
 80060ec:	200005c0 	.word	0x200005c0

080060f0 <_malloc_r>:
 80060f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f4:	1ccd      	adds	r5, r1, #3
 80060f6:	f025 0503 	bic.w	r5, r5, #3
 80060fa:	3508      	adds	r5, #8
 80060fc:	2d0c      	cmp	r5, #12
 80060fe:	bf38      	it	cc
 8006100:	250c      	movcc	r5, #12
 8006102:	2d00      	cmp	r5, #0
 8006104:	4607      	mov	r7, r0
 8006106:	db01      	blt.n	800610c <_malloc_r+0x1c>
 8006108:	42a9      	cmp	r1, r5
 800610a:	d905      	bls.n	8006118 <_malloc_r+0x28>
 800610c:	230c      	movs	r3, #12
 800610e:	2600      	movs	r6, #0
 8006110:	603b      	str	r3, [r7, #0]
 8006112:	4630      	mov	r0, r6
 8006114:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006118:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80061ec <_malloc_r+0xfc>
 800611c:	f000 f868 	bl	80061f0 <__malloc_lock>
 8006120:	f8d8 3000 	ldr.w	r3, [r8]
 8006124:	461c      	mov	r4, r3
 8006126:	bb5c      	cbnz	r4, 8006180 <_malloc_r+0x90>
 8006128:	4629      	mov	r1, r5
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ffc0 	bl	80060b0 <sbrk_aligned>
 8006130:	1c43      	adds	r3, r0, #1
 8006132:	4604      	mov	r4, r0
 8006134:	d155      	bne.n	80061e2 <_malloc_r+0xf2>
 8006136:	f8d8 4000 	ldr.w	r4, [r8]
 800613a:	4626      	mov	r6, r4
 800613c:	2e00      	cmp	r6, #0
 800613e:	d145      	bne.n	80061cc <_malloc_r+0xdc>
 8006140:	2c00      	cmp	r4, #0
 8006142:	d048      	beq.n	80061d6 <_malloc_r+0xe6>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	4631      	mov	r1, r6
 8006148:	4638      	mov	r0, r7
 800614a:	eb04 0903 	add.w	r9, r4, r3
 800614e:	f000 fc5f 	bl	8006a10 <_sbrk_r>
 8006152:	4581      	cmp	r9, r0
 8006154:	d13f      	bne.n	80061d6 <_malloc_r+0xe6>
 8006156:	6821      	ldr	r1, [r4, #0]
 8006158:	4638      	mov	r0, r7
 800615a:	1a6d      	subs	r5, r5, r1
 800615c:	4629      	mov	r1, r5
 800615e:	f7ff ffa7 	bl	80060b0 <sbrk_aligned>
 8006162:	3001      	adds	r0, #1
 8006164:	d037      	beq.n	80061d6 <_malloc_r+0xe6>
 8006166:	6823      	ldr	r3, [r4, #0]
 8006168:	442b      	add	r3, r5
 800616a:	6023      	str	r3, [r4, #0]
 800616c:	f8d8 3000 	ldr.w	r3, [r8]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d038      	beq.n	80061e6 <_malloc_r+0xf6>
 8006174:	685a      	ldr	r2, [r3, #4]
 8006176:	42a2      	cmp	r2, r4
 8006178:	d12b      	bne.n	80061d2 <_malloc_r+0xe2>
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
 800617e:	e00f      	b.n	80061a0 <_malloc_r+0xb0>
 8006180:	6822      	ldr	r2, [r4, #0]
 8006182:	1b52      	subs	r2, r2, r5
 8006184:	d41f      	bmi.n	80061c6 <_malloc_r+0xd6>
 8006186:	2a0b      	cmp	r2, #11
 8006188:	d917      	bls.n	80061ba <_malloc_r+0xca>
 800618a:	1961      	adds	r1, r4, r5
 800618c:	42a3      	cmp	r3, r4
 800618e:	6025      	str	r5, [r4, #0]
 8006190:	bf18      	it	ne
 8006192:	6059      	strne	r1, [r3, #4]
 8006194:	6863      	ldr	r3, [r4, #4]
 8006196:	bf08      	it	eq
 8006198:	f8c8 1000 	streq.w	r1, [r8]
 800619c:	5162      	str	r2, [r4, r5]
 800619e:	604b      	str	r3, [r1, #4]
 80061a0:	4638      	mov	r0, r7
 80061a2:	f104 060b 	add.w	r6, r4, #11
 80061a6:	f000 f829 	bl	80061fc <__malloc_unlock>
 80061aa:	f026 0607 	bic.w	r6, r6, #7
 80061ae:	1d23      	adds	r3, r4, #4
 80061b0:	1af2      	subs	r2, r6, r3
 80061b2:	d0ae      	beq.n	8006112 <_malloc_r+0x22>
 80061b4:	1b9b      	subs	r3, r3, r6
 80061b6:	50a3      	str	r3, [r4, r2]
 80061b8:	e7ab      	b.n	8006112 <_malloc_r+0x22>
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	6862      	ldr	r2, [r4, #4]
 80061be:	d1dd      	bne.n	800617c <_malloc_r+0x8c>
 80061c0:	f8c8 2000 	str.w	r2, [r8]
 80061c4:	e7ec      	b.n	80061a0 <_malloc_r+0xb0>
 80061c6:	4623      	mov	r3, r4
 80061c8:	6864      	ldr	r4, [r4, #4]
 80061ca:	e7ac      	b.n	8006126 <_malloc_r+0x36>
 80061cc:	4634      	mov	r4, r6
 80061ce:	6876      	ldr	r6, [r6, #4]
 80061d0:	e7b4      	b.n	800613c <_malloc_r+0x4c>
 80061d2:	4613      	mov	r3, r2
 80061d4:	e7cc      	b.n	8006170 <_malloc_r+0x80>
 80061d6:	230c      	movs	r3, #12
 80061d8:	4638      	mov	r0, r7
 80061da:	603b      	str	r3, [r7, #0]
 80061dc:	f000 f80e 	bl	80061fc <__malloc_unlock>
 80061e0:	e797      	b.n	8006112 <_malloc_r+0x22>
 80061e2:	6025      	str	r5, [r4, #0]
 80061e4:	e7dc      	b.n	80061a0 <_malloc_r+0xb0>
 80061e6:	605b      	str	r3, [r3, #4]
 80061e8:	deff      	udf	#255	; 0xff
 80061ea:	bf00      	nop
 80061ec:	200005bc 	.word	0x200005bc

080061f0 <__malloc_lock>:
 80061f0:	4801      	ldr	r0, [pc, #4]	; (80061f8 <__malloc_lock+0x8>)
 80061f2:	f7ff bf13 	b.w	800601c <__retarget_lock_acquire_recursive>
 80061f6:	bf00      	nop
 80061f8:	200005b8 	.word	0x200005b8

080061fc <__malloc_unlock>:
 80061fc:	4801      	ldr	r0, [pc, #4]	; (8006204 <__malloc_unlock+0x8>)
 80061fe:	f7ff bf0e 	b.w	800601e <__retarget_lock_release_recursive>
 8006202:	bf00      	nop
 8006204:	200005b8 	.word	0x200005b8

08006208 <__sfputc_r>:
 8006208:	6893      	ldr	r3, [r2, #8]
 800620a:	b410      	push	{r4}
 800620c:	3b01      	subs	r3, #1
 800620e:	2b00      	cmp	r3, #0
 8006210:	6093      	str	r3, [r2, #8]
 8006212:	da07      	bge.n	8006224 <__sfputc_r+0x1c>
 8006214:	6994      	ldr	r4, [r2, #24]
 8006216:	42a3      	cmp	r3, r4
 8006218:	db01      	blt.n	800621e <__sfputc_r+0x16>
 800621a:	290a      	cmp	r1, #10
 800621c:	d102      	bne.n	8006224 <__sfputc_r+0x1c>
 800621e:	bc10      	pop	{r4}
 8006220:	f7ff bdef 	b.w	8005e02 <__swbuf_r>
 8006224:	6813      	ldr	r3, [r2, #0]
 8006226:	1c58      	adds	r0, r3, #1
 8006228:	6010      	str	r0, [r2, #0]
 800622a:	7019      	strb	r1, [r3, #0]
 800622c:	4608      	mov	r0, r1
 800622e:	bc10      	pop	{r4}
 8006230:	4770      	bx	lr

08006232 <__sfputs_r>:
 8006232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006234:	4606      	mov	r6, r0
 8006236:	460f      	mov	r7, r1
 8006238:	4614      	mov	r4, r2
 800623a:	18d5      	adds	r5, r2, r3
 800623c:	42ac      	cmp	r4, r5
 800623e:	d101      	bne.n	8006244 <__sfputs_r+0x12>
 8006240:	2000      	movs	r0, #0
 8006242:	e007      	b.n	8006254 <__sfputs_r+0x22>
 8006244:	463a      	mov	r2, r7
 8006246:	4630      	mov	r0, r6
 8006248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800624c:	f7ff ffdc 	bl	8006208 <__sfputc_r>
 8006250:	1c43      	adds	r3, r0, #1
 8006252:	d1f3      	bne.n	800623c <__sfputs_r+0xa>
 8006254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006258 <_vfiprintf_r>:
 8006258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800625c:	460d      	mov	r5, r1
 800625e:	4614      	mov	r4, r2
 8006260:	4698      	mov	r8, r3
 8006262:	4606      	mov	r6, r0
 8006264:	b09d      	sub	sp, #116	; 0x74
 8006266:	b118      	cbz	r0, 8006270 <_vfiprintf_r+0x18>
 8006268:	6a03      	ldr	r3, [r0, #32]
 800626a:	b90b      	cbnz	r3, 8006270 <_vfiprintf_r+0x18>
 800626c:	f7ff fce2 	bl	8005c34 <__sinit>
 8006270:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006272:	07d9      	lsls	r1, r3, #31
 8006274:	d405      	bmi.n	8006282 <_vfiprintf_r+0x2a>
 8006276:	89ab      	ldrh	r3, [r5, #12]
 8006278:	059a      	lsls	r2, r3, #22
 800627a:	d402      	bmi.n	8006282 <_vfiprintf_r+0x2a>
 800627c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800627e:	f7ff fecd 	bl	800601c <__retarget_lock_acquire_recursive>
 8006282:	89ab      	ldrh	r3, [r5, #12]
 8006284:	071b      	lsls	r3, r3, #28
 8006286:	d501      	bpl.n	800628c <_vfiprintf_r+0x34>
 8006288:	692b      	ldr	r3, [r5, #16]
 800628a:	b99b      	cbnz	r3, 80062b4 <_vfiprintf_r+0x5c>
 800628c:	4629      	mov	r1, r5
 800628e:	4630      	mov	r0, r6
 8006290:	f7ff fdf4 	bl	8005e7c <__swsetup_r>
 8006294:	b170      	cbz	r0, 80062b4 <_vfiprintf_r+0x5c>
 8006296:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006298:	07dc      	lsls	r4, r3, #31
 800629a:	d504      	bpl.n	80062a6 <_vfiprintf_r+0x4e>
 800629c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a0:	b01d      	add	sp, #116	; 0x74
 80062a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062a6:	89ab      	ldrh	r3, [r5, #12]
 80062a8:	0598      	lsls	r0, r3, #22
 80062aa:	d4f7      	bmi.n	800629c <_vfiprintf_r+0x44>
 80062ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80062ae:	f7ff feb6 	bl	800601e <__retarget_lock_release_recursive>
 80062b2:	e7f3      	b.n	800629c <_vfiprintf_r+0x44>
 80062b4:	2300      	movs	r3, #0
 80062b6:	9309      	str	r3, [sp, #36]	; 0x24
 80062b8:	2320      	movs	r3, #32
 80062ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80062be:	2330      	movs	r3, #48	; 0x30
 80062c0:	f04f 0901 	mov.w	r9, #1
 80062c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80062c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006478 <_vfiprintf_r+0x220>
 80062cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80062d0:	4623      	mov	r3, r4
 80062d2:	469a      	mov	sl, r3
 80062d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062d8:	b10a      	cbz	r2, 80062de <_vfiprintf_r+0x86>
 80062da:	2a25      	cmp	r2, #37	; 0x25
 80062dc:	d1f9      	bne.n	80062d2 <_vfiprintf_r+0x7a>
 80062de:	ebba 0b04 	subs.w	fp, sl, r4
 80062e2:	d00b      	beq.n	80062fc <_vfiprintf_r+0xa4>
 80062e4:	465b      	mov	r3, fp
 80062e6:	4622      	mov	r2, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	4630      	mov	r0, r6
 80062ec:	f7ff ffa1 	bl	8006232 <__sfputs_r>
 80062f0:	3001      	adds	r0, #1
 80062f2:	f000 80a9 	beq.w	8006448 <_vfiprintf_r+0x1f0>
 80062f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062f8:	445a      	add	r2, fp
 80062fa:	9209      	str	r2, [sp, #36]	; 0x24
 80062fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80a1 	beq.w	8006448 <_vfiprintf_r+0x1f0>
 8006306:	2300      	movs	r3, #0
 8006308:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800630c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006310:	f10a 0a01 	add.w	sl, sl, #1
 8006314:	9304      	str	r3, [sp, #16]
 8006316:	9307      	str	r3, [sp, #28]
 8006318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800631c:	931a      	str	r3, [sp, #104]	; 0x68
 800631e:	4654      	mov	r4, sl
 8006320:	2205      	movs	r2, #5
 8006322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006326:	4854      	ldr	r0, [pc, #336]	; (8006478 <_vfiprintf_r+0x220>)
 8006328:	f000 fb82 	bl	8006a30 <memchr>
 800632c:	9a04      	ldr	r2, [sp, #16]
 800632e:	b9d8      	cbnz	r0, 8006368 <_vfiprintf_r+0x110>
 8006330:	06d1      	lsls	r1, r2, #27
 8006332:	bf44      	itt	mi
 8006334:	2320      	movmi	r3, #32
 8006336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800633a:	0713      	lsls	r3, r2, #28
 800633c:	bf44      	itt	mi
 800633e:	232b      	movmi	r3, #43	; 0x2b
 8006340:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006344:	f89a 3000 	ldrb.w	r3, [sl]
 8006348:	2b2a      	cmp	r3, #42	; 0x2a
 800634a:	d015      	beq.n	8006378 <_vfiprintf_r+0x120>
 800634c:	4654      	mov	r4, sl
 800634e:	2000      	movs	r0, #0
 8006350:	f04f 0c0a 	mov.w	ip, #10
 8006354:	9a07      	ldr	r2, [sp, #28]
 8006356:	4621      	mov	r1, r4
 8006358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800635c:	3b30      	subs	r3, #48	; 0x30
 800635e:	2b09      	cmp	r3, #9
 8006360:	d94d      	bls.n	80063fe <_vfiprintf_r+0x1a6>
 8006362:	b1b0      	cbz	r0, 8006392 <_vfiprintf_r+0x13a>
 8006364:	9207      	str	r2, [sp, #28]
 8006366:	e014      	b.n	8006392 <_vfiprintf_r+0x13a>
 8006368:	eba0 0308 	sub.w	r3, r0, r8
 800636c:	fa09 f303 	lsl.w	r3, r9, r3
 8006370:	4313      	orrs	r3, r2
 8006372:	46a2      	mov	sl, r4
 8006374:	9304      	str	r3, [sp, #16]
 8006376:	e7d2      	b.n	800631e <_vfiprintf_r+0xc6>
 8006378:	9b03      	ldr	r3, [sp, #12]
 800637a:	1d19      	adds	r1, r3, #4
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	9103      	str	r1, [sp, #12]
 8006380:	2b00      	cmp	r3, #0
 8006382:	bfbb      	ittet	lt
 8006384:	425b      	neglt	r3, r3
 8006386:	f042 0202 	orrlt.w	r2, r2, #2
 800638a:	9307      	strge	r3, [sp, #28]
 800638c:	9307      	strlt	r3, [sp, #28]
 800638e:	bfb8      	it	lt
 8006390:	9204      	strlt	r2, [sp, #16]
 8006392:	7823      	ldrb	r3, [r4, #0]
 8006394:	2b2e      	cmp	r3, #46	; 0x2e
 8006396:	d10c      	bne.n	80063b2 <_vfiprintf_r+0x15a>
 8006398:	7863      	ldrb	r3, [r4, #1]
 800639a:	2b2a      	cmp	r3, #42	; 0x2a
 800639c:	d134      	bne.n	8006408 <_vfiprintf_r+0x1b0>
 800639e:	9b03      	ldr	r3, [sp, #12]
 80063a0:	3402      	adds	r4, #2
 80063a2:	1d1a      	adds	r2, r3, #4
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	9203      	str	r2, [sp, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	bfb8      	it	lt
 80063ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80063b0:	9305      	str	r3, [sp, #20]
 80063b2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800647c <_vfiprintf_r+0x224>
 80063b6:	2203      	movs	r2, #3
 80063b8:	4650      	mov	r0, sl
 80063ba:	7821      	ldrb	r1, [r4, #0]
 80063bc:	f000 fb38 	bl	8006a30 <memchr>
 80063c0:	b138      	cbz	r0, 80063d2 <_vfiprintf_r+0x17a>
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	eba0 000a 	sub.w	r0, r0, sl
 80063ca:	4082      	lsls	r2, r0
 80063cc:	4313      	orrs	r3, r2
 80063ce:	3401      	adds	r4, #1
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d6:	2206      	movs	r2, #6
 80063d8:	4829      	ldr	r0, [pc, #164]	; (8006480 <_vfiprintf_r+0x228>)
 80063da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063de:	f000 fb27 	bl	8006a30 <memchr>
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d03f      	beq.n	8006466 <_vfiprintf_r+0x20e>
 80063e6:	4b27      	ldr	r3, [pc, #156]	; (8006484 <_vfiprintf_r+0x22c>)
 80063e8:	bb1b      	cbnz	r3, 8006432 <_vfiprintf_r+0x1da>
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	3307      	adds	r3, #7
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	3308      	adds	r3, #8
 80063f4:	9303      	str	r3, [sp, #12]
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	443b      	add	r3, r7
 80063fa:	9309      	str	r3, [sp, #36]	; 0x24
 80063fc:	e768      	b.n	80062d0 <_vfiprintf_r+0x78>
 80063fe:	460c      	mov	r4, r1
 8006400:	2001      	movs	r0, #1
 8006402:	fb0c 3202 	mla	r2, ip, r2, r3
 8006406:	e7a6      	b.n	8006356 <_vfiprintf_r+0xfe>
 8006408:	2300      	movs	r3, #0
 800640a:	f04f 0c0a 	mov.w	ip, #10
 800640e:	4619      	mov	r1, r3
 8006410:	3401      	adds	r4, #1
 8006412:	9305      	str	r3, [sp, #20]
 8006414:	4620      	mov	r0, r4
 8006416:	f810 2b01 	ldrb.w	r2, [r0], #1
 800641a:	3a30      	subs	r2, #48	; 0x30
 800641c:	2a09      	cmp	r2, #9
 800641e:	d903      	bls.n	8006428 <_vfiprintf_r+0x1d0>
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0c6      	beq.n	80063b2 <_vfiprintf_r+0x15a>
 8006424:	9105      	str	r1, [sp, #20]
 8006426:	e7c4      	b.n	80063b2 <_vfiprintf_r+0x15a>
 8006428:	4604      	mov	r4, r0
 800642a:	2301      	movs	r3, #1
 800642c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006430:	e7f0      	b.n	8006414 <_vfiprintf_r+0x1bc>
 8006432:	ab03      	add	r3, sp, #12
 8006434:	9300      	str	r3, [sp, #0]
 8006436:	462a      	mov	r2, r5
 8006438:	4630      	mov	r0, r6
 800643a:	4b13      	ldr	r3, [pc, #76]	; (8006488 <_vfiprintf_r+0x230>)
 800643c:	a904      	add	r1, sp, #16
 800643e:	f3af 8000 	nop.w
 8006442:	4607      	mov	r7, r0
 8006444:	1c78      	adds	r0, r7, #1
 8006446:	d1d6      	bne.n	80063f6 <_vfiprintf_r+0x19e>
 8006448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800644a:	07d9      	lsls	r1, r3, #31
 800644c:	d405      	bmi.n	800645a <_vfiprintf_r+0x202>
 800644e:	89ab      	ldrh	r3, [r5, #12]
 8006450:	059a      	lsls	r2, r3, #22
 8006452:	d402      	bmi.n	800645a <_vfiprintf_r+0x202>
 8006454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006456:	f7ff fde2 	bl	800601e <__retarget_lock_release_recursive>
 800645a:	89ab      	ldrh	r3, [r5, #12]
 800645c:	065b      	lsls	r3, r3, #25
 800645e:	f53f af1d 	bmi.w	800629c <_vfiprintf_r+0x44>
 8006462:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006464:	e71c      	b.n	80062a0 <_vfiprintf_r+0x48>
 8006466:	ab03      	add	r3, sp, #12
 8006468:	9300      	str	r3, [sp, #0]
 800646a:	462a      	mov	r2, r5
 800646c:	4630      	mov	r0, r6
 800646e:	4b06      	ldr	r3, [pc, #24]	; (8006488 <_vfiprintf_r+0x230>)
 8006470:	a904      	add	r1, sp, #16
 8006472:	f000 f87d 	bl	8006570 <_printf_i>
 8006476:	e7e4      	b.n	8006442 <_vfiprintf_r+0x1ea>
 8006478:	08007162 	.word	0x08007162
 800647c:	08007168 	.word	0x08007168
 8006480:	0800716c 	.word	0x0800716c
 8006484:	00000000 	.word	0x00000000
 8006488:	08006233 	.word	0x08006233

0800648c <_printf_common>:
 800648c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006490:	4616      	mov	r6, r2
 8006492:	4699      	mov	r9, r3
 8006494:	688a      	ldr	r2, [r1, #8]
 8006496:	690b      	ldr	r3, [r1, #16]
 8006498:	4607      	mov	r7, r0
 800649a:	4293      	cmp	r3, r2
 800649c:	bfb8      	it	lt
 800649e:	4613      	movlt	r3, r2
 80064a0:	6033      	str	r3, [r6, #0]
 80064a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80064a6:	460c      	mov	r4, r1
 80064a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80064ac:	b10a      	cbz	r2, 80064b2 <_printf_common+0x26>
 80064ae:	3301      	adds	r3, #1
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	0699      	lsls	r1, r3, #26
 80064b6:	bf42      	ittt	mi
 80064b8:	6833      	ldrmi	r3, [r6, #0]
 80064ba:	3302      	addmi	r3, #2
 80064bc:	6033      	strmi	r3, [r6, #0]
 80064be:	6825      	ldr	r5, [r4, #0]
 80064c0:	f015 0506 	ands.w	r5, r5, #6
 80064c4:	d106      	bne.n	80064d4 <_printf_common+0x48>
 80064c6:	f104 0a19 	add.w	sl, r4, #25
 80064ca:	68e3      	ldr	r3, [r4, #12]
 80064cc:	6832      	ldr	r2, [r6, #0]
 80064ce:	1a9b      	subs	r3, r3, r2
 80064d0:	42ab      	cmp	r3, r5
 80064d2:	dc2b      	bgt.n	800652c <_printf_common+0xa0>
 80064d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80064d8:	1e13      	subs	r3, r2, #0
 80064da:	6822      	ldr	r2, [r4, #0]
 80064dc:	bf18      	it	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	0692      	lsls	r2, r2, #26
 80064e2:	d430      	bmi.n	8006546 <_printf_common+0xba>
 80064e4:	4649      	mov	r1, r9
 80064e6:	4638      	mov	r0, r7
 80064e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80064ec:	47c0      	blx	r8
 80064ee:	3001      	adds	r0, #1
 80064f0:	d023      	beq.n	800653a <_printf_common+0xae>
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	6922      	ldr	r2, [r4, #16]
 80064f6:	f003 0306 	and.w	r3, r3, #6
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	bf14      	ite	ne
 80064fe:	2500      	movne	r5, #0
 8006500:	6833      	ldreq	r3, [r6, #0]
 8006502:	f04f 0600 	mov.w	r6, #0
 8006506:	bf08      	it	eq
 8006508:	68e5      	ldreq	r5, [r4, #12]
 800650a:	f104 041a 	add.w	r4, r4, #26
 800650e:	bf08      	it	eq
 8006510:	1aed      	subeq	r5, r5, r3
 8006512:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006516:	bf08      	it	eq
 8006518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800651c:	4293      	cmp	r3, r2
 800651e:	bfc4      	itt	gt
 8006520:	1a9b      	subgt	r3, r3, r2
 8006522:	18ed      	addgt	r5, r5, r3
 8006524:	42b5      	cmp	r5, r6
 8006526:	d11a      	bne.n	800655e <_printf_common+0xd2>
 8006528:	2000      	movs	r0, #0
 800652a:	e008      	b.n	800653e <_printf_common+0xb2>
 800652c:	2301      	movs	r3, #1
 800652e:	4652      	mov	r2, sl
 8006530:	4649      	mov	r1, r9
 8006532:	4638      	mov	r0, r7
 8006534:	47c0      	blx	r8
 8006536:	3001      	adds	r0, #1
 8006538:	d103      	bne.n	8006542 <_printf_common+0xb6>
 800653a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800653e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006542:	3501      	adds	r5, #1
 8006544:	e7c1      	b.n	80064ca <_printf_common+0x3e>
 8006546:	2030      	movs	r0, #48	; 0x30
 8006548:	18e1      	adds	r1, r4, r3
 800654a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006554:	4422      	add	r2, r4
 8006556:	3302      	adds	r3, #2
 8006558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800655c:	e7c2      	b.n	80064e4 <_printf_common+0x58>
 800655e:	2301      	movs	r3, #1
 8006560:	4622      	mov	r2, r4
 8006562:	4649      	mov	r1, r9
 8006564:	4638      	mov	r0, r7
 8006566:	47c0      	blx	r8
 8006568:	3001      	adds	r0, #1
 800656a:	d0e6      	beq.n	800653a <_printf_common+0xae>
 800656c:	3601      	adds	r6, #1
 800656e:	e7d9      	b.n	8006524 <_printf_common+0x98>

08006570 <_printf_i>:
 8006570:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006574:	7e0f      	ldrb	r7, [r1, #24]
 8006576:	4691      	mov	r9, r2
 8006578:	2f78      	cmp	r7, #120	; 0x78
 800657a:	4680      	mov	r8, r0
 800657c:	460c      	mov	r4, r1
 800657e:	469a      	mov	sl, r3
 8006580:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006582:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006586:	d807      	bhi.n	8006598 <_printf_i+0x28>
 8006588:	2f62      	cmp	r7, #98	; 0x62
 800658a:	d80a      	bhi.n	80065a2 <_printf_i+0x32>
 800658c:	2f00      	cmp	r7, #0
 800658e:	f000 80d5 	beq.w	800673c <_printf_i+0x1cc>
 8006592:	2f58      	cmp	r7, #88	; 0x58
 8006594:	f000 80c1 	beq.w	800671a <_printf_i+0x1aa>
 8006598:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800659c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80065a0:	e03a      	b.n	8006618 <_printf_i+0xa8>
 80065a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80065a6:	2b15      	cmp	r3, #21
 80065a8:	d8f6      	bhi.n	8006598 <_printf_i+0x28>
 80065aa:	a101      	add	r1, pc, #4	; (adr r1, 80065b0 <_printf_i+0x40>)
 80065ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80065b0:	08006609 	.word	0x08006609
 80065b4:	0800661d 	.word	0x0800661d
 80065b8:	08006599 	.word	0x08006599
 80065bc:	08006599 	.word	0x08006599
 80065c0:	08006599 	.word	0x08006599
 80065c4:	08006599 	.word	0x08006599
 80065c8:	0800661d 	.word	0x0800661d
 80065cc:	08006599 	.word	0x08006599
 80065d0:	08006599 	.word	0x08006599
 80065d4:	08006599 	.word	0x08006599
 80065d8:	08006599 	.word	0x08006599
 80065dc:	08006723 	.word	0x08006723
 80065e0:	08006649 	.word	0x08006649
 80065e4:	080066dd 	.word	0x080066dd
 80065e8:	08006599 	.word	0x08006599
 80065ec:	08006599 	.word	0x08006599
 80065f0:	08006745 	.word	0x08006745
 80065f4:	08006599 	.word	0x08006599
 80065f8:	08006649 	.word	0x08006649
 80065fc:	08006599 	.word	0x08006599
 8006600:	08006599 	.word	0x08006599
 8006604:	080066e5 	.word	0x080066e5
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	1d1a      	adds	r2, r3, #4
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	602a      	str	r2, [r5, #0]
 8006610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006614:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006618:	2301      	movs	r3, #1
 800661a:	e0a0      	b.n	800675e <_printf_i+0x1ee>
 800661c:	6820      	ldr	r0, [r4, #0]
 800661e:	682b      	ldr	r3, [r5, #0]
 8006620:	0607      	lsls	r7, r0, #24
 8006622:	f103 0104 	add.w	r1, r3, #4
 8006626:	6029      	str	r1, [r5, #0]
 8006628:	d501      	bpl.n	800662e <_printf_i+0xbe>
 800662a:	681e      	ldr	r6, [r3, #0]
 800662c:	e003      	b.n	8006636 <_printf_i+0xc6>
 800662e:	0646      	lsls	r6, r0, #25
 8006630:	d5fb      	bpl.n	800662a <_printf_i+0xba>
 8006632:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006636:	2e00      	cmp	r6, #0
 8006638:	da03      	bge.n	8006642 <_printf_i+0xd2>
 800663a:	232d      	movs	r3, #45	; 0x2d
 800663c:	4276      	negs	r6, r6
 800663e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006642:	230a      	movs	r3, #10
 8006644:	4859      	ldr	r0, [pc, #356]	; (80067ac <_printf_i+0x23c>)
 8006646:	e012      	b.n	800666e <_printf_i+0xfe>
 8006648:	682b      	ldr	r3, [r5, #0]
 800664a:	6820      	ldr	r0, [r4, #0]
 800664c:	1d19      	adds	r1, r3, #4
 800664e:	6029      	str	r1, [r5, #0]
 8006650:	0605      	lsls	r5, r0, #24
 8006652:	d501      	bpl.n	8006658 <_printf_i+0xe8>
 8006654:	681e      	ldr	r6, [r3, #0]
 8006656:	e002      	b.n	800665e <_printf_i+0xee>
 8006658:	0641      	lsls	r1, r0, #25
 800665a:	d5fb      	bpl.n	8006654 <_printf_i+0xe4>
 800665c:	881e      	ldrh	r6, [r3, #0]
 800665e:	2f6f      	cmp	r7, #111	; 0x6f
 8006660:	bf0c      	ite	eq
 8006662:	2308      	moveq	r3, #8
 8006664:	230a      	movne	r3, #10
 8006666:	4851      	ldr	r0, [pc, #324]	; (80067ac <_printf_i+0x23c>)
 8006668:	2100      	movs	r1, #0
 800666a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800666e:	6865      	ldr	r5, [r4, #4]
 8006670:	2d00      	cmp	r5, #0
 8006672:	bfa8      	it	ge
 8006674:	6821      	ldrge	r1, [r4, #0]
 8006676:	60a5      	str	r5, [r4, #8]
 8006678:	bfa4      	itt	ge
 800667a:	f021 0104 	bicge.w	r1, r1, #4
 800667e:	6021      	strge	r1, [r4, #0]
 8006680:	b90e      	cbnz	r6, 8006686 <_printf_i+0x116>
 8006682:	2d00      	cmp	r5, #0
 8006684:	d04b      	beq.n	800671e <_printf_i+0x1ae>
 8006686:	4615      	mov	r5, r2
 8006688:	fbb6 f1f3 	udiv	r1, r6, r3
 800668c:	fb03 6711 	mls	r7, r3, r1, r6
 8006690:	5dc7      	ldrb	r7, [r0, r7]
 8006692:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006696:	4637      	mov	r7, r6
 8006698:	42bb      	cmp	r3, r7
 800669a:	460e      	mov	r6, r1
 800669c:	d9f4      	bls.n	8006688 <_printf_i+0x118>
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d10b      	bne.n	80066ba <_printf_i+0x14a>
 80066a2:	6823      	ldr	r3, [r4, #0]
 80066a4:	07de      	lsls	r6, r3, #31
 80066a6:	d508      	bpl.n	80066ba <_printf_i+0x14a>
 80066a8:	6923      	ldr	r3, [r4, #16]
 80066aa:	6861      	ldr	r1, [r4, #4]
 80066ac:	4299      	cmp	r1, r3
 80066ae:	bfde      	ittt	le
 80066b0:	2330      	movle	r3, #48	; 0x30
 80066b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80066b6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80066ba:	1b52      	subs	r2, r2, r5
 80066bc:	6122      	str	r2, [r4, #16]
 80066be:	464b      	mov	r3, r9
 80066c0:	4621      	mov	r1, r4
 80066c2:	4640      	mov	r0, r8
 80066c4:	f8cd a000 	str.w	sl, [sp]
 80066c8:	aa03      	add	r2, sp, #12
 80066ca:	f7ff fedf 	bl	800648c <_printf_common>
 80066ce:	3001      	adds	r0, #1
 80066d0:	d14a      	bne.n	8006768 <_printf_i+0x1f8>
 80066d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066d6:	b004      	add	sp, #16
 80066d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066dc:	6823      	ldr	r3, [r4, #0]
 80066de:	f043 0320 	orr.w	r3, r3, #32
 80066e2:	6023      	str	r3, [r4, #0]
 80066e4:	2778      	movs	r7, #120	; 0x78
 80066e6:	4832      	ldr	r0, [pc, #200]	; (80067b0 <_printf_i+0x240>)
 80066e8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	6829      	ldr	r1, [r5, #0]
 80066f0:	061f      	lsls	r7, r3, #24
 80066f2:	f851 6b04 	ldr.w	r6, [r1], #4
 80066f6:	d402      	bmi.n	80066fe <_printf_i+0x18e>
 80066f8:	065f      	lsls	r7, r3, #25
 80066fa:	bf48      	it	mi
 80066fc:	b2b6      	uxthmi	r6, r6
 80066fe:	07df      	lsls	r7, r3, #31
 8006700:	bf48      	it	mi
 8006702:	f043 0320 	orrmi.w	r3, r3, #32
 8006706:	6029      	str	r1, [r5, #0]
 8006708:	bf48      	it	mi
 800670a:	6023      	strmi	r3, [r4, #0]
 800670c:	b91e      	cbnz	r6, 8006716 <_printf_i+0x1a6>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	f023 0320 	bic.w	r3, r3, #32
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	2310      	movs	r3, #16
 8006718:	e7a6      	b.n	8006668 <_printf_i+0xf8>
 800671a:	4824      	ldr	r0, [pc, #144]	; (80067ac <_printf_i+0x23c>)
 800671c:	e7e4      	b.n	80066e8 <_printf_i+0x178>
 800671e:	4615      	mov	r5, r2
 8006720:	e7bd      	b.n	800669e <_printf_i+0x12e>
 8006722:	682b      	ldr	r3, [r5, #0]
 8006724:	6826      	ldr	r6, [r4, #0]
 8006726:	1d18      	adds	r0, r3, #4
 8006728:	6961      	ldr	r1, [r4, #20]
 800672a:	6028      	str	r0, [r5, #0]
 800672c:	0635      	lsls	r5, r6, #24
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	d501      	bpl.n	8006736 <_printf_i+0x1c6>
 8006732:	6019      	str	r1, [r3, #0]
 8006734:	e002      	b.n	800673c <_printf_i+0x1cc>
 8006736:	0670      	lsls	r0, r6, #25
 8006738:	d5fb      	bpl.n	8006732 <_printf_i+0x1c2>
 800673a:	8019      	strh	r1, [r3, #0]
 800673c:	2300      	movs	r3, #0
 800673e:	4615      	mov	r5, r2
 8006740:	6123      	str	r3, [r4, #16]
 8006742:	e7bc      	b.n	80066be <_printf_i+0x14e>
 8006744:	682b      	ldr	r3, [r5, #0]
 8006746:	2100      	movs	r1, #0
 8006748:	1d1a      	adds	r2, r3, #4
 800674a:	602a      	str	r2, [r5, #0]
 800674c:	681d      	ldr	r5, [r3, #0]
 800674e:	6862      	ldr	r2, [r4, #4]
 8006750:	4628      	mov	r0, r5
 8006752:	f000 f96d 	bl	8006a30 <memchr>
 8006756:	b108      	cbz	r0, 800675c <_printf_i+0x1ec>
 8006758:	1b40      	subs	r0, r0, r5
 800675a:	6060      	str	r0, [r4, #4]
 800675c:	6863      	ldr	r3, [r4, #4]
 800675e:	6123      	str	r3, [r4, #16]
 8006760:	2300      	movs	r3, #0
 8006762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006766:	e7aa      	b.n	80066be <_printf_i+0x14e>
 8006768:	462a      	mov	r2, r5
 800676a:	4649      	mov	r1, r9
 800676c:	4640      	mov	r0, r8
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	47d0      	blx	sl
 8006772:	3001      	adds	r0, #1
 8006774:	d0ad      	beq.n	80066d2 <_printf_i+0x162>
 8006776:	6823      	ldr	r3, [r4, #0]
 8006778:	079b      	lsls	r3, r3, #30
 800677a:	d413      	bmi.n	80067a4 <_printf_i+0x234>
 800677c:	68e0      	ldr	r0, [r4, #12]
 800677e:	9b03      	ldr	r3, [sp, #12]
 8006780:	4298      	cmp	r0, r3
 8006782:	bfb8      	it	lt
 8006784:	4618      	movlt	r0, r3
 8006786:	e7a6      	b.n	80066d6 <_printf_i+0x166>
 8006788:	2301      	movs	r3, #1
 800678a:	4632      	mov	r2, r6
 800678c:	4649      	mov	r1, r9
 800678e:	4640      	mov	r0, r8
 8006790:	47d0      	blx	sl
 8006792:	3001      	adds	r0, #1
 8006794:	d09d      	beq.n	80066d2 <_printf_i+0x162>
 8006796:	3501      	adds	r5, #1
 8006798:	68e3      	ldr	r3, [r4, #12]
 800679a:	9903      	ldr	r1, [sp, #12]
 800679c:	1a5b      	subs	r3, r3, r1
 800679e:	42ab      	cmp	r3, r5
 80067a0:	dcf2      	bgt.n	8006788 <_printf_i+0x218>
 80067a2:	e7eb      	b.n	800677c <_printf_i+0x20c>
 80067a4:	2500      	movs	r5, #0
 80067a6:	f104 0619 	add.w	r6, r4, #25
 80067aa:	e7f5      	b.n	8006798 <_printf_i+0x228>
 80067ac:	08007173 	.word	0x08007173
 80067b0:	08007184 	.word	0x08007184

080067b4 <__sflush_r>:
 80067b4:	898a      	ldrh	r2, [r1, #12]
 80067b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b8:	4605      	mov	r5, r0
 80067ba:	0710      	lsls	r0, r2, #28
 80067bc:	460c      	mov	r4, r1
 80067be:	d457      	bmi.n	8006870 <__sflush_r+0xbc>
 80067c0:	684b      	ldr	r3, [r1, #4]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dc04      	bgt.n	80067d0 <__sflush_r+0x1c>
 80067c6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	dc01      	bgt.n	80067d0 <__sflush_r+0x1c>
 80067cc:	2000      	movs	r0, #0
 80067ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067d2:	2e00      	cmp	r6, #0
 80067d4:	d0fa      	beq.n	80067cc <__sflush_r+0x18>
 80067d6:	2300      	movs	r3, #0
 80067d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80067dc:	682f      	ldr	r7, [r5, #0]
 80067de:	6a21      	ldr	r1, [r4, #32]
 80067e0:	602b      	str	r3, [r5, #0]
 80067e2:	d032      	beq.n	800684a <__sflush_r+0x96>
 80067e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	075a      	lsls	r2, r3, #29
 80067ea:	d505      	bpl.n	80067f8 <__sflush_r+0x44>
 80067ec:	6863      	ldr	r3, [r4, #4]
 80067ee:	1ac0      	subs	r0, r0, r3
 80067f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80067f2:	b10b      	cbz	r3, 80067f8 <__sflush_r+0x44>
 80067f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067f6:	1ac0      	subs	r0, r0, r3
 80067f8:	2300      	movs	r3, #0
 80067fa:	4602      	mov	r2, r0
 80067fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80067fe:	4628      	mov	r0, r5
 8006800:	6a21      	ldr	r1, [r4, #32]
 8006802:	47b0      	blx	r6
 8006804:	1c43      	adds	r3, r0, #1
 8006806:	89a3      	ldrh	r3, [r4, #12]
 8006808:	d106      	bne.n	8006818 <__sflush_r+0x64>
 800680a:	6829      	ldr	r1, [r5, #0]
 800680c:	291d      	cmp	r1, #29
 800680e:	d82b      	bhi.n	8006868 <__sflush_r+0xb4>
 8006810:	4a28      	ldr	r2, [pc, #160]	; (80068b4 <__sflush_r+0x100>)
 8006812:	410a      	asrs	r2, r1
 8006814:	07d6      	lsls	r6, r2, #31
 8006816:	d427      	bmi.n	8006868 <__sflush_r+0xb4>
 8006818:	2200      	movs	r2, #0
 800681a:	6062      	str	r2, [r4, #4]
 800681c:	6922      	ldr	r2, [r4, #16]
 800681e:	04d9      	lsls	r1, r3, #19
 8006820:	6022      	str	r2, [r4, #0]
 8006822:	d504      	bpl.n	800682e <__sflush_r+0x7a>
 8006824:	1c42      	adds	r2, r0, #1
 8006826:	d101      	bne.n	800682c <__sflush_r+0x78>
 8006828:	682b      	ldr	r3, [r5, #0]
 800682a:	b903      	cbnz	r3, 800682e <__sflush_r+0x7a>
 800682c:	6560      	str	r0, [r4, #84]	; 0x54
 800682e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006830:	602f      	str	r7, [r5, #0]
 8006832:	2900      	cmp	r1, #0
 8006834:	d0ca      	beq.n	80067cc <__sflush_r+0x18>
 8006836:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800683a:	4299      	cmp	r1, r3
 800683c:	d002      	beq.n	8006844 <__sflush_r+0x90>
 800683e:	4628      	mov	r0, r5
 8006840:	f7ff fbee 	bl	8006020 <_free_r>
 8006844:	2000      	movs	r0, #0
 8006846:	6360      	str	r0, [r4, #52]	; 0x34
 8006848:	e7c1      	b.n	80067ce <__sflush_r+0x1a>
 800684a:	2301      	movs	r3, #1
 800684c:	4628      	mov	r0, r5
 800684e:	47b0      	blx	r6
 8006850:	1c41      	adds	r1, r0, #1
 8006852:	d1c8      	bne.n	80067e6 <__sflush_r+0x32>
 8006854:	682b      	ldr	r3, [r5, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0c5      	beq.n	80067e6 <__sflush_r+0x32>
 800685a:	2b1d      	cmp	r3, #29
 800685c:	d001      	beq.n	8006862 <__sflush_r+0xae>
 800685e:	2b16      	cmp	r3, #22
 8006860:	d101      	bne.n	8006866 <__sflush_r+0xb2>
 8006862:	602f      	str	r7, [r5, #0]
 8006864:	e7b2      	b.n	80067cc <__sflush_r+0x18>
 8006866:	89a3      	ldrh	r3, [r4, #12]
 8006868:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800686c:	81a3      	strh	r3, [r4, #12]
 800686e:	e7ae      	b.n	80067ce <__sflush_r+0x1a>
 8006870:	690f      	ldr	r7, [r1, #16]
 8006872:	2f00      	cmp	r7, #0
 8006874:	d0aa      	beq.n	80067cc <__sflush_r+0x18>
 8006876:	0793      	lsls	r3, r2, #30
 8006878:	bf18      	it	ne
 800687a:	2300      	movne	r3, #0
 800687c:	680e      	ldr	r6, [r1, #0]
 800687e:	bf08      	it	eq
 8006880:	694b      	ldreq	r3, [r1, #20]
 8006882:	1bf6      	subs	r6, r6, r7
 8006884:	600f      	str	r7, [r1, #0]
 8006886:	608b      	str	r3, [r1, #8]
 8006888:	2e00      	cmp	r6, #0
 800688a:	dd9f      	ble.n	80067cc <__sflush_r+0x18>
 800688c:	4633      	mov	r3, r6
 800688e:	463a      	mov	r2, r7
 8006890:	4628      	mov	r0, r5
 8006892:	6a21      	ldr	r1, [r4, #32]
 8006894:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006898:	47e0      	blx	ip
 800689a:	2800      	cmp	r0, #0
 800689c:	dc06      	bgt.n	80068ac <__sflush_r+0xf8>
 800689e:	89a3      	ldrh	r3, [r4, #12]
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068a8:	81a3      	strh	r3, [r4, #12]
 80068aa:	e790      	b.n	80067ce <__sflush_r+0x1a>
 80068ac:	4407      	add	r7, r0
 80068ae:	1a36      	subs	r6, r6, r0
 80068b0:	e7ea      	b.n	8006888 <__sflush_r+0xd4>
 80068b2:	bf00      	nop
 80068b4:	dfbffffe 	.word	0xdfbffffe

080068b8 <_fflush_r>:
 80068b8:	b538      	push	{r3, r4, r5, lr}
 80068ba:	690b      	ldr	r3, [r1, #16]
 80068bc:	4605      	mov	r5, r0
 80068be:	460c      	mov	r4, r1
 80068c0:	b913      	cbnz	r3, 80068c8 <_fflush_r+0x10>
 80068c2:	2500      	movs	r5, #0
 80068c4:	4628      	mov	r0, r5
 80068c6:	bd38      	pop	{r3, r4, r5, pc}
 80068c8:	b118      	cbz	r0, 80068d2 <_fflush_r+0x1a>
 80068ca:	6a03      	ldr	r3, [r0, #32]
 80068cc:	b90b      	cbnz	r3, 80068d2 <_fflush_r+0x1a>
 80068ce:	f7ff f9b1 	bl	8005c34 <__sinit>
 80068d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f3      	beq.n	80068c2 <_fflush_r+0xa>
 80068da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80068dc:	07d0      	lsls	r0, r2, #31
 80068de:	d404      	bmi.n	80068ea <_fflush_r+0x32>
 80068e0:	0599      	lsls	r1, r3, #22
 80068e2:	d402      	bmi.n	80068ea <_fflush_r+0x32>
 80068e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068e6:	f7ff fb99 	bl	800601c <__retarget_lock_acquire_recursive>
 80068ea:	4628      	mov	r0, r5
 80068ec:	4621      	mov	r1, r4
 80068ee:	f7ff ff61 	bl	80067b4 <__sflush_r>
 80068f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068f4:	4605      	mov	r5, r0
 80068f6:	07da      	lsls	r2, r3, #31
 80068f8:	d4e4      	bmi.n	80068c4 <_fflush_r+0xc>
 80068fa:	89a3      	ldrh	r3, [r4, #12]
 80068fc:	059b      	lsls	r3, r3, #22
 80068fe:	d4e1      	bmi.n	80068c4 <_fflush_r+0xc>
 8006900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006902:	f7ff fb8c 	bl	800601e <__retarget_lock_release_recursive>
 8006906:	e7dd      	b.n	80068c4 <_fflush_r+0xc>

08006908 <__swhatbuf_r>:
 8006908:	b570      	push	{r4, r5, r6, lr}
 800690a:	460c      	mov	r4, r1
 800690c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006910:	4615      	mov	r5, r2
 8006912:	2900      	cmp	r1, #0
 8006914:	461e      	mov	r6, r3
 8006916:	b096      	sub	sp, #88	; 0x58
 8006918:	da0c      	bge.n	8006934 <__swhatbuf_r+0x2c>
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	2100      	movs	r1, #0
 800691e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006922:	bf0c      	ite	eq
 8006924:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006928:	2340      	movne	r3, #64	; 0x40
 800692a:	2000      	movs	r0, #0
 800692c:	6031      	str	r1, [r6, #0]
 800692e:	602b      	str	r3, [r5, #0]
 8006930:	b016      	add	sp, #88	; 0x58
 8006932:	bd70      	pop	{r4, r5, r6, pc}
 8006934:	466a      	mov	r2, sp
 8006936:	f000 f849 	bl	80069cc <_fstat_r>
 800693a:	2800      	cmp	r0, #0
 800693c:	dbed      	blt.n	800691a <__swhatbuf_r+0x12>
 800693e:	9901      	ldr	r1, [sp, #4]
 8006940:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006944:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006948:	4259      	negs	r1, r3
 800694a:	4159      	adcs	r1, r3
 800694c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006950:	e7eb      	b.n	800692a <__swhatbuf_r+0x22>

08006952 <__smakebuf_r>:
 8006952:	898b      	ldrh	r3, [r1, #12]
 8006954:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006956:	079d      	lsls	r5, r3, #30
 8006958:	4606      	mov	r6, r0
 800695a:	460c      	mov	r4, r1
 800695c:	d507      	bpl.n	800696e <__smakebuf_r+0x1c>
 800695e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	2301      	movs	r3, #1
 8006968:	6163      	str	r3, [r4, #20]
 800696a:	b002      	add	sp, #8
 800696c:	bd70      	pop	{r4, r5, r6, pc}
 800696e:	466a      	mov	r2, sp
 8006970:	ab01      	add	r3, sp, #4
 8006972:	f7ff ffc9 	bl	8006908 <__swhatbuf_r>
 8006976:	9900      	ldr	r1, [sp, #0]
 8006978:	4605      	mov	r5, r0
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff fbb8 	bl	80060f0 <_malloc_r>
 8006980:	b948      	cbnz	r0, 8006996 <__smakebuf_r+0x44>
 8006982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006986:	059a      	lsls	r2, r3, #22
 8006988:	d4ef      	bmi.n	800696a <__smakebuf_r+0x18>
 800698a:	f023 0303 	bic.w	r3, r3, #3
 800698e:	f043 0302 	orr.w	r3, r3, #2
 8006992:	81a3      	strh	r3, [r4, #12]
 8006994:	e7e3      	b.n	800695e <__smakebuf_r+0xc>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	6020      	str	r0, [r4, #0]
 800699a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	9b00      	ldr	r3, [sp, #0]
 80069a2:	6120      	str	r0, [r4, #16]
 80069a4:	6163      	str	r3, [r4, #20]
 80069a6:	9b01      	ldr	r3, [sp, #4]
 80069a8:	b15b      	cbz	r3, 80069c2 <__smakebuf_r+0x70>
 80069aa:	4630      	mov	r0, r6
 80069ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069b0:	f000 f81e 	bl	80069f0 <_isatty_r>
 80069b4:	b128      	cbz	r0, 80069c2 <__smakebuf_r+0x70>
 80069b6:	89a3      	ldrh	r3, [r4, #12]
 80069b8:	f023 0303 	bic.w	r3, r3, #3
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	81a3      	strh	r3, [r4, #12]
 80069c2:	89a3      	ldrh	r3, [r4, #12]
 80069c4:	431d      	orrs	r5, r3
 80069c6:	81a5      	strh	r5, [r4, #12]
 80069c8:	e7cf      	b.n	800696a <__smakebuf_r+0x18>
	...

080069cc <_fstat_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	2300      	movs	r3, #0
 80069d0:	4d06      	ldr	r5, [pc, #24]	; (80069ec <_fstat_r+0x20>)
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	602b      	str	r3, [r5, #0]
 80069da:	f7fb ff27 	bl	800282c <_fstat>
 80069de:	1c43      	adds	r3, r0, #1
 80069e0:	d102      	bne.n	80069e8 <_fstat_r+0x1c>
 80069e2:	682b      	ldr	r3, [r5, #0]
 80069e4:	b103      	cbz	r3, 80069e8 <_fstat_r+0x1c>
 80069e6:	6023      	str	r3, [r4, #0]
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	bf00      	nop
 80069ec:	200005b4 	.word	0x200005b4

080069f0 <_isatty_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	2300      	movs	r3, #0
 80069f4:	4d05      	ldr	r5, [pc, #20]	; (8006a0c <_isatty_r+0x1c>)
 80069f6:	4604      	mov	r4, r0
 80069f8:	4608      	mov	r0, r1
 80069fa:	602b      	str	r3, [r5, #0]
 80069fc:	f7fb ff25 	bl	800284a <_isatty>
 8006a00:	1c43      	adds	r3, r0, #1
 8006a02:	d102      	bne.n	8006a0a <_isatty_r+0x1a>
 8006a04:	682b      	ldr	r3, [r5, #0]
 8006a06:	b103      	cbz	r3, 8006a0a <_isatty_r+0x1a>
 8006a08:	6023      	str	r3, [r4, #0]
 8006a0a:	bd38      	pop	{r3, r4, r5, pc}
 8006a0c:	200005b4 	.word	0x200005b4

08006a10 <_sbrk_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4d05      	ldr	r5, [pc, #20]	; (8006a2c <_sbrk_r+0x1c>)
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fb ff2c 	bl	8002878 <_sbrk>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_sbrk_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_sbrk_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	200005b4 	.word	0x200005b4

08006a30 <memchr>:
 8006a30:	4603      	mov	r3, r0
 8006a32:	b510      	push	{r4, lr}
 8006a34:	b2c9      	uxtb	r1, r1
 8006a36:	4402      	add	r2, r0
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	d101      	bne.n	8006a42 <memchr+0x12>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e003      	b.n	8006a4a <memchr+0x1a>
 8006a42:	7804      	ldrb	r4, [r0, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	428c      	cmp	r4, r1
 8006a48:	d1f6      	bne.n	8006a38 <memchr+0x8>
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <_init>:
 8006a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4e:	bf00      	nop
 8006a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a52:	bc08      	pop	{r3}
 8006a54:	469e      	mov	lr, r3
 8006a56:	4770      	bx	lr

08006a58 <_fini>:
 8006a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a5a:	bf00      	nop
 8006a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a5e:	bc08      	pop	{r3}
 8006a60:	469e      	mov	lr, r3
 8006a62:	4770      	bx	lr
