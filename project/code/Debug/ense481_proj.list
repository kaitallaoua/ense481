
ense481_proj.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a50  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08004b60  08004b60  00014b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cfc  08004cfc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08004cfc  08004cfc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cfc  08004cfc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cfc  08004cfc  00014cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d00  08004d00  00014d00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08004d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  20000068  08004d6c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08004d6c  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d753  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000211c  00000000  00000000  0002d827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  0002f948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a8e  00000000  00000000  000306d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001915f  00000000  00000000  00031166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecc4  00000000  00000000  0004a2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00090f35  00000000  00000000  00058f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004174  00000000  00000000  000e9ec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000ee034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004b48 	.word	0x08004b48

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004b48 	.word	0x08004b48

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_frsub>:
 800092c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000930:	e002      	b.n	8000938 <__addsf3>
 8000932:	bf00      	nop

08000934 <__aeabi_fsub>:
 8000934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000938 <__addsf3>:
 8000938:	0042      	lsls	r2, r0, #1
 800093a:	bf1f      	itttt	ne
 800093c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000940:	ea92 0f03 	teqne	r2, r3
 8000944:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000948:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800094c:	d06a      	beq.n	8000a24 <__addsf3+0xec>
 800094e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000952:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000956:	bfc1      	itttt	gt
 8000958:	18d2      	addgt	r2, r2, r3
 800095a:	4041      	eorgt	r1, r0
 800095c:	4048      	eorgt	r0, r1
 800095e:	4041      	eorgt	r1, r0
 8000960:	bfb8      	it	lt
 8000962:	425b      	neglt	r3, r3
 8000964:	2b19      	cmp	r3, #25
 8000966:	bf88      	it	hi
 8000968:	4770      	bxhi	lr
 800096a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800096e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000972:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4240      	negne	r0, r0
 800097a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800097e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000982:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000986:	bf18      	it	ne
 8000988:	4249      	negne	r1, r1
 800098a:	ea92 0f03 	teq	r2, r3
 800098e:	d03f      	beq.n	8000a10 <__addsf3+0xd8>
 8000990:	f1a2 0201 	sub.w	r2, r2, #1
 8000994:	fa41 fc03 	asr.w	ip, r1, r3
 8000998:	eb10 000c 	adds.w	r0, r0, ip
 800099c:	f1c3 0320 	rsb	r3, r3, #32
 80009a0:	fa01 f103 	lsl.w	r1, r1, r3
 80009a4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009a8:	d502      	bpl.n	80009b0 <__addsf3+0x78>
 80009aa:	4249      	negs	r1, r1
 80009ac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009b0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009b4:	d313      	bcc.n	80009de <__addsf3+0xa6>
 80009b6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ba:	d306      	bcc.n	80009ca <__addsf3+0x92>
 80009bc:	0840      	lsrs	r0, r0, #1
 80009be:	ea4f 0131 	mov.w	r1, r1, rrx
 80009c2:	f102 0201 	add.w	r2, r2, #1
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	d251      	bcs.n	8000a6e <__addsf3+0x136>
 80009ca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009ce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009d2:	bf08      	it	eq
 80009d4:	f020 0001 	biceq.w	r0, r0, #1
 80009d8:	ea40 0003 	orr.w	r0, r0, r3
 80009dc:	4770      	bx	lr
 80009de:	0049      	lsls	r1, r1, #1
 80009e0:	eb40 0000 	adc.w	r0, r0, r0
 80009e4:	3a01      	subs	r2, #1
 80009e6:	bf28      	it	cs
 80009e8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80009ec:	d2ed      	bcs.n	80009ca <__addsf3+0x92>
 80009ee:	fab0 fc80 	clz	ip, r0
 80009f2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009f6:	ebb2 020c 	subs.w	r2, r2, ip
 80009fa:	fa00 f00c 	lsl.w	r0, r0, ip
 80009fe:	bfaa      	itet	ge
 8000a00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a04:	4252      	neglt	r2, r2
 8000a06:	4318      	orrge	r0, r3
 8000a08:	bfbc      	itt	lt
 8000a0a:	40d0      	lsrlt	r0, r2
 8000a0c:	4318      	orrlt	r0, r3
 8000a0e:	4770      	bx	lr
 8000a10:	f092 0f00 	teq	r2, #0
 8000a14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a18:	bf06      	itte	eq
 8000a1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a1e:	3201      	addeq	r2, #1
 8000a20:	3b01      	subne	r3, #1
 8000a22:	e7b5      	b.n	8000990 <__addsf3+0x58>
 8000a24:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a2c:	bf18      	it	ne
 8000a2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a32:	d021      	beq.n	8000a78 <__addsf3+0x140>
 8000a34:	ea92 0f03 	teq	r2, r3
 8000a38:	d004      	beq.n	8000a44 <__addsf3+0x10c>
 8000a3a:	f092 0f00 	teq	r2, #0
 8000a3e:	bf08      	it	eq
 8000a40:	4608      	moveq	r0, r1
 8000a42:	4770      	bx	lr
 8000a44:	ea90 0f01 	teq	r0, r1
 8000a48:	bf1c      	itt	ne
 8000a4a:	2000      	movne	r0, #0
 8000a4c:	4770      	bxne	lr
 8000a4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a52:	d104      	bne.n	8000a5e <__addsf3+0x126>
 8000a54:	0040      	lsls	r0, r0, #1
 8000a56:	bf28      	it	cs
 8000a58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a5c:	4770      	bx	lr
 8000a5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a62:	bf3c      	itt	cc
 8000a64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bxcc	lr
 8000a6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a76:	4770      	bx	lr
 8000a78:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a7c:	bf16      	itet	ne
 8000a7e:	4608      	movne	r0, r1
 8000a80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a84:	4601      	movne	r1, r0
 8000a86:	0242      	lsls	r2, r0, #9
 8000a88:	bf06      	itte	eq
 8000a8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a8e:	ea90 0f01 	teqeq	r0, r1
 8000a92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000a96:	4770      	bx	lr

08000a98 <__aeabi_ui2f>:
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e004      	b.n	8000aa8 <__aeabi_i2f+0x8>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_i2f>:
 8000aa0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000aa4:	bf48      	it	mi
 8000aa6:	4240      	negmi	r0, r0
 8000aa8:	ea5f 0c00 	movs.w	ip, r0
 8000aac:	bf08      	it	eq
 8000aae:	4770      	bxeq	lr
 8000ab0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ab4:	4601      	mov	r1, r0
 8000ab6:	f04f 0000 	mov.w	r0, #0
 8000aba:	e01c      	b.n	8000af6 <__aeabi_l2f+0x2a>

08000abc <__aeabi_ul2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e00a      	b.n	8000ae0 <__aeabi_l2f+0x14>
 8000aca:	bf00      	nop

08000acc <__aeabi_l2f>:
 8000acc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ad0:	bf08      	it	eq
 8000ad2:	4770      	bxeq	lr
 8000ad4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ad8:	d502      	bpl.n	8000ae0 <__aeabi_l2f+0x14>
 8000ada:	4240      	negs	r0, r0
 8000adc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ae0:	ea5f 0c01 	movs.w	ip, r1
 8000ae4:	bf02      	ittt	eq
 8000ae6:	4684      	moveq	ip, r0
 8000ae8:	4601      	moveq	r1, r0
 8000aea:	2000      	moveq	r0, #0
 8000aec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000af0:	bf08      	it	eq
 8000af2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000af6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000afa:	fabc f28c 	clz	r2, ip
 8000afe:	3a08      	subs	r2, #8
 8000b00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b04:	db10      	blt.n	8000b28 <__aeabi_l2f+0x5c>
 8000b06:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b0a:	4463      	add	r3, ip
 8000b0c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b10:	f1c2 0220 	rsb	r2, r2, #32
 8000b14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b18:	fa20 f202 	lsr.w	r2, r0, r2
 8000b1c:	eb43 0002 	adc.w	r0, r3, r2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f102 0220 	add.w	r2, r2, #32
 8000b2c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b30:	f1c2 0220 	rsb	r2, r2, #32
 8000b34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b38:	fa21 f202 	lsr.w	r2, r1, r2
 8000b3c:	eb43 0002 	adc.w	r0, r3, r2
 8000b40:	bf08      	it	eq
 8000b42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b46:	4770      	bx	lr

08000b48 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000b50:	1d39      	adds	r1, r7, #4
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b56:	2201      	movs	r2, #1
 8000b58:	4803      	ldr	r0, [pc, #12]	; (8000b68 <__io_putchar+0x20>)
 8000b5a:	f002 feef 	bl	800393c <HAL_UART_Transmit>
  return ch;
 8000b5e:	687b      	ldr	r3, [r7, #4]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3708      	adds	r7, #8
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200000fc 	.word	0x200000fc

08000b6c <select_adc_channel>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void select_adc_channel(int channel)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
    //sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
    sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000b80:	2301      	movs	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
    switch (channel)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b0f      	cmp	r3, #15
 8000b88:	f200 812d 	bhi.w	8000de6 <select_adc_channel+0x27a>
 8000b8c:	a201      	add	r2, pc, #4	; (adr r2, 8000b94 <select_adc_channel+0x28>)
 8000b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b92:	bf00      	nop
 8000b94:	08000bd5 	.word	0x08000bd5
 8000b98:	08000bf7 	.word	0x08000bf7
 8000b9c:	08000c19 	.word	0x08000c19
 8000ba0:	08000c3b 	.word	0x08000c3b
 8000ba4:	08000c5d 	.word	0x08000c5d
 8000ba8:	08000c7f 	.word	0x08000c7f
 8000bac:	08000ca1 	.word	0x08000ca1
 8000bb0:	08000cc3 	.word	0x08000cc3
 8000bb4:	08000ce5 	.word	0x08000ce5
 8000bb8:	08000d07 	.word	0x08000d07
 8000bbc:	08000d27 	.word	0x08000d27
 8000bc0:	08000d47 	.word	0x08000d47
 8000bc4:	08000d67 	.word	0x08000d67
 8000bc8:	08000d87 	.word	0x08000d87
 8000bcc:	08000da7 	.word	0x08000da7
 8000bd0:	08000dc7 	.word	0x08000dc7
    {
        case 0:
            sConfig.Channel = ADC_CHANNEL_0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	613b      	str	r3, [r7, #16]

              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	f107 030c 	add.w	r3, r7, #12
 8000be0:	4619      	mov	r1, r3
 8000be2:	4893      	ldr	r0, [pc, #588]	; (8000e30 <select_adc_channel+0x2c4>)
 8000be4:	f001 f8b8 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	f000 80fd 	beq.w	8000dea <select_adc_channel+0x27e>
              {
                Error_Handler();
 8000bf0:	f000 fb62 	bl	80012b8 <Error_Handler>
              }
              break;
 8000bf4:	e0f9      	b.n	8000dea <select_adc_channel+0x27e>

        case 1:
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
              sConfig.Channel = ADC_CHANNEL_1;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	f107 030c 	add.w	r3, r7, #12
 8000c02:	4619      	mov	r1, r3
 8000c04:	488a      	ldr	r0, [pc, #552]	; (8000e30 <select_adc_channel+0x2c4>)
 8000c06:	f001 f8a7 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	f000 80ee 	beq.w	8000dee <select_adc_channel+0x282>
              {
                Error_Handler();
 8000c12:	f000 fb51 	bl	80012b8 <Error_Handler>
              }
              break;
 8000c16:	e0ea      	b.n	8000dee <select_adc_channel+0x282>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 2:
              sConfig.Channel = ADC_CHANNEL_2;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c20:	f107 030c 	add.w	r3, r7, #12
 8000c24:	4619      	mov	r1, r3
 8000c26:	4882      	ldr	r0, [pc, #520]	; (8000e30 <select_adc_channel+0x2c4>)
 8000c28:	f001 f896 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 80df 	beq.w	8000df2 <select_adc_channel+0x286>
              {
                Error_Handler();
 8000c34:	f000 fb40 	bl	80012b8 <Error_Handler>
              }
              break;
 8000c38:	e0db      	b.n	8000df2 <select_adc_channel+0x286>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 3:
              sConfig.Channel = ADC_CHANNEL_3;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4619      	mov	r1, r3
 8000c48:	4879      	ldr	r0, [pc, #484]	; (8000e30 <select_adc_channel+0x2c4>)
 8000c4a:	f001 f885 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80d0 	beq.w	8000df6 <select_adc_channel+0x28a>
              {
                Error_Handler();
 8000c56:	f000 fb2f 	bl	80012b8 <Error_Handler>
              }
              break;
 8000c5a:	e0cc      	b.n	8000df6 <select_adc_channel+0x28a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 4:
              sConfig.Channel = ADC_CHANNEL_4;
 8000c5c:	2304      	movs	r3, #4
 8000c5e:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c60:	2301      	movs	r3, #1
 8000c62:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4871      	ldr	r0, [pc, #452]	; (8000e30 <select_adc_channel+0x2c4>)
 8000c6c:	f001 f874 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	f000 80c1 	beq.w	8000dfa <select_adc_channel+0x28e>
              {
                Error_Handler();
 8000c78:	f000 fb1e 	bl	80012b8 <Error_Handler>
              }
              break;
 8000c7c:	e0bd      	b.n	8000dfa <select_adc_channel+0x28e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 5:
              sConfig.Channel = ADC_CHANNEL_5;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c86:	f107 030c 	add.w	r3, r7, #12
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4868      	ldr	r0, [pc, #416]	; (8000e30 <select_adc_channel+0x2c4>)
 8000c8e:	f001 f863 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	f000 80b2 	beq.w	8000dfe <select_adc_channel+0x292>
              {
                Error_Handler();
 8000c9a:	f000 fb0d 	bl	80012b8 <Error_Handler>
              }
              break;
 8000c9e:	e0ae      	b.n	8000dfe <select_adc_channel+0x292>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 6:
              sConfig.Channel = ADC_CHANNEL_6;
 8000ca0:	2306      	movs	r3, #6
 8000ca2:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4860      	ldr	r0, [pc, #384]	; (8000e30 <select_adc_channel+0x2c4>)
 8000cb0:	f001 f852 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f000 80a3 	beq.w	8000e02 <select_adc_channel+0x296>
              {
                Error_Handler();
 8000cbc:	f000 fafc 	bl	80012b8 <Error_Handler>
              }
              break;
 8000cc0:	e09f      	b.n	8000e02 <select_adc_channel+0x296>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 7:
              sConfig.Channel = ADC_CHANNEL_7;
 8000cc2:	2307      	movs	r3, #7
 8000cc4:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cca:	f107 030c 	add.w	r3, r7, #12
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4857      	ldr	r0, [pc, #348]	; (8000e30 <select_adc_channel+0x2c4>)
 8000cd2:	f001 f841 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	f000 8094 	beq.w	8000e06 <select_adc_channel+0x29a>
              {
                Error_Handler();
 8000cde:	f000 faeb 	bl	80012b8 <Error_Handler>
              }
              break;
 8000ce2:	e090      	b.n	8000e06 <select_adc_channel+0x29a>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 8:
              sConfig.Channel = ADC_CHANNEL_8;
 8000ce4:	2308      	movs	r3, #8
 8000ce6:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 9;
 8000ce8:	2309      	movs	r3, #9
 8000cea:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	484f      	ldr	r0, [pc, #316]	; (8000e30 <select_adc_channel+0x2c4>)
 8000cf4:	f001 f830 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f000 8085 	beq.w	8000e0a <select_adc_channel+0x29e>
              {
                Error_Handler();
 8000d00:	f000 fada 	bl	80012b8 <Error_Handler>
              }
              break;
 8000d04:	e081      	b.n	8000e0a <select_adc_channel+0x29e>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 9:
              sConfig.Channel = ADC_CHANNEL_9;
 8000d06:	2309      	movs	r3, #9
 8000d08:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4619      	mov	r1, r3
 8000d14:	4846      	ldr	r0, [pc, #280]	; (8000e30 <select_adc_channel+0x2c4>)
 8000d16:	f001 f81f 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d076      	beq.n	8000e0e <select_adc_channel+0x2a2>
              {
                Error_Handler();
 8000d20:	f000 faca 	bl	80012b8 <Error_Handler>
              }
              break;
 8000d24:	e073      	b.n	8000e0e <select_adc_channel+0x2a2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 10:
              sConfig.Channel = ADC_CHANNEL_10;
 8000d26:	230a      	movs	r3, #10
 8000d28:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	483e      	ldr	r0, [pc, #248]	; (8000e30 <select_adc_channel+0x2c4>)
 8000d36:	f001 f80f 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d068      	beq.n	8000e12 <select_adc_channel+0x2a6>
              {
                Error_Handler();
 8000d40:	f000 faba 	bl	80012b8 <Error_Handler>
              }
              break;
 8000d44:	e065      	b.n	8000e12 <select_adc_channel+0x2a6>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 11:
              sConfig.Channel = ADC_CHANNEL_11;
 8000d46:	230b      	movs	r3, #11
 8000d48:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	4836      	ldr	r0, [pc, #216]	; (8000e30 <select_adc_channel+0x2c4>)
 8000d56:	f000 ffff 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d05a      	beq.n	8000e16 <select_adc_channel+0x2aa>
              {
                Error_Handler();
 8000d60:	f000 faaa 	bl	80012b8 <Error_Handler>
              }
              break;
 8000d64:	e057      	b.n	8000e16 <select_adc_channel+0x2aa>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 12:
              sConfig.Channel = ADC_CHANNEL_12;
 8000d66:	230c      	movs	r3, #12
 8000d68:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	4619      	mov	r1, r3
 8000d74:	482e      	ldr	r0, [pc, #184]	; (8000e30 <select_adc_channel+0x2c4>)
 8000d76:	f000 ffef 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d04c      	beq.n	8000e1a <select_adc_channel+0x2ae>
              {
                Error_Handler();
 8000d80:	f000 fa9a 	bl	80012b8 <Error_Handler>
              }
              break;
 8000d84:	e049      	b.n	8000e1a <select_adc_channel+0x2ae>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 13:
              sConfig.Channel = ADC_CHANNEL_13;
 8000d86:	230d      	movs	r3, #13
 8000d88:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8e:	f107 030c 	add.w	r3, r7, #12
 8000d92:	4619      	mov	r1, r3
 8000d94:	4826      	ldr	r0, [pc, #152]	; (8000e30 <select_adc_channel+0x2c4>)
 8000d96:	f000 ffdf 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d03e      	beq.n	8000e1e <select_adc_channel+0x2b2>
              {
                Error_Handler();
 8000da0:	f000 fa8a 	bl	80012b8 <Error_Handler>
              }
              break;
 8000da4:	e03b      	b.n	8000e1e <select_adc_channel+0x2b2>
              /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
              */
        case 14:
              sConfig.Channel = ADC_CHANNEL_14;
 8000da6:	230e      	movs	r3, #14
 8000da8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000daa:	2301      	movs	r3, #1
 8000dac:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	4619      	mov	r1, r3
 8000db4:	481e      	ldr	r0, [pc, #120]	; (8000e30 <select_adc_channel+0x2c4>)
 8000db6:	f000 ffcf 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d030      	beq.n	8000e22 <select_adc_channel+0x2b6>
              {
                Error_Handler();
 8000dc0:	f000 fa7a 	bl	80012b8 <Error_Handler>
              }
              break;
 8000dc4:	e02d      	b.n	8000e22 <select_adc_channel+0x2b6>
        case 15:
              sConfig.Channel = ADC_CHANNEL_15;
 8000dc6:	230f      	movs	r3, #15
 8000dc8:	60fb      	str	r3, [r7, #12]
              sConfig.Rank = 1;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	613b      	str	r3, [r7, #16]
              if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	f107 030c 	add.w	r3, r7, #12
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4816      	ldr	r0, [pc, #88]	; (8000e30 <select_adc_channel+0x2c4>)
 8000dd6:	f000 ffbf 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d022      	beq.n	8000e26 <select_adc_channel+0x2ba>
              {
                Error_Handler();
 8000de0:	f000 fa6a 	bl	80012b8 <Error_Handler>
              }
              break;
 8000de4:	e01f      	b.n	8000e26 <select_adc_channel+0x2ba>
        default:
            break;
 8000de6:	bf00      	nop
 8000de8:	e01e      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000dea:	bf00      	nop
 8000dec:	e01c      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000dee:	bf00      	nop
 8000df0:	e01a      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000df2:	bf00      	nop
 8000df4:	e018      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000df6:	bf00      	nop
 8000df8:	e016      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000dfa:	bf00      	nop
 8000dfc:	e014      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000dfe:	bf00      	nop
 8000e00:	e012      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e02:	bf00      	nop
 8000e04:	e010      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e06:	bf00      	nop
 8000e08:	e00e      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e0a:	bf00      	nop
 8000e0c:	e00c      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e0e:	bf00      	nop
 8000e10:	e00a      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e12:	bf00      	nop
 8000e14:	e008      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e16:	bf00      	nop
 8000e18:	e006      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e1a:	bf00      	nop
 8000e1c:	e004      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e1e:	bf00      	nop
 8000e20:	e002      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e22:	bf00      	nop
 8000e24:	e000      	b.n	8000e28 <select_adc_channel+0x2bc>
              break;
 8000e26:	bf00      	nop
    }
}
 8000e28:	bf00      	nop
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	20000084 	.word	0x20000084
 8000e34:	00000000 	.word	0x00000000

08000e38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e3e:	f000 fc9d 	bl	800177c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e42:	f000 f8e1 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e46:	f000 f9eb 	bl	8001220 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e4a:	f000 f9bf 	bl	80011cc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000e4e:	f000 f931 	bl	80010b4 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e52:	f000 f96d 	bl	8001130 <MX_TIM3_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("-------------------------------\r\n");
 8000e56:	4862      	ldr	r0, [pc, #392]	; (8000fe0 <main+0x1a8>)
 8000e58:	f003 f806 	bl	8003e68 <puts>
	  for (uint16_t i = 0; i < 2; i++) {
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	827b      	strh	r3, [r7, #18]
 8000e60:	e02b      	b.n	8000eba <main+0x82>



			  select_adc_channel(i);
 8000e62:	8a7b      	ldrh	r3, [r7, #18]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff fe81 	bl	8000b6c <select_adc_channel>
			  // Get each ADC value from the group (2 channels in this case)
			  HAL_ADC_Start(&hadc1);
 8000e6a:	485e      	ldr	r0, [pc, #376]	; (8000fe4 <main+0x1ac>)
 8000e6c:	f000 fdb4 	bl	80019d8 <HAL_ADC_Start>
			  // Wait for regular group conversion to be completed
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e74:	485b      	ldr	r0, [pc, #364]	; (8000fe4 <main+0x1ac>)
 8000e76:	f000 fe5d 	bl	8001b34 <HAL_ADC_PollForConversion>

			  if (i == 0) {
 8000e7a:	8a7b      	ldrh	r3, [r7, #18]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d10b      	bne.n	8000e98 <main+0x60>
				  source_V_q = HAL_ADC_GetValue(&hadc1);
 8000e80:	4858      	ldr	r0, [pc, #352]	; (8000fe4 <main+0x1ac>)
 8000e82:	f000 ff5d 	bl	8001d40 <HAL_ADC_GetValue>
 8000e86:	4603      	mov	r3, r0
 8000e88:	82fb      	strh	r3, [r7, #22]
				  printf("Quantized Source Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) source_V_q);
 8000e8a:	8a7b      	ldrh	r3, [r7, #18]
 8000e8c:	8afa      	ldrh	r2, [r7, #22]
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4855      	ldr	r0, [pc, #340]	; (8000fe8 <main+0x1b0>)
 8000e92:	f002 ff83 	bl	8003d9c <iprintf>
 8000e96:	e00d      	b.n	8000eb4 <main+0x7c>
			  } else if (i == 1) {
 8000e98:	8a7b      	ldrh	r3, [r7, #18]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d10a      	bne.n	8000eb4 <main+0x7c>
				  mcu_V_q = HAL_ADC_GetValue(&hadc1);
 8000e9e:	4851      	ldr	r0, [pc, #324]	; (8000fe4 <main+0x1ac>)
 8000ea0:	f000 ff4e 	bl	8001d40 <HAL_ADC_GetValue>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	82bb      	strh	r3, [r7, #20]
				  printf("Quantized MCU Voltage [%u] value: %u [unitless]\r\n", (uint16_t) i, (uint16_t) mcu_V_q);
 8000ea8:	8a7b      	ldrh	r3, [r7, #18]
 8000eaa:	8aba      	ldrh	r2, [r7, #20]
 8000eac:	4619      	mov	r1, r3
 8000eae:	484f      	ldr	r0, [pc, #316]	; (8000fec <main+0x1b4>)
 8000eb0:	f002 ff74 	bl	8003d9c <iprintf>
	  for (uint16_t i = 0; i < 2; i++) {
 8000eb4:	8a7b      	ldrh	r3, [r7, #18]
 8000eb6:	3301      	adds	r3, #1
 8000eb8:	827b      	strh	r3, [r7, #18]
 8000eba:	8a7b      	ldrh	r3, [r7, #18]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d9d0      	bls.n	8000e62 <main+0x2a>
			  }
		  }

	  	  shunt_resistor_V_q = source_V_q - mcu_V_q;
 8000ec0:	8afa      	ldrh	r2, [r7, #22]
 8000ec2:	8abb      	ldrh	r3, [r7, #20]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	823b      	strh	r3, [r7, #16]
	  	  shunt_resistor_mV = (uint16_t) (((float) (shunt_resistor_V_q * 1000)) / 4095.0) * 3.3;
 8000ec8:	8a3b      	ldrh	r3, [r7, #16]
 8000eca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ece:	fb02 f303 	mul.w	r3, r2, r3
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff fde4 	bl	8000aa0 <__aeabi_i2f>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f7ff fa9c 	bl	8000418 <__aeabi_f2d>
 8000ee0:	a33b      	add	r3, pc, #236	; (adr r3, 8000fd0 <main+0x198>)
 8000ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee6:	f7ff fc19 	bl	800071c <__aeabi_ddiv>
 8000eea:	4602      	mov	r2, r0
 8000eec:	460b      	mov	r3, r1
 8000eee:	4610      	mov	r0, r2
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f7ff fcfb 	bl	80008ec <__aeabi_d2uiz>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff fa7a 	bl	80003f4 <__aeabi_i2d>
 8000f00:	a335      	add	r3, pc, #212	; (adr r3, 8000fd8 <main+0x1a0>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f7ff fadf 	bl	80004c8 <__aeabi_dmul>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fceb 	bl	80008ec <__aeabi_d2uiz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	81fb      	strh	r3, [r7, #14]
	  	  mcu_mV = (uint16_t) (((float) (mcu_V_q * 1000)) / 4095.0) * 3.3;
 8000f1a:	8abb      	ldrh	r3, [r7, #20]
 8000f1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f20:	fb02 f303 	mul.w	r3, r2, r3
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fdbb 	bl	8000aa0 <__aeabi_i2f>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff fa73 	bl	8000418 <__aeabi_f2d>
 8000f32:	a327      	add	r3, pc, #156	; (adr r3, 8000fd0 <main+0x198>)
 8000f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f38:	f7ff fbf0 	bl	800071c <__aeabi_ddiv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fcd2 	bl	80008ec <__aeabi_d2uiz>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fa51 	bl	80003f4 <__aeabi_i2d>
 8000f52:	a321      	add	r3, pc, #132	; (adr r3, 8000fd8 <main+0x1a0>)
 8000f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f58:	f7ff fab6 	bl	80004c8 <__aeabi_dmul>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	460b      	mov	r3, r1
 8000f60:	4610      	mov	r0, r2
 8000f62:	4619      	mov	r1, r3
 8000f64:	f7ff fcc2 	bl	80008ec <__aeabi_d2uiz>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	81bb      	strh	r3, [r7, #12]


		  printf("shunt resistor voltage: %u [mV]\r\n", shunt_resistor_mV);
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	4619      	mov	r1, r3
 8000f70:	481f      	ldr	r0, [pc, #124]	; (8000ff0 <main+0x1b8>)
 8000f72:	f002 ff13 	bl	8003d9c <iprintf>
		  printf("mcu voltage: %u [mV]\r\n", mcu_mV);
 8000f76:	89bb      	ldrh	r3, [r7, #12]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	481e      	ldr	r0, [pc, #120]	; (8000ff4 <main+0x1bc>)
 8000f7c:	f002 ff0e 	bl	8003d9c <iprintf>

		  // since 1 ohm (assumed constant) shunt resistor
		  // I = V / R
		  // I = V
		  circuit_mA = shunt_resistor_mV;
 8000f80:	89fb      	ldrh	r3, [r7, #14]
 8000f82:	817b      	strh	r3, [r7, #10]
		  printf("Circuit current: %u [mA]\r\n", circuit_mA);
 8000f84:	897b      	ldrh	r3, [r7, #10]
 8000f86:	4619      	mov	r1, r3
 8000f88:	481b      	ldr	r0, [pc, #108]	; (8000ff8 <main+0x1c0>)
 8000f8a:	f002 ff07 	bl	8003d9c <iprintf>

		  mcu_mW = circuit_mA * (mcu_mV / 1000);
 8000f8e:	89bb      	ldrh	r3, [r7, #12]
 8000f90:	4a1a      	ldr	r2, [pc, #104]	; (8000ffc <main+0x1c4>)
 8000f92:	fba2 2303 	umull	r2, r3, r2, r3
 8000f96:	099b      	lsrs	r3, r3, #6
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	897a      	ldrh	r2, [r7, #10]
 8000f9c:	fb02 f303 	mul.w	r3, r2, r3
 8000fa0:	813b      	strh	r3, [r7, #8]

		  shunt_resistor_uW = circuit_mA * (shunt_resistor_mV);
 8000fa2:	897b      	ldrh	r3, [r7, #10]
 8000fa4:	89fa      	ldrh	r2, [r7, #14]
 8000fa6:	fb02 f303 	mul.w	r3, r2, r3
 8000faa:	80fb      	strh	r3, [r7, #6]

		  printf("shunt resistor power: %u [uW]\r\n", shunt_resistor_uW);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <main+0x1c8>)
 8000fb2:	f002 fef3 	bl	8003d9c <iprintf>
		  printf("mcu power: %u [mW]\r\n", mcu_mW);
 8000fb6:	893b      	ldrh	r3, [r7, #8]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4812      	ldr	r0, [pc, #72]	; (8001004 <main+0x1cc>)
 8000fbc:	f002 feee 	bl	8003d9c <iprintf>
	  	  HAL_Delay(1000);
 8000fc0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc4:	f000 fc0c 	bl	80017e0 <HAL_Delay>
	  printf("-------------------------------\r\n");
 8000fc8:	e745      	b.n	8000e56 <main+0x1e>
 8000fca:	bf00      	nop
 8000fcc:	f3af 8000 	nop.w
 8000fd0:	00000000 	.word	0x00000000
 8000fd4:	40affe00 	.word	0x40affe00
 8000fd8:	66666666 	.word	0x66666666
 8000fdc:	400a6666 	.word	0x400a6666
 8000fe0:	08004b60 	.word	0x08004b60
 8000fe4:	20000084 	.word	0x20000084
 8000fe8:	08004b84 	.word	0x08004b84
 8000fec:	08004bbc 	.word	0x08004bbc
 8000ff0:	08004bf0 	.word	0x08004bf0
 8000ff4:	08004c14 	.word	0x08004c14
 8000ff8:	08004c2c 	.word	0x08004c2c
 8000ffc:	10624dd3 	.word	0x10624dd3
 8001000:	08004c48 	.word	0x08004c48
 8001004:	08004c68 	.word	0x08004c68

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	; 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001012:	2228      	movs	r2, #40	; 0x28
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f003 f806 	bl	8004028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2200      	movs	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
 8001032:	605a      	str	r2, [r3, #4]
 8001034:	609a      	str	r2, [r3, #8]
 8001036:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001038:	2302      	movs	r3, #2
 800103a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800103c:	2301      	movs	r3, #1
 800103e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001040:	2310      	movs	r3, #16
 8001042:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001044:	2302      	movs	r3, #2
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001048:	2300      	movs	r3, #0
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800104c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001050:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001052:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001056:	4618      	mov	r0, r3
 8001058:	f001 fa76 	bl	8002548 <HAL_RCC_OscConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001062:	f000 f929 	bl	80012b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001066:	230f      	movs	r3, #15
 8001068:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001072:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001076:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fce2 	bl	8002a4c <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800108e:	f000 f913 	bl	80012b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001092:	2302      	movs	r3, #2
 8001094:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	4618      	mov	r0, r3
 800109e:	f001 fe93 	bl	8002dc8 <HAL_RCCEx_PeriphCLKConfig>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80010a8:	f000 f906 	bl	80012b8 <Error_Handler>
  }
}
 80010ac:	bf00      	nop
 80010ae:	3750      	adds	r7, #80	; 0x50
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_ADC1_Init+0x74>)
 80010c6:	4a19      	ldr	r2, [pc, #100]	; (800112c <MX_ADC1_Init+0x78>)
 80010c8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010ca:	4b17      	ldr	r3, [pc, #92]	; (8001128 <MX_ADC1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010d0:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_ADC1_Init+0x74>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_ADC1_Init+0x74>)
 80010d8:	2200      	movs	r2, #0
 80010da:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010dc:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_ADC1_Init+0x74>)
 80010de:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80010e2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_ADC1_Init+0x74>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80010ea:	4b0f      	ldr	r3, [pc, #60]	; (8001128 <MX_ADC1_Init+0x74>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f0:	480d      	ldr	r0, [pc, #52]	; (8001128 <MX_ADC1_Init+0x74>)
 80010f2:	f000 fb99 	bl	8001828 <HAL_ADC_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80010fc:	f000 f8dc 	bl	80012b8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001104:	2301      	movs	r3, #1
 8001106:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8001108:	2301      	movs	r3, #1
 800110a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_ADC1_Init+0x74>)
 8001112:	f000 fe21 	bl	8001d58 <HAL_ADC_ConfigChannel>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800111c:	f000 f8cc 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001120:	bf00      	nop
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20000084 	.word	0x20000084
 800112c:	40012400 	.word	0x40012400

08001130 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001136:	f107 0308 	add.w	r3, r7, #8
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <MX_TIM3_Init+0x94>)
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <MX_TIM3_Init+0x98>)
 8001150:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <MX_TIM3_Init+0x94>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <MX_TIM3_Init+0x94>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <MX_TIM3_Init+0x94>)
 8001160:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001164:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <MX_TIM3_Init+0x94>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116c:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <MX_TIM3_Init+0x94>)
 800116e:	2200      	movs	r2, #0
 8001170:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001172:	4814      	ldr	r0, [pc, #80]	; (80011c4 <MX_TIM3_Init+0x94>)
 8001174:	f001 ff94 	bl	80030a0 <HAL_TIM_Base_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800117e:	f000 f89b 	bl	80012b8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001186:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001188:	f107 0308 	add.w	r3, r7, #8
 800118c:	4619      	mov	r1, r3
 800118e:	480d      	ldr	r0, [pc, #52]	; (80011c4 <MX_TIM3_Init+0x94>)
 8001190:	f002 f930 	bl	80033f4 <HAL_TIM_ConfigClockSource>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 f88d 	bl	80012b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	4619      	mov	r1, r3
 80011aa:	4806      	ldr	r0, [pc, #24]	; (80011c4 <MX_TIM3_Init+0x94>)
 80011ac:	f002 fb06 	bl	80037bc <HAL_TIMEx_MasterConfigSynchronization>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80011b6:	f000 f87f 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000b4 	.word	0x200000b4
 80011c8:	40000400 	.word	0x40000400

080011cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <MX_USART1_UART_Init+0x50>)
 80011d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f2:	220c      	movs	r2, #12
 80011f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	; (8001218 <MX_USART1_UART_Init+0x4c>)
 8001204:	f002 fb4a 	bl	800389c <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800120e:	f000 f853 	bl	80012b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	200000fc 	.word	0x200000fc
 800121c:	40013800 	.word	0x40013800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_GPIO_Init+0x70>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a19      	ldr	r2, [pc, #100]	; (8001290 <MX_GPIO_Init+0x70>)
 800122c:	f043 0310 	orr.w	r3, r3, #16
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b17      	ldr	r3, [pc, #92]	; (8001290 <MX_GPIO_Init+0x70>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0310 	and.w	r3, r3, #16
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_GPIO_Init+0x70>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <MX_GPIO_Init+0x70>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_GPIO_Init+0x70>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_GPIO_Init+0x70>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <MX_GPIO_Init+0x70>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_GPIO_Init+0x70>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_GPIO_Init+0x70>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a07      	ldr	r2, [pc, #28]	; (8001290 <MX_GPIO_Init+0x70>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b05      	ldr	r3, [pc, #20]	; (8001290 <MX_GPIO_Init+0x70>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001286:	bf00      	nop
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	40021000 	.word	0x40021000

08001294 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a04      	ldr	r2, [pc, #16]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d101      	bne.n	80012aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012a6:	f000 fa7f 	bl	80017a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40000800 	.word	0x40000800

080012b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012bc:	b672      	cpsid	i
}
 80012be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Bricked");
 80012c0:	4803      	ldr	r0, [pc, #12]	; (80012d0 <Error_Handler+0x18>)
 80012c2:	f002 fd6b 	bl	8003d9c <iprintf>
	  HAL_Delay(1000);
 80012c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012ca:	f000 fa89 	bl	80017e0 <HAL_Delay>
	  printf("Bricked");
 80012ce:	e7f7      	b.n	80012c0 <Error_Handler+0x8>
 80012d0:	08004c80 	.word	0x08004c80

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012da:	4b15      	ldr	r3, [pc, #84]	; (8001330 <HAL_MspInit+0x5c>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_MspInit+0x5c>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6193      	str	r3, [r2, #24]
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_MspInit+0x5c>)
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_MspInit+0x5c>)
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	4a0e      	ldr	r2, [pc, #56]	; (8001330 <HAL_MspInit+0x5c>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012fc:	61d3      	str	r3, [r2, #28]
 80012fe:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <HAL_MspInit+0x5c>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <HAL_MspInit+0x60>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131e:	60fb      	str	r3, [r7, #12]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_MspInit+0x60>)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001326:	bf00      	nop
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	40021000 	.word	0x40021000
 8001334:	40010000 	.word	0x40010000

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0310 	add.w	r3, r7, #16
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a14      	ldr	r2, [pc, #80]	; (80013a4 <HAL_ADC_MspInit+0x6c>)
 8001354:	4293      	cmp	r3, r2
 8001356:	d121      	bne.n	800139c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001358:	4b13      	ldr	r3, [pc, #76]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800135e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001370:	4b0d      	ldr	r3, [pc, #52]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a0c      	ldr	r2, [pc, #48]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 8001376:	f043 0304 	orr.w	r3, r3, #4
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b0a      	ldr	r3, [pc, #40]	; (80013a8 <HAL_ADC_MspInit+0x70>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001388:	2303      	movs	r3, #3
 800138a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800138c:	2303      	movs	r3, #3
 800138e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	4619      	mov	r1, r3
 8001396:	4805      	ldr	r0, [pc, #20]	; (80013ac <HAL_ADC_MspInit+0x74>)
 8001398:	f000 ff52 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3720      	adds	r7, #32
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40012400 	.word	0x40012400
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40010800 	.word	0x40010800

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a09      	ldr	r2, [pc, #36]	; (80013e4 <HAL_TIM_Base_MspInit+0x34>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013c4:	69db      	ldr	r3, [r3, #28]
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	61d3      	str	r3, [r2, #28]
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	40000400 	.word	0x40000400
 80013e8:	40021000 	.word	0x40021000

080013ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a1c      	ldr	r2, [pc, #112]	; (8001478 <HAL_UART_MspInit+0x8c>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d131      	bne.n	8001470 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800140c:	4b1b      	ldr	r3, [pc, #108]	; (800147c <HAL_UART_MspInit+0x90>)
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	4a1a      	ldr	r2, [pc, #104]	; (800147c <HAL_UART_MspInit+0x90>)
 8001412:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001416:	6193      	str	r3, [r2, #24]
 8001418:	4b18      	ldr	r3, [pc, #96]	; (800147c <HAL_UART_MspInit+0x90>)
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	4b15      	ldr	r3, [pc, #84]	; (800147c <HAL_UART_MspInit+0x90>)
 8001426:	699b      	ldr	r3, [r3, #24]
 8001428:	4a14      	ldr	r2, [pc, #80]	; (800147c <HAL_UART_MspInit+0x90>)
 800142a:	f043 0304 	orr.w	r3, r3, #4
 800142e:	6193      	str	r3, [r2, #24]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_UART_MspInit+0x90>)
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800143c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
 8001444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0310 	add.w	r3, r7, #16
 800144e:	4619      	mov	r1, r3
 8001450:	480b      	ldr	r0, [pc, #44]	; (8001480 <HAL_UART_MspInit+0x94>)
 8001452:	f000 fef5 	bl	8002240 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800145a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0310 	add.w	r3, r7, #16
 8001468:	4619      	mov	r1, r3
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <HAL_UART_MspInit+0x94>)
 800146c:	f000 fee8 	bl	8002240 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001470:	bf00      	nop
 8001472:	3720      	adds	r7, #32
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40013800 	.word	0x40013800
 800147c:	40021000 	.word	0x40021000
 8001480:	40010800 	.word	0x40010800

08001484 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08e      	sub	sp, #56	; 0x38
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800148c:	2300      	movs	r3, #0
 800148e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001494:	2300      	movs	r3, #0
 8001496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_InitTick+0xe8>)
 800149c:	69db      	ldr	r3, [r3, #28]
 800149e:	4a33      	ldr	r2, [pc, #204]	; (800156c <HAL_InitTick+0xe8>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	61d3      	str	r3, [r2, #28]
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_InitTick+0xe8>)
 80014a8:	69db      	ldr	r3, [r3, #28]
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80014b2:	f107 0210 	add.w	r2, r7, #16
 80014b6:	f107 0314 	add.w	r3, r7, #20
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f001 fc35 	bl	8002d2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80014c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d103      	bne.n	80014d4 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80014cc:	f001 fc06 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80014d0:	6378      	str	r0, [r7, #52]	; 0x34
 80014d2:	e004      	b.n	80014de <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80014d4:	f001 fc02 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80014d8:	4603      	mov	r3, r0
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80014de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014e0:	4a23      	ldr	r2, [pc, #140]	; (8001570 <HAL_InitTick+0xec>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0c9b      	lsrs	r3, r3, #18
 80014e8:	3b01      	subs	r3, #1
 80014ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80014ec:	4b21      	ldr	r3, [pc, #132]	; (8001574 <HAL_InitTick+0xf0>)
 80014ee:	4a22      	ldr	r2, [pc, #136]	; (8001578 <HAL_InitTick+0xf4>)
 80014f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <HAL_InitTick+0xf0>)
 80014f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014f8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80014fa:	4a1e      	ldr	r2, [pc, #120]	; (8001574 <HAL_InitTick+0xf0>)
 80014fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014fe:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_InitTick+0xf0>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001506:	4b1b      	ldr	r3, [pc, #108]	; (8001574 <HAL_InitTick+0xf0>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b19      	ldr	r3, [pc, #100]	; (8001574 <HAL_InitTick+0xf0>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <HAL_InitTick+0xf0>)
 8001514:	f001 fdc4 	bl	80030a0 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800151e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001522:	2b00      	cmp	r3, #0
 8001524:	d11b      	bne.n	800155e <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001526:	4813      	ldr	r0, [pc, #76]	; (8001574 <HAL_InitTick+0xf0>)
 8001528:	f001 fe0a 	bl	8003140 <HAL_TIM_Base_Start_IT>
 800152c:	4603      	mov	r3, r0
 800152e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001532:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001536:	2b00      	cmp	r3, #0
 8001538:	d111      	bne.n	800155e <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800153a:	201e      	movs	r0, #30
 800153c:	f000 fe71 	bl	8002222 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	d808      	bhi.n	8001558 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001546:	2200      	movs	r2, #0
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	201e      	movs	r0, #30
 800154c:	f000 fe4d 	bl	80021ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001550:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_InitTick+0xf8>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
 8001556:	e002      	b.n	800155e <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800155e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001562:	4618      	mov	r0, r3
 8001564:	3738      	adds	r7, #56	; 0x38
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	431bde83 	.word	0x431bde83
 8001574:	20000144 	.word	0x20000144
 8001578:	40000800 	.word	0x40000800
 800157c:	20000004 	.word	0x20000004

08001580 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <NMI_Handler+0x4>

08001586 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <HardFault_Handler+0x4>

0800158c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <MemManage_Handler+0x4>

08001592 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001596:	e7fe      	b.n	8001596 <BusFault_Handler+0x4>

08001598 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler+0x4>

0800159e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bc80      	pop	{r7}
 80015a8:	4770      	bx	lr

080015aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bc80      	pop	{r7}
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr
	...

080015d0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015d4:	4802      	ldr	r0, [pc, #8]	; (80015e0 <TIM4_IRQHandler+0x10>)
 80015d6:	f001 fe05 	bl	80031e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	20000144 	.word	0x20000144

080015e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f0:	2300      	movs	r3, #0
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e00a      	b.n	800160c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015f6:	f3af 8000 	nop.w
 80015fa:	4601      	mov	r1, r0
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	60ba      	str	r2, [r7, #8]
 8001602:	b2ca      	uxtb	r2, r1
 8001604:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	3301      	adds	r3, #1
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	697a      	ldr	r2, [r7, #20]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	429a      	cmp	r2, r3
 8001612:	dbf0      	blt.n	80015f6 <_read+0x12>
  }

  return len;
 8001614:	687b      	ldr	r3, [r7, #4]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b086      	sub	sp, #24
 8001622:	af00      	add	r7, sp, #0
 8001624:	60f8      	str	r0, [r7, #12]
 8001626:	60b9      	str	r1, [r7, #8]
 8001628:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
 800162e:	e009      	b.n	8001644 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	60ba      	str	r2, [r7, #8]
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fa85 	bl	8000b48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	3301      	adds	r3, #1
 8001642:	617b      	str	r3, [r7, #20]
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbf1      	blt.n	8001630 <_write+0x12>
  }
  return len;
 800164c:	687b      	ldr	r3, [r7, #4]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3718      	adds	r7, #24
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <_close>:

int _close(int file)
{
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001662:	4618      	mov	r0, r3
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800167c:	605a      	str	r2, [r3, #4]
  return 0;
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <_isatty>:

int _isatty(int file)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bc80      	pop	{r7}
 800169c:	4770      	bx	lr

0800169e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800169e:	b480      	push	{r7}
 80016a0:	b085      	sub	sp, #20
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c0:	4a14      	ldr	r2, [pc, #80]	; (8001714 <_sbrk+0x5c>)
 80016c2:	4b15      	ldr	r3, [pc, #84]	; (8001718 <_sbrk+0x60>)
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d102      	bne.n	80016da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <_sbrk+0x64>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <_sbrk+0x68>)
 80016d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d207      	bcs.n	80016f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e8:	f002 fcec 	bl	80040c4 <__errno>
 80016ec:	4603      	mov	r3, r0
 80016ee:	220c      	movs	r2, #12
 80016f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f6:	e009      	b.n	800170c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f8:	4b08      	ldr	r3, [pc, #32]	; (800171c <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fe:	4b07      	ldr	r3, [pc, #28]	; (800171c <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <_sbrk+0x64>)
 8001708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170a:	68fb      	ldr	r3, [r7, #12]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20005000 	.word	0x20005000
 8001718:	00000400 	.word	0x00000400
 800171c:	2000018c 	.word	0x2000018c
 8001720:	200002e0 	.word	0x200002e0

08001724 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001728:	bf00      	nop
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001730:	f7ff fff8 	bl	8001724 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001736:	490c      	ldr	r1, [pc, #48]	; (8001768 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001738:	4a0c      	ldr	r2, [pc, #48]	; (800176c <LoopFillZerobss+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800173c:	e002      	b.n	8001744 <LoopCopyDataInit>

0800173e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001740:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001742:	3304      	adds	r3, #4

08001744 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001744:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001746:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001748:	d3f9      	bcc.n	800173e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800174a:	4a09      	ldr	r2, [pc, #36]	; (8001770 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800174c:	4c09      	ldr	r4, [pc, #36]	; (8001774 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001750:	e001      	b.n	8001756 <LoopFillZerobss>

08001752 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001752:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001754:	3204      	adds	r2, #4

08001756 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001756:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001758:	d3fb      	bcc.n	8001752 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800175a:	f002 fcb9 	bl	80040d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800175e:	f7ff fb6b 	bl	8000e38 <main>
  bx lr
 8001762:	4770      	bx	lr
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800176c:	08004d04 	.word	0x08004d04
  ldr r2, =_sbss
 8001770:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001774:	200002e0 	.word	0x200002e0

08001778 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC1_2_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <HAL_Init+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <HAL_Init+0x28>)
 8001786:	f043 0310 	orr.w	r3, r3, #16
 800178a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800178c:	2003      	movs	r0, #3
 800178e:	f000 fd21 	bl	80021d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001792:	200f      	movs	r0, #15
 8001794:	f7ff fe76 	bl	8001484 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001798:	f7ff fd9c 	bl	80012d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_IncTick+0x20>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000190 	.word	0x20000190

080017cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000190 	.word	0x20000190

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b0a      	ldr	r3, [pc, #40]	; (8001824 <HAL_Delay+0x44>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffe0 	bl	80017cc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	bf00      	nop
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001834:	2300      	movs	r3, #0
 8001836:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d101      	bne.n	800184a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e0be      	b.n	80019c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d109      	bne.n	800186c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff fd66 	bl	8001338 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 fbc5 	bl	8001ffc <ADC_ConversionStop_Disable>
 8001872:	4603      	mov	r3, r0
 8001874:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800187a:	f003 0310 	and.w	r3, r3, #16
 800187e:	2b00      	cmp	r3, #0
 8001880:	f040 8099 	bne.w	80019b6 <HAL_ADC_Init+0x18e>
 8001884:	7dfb      	ldrb	r3, [r7, #23]
 8001886:	2b00      	cmp	r3, #0
 8001888:	f040 8095 	bne.w	80019b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001894:	f023 0302 	bic.w	r3, r3, #2
 8001898:	f043 0202 	orr.w	r2, r3, #2
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	7b1b      	ldrb	r3, [r3, #12]
 80018ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80018b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80018c0:	d003      	beq.n	80018ca <HAL_ADC_Init+0xa2>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d102      	bne.n	80018d0 <HAL_ADC_Init+0xa8>
 80018ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018ce:	e000      	b.n	80018d2 <HAL_ADC_Init+0xaa>
 80018d0:	2300      	movs	r3, #0
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	7d1b      	ldrb	r3, [r3, #20]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d119      	bne.n	8001914 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	7b1b      	ldrb	r3, [r3, #12]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d109      	bne.n	80018fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	035a      	lsls	r2, r3, #13
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	e00b      	b.n	8001914 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001900:	f043 0220 	orr.w	r2, r3, #32
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	f043 0201 	orr.w	r2, r3, #1
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	4b28      	ldr	r3, [pc, #160]	; (80019d0 <HAL_ADC_Init+0x1a8>)
 8001930:	4013      	ands	r3, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	430b      	orrs	r3, r1
 800193a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001944:	d003      	beq.n	800194e <HAL_ADC_Init+0x126>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d104      	bne.n	8001958 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	3b01      	subs	r3, #1
 8001954:	051b      	lsls	r3, r3, #20
 8001956:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	430a      	orrs	r2, r1
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_ADC_Init+0x1ac>)
 8001974:	4013      	ands	r3, r2
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	429a      	cmp	r2, r3
 800197a:	d10b      	bne.n	8001994 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001986:	f023 0303 	bic.w	r3, r3, #3
 800198a:	f043 0201 	orr.w	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001992:	e018      	b.n	80019c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001998:	f023 0312 	bic.w	r3, r3, #18
 800199c:	f043 0210 	orr.w	r2, r3, #16
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019a8:	f043 0201 	orr.w	r2, r3, #1
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80019b4:	e007      	b.n	80019c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	f043 0210 	orr.w	r2, r3, #16
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	ffe1f7fd 	.word	0xffe1f7fd
 80019d4:	ff1f0efe 	.word	0xff1f0efe

080019d8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Start+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e098      	b.n	8001b24 <HAL_ADC_Start+0x14c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 faa4 	bl	8001f48 <ADC_Enable>
 8001a00:	4603      	mov	r3, r0
 8001a02:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f040 8087 	bne.w	8001b1a <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a41      	ldr	r2, [pc, #260]	; (8001b2c <HAL_ADC_Start+0x154>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d105      	bne.n	8001a36 <HAL_ADC_Start+0x5e>
 8001a2a:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_ADC_Start+0x158>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d115      	bne.n	8001a62 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d026      	beq.n	8001a9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a60:	e01d      	b.n	8001a9e <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a2f      	ldr	r2, [pc, #188]	; (8001b30 <HAL_ADC_Start+0x158>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Start+0xaa>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_ADC_Start+0x154>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <HAL_ADC_Start+0xc6>
 8001a82:	4b2b      	ldr	r3, [pc, #172]	; (8001b30 <HAL_ADC_Start+0x158>)
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a92:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001a96:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d006      	beq.n	8001ab8 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aae:	f023 0206 	bic.w	r2, r3, #6
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	62da      	str	r2, [r3, #44]	; 0x2c
 8001ab6:	e002      	b.n	8001abe <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f06f 0202 	mvn.w	r2, #2
 8001ace:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001ada:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001ade:	d113      	bne.n	8001b08 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001ae4:	4a11      	ldr	r2, [pc, #68]	; (8001b2c <HAL_ADC_Start+0x154>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d105      	bne.n	8001af6 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_ADC_Start+0x158>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d108      	bne.n	8001b08 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	e00c      	b.n	8001b22 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b16:	609a      	str	r2, [r3, #8]
 8001b18:	e003      	b.n	8001b22 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40012800 	.word	0x40012800
 8001b30:	40012400 	.word	0x40012400

08001b34 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001b34:	b590      	push	{r4, r7, lr}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001b4a:	f7ff fe3f 	bl	80017cc <HAL_GetTick>
 8001b4e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b62:	f043 0220 	orr.w	r2, r3, #32
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0d3      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d131      	bne.n	8001be8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d12a      	bne.n	8001be8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001b92:	e021      	b.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b9a:	d01d      	beq.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_ADC_PollForConversion+0x7e>
 8001ba2:	f7ff fe13 	bl	80017cc <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d212      	bcs.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d10b      	bne.n	8001bd8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc4:	f043 0204 	orr.w	r2, r3, #4
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e0a2      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0d6      	beq.n	8001b94 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001be6:	e070      	b.n	8001cca <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001be8:	4b4f      	ldr	r3, [pc, #316]	; (8001d28 <HAL_ADC_PollForConversion+0x1f4>)
 8001bea:	681c      	ldr	r4, [r3, #0]
 8001bec:	2002      	movs	r0, #2
 8001bee:	f001 f9a1 	bl	8002f34 <HAL_RCCEx_GetPeriphCLKFreq>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	6919      	ldr	r1, [r3, #16]
 8001bfe:	4b4b      	ldr	r3, [pc, #300]	; (8001d2c <HAL_ADC_PollForConversion+0x1f8>)
 8001c00:	400b      	ands	r3, r1
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d118      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x104>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	68d9      	ldr	r1, [r3, #12]
 8001c0c:	4b48      	ldr	r3, [pc, #288]	; (8001d30 <HAL_ADC_PollForConversion+0x1fc>)
 8001c0e:	400b      	ands	r3, r1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d111      	bne.n	8001c38 <HAL_ADC_PollForConversion+0x104>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6919      	ldr	r1, [r3, #16]
 8001c1a:	4b46      	ldr	r3, [pc, #280]	; (8001d34 <HAL_ADC_PollForConversion+0x200>)
 8001c1c:	400b      	ands	r3, r1
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d108      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x100>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68d9      	ldr	r1, [r3, #12]
 8001c28:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_ADC_PollForConversion+0x204>)
 8001c2a:	400b      	ands	r3, r1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <HAL_ADC_PollForConversion+0x100>
 8001c30:	2314      	movs	r3, #20
 8001c32:	e020      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c34:	2329      	movs	r3, #41	; 0x29
 8001c36:	e01e      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6919      	ldr	r1, [r3, #16]
 8001c3e:	4b3d      	ldr	r3, [pc, #244]	; (8001d34 <HAL_ADC_PollForConversion+0x200>)
 8001c40:	400b      	ands	r3, r1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_PollForConversion+0x120>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68d9      	ldr	r1, [r3, #12]
 8001c4c:	4b3a      	ldr	r3, [pc, #232]	; (8001d38 <HAL_ADC_PollForConversion+0x204>)
 8001c4e:	400b      	ands	r3, r1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <HAL_ADC_PollForConversion+0x13c>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	6919      	ldr	r1, [r3, #16]
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_ADC_PollForConversion+0x208>)
 8001c5c:	400b      	ands	r3, r1
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x140>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	68d9      	ldr	r1, [r3, #12]
 8001c68:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <HAL_ADC_PollForConversion+0x208>)
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <HAL_ADC_PollForConversion+0x140>
 8001c70:	2354      	movs	r3, #84	; 0x54
 8001c72:	e000      	b.n	8001c76 <HAL_ADC_PollForConversion+0x142>
 8001c74:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c7c:	e021      	b.n	8001cc2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c84:	d01a      	beq.n	8001cbc <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d007      	beq.n	8001c9c <HAL_ADC_PollForConversion+0x168>
 8001c8c:	f7ff fd9e 	bl	80017cc <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d20f      	bcs.n	8001cbc <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d90b      	bls.n	8001cbc <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ca8:	f043 0204 	orr.w	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e030      	b.n	8001d1e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	d8d9      	bhi.n	8001c7e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f06f 0212 	mvn.w	r2, #18
 8001cd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001cea:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001cee:	d115      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d111      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d105      	bne.n	8001d1c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	371c      	adds	r7, #28
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd90      	pop	{r4, r7, pc}
 8001d26:	bf00      	nop
 8001d28:	20000000 	.word	0x20000000
 8001d2c:	24924924 	.word	0x24924924
 8001d30:	00924924 	.word	0x00924924
 8001d34:	12492492 	.word	0x12492492
 8001d38:	00492492 	.word	0x00492492
 8001d3c:	00249249 	.word	0x00249249

08001d40 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d62:	2300      	movs	r3, #0
 8001d64:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001d66:	2300      	movs	r3, #0
 8001d68:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x20>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e0dc      	b.n	8001f32 <HAL_ADC_ConfigChannel+0x1da>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	2b06      	cmp	r3, #6
 8001d86:	d81c      	bhi.n	8001dc2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	3b05      	subs	r3, #5
 8001d9a:	221f      	movs	r2, #31
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	4019      	ands	r1, r3
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	6818      	ldr	r0, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685a      	ldr	r2, [r3, #4]
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	3b05      	subs	r3, #5
 8001db4:	fa00 f203 	lsl.w	r2, r0, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc0:	e03c      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d81c      	bhi.n	8001e04 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4413      	add	r3, r2
 8001dda:	3b23      	subs	r3, #35	; 0x23
 8001ddc:	221f      	movs	r2, #31
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	4019      	ands	r1, r3
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6818      	ldr	r0, [r3, #0]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685a      	ldr	r2, [r3, #4]
 8001dee:	4613      	mov	r3, r2
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	4413      	add	r3, r2
 8001df4:	3b23      	subs	r3, #35	; 0x23
 8001df6:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	631a      	str	r2, [r3, #48]	; 0x30
 8001e02:	e01b      	b.n	8001e3c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	4613      	mov	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	4413      	add	r3, r2
 8001e14:	3b41      	subs	r3, #65	; 0x41
 8001e16:	221f      	movs	r2, #31
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6818      	ldr	r0, [r3, #0]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3b41      	subs	r3, #65	; 0x41
 8001e30:	fa00 f203 	lsl.w	r2, r0, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b09      	cmp	r3, #9
 8001e42:	d91c      	bls.n	8001e7e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68d9      	ldr	r1, [r3, #12]
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	2207      	movs	r2, #7
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	4019      	ands	r1, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	6898      	ldr	r0, [r3, #8]
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	4413      	add	r3, r2
 8001e6e:	3b1e      	subs	r3, #30
 8001e70:	fa00 f203 	lsl.w	r2, r0, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	430a      	orrs	r2, r1
 8001e7a:	60da      	str	r2, [r3, #12]
 8001e7c:	e019      	b.n	8001eb2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	6919      	ldr	r1, [r3, #16]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	2207      	movs	r2, #7
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43db      	mvns	r3, r3
 8001e96:	4019      	ands	r1, r3
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6898      	ldr	r0, [r3, #8]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d003      	beq.n	8001ec2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ebe:	2b11      	cmp	r3, #17
 8001ec0:	d132      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d125      	bne.n	8001f18 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d126      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001ee8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d11a      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ef2:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a13      	ldr	r2, [pc, #76]	; (8001f44 <HAL_ADC_ConfigChannel+0x1ec>)
 8001ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8001efc:	0c9a      	lsrs	r2, r3, #18
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f08:	e002      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	3b01      	subs	r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f9      	bne.n	8001f0a <HAL_ADC_ConfigChannel+0x1b2>
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	f043 0220 	orr.w	r2, r3, #32
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bc80      	pop	{r7}
 8001f3a:	4770      	bx	lr
 8001f3c:	40012400 	.word	0x40012400
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83

08001f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d040      	beq.n	8001fe8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f042 0201 	orr.w	r2, r2, #1
 8001f74:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001f76:	4b1f      	ldr	r3, [pc, #124]	; (8001ff4 <ADC_Enable+0xac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <ADC_Enable+0xb0>)
 8001f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f80:	0c9b      	lsrs	r3, r3, #18
 8001f82:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f84:	e002      	b.n	8001f8c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	3b01      	subs	r3, #1
 8001f8a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f92:	f7ff fc1b 	bl	80017cc <HAL_GetTick>
 8001f96:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001f98:	e01f      	b.n	8001fda <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001f9a:	f7ff fc17 	bl	80017cc <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d918      	bls.n	8001fda <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d011      	beq.n	8001fda <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fba:	f043 0210 	orr.w	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	f043 0201 	orr.w	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e007      	b.n	8001fea <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d1d8      	bne.n	8001f9a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	431bde83 	.word	0x431bde83

08001ffc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	2b01      	cmp	r3, #1
 8002014:	d12e      	bne.n	8002074 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689a      	ldr	r2, [r3, #8]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f022 0201 	bic.w	r2, r2, #1
 8002024:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002026:	f7ff fbd1 	bl	80017cc <HAL_GetTick>
 800202a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800202c:	e01b      	b.n	8002066 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800202e:	f7ff fbcd 	bl	80017cc <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d914      	bls.n	8002066 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b01      	cmp	r3, #1
 8002048:	d10d      	bne.n	8002066 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800204e:	f043 0210 	orr.w	r2, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e007      	b.n	8002076 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b01      	cmp	r3, #1
 8002072:	d0dc      	beq.n	800202e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3710      	adds	r7, #16
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002090:	4b0c      	ldr	r3, [pc, #48]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020b2:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	60d3      	str	r3, [r2, #12]
}
 80020b8:	bf00      	nop
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020cc:	4b04      	ldr	r3, [pc, #16]	; (80020e0 <__NVIC_GetPriorityGrouping+0x18>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0307 	and.w	r3, r3, #7
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bc80      	pop	{r7}
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000ed00 	.word	0xe000ed00

080020e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	db0b      	blt.n	800210e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f6:	79fb      	ldrb	r3, [r7, #7]
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4906      	ldr	r1, [pc, #24]	; (8002118 <__NVIC_EnableIRQ+0x34>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	2001      	movs	r0, #1
 8002106:	fa00 f202 	lsl.w	r2, r0, r2
 800210a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800210e:	bf00      	nop
 8002110:	370c      	adds	r7, #12
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	e000e100 	.word	0xe000e100

0800211c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	6039      	str	r1, [r7, #0]
 8002126:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002128:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212c:	2b00      	cmp	r3, #0
 800212e:	db0a      	blt.n	8002146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	b2da      	uxtb	r2, r3
 8002134:	490c      	ldr	r1, [pc, #48]	; (8002168 <__NVIC_SetPriority+0x4c>)
 8002136:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213a:	0112      	lsls	r2, r2, #4
 800213c:	b2d2      	uxtb	r2, r2
 800213e:	440b      	add	r3, r1
 8002140:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002144:	e00a      	b.n	800215c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	b2da      	uxtb	r2, r3
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <__NVIC_SetPriority+0x50>)
 800214c:	79fb      	ldrb	r3, [r7, #7]
 800214e:	f003 030f 	and.w	r3, r3, #15
 8002152:	3b04      	subs	r3, #4
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	440b      	add	r3, r1
 800215a:	761a      	strb	r2, [r3, #24]
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	bc80      	pop	{r7}
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	e000e100 	.word	0xe000e100
 800216c:	e000ed00 	.word	0xe000ed00

08002170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	; 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f1c3 0307 	rsb	r3, r3, #7
 800218a:	2b04      	cmp	r3, #4
 800218c:	bf28      	it	cs
 800218e:	2304      	movcs	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	3304      	adds	r3, #4
 8002196:	2b06      	cmp	r3, #6
 8002198:	d902      	bls.n	80021a0 <NVIC_EncodePriority+0x30>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	3b03      	subs	r3, #3
 800219e:	e000      	b.n	80021a2 <NVIC_EncodePriority+0x32>
 80021a0:	2300      	movs	r3, #0
 80021a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021a8:	69bb      	ldr	r3, [r7, #24]
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	401a      	ands	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa01 f303 	lsl.w	r3, r1, r3
 80021c2:	43d9      	mvns	r1, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	4313      	orrs	r3, r2
         );
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3724      	adds	r7, #36	; 0x24
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f7ff ff4f 	bl	8002080 <__NVIC_SetPriorityGrouping>
}
 80021e2:	bf00      	nop
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	607a      	str	r2, [r7, #4]
 80021f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021fc:	f7ff ff64 	bl	80020c8 <__NVIC_GetPriorityGrouping>
 8002200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	6978      	ldr	r0, [r7, #20]
 8002208:	f7ff ffb2 	bl	8002170 <NVIC_EncodePriority>
 800220c:	4602      	mov	r2, r0
 800220e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff ff81 	bl	800211c <__NVIC_SetPriority>
}
 800221a:	bf00      	nop
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b082      	sub	sp, #8
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	4618      	mov	r0, r3
 8002232:	f7ff ff57 	bl	80020e4 <__NVIC_EnableIRQ>
}
 8002236:	bf00      	nop
 8002238:	3708      	adds	r7, #8
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002240:	b480      	push	{r7}
 8002242:	b08b      	sub	sp, #44	; 0x2c
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002252:	e169      	b.n	8002528 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002254:	2201      	movs	r2, #1
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	429a      	cmp	r2, r3
 800226e:	f040 8158 	bne.w	8002522 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4a9a      	ldr	r2, [pc, #616]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d05e      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 800227c:	4a98      	ldr	r2, [pc, #608]	; (80024e0 <HAL_GPIO_Init+0x2a0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d875      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 8002282:	4a98      	ldr	r2, [pc, #608]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d058      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002288:	4a96      	ldr	r2, [pc, #600]	; (80024e4 <HAL_GPIO_Init+0x2a4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d86f      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800228e:	4a96      	ldr	r2, [pc, #600]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d052      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 8002294:	4a94      	ldr	r2, [pc, #592]	; (80024e8 <HAL_GPIO_Init+0x2a8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d869      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 800229a:	4a94      	ldr	r2, [pc, #592]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04c      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022a0:	4a92      	ldr	r2, [pc, #584]	; (80024ec <HAL_GPIO_Init+0x2ac>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d863      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022a6:	4a92      	ldr	r2, [pc, #584]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d046      	beq.n	800233a <HAL_GPIO_Init+0xfa>
 80022ac:	4a90      	ldr	r2, [pc, #576]	; (80024f0 <HAL_GPIO_Init+0x2b0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d85d      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022b2:	2b12      	cmp	r3, #18
 80022b4:	d82a      	bhi.n	800230c <HAL_GPIO_Init+0xcc>
 80022b6:	2b12      	cmp	r3, #18
 80022b8:	d859      	bhi.n	800236e <HAL_GPIO_Init+0x12e>
 80022ba:	a201      	add	r2, pc, #4	; (adr r2, 80022c0 <HAL_GPIO_Init+0x80>)
 80022bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c0:	0800233b 	.word	0x0800233b
 80022c4:	08002315 	.word	0x08002315
 80022c8:	08002327 	.word	0x08002327
 80022cc:	08002369 	.word	0x08002369
 80022d0:	0800236f 	.word	0x0800236f
 80022d4:	0800236f 	.word	0x0800236f
 80022d8:	0800236f 	.word	0x0800236f
 80022dc:	0800236f 	.word	0x0800236f
 80022e0:	0800236f 	.word	0x0800236f
 80022e4:	0800236f 	.word	0x0800236f
 80022e8:	0800236f 	.word	0x0800236f
 80022ec:	0800236f 	.word	0x0800236f
 80022f0:	0800236f 	.word	0x0800236f
 80022f4:	0800236f 	.word	0x0800236f
 80022f8:	0800236f 	.word	0x0800236f
 80022fc:	0800236f 	.word	0x0800236f
 8002300:	0800236f 	.word	0x0800236f
 8002304:	0800231d 	.word	0x0800231d
 8002308:	08002331 	.word	0x08002331
 800230c:	4a79      	ldr	r2, [pc, #484]	; (80024f4 <HAL_GPIO_Init+0x2b4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d013      	beq.n	800233a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002312:	e02c      	b.n	800236e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e029      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	3304      	adds	r3, #4
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e024      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	3308      	adds	r3, #8
 800232c:	623b      	str	r3, [r7, #32]
          break;
 800232e:	e01f      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	330c      	adds	r3, #12
 8002336:	623b      	str	r3, [r7, #32]
          break;
 8002338:	e01a      	b.n	8002370 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002342:	2304      	movs	r3, #4
 8002344:	623b      	str	r3, [r7, #32]
          break;
 8002346:	e013      	b.n	8002370 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b01      	cmp	r3, #1
 800234e:	d105      	bne.n	800235c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002350:	2308      	movs	r3, #8
 8002352:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69fa      	ldr	r2, [r7, #28]
 8002358:	611a      	str	r2, [r3, #16]
          break;
 800235a:	e009      	b.n	8002370 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800235c:	2308      	movs	r3, #8
 800235e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	69fa      	ldr	r2, [r7, #28]
 8002364:	615a      	str	r2, [r3, #20]
          break;
 8002366:	e003      	b.n	8002370 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002368:	2300      	movs	r3, #0
 800236a:	623b      	str	r3, [r7, #32]
          break;
 800236c:	e000      	b.n	8002370 <HAL_GPIO_Init+0x130>
          break;
 800236e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	2bff      	cmp	r3, #255	; 0xff
 8002374:	d801      	bhi.n	800237a <HAL_GPIO_Init+0x13a>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	e001      	b.n	800237e <HAL_GPIO_Init+0x13e>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	3304      	adds	r3, #4
 800237e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	2bff      	cmp	r3, #255	; 0xff
 8002384:	d802      	bhi.n	800238c <HAL_GPIO_Init+0x14c>
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	e002      	b.n	8002392 <HAL_GPIO_Init+0x152>
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	3b08      	subs	r3, #8
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	210f      	movs	r1, #15
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	fa01 f303 	lsl.w	r3, r1, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	401a      	ands	r2, r3
 80023a4:	6a39      	ldr	r1, [r7, #32]
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ac:	431a      	orrs	r2, r3
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 80b1 	beq.w	8002522 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023c0:	4b4d      	ldr	r3, [pc, #308]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	4a4c      	ldr	r2, [pc, #304]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6193      	str	r3, [r2, #24]
 80023cc:	4b4a      	ldr	r3, [pc, #296]	; (80024f8 <HAL_GPIO_Init+0x2b8>)
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	60bb      	str	r3, [r7, #8]
 80023d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	089b      	lsrs	r3, r3, #2
 80023de:	3302      	adds	r3, #2
 80023e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	220f      	movs	r2, #15
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	68fa      	ldr	r2, [r7, #12]
 80023f8:	4013      	ands	r3, r2
 80023fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a40      	ldr	r2, [pc, #256]	; (8002500 <HAL_GPIO_Init+0x2c0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d013      	beq.n	800242c <HAL_GPIO_Init+0x1ec>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a3f      	ldr	r2, [pc, #252]	; (8002504 <HAL_GPIO_Init+0x2c4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d00d      	beq.n	8002428 <HAL_GPIO_Init+0x1e8>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	4a3e      	ldr	r2, [pc, #248]	; (8002508 <HAL_GPIO_Init+0x2c8>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d007      	beq.n	8002424 <HAL_GPIO_Init+0x1e4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a3d      	ldr	r2, [pc, #244]	; (800250c <HAL_GPIO_Init+0x2cc>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d101      	bne.n	8002420 <HAL_GPIO_Init+0x1e0>
 800241c:	2303      	movs	r3, #3
 800241e:	e006      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002420:	2304      	movs	r3, #4
 8002422:	e004      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002424:	2302      	movs	r3, #2
 8002426:	e002      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 8002428:	2301      	movs	r3, #1
 800242a:	e000      	b.n	800242e <HAL_GPIO_Init+0x1ee>
 800242c:	2300      	movs	r3, #0
 800242e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002430:	f002 0203 	and.w	r2, r2, #3
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4093      	lsls	r3, r2
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	4313      	orrs	r3, r2
 800243c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800243e:	492f      	ldr	r1, [pc, #188]	; (80024fc <HAL_GPIO_Init+0x2bc>)
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002458:	4b2d      	ldr	r3, [pc, #180]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	492c      	ldr	r1, [pc, #176]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	4313      	orrs	r3, r2
 8002462:	608b      	str	r3, [r1, #8]
 8002464:	e006      	b.n	8002474 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002466:	4b2a      	ldr	r3, [pc, #168]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002468:	689a      	ldr	r2, [r3, #8]
 800246a:	69bb      	ldr	r3, [r7, #24]
 800246c:	43db      	mvns	r3, r3
 800246e:	4928      	ldr	r1, [pc, #160]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002470:	4013      	ands	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d006      	beq.n	800248e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002480:	4b23      	ldr	r3, [pc, #140]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002482:	68da      	ldr	r2, [r3, #12]
 8002484:	4922      	ldr	r1, [pc, #136]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	4313      	orrs	r3, r2
 800248a:	60cb      	str	r3, [r1, #12]
 800248c:	e006      	b.n	800249c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800248e:	4b20      	ldr	r3, [pc, #128]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002490:	68da      	ldr	r2, [r3, #12]
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	43db      	mvns	r3, r3
 8002496:	491e      	ldr	r1, [pc, #120]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 8002498:	4013      	ands	r3, r2
 800249a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d006      	beq.n	80024b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80024a8:	4b19      	ldr	r3, [pc, #100]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	604b      	str	r3, [r1, #4]
 80024b4:	e006      	b.n	80024c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024b6:	4b16      	ldr	r3, [pc, #88]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	43db      	mvns	r3, r3
 80024be:	4914      	ldr	r1, [pc, #80]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024c0:	4013      	ands	r3, r2
 80024c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d021      	beq.n	8002514 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024d0:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	490e      	ldr	r1, [pc, #56]	; (8002510 <HAL_GPIO_Init+0x2d0>)
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	600b      	str	r3, [r1, #0]
 80024dc:	e021      	b.n	8002522 <HAL_GPIO_Init+0x2e2>
 80024de:	bf00      	nop
 80024e0:	10320000 	.word	0x10320000
 80024e4:	10310000 	.word	0x10310000
 80024e8:	10220000 	.word	0x10220000
 80024ec:	10210000 	.word	0x10210000
 80024f0:	10120000 	.word	0x10120000
 80024f4:	10110000 	.word	0x10110000
 80024f8:	40021000 	.word	0x40021000
 80024fc:	40010000 	.word	0x40010000
 8002500:	40010800 	.word	0x40010800
 8002504:	40010c00 	.word	0x40010c00
 8002508:	40011000 	.word	0x40011000
 800250c:	40011400 	.word	0x40011400
 8002510:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002514:	4b0b      	ldr	r3, [pc, #44]	; (8002544 <HAL_GPIO_Init+0x304>)
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	43db      	mvns	r3, r3
 800251c:	4909      	ldr	r1, [pc, #36]	; (8002544 <HAL_GPIO_Init+0x304>)
 800251e:	4013      	ands	r3, r2
 8002520:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	3301      	adds	r3, #1
 8002526:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	fa22 f303 	lsr.w	r3, r2, r3
 8002532:	2b00      	cmp	r3, #0
 8002534:	f47f ae8e 	bne.w	8002254 <HAL_GPIO_Init+0x14>
  }
}
 8002538:	bf00      	nop
 800253a:	bf00      	nop
 800253c:	372c      	adds	r7, #44	; 0x2c
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	40010400 	.word	0x40010400

08002548 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e272      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 8087 	beq.w	8002676 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002568:	4b92      	ldr	r3, [pc, #584]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 030c 	and.w	r3, r3, #12
 8002570:	2b04      	cmp	r3, #4
 8002572:	d00c      	beq.n	800258e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002574:	4b8f      	ldr	r3, [pc, #572]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 030c 	and.w	r3, r3, #12
 800257c:	2b08      	cmp	r3, #8
 800257e:	d112      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
 8002580:	4b8c      	ldr	r3, [pc, #560]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800258c:	d10b      	bne.n	80025a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258e:	4b89      	ldr	r3, [pc, #548]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d06c      	beq.n	8002674 <HAL_RCC_OscConfig+0x12c>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d168      	bne.n	8002674 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e24c      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ae:	d106      	bne.n	80025be <HAL_RCC_OscConfig+0x76>
 80025b0:	4b80      	ldr	r3, [pc, #512]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7f      	ldr	r2, [pc, #508]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ba:	6013      	str	r3, [r2, #0]
 80025bc:	e02e      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCC_OscConfig+0x98>
 80025c6:	4b7b      	ldr	r3, [pc, #492]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7a      	ldr	r2, [pc, #488]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	4b78      	ldr	r3, [pc, #480]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	e01d      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e8:	d10c      	bne.n	8002604 <HAL_RCC_OscConfig+0xbc>
 80025ea:	4b72      	ldr	r3, [pc, #456]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a71      	ldr	r2, [pc, #452]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	4b6f      	ldr	r3, [pc, #444]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a6e      	ldr	r2, [pc, #440]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002600:	6013      	str	r3, [r2, #0]
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0xd4>
 8002604:	4b6b      	ldr	r3, [pc, #428]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6a      	ldr	r2, [pc, #424]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800260a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800260e:	6013      	str	r3, [r2, #0]
 8002610:	4b68      	ldr	r3, [pc, #416]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a67      	ldr	r2, [pc, #412]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800261a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d013      	beq.n	800264c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff f8d2 	bl	80017cc <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff f8ce 	bl	80017cc <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e200      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b5d      	ldr	r3, [pc, #372]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0xe4>
 800264a:	e014      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264c:	f7ff f8be 	bl	80017cc <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002652:	e008      	b.n	8002666 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002654:	f7ff f8ba 	bl	80017cc <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b64      	cmp	r3, #100	; 0x64
 8002660:	d901      	bls.n	8002666 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e1ec      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002666:	4b53      	ldr	r3, [pc, #332]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f0      	bne.n	8002654 <HAL_RCC_OscConfig+0x10c>
 8002672:	e000      	b.n	8002676 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d063      	beq.n	800274a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002682:	4b4c      	ldr	r3, [pc, #304]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f003 030c 	and.w	r3, r3, #12
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268e:	4b49      	ldr	r3, [pc, #292]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 030c 	and.w	r3, r3, #12
 8002696:	2b08      	cmp	r3, #8
 8002698:	d11c      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
 800269a:	4b46      	ldr	r3, [pc, #280]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d116      	bne.n	80026d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d005      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d001      	beq.n	80026be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e1c0      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4939      	ldr	r1, [pc, #228]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	e03a      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d020      	beq.n	800271e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026dc:	4b36      	ldr	r3, [pc, #216]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 80026de:	2201      	movs	r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7ff f873 	bl	80017cc <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ea:	f7ff f86f 	bl	80017cc <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e1a1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fc:	4b2d      	ldr	r3, [pc, #180]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0302 	and.w	r3, r3, #2
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0f0      	beq.n	80026ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	695b      	ldr	r3, [r3, #20]
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4927      	ldr	r1, [pc, #156]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <HAL_RCC_OscConfig+0x270>)
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f852 	bl	80017cc <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272c:	f7ff f84e 	bl	80017cc <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e180      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03a      	beq.n	80027cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d019      	beq.n	8002792 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275e:	4b17      	ldr	r3, [pc, #92]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002764:	f7ff f832 	bl	80017cc <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800276c:	f7ff f82e 	bl	80017cc <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e160      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277e:	4b0d      	ldr	r3, [pc, #52]	; (80027b4 <HAL_RCC_OscConfig+0x26c>)
 8002780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800278a:	2001      	movs	r0, #1
 800278c:	f000 fafe 	bl	8002d8c <RCC_Delay>
 8002790:	e01c      	b.n	80027cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002792:	4b0a      	ldr	r3, [pc, #40]	; (80027bc <HAL_RCC_OscConfig+0x274>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002798:	f7ff f818 	bl	80017cc <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279e:	e00f      	b.n	80027c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a0:	f7ff f814 	bl	80017cc <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d908      	bls.n	80027c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e146      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	42420000 	.word	0x42420000
 80027bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c0:	4b92      	ldr	r3, [pc, #584]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	f003 0302 	and.w	r3, r3, #2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1e9      	bne.n	80027a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a6 	beq.w	8002926 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027de:	4b8b      	ldr	r3, [pc, #556]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027e0:	69db      	ldr	r3, [r3, #28]
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10d      	bne.n	8002806 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	4b88      	ldr	r3, [pc, #544]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	69db      	ldr	r3, [r3, #28]
 80027ee:	4a87      	ldr	r2, [pc, #540]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f4:	61d3      	str	r3, [r2, #28]
 80027f6:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002802:	2301      	movs	r3, #1
 8002804:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002806:	4b82      	ldr	r3, [pc, #520]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d118      	bne.n	8002844 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002812:	4b7f      	ldr	r3, [pc, #508]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a7e      	ldr	r2, [pc, #504]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281e:	f7fe ffd5 	bl	80017cc <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002826:	f7fe ffd1 	bl	80017cc <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b64      	cmp	r3, #100	; 0x64
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e103      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002838:	4b75      	ldr	r3, [pc, #468]	; (8002a10 <HAL_RCC_OscConfig+0x4c8>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d106      	bne.n	800285a <HAL_RCC_OscConfig+0x312>
 800284c:	4b6f      	ldr	r3, [pc, #444]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4a6e      	ldr	r2, [pc, #440]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	6213      	str	r3, [r2, #32]
 8002858:	e02d      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCC_OscConfig+0x334>
 8002862:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4a69      	ldr	r2, [pc, #420]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002868:	f023 0301 	bic.w	r3, r3, #1
 800286c:	6213      	str	r3, [r2, #32]
 800286e:	4b67      	ldr	r3, [pc, #412]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	4a66      	ldr	r2, [pc, #408]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002874:	f023 0304 	bic.w	r3, r3, #4
 8002878:	6213      	str	r3, [r2, #32]
 800287a:	e01c      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d10c      	bne.n	800289e <HAL_RCC_OscConfig+0x356>
 8002884:	4b61      	ldr	r3, [pc, #388]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002886:	6a1b      	ldr	r3, [r3, #32]
 8002888:	4a60      	ldr	r2, [pc, #384]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800288a:	f043 0304 	orr.w	r3, r3, #4
 800288e:	6213      	str	r3, [r2, #32]
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	4a5d      	ldr	r2, [pc, #372]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002896:	f043 0301 	orr.w	r3, r3, #1
 800289a:	6213      	str	r3, [r2, #32]
 800289c:	e00b      	b.n	80028b6 <HAL_RCC_OscConfig+0x36e>
 800289e:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f023 0301 	bic.w	r3, r3, #1
 80028a8:	6213      	str	r3, [r2, #32]
 80028aa:	4b58      	ldr	r3, [pc, #352]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4a57      	ldr	r2, [pc, #348]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	f023 0304 	bic.w	r3, r3, #4
 80028b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d015      	beq.n	80028ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028be:	f7fe ff85 	bl	80017cc <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	e00a      	b.n	80028dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe ff81 	bl	80017cc <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d901      	bls.n	80028dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e0b1      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028dc:	4b4b      	ldr	r3, [pc, #300]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d0ee      	beq.n	80028c6 <HAL_RCC_OscConfig+0x37e>
 80028e8:	e014      	b.n	8002914 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ea:	f7fe ff6f 	bl	80017cc <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f0:	e00a      	b.n	8002908 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f2:	f7fe ff6b 	bl	80017cc <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002900:	4293      	cmp	r3, r2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e09b      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002908:	4b40      	ldr	r3, [pc, #256]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	f003 0302 	and.w	r3, r3, #2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1ee      	bne.n	80028f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d105      	bne.n	8002926 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800291a:	4b3c      	ldr	r3, [pc, #240]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4a3b      	ldr	r2, [pc, #236]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002924:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8087 	beq.w	8002a3e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002930:	4b36      	ldr	r3, [pc, #216]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f003 030c 	and.w	r3, r3, #12
 8002938:	2b08      	cmp	r3, #8
 800293a:	d061      	beq.n	8002a00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	69db      	ldr	r3, [r3, #28]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d146      	bne.n	80029d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002944:	4b33      	ldr	r3, [pc, #204]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294a:	f7fe ff3f 	bl	80017cc <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe ff3b 	bl	80017cc <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e06d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002964:	4b29      	ldr	r3, [pc, #164]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002978:	d108      	bne.n	800298c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800297a:	4b24      	ldr	r3, [pc, #144]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	4921      	ldr	r1, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 8002988:	4313      	orrs	r3, r2
 800298a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298c:	4b1f      	ldr	r3, [pc, #124]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a19      	ldr	r1, [r3, #32]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	430b      	orrs	r3, r1
 800299e:	491b      	ldr	r1, [pc, #108]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029aa:	f7fe ff0f 	bl	80017cc <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b2:	f7fe ff0b 	bl	80017cc <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e03d      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c4:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x46a>
 80029d0:	e035      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b10      	ldr	r3, [pc, #64]	; (8002a14 <HAL_RCC_OscConfig+0x4cc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7fe fef8 	bl	80017cc <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7fe fef4 	bl	80017cc <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e026      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029f2:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x498>
 80029fe:	e01e      	b.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d107      	bne.n	8002a18 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e019      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40007000 	.word	0x40007000
 8002a14:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_OscConfig+0x500>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d106      	bne.n	8002a3a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d001      	beq.n	8002a3e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000

08002a4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a60:	4b6a      	ldr	r3, [pc, #424]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d910      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6e:	4b67      	ldr	r3, [pc, #412]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 0207 	bic.w	r2, r3, #7
 8002a76:	4965      	ldr	r1, [pc, #404]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d001      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e0b8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0302 	and.w	r3, r3, #2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d005      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa8:	4b59      	ldr	r3, [pc, #356]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a58      	ldr	r2, [pc, #352]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ab2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac0:	4b53      	ldr	r3, [pc, #332]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	4a52      	ldr	r2, [pc, #328]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002aca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	494d      	ldr	r1, [pc, #308]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d040      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d115      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e07f      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d109      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e073      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b1a:	4b3d      	ldr	r3, [pc, #244]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06b      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b2a:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f023 0203 	bic.w	r2, r3, #3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4936      	ldr	r1, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b3c:	f7fe fe46 	bl	80017cc <HAL_GetTick>
 8002b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	e00a      	b.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b44:	f7fe fe42 	bl	80017cc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e053      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b5a:	4b2d      	ldr	r3, [pc, #180]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f003 020c 	and.w	r2, r3, #12
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d1eb      	bne.n	8002b44 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b6c:	4b27      	ldr	r3, [pc, #156]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d210      	bcs.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f023 0207 	bic.w	r2, r3, #7
 8002b82:	4922      	ldr	r1, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8a:	4b20      	ldr	r3, [pc, #128]	; (8002c0c <HAL_RCC_ClockConfig+0x1c0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d001      	beq.n	8002b9c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e032      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	4916      	ldr	r1, [pc, #88]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d009      	beq.n	8002bda <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc6:	4b12      	ldr	r3, [pc, #72]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	490e      	ldr	r1, [pc, #56]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bda:	f000 f821 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	f003 030f 	and.w	r3, r3, #15
 8002bea:	490a      	ldr	r1, [pc, #40]	; (8002c14 <HAL_RCC_ClockConfig+0x1c8>)
 8002bec:	5ccb      	ldrb	r3, [r1, r3]
 8002bee:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf6:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1d0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe fc42 	bl	8001484 <HAL_InitTick>

  return HAL_OK;
 8002c00:	2300      	movs	r3, #0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	08004c88 	.word	0x08004c88
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	60bb      	str	r3, [r7, #8]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c3a:	4b1e      	ldr	r3, [pc, #120]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f003 030c 	and.w	r3, r3, #12
 8002c46:	2b04      	cmp	r3, #4
 8002c48:	d002      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x30>
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4e:	e027      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c52:	613b      	str	r3, [r7, #16]
      break;
 8002c54:	e027      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	0c9b      	lsrs	r3, r3, #18
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	4a17      	ldr	r2, [pc, #92]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c60:	5cd3      	ldrb	r3, [r2, r3]
 8002c62:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d010      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6e:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	0c5b      	lsrs	r3, r3, #17
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c82:	fb03 f202 	mul.w	r2, r3, r2
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c8c:	617b      	str	r3, [r7, #20]
 8002c8e:	e004      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4a0c      	ldr	r2, [pc, #48]	; (8002cc4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c94:	fb02 f303 	mul.w	r3, r2, r3
 8002c98:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	613b      	str	r3, [r7, #16]
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ca2:	613b      	str	r3, [r7, #16]
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	693b      	ldr	r3, [r7, #16]
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	371c      	adds	r7, #28
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	007a1200 	.word	0x007a1200
 8002cbc:	08004ca0 	.word	0x08004ca0
 8002cc0:	08004cb0 	.word	0x08004cb0
 8002cc4:	003d0900 	.word	0x003d0900

08002cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ccc:	4b02      	ldr	r3, [pc, #8]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cce:	681b      	ldr	r3, [r3, #0]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	20000000 	.word	0x20000000

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff2 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	08004c98 	.word	0x08004c98

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffde 	bl	8002cc8 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0adb      	lsrs	r3, r3, #11
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004c98 	.word	0x08004c98

08002d2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	220f      	movs	r2, #15
 8002d3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d3c:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <HAL_RCC_GetClockConfig+0x58>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_RCC_GetClockConfig+0x58>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_GetClockConfig+0x58>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_RCC_GetClockConfig+0x58>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d6e:	4b06      	ldr	r3, [pc, #24]	; (8002d88 <HAL_RCC_GetClockConfig+0x5c>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0207 	and.w	r2, r3, #7
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bc80      	pop	{r7}
 8002d82:	4770      	bx	lr
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d94:	4b0a      	ldr	r3, [pc, #40]	; (8002dc0 <RCC_Delay+0x34>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a0a      	ldr	r2, [pc, #40]	; (8002dc4 <RCC_Delay+0x38>)
 8002d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9e:	0a5b      	lsrs	r3, r3, #9
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002da8:	bf00      	nop
  }
  while (Delay --);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e5a      	subs	r2, r3, #1
 8002dae:	60fa      	str	r2, [r7, #12]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d1f9      	bne.n	8002da8 <RCC_Delay+0x1c>
}
 8002db4:	bf00      	nop
 8002db6:	bf00      	nop
 8002db8:	3714      	adds	r7, #20
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bc80      	pop	{r7}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	10624dd3 	.word	0x10624dd3

08002dc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	613b      	str	r3, [r7, #16]
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d07d      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002de4:	2300      	movs	r3, #0
 8002de6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de8:	4b4f      	ldr	r3, [pc, #316]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10d      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b4c      	ldr	r3, [pc, #304]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4a4b      	ldr	r2, [pc, #300]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	61d3      	str	r3, [r2, #28]
 8002e00:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e10:	4b46      	ldr	r3, [pc, #280]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d118      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1c:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a42      	ldr	r2, [pc, #264]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e28:	f7fe fcd0 	bl	80017cc <HAL_GetTick>
 8002e2c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	e008      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e30:	f7fe fccc 	bl	80017cc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b64      	cmp	r3, #100	; 0x64
 8002e3c:	d901      	bls.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e06d      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e42:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d0f0      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4e:	4b36      	ldr	r3, [pc, #216]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e50:	6a1b      	ldr	r3, [r3, #32]
 8002e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e56:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d02e      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d027      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6c:	4b2e      	ldr	r3, [pc, #184]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e74:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e76:	4b2e      	ldr	r3, [pc, #184]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e78:	2201      	movs	r2, #1
 8002e7a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7c:	4b2c      	ldr	r3, [pc, #176]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e82:	4a29      	ldr	r2, [pc, #164]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d014      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e92:	f7fe fc9b 	bl	80017cc <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe fc97 	bl	80017cc <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e036      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b1d      	ldr	r3, [pc, #116]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ebe:	6a1b      	ldr	r3, [r3, #32]
 8002ec0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4917      	ldr	r1, [pc, #92]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ece:	7dfb      	ldrb	r3, [r7, #23]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d105      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ed6:	69db      	ldr	r3, [r3, #28]
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ede:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eec:	4b0e      	ldr	r3, [pc, #56]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	490b      	ldr	r1, [pc, #44]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d008      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f0a:	4b07      	ldr	r3, [pc, #28]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	4904      	ldr	r1, [pc, #16]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3718      	adds	r7, #24
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	40021000 	.word	0x40021000
 8002f2c:	40007000 	.word	0x40007000
 8002f30:	42420440 	.word	0x42420440

08002f34 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	2300      	movs	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2b10      	cmp	r3, #16
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b10      	cmp	r3, #16
 8002f5a:	f200 808a 	bhi.w	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d045      	beq.n	8002ff0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d075      	beq.n	8003056 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002f6a:	e082      	b.n	8003072 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002f6c:	4b46      	ldr	r3, [pc, #280]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002f72:	4b45      	ldr	r3, [pc, #276]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d07b      	beq.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	0c9b      	lsrs	r3, r3, #18
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	4a41      	ldr	r2, [pc, #260]	; (800308c <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002f88:	5cd3      	ldrb	r3, [r2, r3]
 8002f8a:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d015      	beq.n	8002fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002f96:	4b3c      	ldr	r3, [pc, #240]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	0c5b      	lsrs	r3, r3, #17
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00d      	beq.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002fb0:	4a38      	ldr	r2, [pc, #224]	; (8003094 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	fb02 f303 	mul.w	r3, r2, r3
 8002fbe:	61fb      	str	r3, [r7, #28]
 8002fc0:	e004      	b.n	8002fcc <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	4a34      	ldr	r2, [pc, #208]	; (8003098 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002fc6:	fb02 f303 	mul.w	r3, r2, r3
 8002fca:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002fcc:	4b2e      	ldr	r3, [pc, #184]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd8:	d102      	bne.n	8002fe0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	61bb      	str	r3, [r7, #24]
      break;
 8002fde:	e04a      	b.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4a2d      	ldr	r2, [pc, #180]	; (800309c <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	085b      	lsrs	r3, r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
      break;
 8002fee:	e042      	b.n	8003076 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ff0:	4b25      	ldr	r3, [pc, #148]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003000:	d108      	bne.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 800300c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003010:	61bb      	str	r3, [r7, #24]
 8003012:	e01f      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800301e:	d109      	bne.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003020:	4b19      	ldr	r3, [pc, #100]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 800302c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	e00f      	b.n	8003054 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800303e:	d11c      	bne.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d016      	beq.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 800304c:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003050:	61bb      	str	r3, [r7, #24]
      break;
 8003052:	e012      	b.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003054:	e011      	b.n	800307a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003056:	f7ff fe55 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 800305a:	4602      	mov	r2, r0
 800305c:	4b0a      	ldr	r3, [pc, #40]	; (8003088 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	0b9b      	lsrs	r3, r3, #14
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	3301      	adds	r3, #1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	fbb2 f3f3 	udiv	r3, r2, r3
 800306e:	61bb      	str	r3, [r7, #24]
      break;
 8003070:	e004      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003072:	bf00      	nop
 8003074:	e002      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003076:	bf00      	nop
 8003078:	e000      	b.n	800307c <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800307a:	bf00      	nop
    }
  }
  return (frequency);
 800307c:	69bb      	ldr	r3, [r7, #24]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40021000 	.word	0x40021000
 800308c:	08004cb4 	.word	0x08004cb4
 8003090:	08004cc4 	.word	0x08004cc4
 8003094:	007a1200 	.word	0x007a1200
 8003098:	003d0900 	.word	0x003d0900
 800309c:	aaaaaaab 	.word	0xaaaaaaab

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe f972 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fa74 	bl	80035cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e03a      	b.n	80031ce <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <HAL_TIM_Base_Start_IT+0x98>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x58>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003182:	d009      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x58>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a14      	ldr	r2, [pc, #80]	; (80031dc <HAL_TIM_Base_Start_IT+0x9c>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_TIM_Base_Start_IT+0x58>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a13      	ldr	r2, [pc, #76]	; (80031e0 <HAL_TIM_Base_Start_IT+0xa0>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d111      	bne.n	80031bc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2b06      	cmp	r3, #6
 80031a8:	d010      	beq.n	80031cc <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0201 	orr.w	r2, r2, #1
 80031b8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ba:	e007      	b.n	80031cc <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f042 0201 	orr.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800

080031e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0302 	and.w	r3, r3, #2
 8003204:	2b02      	cmp	r3, #2
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0202 	mvn.w	r2, #2
 8003210:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f9b4 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f9a7 	bl	8003582 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f9b6 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0304 	and.w	r3, r3, #4
 800324a:	2b04      	cmp	r3, #4
 800324c:	d122      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b04      	cmp	r3, #4
 800325a:	d11b      	bne.n	8003294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0204 	mvn.w	r2, #4
 8003264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f98a 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 8003280:	e005      	b.n	800328e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f97d 	bl	8003582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f98c 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	2b08      	cmp	r3, #8
 80032a0:	d122      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d11b      	bne.n	80032e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f06f 0208 	mvn.w	r2, #8
 80032b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2204      	movs	r2, #4
 80032be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69db      	ldr	r3, [r3, #28]
 80032c6:	f003 0303 	and.w	r3, r3, #3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f960 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 80032d4:	e005      	b.n	80032e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 f953 	bl	8003582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f962 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b10      	cmp	r3, #16
 80032f4:	d122      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b10      	cmp	r3, #16
 8003302:	d11b      	bne.n	800333c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f06f 0210 	mvn.w	r2, #16
 800330c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2208      	movs	r2, #8
 8003312:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	69db      	ldr	r3, [r3, #28]
 800331a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f936 	bl	8003594 <HAL_TIM_IC_CaptureCallback>
 8003328:	e005      	b.n	8003336 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f929 	bl	8003582 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 f938 	bl	80035a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b01      	cmp	r3, #1
 8003348:	d10e      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0201 	mvn.w	r2, #1
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f7fd ff96 	bl	8001294 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003372:	2b80      	cmp	r3, #128	; 0x80
 8003374:	d10e      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d107      	bne.n	8003394 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800338c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fa7b 	bl	800388a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339e:	2b40      	cmp	r3, #64	; 0x40
 80033a0:	d10e      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ac:	2b40      	cmp	r3, #64	; 0x40
 80033ae:	d107      	bne.n	80033c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8fc 	bl	80035b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b20      	cmp	r3, #32
 80033cc:	d10e      	bne.n	80033ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b20      	cmp	r3, #32
 80033da:	d107      	bne.n	80033ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f06f 0220 	mvn.w	r2, #32
 80033e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa46 	bl	8003878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033ec:	bf00      	nop
 80033ee:	3708      	adds	r7, #8
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}

080033f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033fe:	2300      	movs	r3, #0
 8003400:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003408:	2b01      	cmp	r3, #1
 800340a:	d101      	bne.n	8003410 <HAL_TIM_ConfigClockSource+0x1c>
 800340c:	2302      	movs	r3, #2
 800340e:	e0b4      	b.n	800357a <HAL_TIM_ConfigClockSource+0x186>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800342e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003436:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68ba      	ldr	r2, [r7, #8]
 800343e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003448:	d03e      	beq.n	80034c8 <HAL_TIM_ConfigClockSource+0xd4>
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	f200 8087 	bhi.w	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003456:	f000 8086 	beq.w	8003566 <HAL_TIM_ConfigClockSource+0x172>
 800345a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800345e:	d87f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003460:	2b70      	cmp	r3, #112	; 0x70
 8003462:	d01a      	beq.n	800349a <HAL_TIM_ConfigClockSource+0xa6>
 8003464:	2b70      	cmp	r3, #112	; 0x70
 8003466:	d87b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003468:	2b60      	cmp	r3, #96	; 0x60
 800346a:	d050      	beq.n	800350e <HAL_TIM_ConfigClockSource+0x11a>
 800346c:	2b60      	cmp	r3, #96	; 0x60
 800346e:	d877      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003470:	2b50      	cmp	r3, #80	; 0x50
 8003472:	d03c      	beq.n	80034ee <HAL_TIM_ConfigClockSource+0xfa>
 8003474:	2b50      	cmp	r3, #80	; 0x50
 8003476:	d873      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003478:	2b40      	cmp	r3, #64	; 0x40
 800347a:	d058      	beq.n	800352e <HAL_TIM_ConfigClockSource+0x13a>
 800347c:	2b40      	cmp	r3, #64	; 0x40
 800347e:	d86f      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003480:	2b30      	cmp	r3, #48	; 0x30
 8003482:	d064      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003484:	2b30      	cmp	r3, #48	; 0x30
 8003486:	d86b      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003488:	2b20      	cmp	r3, #32
 800348a:	d060      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 800348c:	2b20      	cmp	r3, #32
 800348e:	d867      	bhi.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
 8003490:	2b00      	cmp	r3, #0
 8003492:	d05c      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003494:	2b10      	cmp	r3, #16
 8003496:	d05a      	beq.n	800354e <HAL_TIM_ConfigClockSource+0x15a>
 8003498:	e062      	b.n	8003560 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034aa:	f000 f968 	bl	800377e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68ba      	ldr	r2, [r7, #8]
 80034c4:	609a      	str	r2, [r3, #8]
      break;
 80034c6:	e04f      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034d8:	f000 f951 	bl	800377e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689a      	ldr	r2, [r3, #8]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034ea:	609a      	str	r2, [r3, #8]
      break;
 80034ec:	e03c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034fa:	461a      	mov	r2, r3
 80034fc:	f000 f8c8 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	2150      	movs	r1, #80	; 0x50
 8003506:	4618      	mov	r0, r3
 8003508:	f000 f91f 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 800350c:	e02c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800351a:	461a      	mov	r2, r3
 800351c:	f000 f8e6 	bl	80036ec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2160      	movs	r1, #96	; 0x60
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f90f 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 800352c:	e01c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800353a:	461a      	mov	r2, r3
 800353c:	f000 f8a8 	bl	8003690 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	4618      	mov	r0, r3
 8003548:	f000 f8ff 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 800354c:	e00c      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4619      	mov	r1, r3
 8003558:	4610      	mov	r0, r2
 800355a:	f000 f8f6 	bl	800374a <TIM_ITRx_SetConfig>
      break;
 800355e:	e003      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	73fb      	strb	r3, [r7, #15]
      break;
 8003564:	e000      	b.n	8003568 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003578:	7bfb      	ldrb	r3, [r7, #15]
}
 800357a:	4618      	mov	r0, r3
 800357c:	3710      	adds	r7, #16
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}

08003582 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035c0:	bf00      	nop
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bc80      	pop	{r7}
 80035c8:	4770      	bx	lr
	...

080035cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a29      	ldr	r2, [pc, #164]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a26      	ldr	r2, [pc, #152]	; (8003688 <TIM_Base_SetConfig+0xbc>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x30>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a25      	ldr	r2, [pc, #148]	; (800368c <TIM_Base_SetConfig+0xc0>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00b      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d007      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a19      	ldr	r2, [pc, #100]	; (8003688 <TIM_Base_SetConfig+0xbc>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d003      	beq.n	800362e <TIM_Base_SetConfig+0x62>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a18      	ldr	r2, [pc, #96]	; (800368c <TIM_Base_SetConfig+0xc0>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d108      	bne.n	8003640 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003634:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4313      	orrs	r3, r2
 800363e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689a      	ldr	r2, [r3, #8]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a07      	ldr	r2, [pc, #28]	; (8003684 <TIM_Base_SetConfig+0xb8>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d103      	bne.n	8003674 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	615a      	str	r2, [r3, #20]
}
 800367a:	bf00      	nop
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	40012c00 	.word	0x40012c00
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800

08003690 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0201 	bic.w	r2, r3, #1
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	011b      	lsls	r3, r3, #4
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	f023 030a 	bic.w	r3, r3, #10
 80036cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4313      	orrs	r3, r2
 80036d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	621a      	str	r2, [r3, #32]
}
 80036e2:	bf00      	nop
 80036e4:	371c      	adds	r7, #28
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1b      	ldr	r3, [r3, #32]
 8003702:	f023 0210 	bic.w	r2, r3, #16
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	699b      	ldr	r3, [r3, #24]
 800370e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003716:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	031b      	lsls	r3, r3, #12
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	4313      	orrs	r3, r2
 8003720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003728:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4313      	orrs	r3, r2
 8003732:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	621a      	str	r2, [r3, #32]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800374a:	b480      	push	{r7}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003760:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	f043 0307 	orr.w	r3, r3, #7
 800376c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	609a      	str	r2, [r3, #8]
}
 8003774:	bf00      	nop
 8003776:	3714      	adds	r7, #20
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377e:	b480      	push	{r7}
 8003780:	b087      	sub	sp, #28
 8003782:	af00      	add	r7, sp, #0
 8003784:	60f8      	str	r0, [r7, #12]
 8003786:	60b9      	str	r1, [r7, #8]
 8003788:	607a      	str	r2, [r7, #4]
 800378a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003798:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	021a      	lsls	r2, r3, #8
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	609a      	str	r2, [r3, #8]
}
 80037b2:	bf00      	nop
 80037b4:	371c      	adds	r7, #28
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d101      	bne.n	80037d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037d0:	2302      	movs	r3, #2
 80037d2:	e046      	b.n	8003862 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68fa      	ldr	r2, [r7, #12]
 800380c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a16      	ldr	r2, [pc, #88]	; (800386c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d00e      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d009      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a12      	ldr	r2, [pc, #72]	; (8003870 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d004      	beq.n	8003836 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a10      	ldr	r2, [pc, #64]	; (8003874 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d10c      	bne.n	8003850 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800383c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	4313      	orrs	r3, r2
 8003846:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	40012c00 	.word	0x40012c00
 8003870:	40000400 	.word	0x40000400
 8003874:	40000800 	.word	0x40000800

08003878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	4770      	bx	lr

0800388a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800388a:	b480      	push	{r7}
 800388c:	b083      	sub	sp, #12
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr

0800389c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e042      	b.n	8003934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fd92 	bl	80013ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2224      	movs	r2, #36	; 0x24
 80038cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68da      	ldr	r2, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f91d 	bl	8003b20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b20      	cmp	r3, #32
 800395a:	d16d      	bne.n	8003a38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_UART_Transmit+0x2c>
 8003962:	88fb      	ldrh	r3, [r7, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d101      	bne.n	800396c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e066      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800397a:	f7fd ff27 	bl	80017cc <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	88fa      	ldrh	r2, [r7, #6]
 8003984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	88fa      	ldrh	r2, [r7, #6]
 800398a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b0:	e02a      	b.n	8003a08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f840 	bl	8003a42 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e036      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10b      	bne.n	80039ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	881b      	ldrh	r3, [r3, #0]
 80039d6:	461a      	mov	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	3302      	adds	r3, #2
 80039e6:	61bb      	str	r3, [r7, #24]
 80039e8:	e007      	b.n	80039fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	781a      	ldrb	r2, [r3, #0]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	3301      	adds	r3, #1
 80039f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1cf      	bne.n	80039b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	9300      	str	r3, [sp, #0]
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2140      	movs	r1, #64	; 0x40
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 f810 	bl	8003a42 <UART_WaitOnFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e006      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2220      	movs	r2, #32
 8003a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e000      	b.n	8003a3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
  }
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3720      	adds	r7, #32
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b090      	sub	sp, #64	; 0x40
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	603b      	str	r3, [r7, #0]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a52:	e050      	b.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a5a:	d04c      	beq.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a62:	f7fd feb3 	bl	80017cc <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d241      	bcs.n	8003af6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	330c      	adds	r3, #12
 8003a78:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	330c      	adds	r3, #12
 8003a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a92:	637a      	str	r2, [r7, #52]	; 0x34
 8003a94:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	3314      	adds	r3, #20
 8003aac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	e853 3f00 	ldrex	r3, [r3]
 8003ab4:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	f023 0301 	bic.w	r3, r3, #1
 8003abc:	63bb      	str	r3, [r7, #56]	; 0x38
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3314      	adds	r3, #20
 8003ac4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ac6:	623a      	str	r2, [r7, #32]
 8003ac8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	6a3a      	ldr	r2, [r7, #32]
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e5      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e00f      	b.n	8003b16 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4013      	ands	r3, r2
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	bf0c      	ite	eq
 8003b06:	2301      	moveq	r3, #1
 8003b08:	2300      	movne	r3, #0
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	79fb      	ldrb	r3, [r7, #7]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d09f      	beq.n	8003a54 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3740      	adds	r7, #64	; 0x40
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
	...

08003b20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003b5a:	f023 030c 	bic.w	r3, r3, #12
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6812      	ldr	r2, [r2, #0]
 8003b62:	68b9      	ldr	r1, [r7, #8]
 8003b64:	430b      	orrs	r3, r1
 8003b66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <UART_SetConfig+0x114>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d103      	bne.n	8003b90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7ff f8bc 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 8003b8c:	60f8      	str	r0, [r7, #12]
 8003b8e:	e002      	b.n	8003b96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b90:	f7ff f8a4 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003b94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4413      	add	r3, r2
 8003b9e:	009a      	lsls	r2, r3, #2
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bac:	4a22      	ldr	r2, [pc, #136]	; (8003c38 <UART_SetConfig+0x118>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	0119      	lsls	r1, r3, #4
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	009a      	lsls	r2, r3, #2
 8003bc0:	441a      	add	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <UART_SetConfig+0x118>)
 8003bce:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd2:	095b      	lsrs	r3, r3, #5
 8003bd4:	2064      	movs	r0, #100	; 0x64
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	3332      	adds	r3, #50	; 0x32
 8003be0:	4a15      	ldr	r2, [pc, #84]	; (8003c38 <UART_SetConfig+0x118>)
 8003be2:	fba2 2303 	umull	r2, r3, r2, r3
 8003be6:	095b      	lsrs	r3, r3, #5
 8003be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bec:	4419      	add	r1, r3
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009a      	lsls	r2, r3, #2
 8003bf8:	441a      	add	r2, r3
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c04:	4b0c      	ldr	r3, [pc, #48]	; (8003c38 <UART_SetConfig+0x118>)
 8003c06:	fba3 0302 	umull	r0, r3, r3, r2
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	2064      	movs	r0, #100	; 0x64
 8003c0e:	fb00 f303 	mul.w	r3, r0, r3
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	011b      	lsls	r3, r3, #4
 8003c16:	3332      	adds	r3, #50	; 0x32
 8003c18:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <UART_SetConfig+0x118>)
 8003c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	f003 020f 	and.w	r2, r3, #15
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	440a      	add	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40013800 	.word	0x40013800
 8003c38:	51eb851f 	.word	0x51eb851f

08003c3c <std>:
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	b510      	push	{r4, lr}
 8003c40:	4604      	mov	r4, r0
 8003c42:	e9c0 3300 	strd	r3, r3, [r0]
 8003c46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c4a:	6083      	str	r3, [r0, #8]
 8003c4c:	8181      	strh	r1, [r0, #12]
 8003c4e:	6643      	str	r3, [r0, #100]	; 0x64
 8003c50:	81c2      	strh	r2, [r0, #14]
 8003c52:	6183      	str	r3, [r0, #24]
 8003c54:	4619      	mov	r1, r3
 8003c56:	2208      	movs	r2, #8
 8003c58:	305c      	adds	r0, #92	; 0x5c
 8003c5a:	f000 f9e5 	bl	8004028 <memset>
 8003c5e:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <std+0x38>)
 8003c60:	6224      	str	r4, [r4, #32]
 8003c62:	6263      	str	r3, [r4, #36]	; 0x24
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <std+0x3c>)
 8003c66:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c68:	4b04      	ldr	r3, [pc, #16]	; (8003c7c <std+0x40>)
 8003c6a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c6c:	4b04      	ldr	r3, [pc, #16]	; (8003c80 <std+0x44>)
 8003c6e:	6323      	str	r3, [r4, #48]	; 0x30
 8003c70:	bd10      	pop	{r4, pc}
 8003c72:	bf00      	nop
 8003c74:	08003e79 	.word	0x08003e79
 8003c78:	08003e9b 	.word	0x08003e9b
 8003c7c:	08003ed3 	.word	0x08003ed3
 8003c80:	08003ef7 	.word	0x08003ef7

08003c84 <stdio_exit_handler>:
 8003c84:	4a02      	ldr	r2, [pc, #8]	; (8003c90 <stdio_exit_handler+0xc>)
 8003c86:	4903      	ldr	r1, [pc, #12]	; (8003c94 <stdio_exit_handler+0x10>)
 8003c88:	4803      	ldr	r0, [pc, #12]	; (8003c98 <stdio_exit_handler+0x14>)
 8003c8a:	f000 b869 	b.w	8003d60 <_fwalk_sglue>
 8003c8e:	bf00      	nop
 8003c90:	2000000c 	.word	0x2000000c
 8003c94:	080049b5 	.word	0x080049b5
 8003c98:	20000018 	.word	0x20000018

08003c9c <cleanup_stdio>:
 8003c9c:	6841      	ldr	r1, [r0, #4]
 8003c9e:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <cleanup_stdio+0x34>)
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4299      	cmp	r1, r3
 8003ca4:	4604      	mov	r4, r0
 8003ca6:	d001      	beq.n	8003cac <cleanup_stdio+0x10>
 8003ca8:	f000 fe84 	bl	80049b4 <_fflush_r>
 8003cac:	68a1      	ldr	r1, [r4, #8]
 8003cae:	4b09      	ldr	r3, [pc, #36]	; (8003cd4 <cleanup_stdio+0x38>)
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d002      	beq.n	8003cba <cleanup_stdio+0x1e>
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 fe7d 	bl	80049b4 <_fflush_r>
 8003cba:	68e1      	ldr	r1, [r4, #12]
 8003cbc:	4b06      	ldr	r3, [pc, #24]	; (8003cd8 <cleanup_stdio+0x3c>)
 8003cbe:	4299      	cmp	r1, r3
 8003cc0:	d004      	beq.n	8003ccc <cleanup_stdio+0x30>
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc8:	f000 be74 	b.w	80049b4 <_fflush_r>
 8003ccc:	bd10      	pop	{r4, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000194 	.word	0x20000194
 8003cd4:	200001fc 	.word	0x200001fc
 8003cd8:	20000264 	.word	0x20000264

08003cdc <global_stdio_init.part.0>:
 8003cdc:	b510      	push	{r4, lr}
 8003cde:	4b0b      	ldr	r3, [pc, #44]	; (8003d0c <global_stdio_init.part.0+0x30>)
 8003ce0:	4c0b      	ldr	r4, [pc, #44]	; (8003d10 <global_stdio_init.part.0+0x34>)
 8003ce2:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <global_stdio_init.part.0+0x38>)
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	2104      	movs	r1, #4
 8003cea:	2200      	movs	r2, #0
 8003cec:	f7ff ffa6 	bl	8003c3c <std>
 8003cf0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	2109      	movs	r1, #9
 8003cf8:	f7ff ffa0 	bl	8003c3c <std>
 8003cfc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003d00:	2202      	movs	r2, #2
 8003d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d06:	2112      	movs	r1, #18
 8003d08:	f7ff bf98 	b.w	8003c3c <std>
 8003d0c:	200002cc 	.word	0x200002cc
 8003d10:	20000194 	.word	0x20000194
 8003d14:	08003c85 	.word	0x08003c85

08003d18 <__sfp_lock_acquire>:
 8003d18:	4801      	ldr	r0, [pc, #4]	; (8003d20 <__sfp_lock_acquire+0x8>)
 8003d1a:	f000 b9fd 	b.w	8004118 <__retarget_lock_acquire_recursive>
 8003d1e:	bf00      	nop
 8003d20:	200002d5 	.word	0x200002d5

08003d24 <__sfp_lock_release>:
 8003d24:	4801      	ldr	r0, [pc, #4]	; (8003d2c <__sfp_lock_release+0x8>)
 8003d26:	f000 b9f8 	b.w	800411a <__retarget_lock_release_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	200002d5 	.word	0x200002d5

08003d30 <__sinit>:
 8003d30:	b510      	push	{r4, lr}
 8003d32:	4604      	mov	r4, r0
 8003d34:	f7ff fff0 	bl	8003d18 <__sfp_lock_acquire>
 8003d38:	6a23      	ldr	r3, [r4, #32]
 8003d3a:	b11b      	cbz	r3, 8003d44 <__sinit+0x14>
 8003d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d40:	f7ff bff0 	b.w	8003d24 <__sfp_lock_release>
 8003d44:	4b04      	ldr	r3, [pc, #16]	; (8003d58 <__sinit+0x28>)
 8003d46:	6223      	str	r3, [r4, #32]
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <__sinit+0x2c>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d1f5      	bne.n	8003d3c <__sinit+0xc>
 8003d50:	f7ff ffc4 	bl	8003cdc <global_stdio_init.part.0>
 8003d54:	e7f2      	b.n	8003d3c <__sinit+0xc>
 8003d56:	bf00      	nop
 8003d58:	08003c9d 	.word	0x08003c9d
 8003d5c:	200002cc 	.word	0x200002cc

08003d60 <_fwalk_sglue>:
 8003d60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d64:	4607      	mov	r7, r0
 8003d66:	4688      	mov	r8, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	2600      	movs	r6, #0
 8003d6c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d70:	f1b9 0901 	subs.w	r9, r9, #1
 8003d74:	d505      	bpl.n	8003d82 <_fwalk_sglue+0x22>
 8003d76:	6824      	ldr	r4, [r4, #0]
 8003d78:	2c00      	cmp	r4, #0
 8003d7a:	d1f7      	bne.n	8003d6c <_fwalk_sglue+0xc>
 8003d7c:	4630      	mov	r0, r6
 8003d7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d82:	89ab      	ldrh	r3, [r5, #12]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d907      	bls.n	8003d98 <_fwalk_sglue+0x38>
 8003d88:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	d003      	beq.n	8003d98 <_fwalk_sglue+0x38>
 8003d90:	4629      	mov	r1, r5
 8003d92:	4638      	mov	r0, r7
 8003d94:	47c0      	blx	r8
 8003d96:	4306      	orrs	r6, r0
 8003d98:	3568      	adds	r5, #104	; 0x68
 8003d9a:	e7e9      	b.n	8003d70 <_fwalk_sglue+0x10>

08003d9c <iprintf>:
 8003d9c:	b40f      	push	{r0, r1, r2, r3}
 8003d9e:	b507      	push	{r0, r1, r2, lr}
 8003da0:	4906      	ldr	r1, [pc, #24]	; (8003dbc <iprintf+0x20>)
 8003da2:	ab04      	add	r3, sp, #16
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	f853 2b04 	ldr.w	r2, [r3], #4
 8003daa:	6881      	ldr	r1, [r0, #8]
 8003dac:	9301      	str	r3, [sp, #4]
 8003dae:	f000 fad1 	bl	8004354 <_vfiprintf_r>
 8003db2:	b003      	add	sp, #12
 8003db4:	f85d eb04 	ldr.w	lr, [sp], #4
 8003db8:	b004      	add	sp, #16
 8003dba:	4770      	bx	lr
 8003dbc:	20000064 	.word	0x20000064

08003dc0 <_puts_r>:
 8003dc0:	6a03      	ldr	r3, [r0, #32]
 8003dc2:	b570      	push	{r4, r5, r6, lr}
 8003dc4:	4605      	mov	r5, r0
 8003dc6:	460e      	mov	r6, r1
 8003dc8:	6884      	ldr	r4, [r0, #8]
 8003dca:	b90b      	cbnz	r3, 8003dd0 <_puts_r+0x10>
 8003dcc:	f7ff ffb0 	bl	8003d30 <__sinit>
 8003dd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dd2:	07db      	lsls	r3, r3, #31
 8003dd4:	d405      	bmi.n	8003de2 <_puts_r+0x22>
 8003dd6:	89a3      	ldrh	r3, [r4, #12]
 8003dd8:	0598      	lsls	r0, r3, #22
 8003dda:	d402      	bmi.n	8003de2 <_puts_r+0x22>
 8003ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dde:	f000 f99b 	bl	8004118 <__retarget_lock_acquire_recursive>
 8003de2:	89a3      	ldrh	r3, [r4, #12]
 8003de4:	0719      	lsls	r1, r3, #28
 8003de6:	d513      	bpl.n	8003e10 <_puts_r+0x50>
 8003de8:	6923      	ldr	r3, [r4, #16]
 8003dea:	b18b      	cbz	r3, 8003e10 <_puts_r+0x50>
 8003dec:	3e01      	subs	r6, #1
 8003dee:	68a3      	ldr	r3, [r4, #8]
 8003df0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60a3      	str	r3, [r4, #8]
 8003df8:	b9e9      	cbnz	r1, 8003e36 <_puts_r+0x76>
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	da2e      	bge.n	8003e5c <_puts_r+0x9c>
 8003dfe:	4622      	mov	r2, r4
 8003e00:	210a      	movs	r1, #10
 8003e02:	4628      	mov	r0, r5
 8003e04:	f000 f87b 	bl	8003efe <__swbuf_r>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d007      	beq.n	8003e1c <_puts_r+0x5c>
 8003e0c:	250a      	movs	r5, #10
 8003e0e:	e007      	b.n	8003e20 <_puts_r+0x60>
 8003e10:	4621      	mov	r1, r4
 8003e12:	4628      	mov	r0, r5
 8003e14:	f000 f8b0 	bl	8003f78 <__swsetup_r>
 8003e18:	2800      	cmp	r0, #0
 8003e1a:	d0e7      	beq.n	8003dec <_puts_r+0x2c>
 8003e1c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003e20:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003e22:	07da      	lsls	r2, r3, #31
 8003e24:	d405      	bmi.n	8003e32 <_puts_r+0x72>
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	059b      	lsls	r3, r3, #22
 8003e2a:	d402      	bmi.n	8003e32 <_puts_r+0x72>
 8003e2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003e2e:	f000 f974 	bl	800411a <__retarget_lock_release_recursive>
 8003e32:	4628      	mov	r0, r5
 8003e34:	bd70      	pop	{r4, r5, r6, pc}
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	da04      	bge.n	8003e44 <_puts_r+0x84>
 8003e3a:	69a2      	ldr	r2, [r4, #24]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	dc06      	bgt.n	8003e4e <_puts_r+0x8e>
 8003e40:	290a      	cmp	r1, #10
 8003e42:	d004      	beq.n	8003e4e <_puts_r+0x8e>
 8003e44:	6823      	ldr	r3, [r4, #0]
 8003e46:	1c5a      	adds	r2, r3, #1
 8003e48:	6022      	str	r2, [r4, #0]
 8003e4a:	7019      	strb	r1, [r3, #0]
 8003e4c:	e7cf      	b.n	8003dee <_puts_r+0x2e>
 8003e4e:	4622      	mov	r2, r4
 8003e50:	4628      	mov	r0, r5
 8003e52:	f000 f854 	bl	8003efe <__swbuf_r>
 8003e56:	3001      	adds	r0, #1
 8003e58:	d1c9      	bne.n	8003dee <_puts_r+0x2e>
 8003e5a:	e7df      	b.n	8003e1c <_puts_r+0x5c>
 8003e5c:	250a      	movs	r5, #10
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	701d      	strb	r5, [r3, #0]
 8003e66:	e7db      	b.n	8003e20 <_puts_r+0x60>

08003e68 <puts>:
 8003e68:	4b02      	ldr	r3, [pc, #8]	; (8003e74 <puts+0xc>)
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	f7ff bfa7 	b.w	8003dc0 <_puts_r>
 8003e72:	bf00      	nop
 8003e74:	20000064 	.word	0x20000064

08003e78 <__sread>:
 8003e78:	b510      	push	{r4, lr}
 8003e7a:	460c      	mov	r4, r1
 8003e7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e80:	f000 f8fc 	bl	800407c <_read_r>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	bfab      	itete	ge
 8003e88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e8a:	89a3      	ldrhlt	r3, [r4, #12]
 8003e8c:	181b      	addge	r3, r3, r0
 8003e8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e92:	bfac      	ite	ge
 8003e94:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e96:	81a3      	strhlt	r3, [r4, #12]
 8003e98:	bd10      	pop	{r4, pc}

08003e9a <__swrite>:
 8003e9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e9e:	461f      	mov	r7, r3
 8003ea0:	898b      	ldrh	r3, [r1, #12]
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	05db      	lsls	r3, r3, #23
 8003ea6:	460c      	mov	r4, r1
 8003ea8:	4616      	mov	r6, r2
 8003eaa:	d505      	bpl.n	8003eb8 <__swrite+0x1e>
 8003eac:	2302      	movs	r3, #2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eb4:	f000 f8d0 	bl	8004058 <_lseek_r>
 8003eb8:	89a3      	ldrh	r3, [r4, #12]
 8003eba:	4632      	mov	r2, r6
 8003ebc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ec0:	81a3      	strh	r3, [r4, #12]
 8003ec2:	4628      	mov	r0, r5
 8003ec4:	463b      	mov	r3, r7
 8003ec6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003eca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ece:	f000 b8e7 	b.w	80040a0 <_write_r>

08003ed2 <__sseek>:
 8003ed2:	b510      	push	{r4, lr}
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003eda:	f000 f8bd 	bl	8004058 <_lseek_r>
 8003ede:	1c43      	adds	r3, r0, #1
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	bf15      	itete	ne
 8003ee4:	6560      	strne	r0, [r4, #84]	; 0x54
 8003ee6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003eea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003eee:	81a3      	strheq	r3, [r4, #12]
 8003ef0:	bf18      	it	ne
 8003ef2:	81a3      	strhne	r3, [r4, #12]
 8003ef4:	bd10      	pop	{r4, pc}

08003ef6 <__sclose>:
 8003ef6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003efa:	f000 b89d 	b.w	8004038 <_close_r>

08003efe <__swbuf_r>:
 8003efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f00:	460e      	mov	r6, r1
 8003f02:	4614      	mov	r4, r2
 8003f04:	4605      	mov	r5, r0
 8003f06:	b118      	cbz	r0, 8003f10 <__swbuf_r+0x12>
 8003f08:	6a03      	ldr	r3, [r0, #32]
 8003f0a:	b90b      	cbnz	r3, 8003f10 <__swbuf_r+0x12>
 8003f0c:	f7ff ff10 	bl	8003d30 <__sinit>
 8003f10:	69a3      	ldr	r3, [r4, #24]
 8003f12:	60a3      	str	r3, [r4, #8]
 8003f14:	89a3      	ldrh	r3, [r4, #12]
 8003f16:	071a      	lsls	r2, r3, #28
 8003f18:	d525      	bpl.n	8003f66 <__swbuf_r+0x68>
 8003f1a:	6923      	ldr	r3, [r4, #16]
 8003f1c:	b31b      	cbz	r3, 8003f66 <__swbuf_r+0x68>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	6922      	ldr	r2, [r4, #16]
 8003f22:	b2f6      	uxtb	r6, r6
 8003f24:	1a98      	subs	r0, r3, r2
 8003f26:	6963      	ldr	r3, [r4, #20]
 8003f28:	4637      	mov	r7, r6
 8003f2a:	4283      	cmp	r3, r0
 8003f2c:	dc04      	bgt.n	8003f38 <__swbuf_r+0x3a>
 8003f2e:	4621      	mov	r1, r4
 8003f30:	4628      	mov	r0, r5
 8003f32:	f000 fd3f 	bl	80049b4 <_fflush_r>
 8003f36:	b9e0      	cbnz	r0, 8003f72 <__swbuf_r+0x74>
 8003f38:	68a3      	ldr	r3, [r4, #8]
 8003f3a:	3b01      	subs	r3, #1
 8003f3c:	60a3      	str	r3, [r4, #8]
 8003f3e:	6823      	ldr	r3, [r4, #0]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	6022      	str	r2, [r4, #0]
 8003f44:	701e      	strb	r6, [r3, #0]
 8003f46:	6962      	ldr	r2, [r4, #20]
 8003f48:	1c43      	adds	r3, r0, #1
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d004      	beq.n	8003f58 <__swbuf_r+0x5a>
 8003f4e:	89a3      	ldrh	r3, [r4, #12]
 8003f50:	07db      	lsls	r3, r3, #31
 8003f52:	d506      	bpl.n	8003f62 <__swbuf_r+0x64>
 8003f54:	2e0a      	cmp	r6, #10
 8003f56:	d104      	bne.n	8003f62 <__swbuf_r+0x64>
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4628      	mov	r0, r5
 8003f5c:	f000 fd2a 	bl	80049b4 <_fflush_r>
 8003f60:	b938      	cbnz	r0, 8003f72 <__swbuf_r+0x74>
 8003f62:	4638      	mov	r0, r7
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f66:	4621      	mov	r1, r4
 8003f68:	4628      	mov	r0, r5
 8003f6a:	f000 f805 	bl	8003f78 <__swsetup_r>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d0d5      	beq.n	8003f1e <__swbuf_r+0x20>
 8003f72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003f76:	e7f4      	b.n	8003f62 <__swbuf_r+0x64>

08003f78 <__swsetup_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	4b2a      	ldr	r3, [pc, #168]	; (8004024 <__swsetup_r+0xac>)
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	460c      	mov	r4, r1
 8003f82:	b118      	cbz	r0, 8003f8c <__swsetup_r+0x14>
 8003f84:	6a03      	ldr	r3, [r0, #32]
 8003f86:	b90b      	cbnz	r3, 8003f8c <__swsetup_r+0x14>
 8003f88:	f7ff fed2 	bl	8003d30 <__sinit>
 8003f8c:	89a3      	ldrh	r3, [r4, #12]
 8003f8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003f92:	0718      	lsls	r0, r3, #28
 8003f94:	d422      	bmi.n	8003fdc <__swsetup_r+0x64>
 8003f96:	06d9      	lsls	r1, r3, #27
 8003f98:	d407      	bmi.n	8003faa <__swsetup_r+0x32>
 8003f9a:	2309      	movs	r3, #9
 8003f9c:	602b      	str	r3, [r5, #0]
 8003f9e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003fa2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003fa6:	81a3      	strh	r3, [r4, #12]
 8003fa8:	e034      	b.n	8004014 <__swsetup_r+0x9c>
 8003faa:	0758      	lsls	r0, r3, #29
 8003fac:	d512      	bpl.n	8003fd4 <__swsetup_r+0x5c>
 8003fae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003fb0:	b141      	cbz	r1, 8003fc4 <__swsetup_r+0x4c>
 8003fb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	d002      	beq.n	8003fc0 <__swsetup_r+0x48>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	f000 f8ae 	bl	800411c <_free_r>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6363      	str	r3, [r4, #52]	; 0x34
 8003fc4:	89a3      	ldrh	r3, [r4, #12]
 8003fc6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003fca:	81a3      	strh	r3, [r4, #12]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	6063      	str	r3, [r4, #4]
 8003fd0:	6923      	ldr	r3, [r4, #16]
 8003fd2:	6023      	str	r3, [r4, #0]
 8003fd4:	89a3      	ldrh	r3, [r4, #12]
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	81a3      	strh	r3, [r4, #12]
 8003fdc:	6923      	ldr	r3, [r4, #16]
 8003fde:	b94b      	cbnz	r3, 8003ff4 <__swsetup_r+0x7c>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003fe6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fea:	d003      	beq.n	8003ff4 <__swsetup_r+0x7c>
 8003fec:	4621      	mov	r1, r4
 8003fee:	4628      	mov	r0, r5
 8003ff0:	f000 fd2d 	bl	8004a4e <__smakebuf_r>
 8003ff4:	89a0      	ldrh	r0, [r4, #12]
 8003ff6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ffa:	f010 0301 	ands.w	r3, r0, #1
 8003ffe:	d00a      	beq.n	8004016 <__swsetup_r+0x9e>
 8004000:	2300      	movs	r3, #0
 8004002:	60a3      	str	r3, [r4, #8]
 8004004:	6963      	ldr	r3, [r4, #20]
 8004006:	425b      	negs	r3, r3
 8004008:	61a3      	str	r3, [r4, #24]
 800400a:	6923      	ldr	r3, [r4, #16]
 800400c:	b943      	cbnz	r3, 8004020 <__swsetup_r+0xa8>
 800400e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004012:	d1c4      	bne.n	8003f9e <__swsetup_r+0x26>
 8004014:	bd38      	pop	{r3, r4, r5, pc}
 8004016:	0781      	lsls	r1, r0, #30
 8004018:	bf58      	it	pl
 800401a:	6963      	ldrpl	r3, [r4, #20]
 800401c:	60a3      	str	r3, [r4, #8]
 800401e:	e7f4      	b.n	800400a <__swsetup_r+0x92>
 8004020:	2000      	movs	r0, #0
 8004022:	e7f7      	b.n	8004014 <__swsetup_r+0x9c>
 8004024:	20000064 	.word	0x20000064

08004028 <memset>:
 8004028:	4603      	mov	r3, r0
 800402a:	4402      	add	r2, r0
 800402c:	4293      	cmp	r3, r2
 800402e:	d100      	bne.n	8004032 <memset+0xa>
 8004030:	4770      	bx	lr
 8004032:	f803 1b01 	strb.w	r1, [r3], #1
 8004036:	e7f9      	b.n	800402c <memset+0x4>

08004038 <_close_r>:
 8004038:	b538      	push	{r3, r4, r5, lr}
 800403a:	2300      	movs	r3, #0
 800403c:	4d05      	ldr	r5, [pc, #20]	; (8004054 <_close_r+0x1c>)
 800403e:	4604      	mov	r4, r0
 8004040:	4608      	mov	r0, r1
 8004042:	602b      	str	r3, [r5, #0]
 8004044:	f7fd fb07 	bl	8001656 <_close>
 8004048:	1c43      	adds	r3, r0, #1
 800404a:	d102      	bne.n	8004052 <_close_r+0x1a>
 800404c:	682b      	ldr	r3, [r5, #0]
 800404e:	b103      	cbz	r3, 8004052 <_close_r+0x1a>
 8004050:	6023      	str	r3, [r4, #0]
 8004052:	bd38      	pop	{r3, r4, r5, pc}
 8004054:	200002d0 	.word	0x200002d0

08004058 <_lseek_r>:
 8004058:	b538      	push	{r3, r4, r5, lr}
 800405a:	4604      	mov	r4, r0
 800405c:	4608      	mov	r0, r1
 800405e:	4611      	mov	r1, r2
 8004060:	2200      	movs	r2, #0
 8004062:	4d05      	ldr	r5, [pc, #20]	; (8004078 <_lseek_r+0x20>)
 8004064:	602a      	str	r2, [r5, #0]
 8004066:	461a      	mov	r2, r3
 8004068:	f7fd fb19 	bl	800169e <_lseek>
 800406c:	1c43      	adds	r3, r0, #1
 800406e:	d102      	bne.n	8004076 <_lseek_r+0x1e>
 8004070:	682b      	ldr	r3, [r5, #0]
 8004072:	b103      	cbz	r3, 8004076 <_lseek_r+0x1e>
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	200002d0 	.word	0x200002d0

0800407c <_read_r>:
 800407c:	b538      	push	{r3, r4, r5, lr}
 800407e:	4604      	mov	r4, r0
 8004080:	4608      	mov	r0, r1
 8004082:	4611      	mov	r1, r2
 8004084:	2200      	movs	r2, #0
 8004086:	4d05      	ldr	r5, [pc, #20]	; (800409c <_read_r+0x20>)
 8004088:	602a      	str	r2, [r5, #0]
 800408a:	461a      	mov	r2, r3
 800408c:	f7fd faaa 	bl	80015e4 <_read>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d102      	bne.n	800409a <_read_r+0x1e>
 8004094:	682b      	ldr	r3, [r5, #0]
 8004096:	b103      	cbz	r3, 800409a <_read_r+0x1e>
 8004098:	6023      	str	r3, [r4, #0]
 800409a:	bd38      	pop	{r3, r4, r5, pc}
 800409c:	200002d0 	.word	0x200002d0

080040a0 <_write_r>:
 80040a0:	b538      	push	{r3, r4, r5, lr}
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	2200      	movs	r2, #0
 80040aa:	4d05      	ldr	r5, [pc, #20]	; (80040c0 <_write_r+0x20>)
 80040ac:	602a      	str	r2, [r5, #0]
 80040ae:	461a      	mov	r2, r3
 80040b0:	f7fd fab5 	bl	800161e <_write>
 80040b4:	1c43      	adds	r3, r0, #1
 80040b6:	d102      	bne.n	80040be <_write_r+0x1e>
 80040b8:	682b      	ldr	r3, [r5, #0]
 80040ba:	b103      	cbz	r3, 80040be <_write_r+0x1e>
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	bd38      	pop	{r3, r4, r5, pc}
 80040c0:	200002d0 	.word	0x200002d0

080040c4 <__errno>:
 80040c4:	4b01      	ldr	r3, [pc, #4]	; (80040cc <__errno+0x8>)
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000064 	.word	0x20000064

080040d0 <__libc_init_array>:
 80040d0:	b570      	push	{r4, r5, r6, lr}
 80040d2:	2600      	movs	r6, #0
 80040d4:	4d0c      	ldr	r5, [pc, #48]	; (8004108 <__libc_init_array+0x38>)
 80040d6:	4c0d      	ldr	r4, [pc, #52]	; (800410c <__libc_init_array+0x3c>)
 80040d8:	1b64      	subs	r4, r4, r5
 80040da:	10a4      	asrs	r4, r4, #2
 80040dc:	42a6      	cmp	r6, r4
 80040de:	d109      	bne.n	80040f4 <__libc_init_array+0x24>
 80040e0:	f000 fd32 	bl	8004b48 <_init>
 80040e4:	2600      	movs	r6, #0
 80040e6:	4d0a      	ldr	r5, [pc, #40]	; (8004110 <__libc_init_array+0x40>)
 80040e8:	4c0a      	ldr	r4, [pc, #40]	; (8004114 <__libc_init_array+0x44>)
 80040ea:	1b64      	subs	r4, r4, r5
 80040ec:	10a4      	asrs	r4, r4, #2
 80040ee:	42a6      	cmp	r6, r4
 80040f0:	d105      	bne.n	80040fe <__libc_init_array+0x2e>
 80040f2:	bd70      	pop	{r4, r5, r6, pc}
 80040f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80040f8:	4798      	blx	r3
 80040fa:	3601      	adds	r6, #1
 80040fc:	e7ee      	b.n	80040dc <__libc_init_array+0xc>
 80040fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004102:	4798      	blx	r3
 8004104:	3601      	adds	r6, #1
 8004106:	e7f2      	b.n	80040ee <__libc_init_array+0x1e>
 8004108:	08004cfc 	.word	0x08004cfc
 800410c:	08004cfc 	.word	0x08004cfc
 8004110:	08004cfc 	.word	0x08004cfc
 8004114:	08004d00 	.word	0x08004d00

08004118 <__retarget_lock_acquire_recursive>:
 8004118:	4770      	bx	lr

0800411a <__retarget_lock_release_recursive>:
 800411a:	4770      	bx	lr

0800411c <_free_r>:
 800411c:	b538      	push	{r3, r4, r5, lr}
 800411e:	4605      	mov	r5, r0
 8004120:	2900      	cmp	r1, #0
 8004122:	d040      	beq.n	80041a6 <_free_r+0x8a>
 8004124:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004128:	1f0c      	subs	r4, r1, #4
 800412a:	2b00      	cmp	r3, #0
 800412c:	bfb8      	it	lt
 800412e:	18e4      	addlt	r4, r4, r3
 8004130:	f000 f8dc 	bl	80042ec <__malloc_lock>
 8004134:	4a1c      	ldr	r2, [pc, #112]	; (80041a8 <_free_r+0x8c>)
 8004136:	6813      	ldr	r3, [r2, #0]
 8004138:	b933      	cbnz	r3, 8004148 <_free_r+0x2c>
 800413a:	6063      	str	r3, [r4, #4]
 800413c:	6014      	str	r4, [r2, #0]
 800413e:	4628      	mov	r0, r5
 8004140:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004144:	f000 b8d8 	b.w	80042f8 <__malloc_unlock>
 8004148:	42a3      	cmp	r3, r4
 800414a:	d908      	bls.n	800415e <_free_r+0x42>
 800414c:	6820      	ldr	r0, [r4, #0]
 800414e:	1821      	adds	r1, r4, r0
 8004150:	428b      	cmp	r3, r1
 8004152:	bf01      	itttt	eq
 8004154:	6819      	ldreq	r1, [r3, #0]
 8004156:	685b      	ldreq	r3, [r3, #4]
 8004158:	1809      	addeq	r1, r1, r0
 800415a:	6021      	streq	r1, [r4, #0]
 800415c:	e7ed      	b.n	800413a <_free_r+0x1e>
 800415e:	461a      	mov	r2, r3
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	b10b      	cbz	r3, 8004168 <_free_r+0x4c>
 8004164:	42a3      	cmp	r3, r4
 8004166:	d9fa      	bls.n	800415e <_free_r+0x42>
 8004168:	6811      	ldr	r1, [r2, #0]
 800416a:	1850      	adds	r0, r2, r1
 800416c:	42a0      	cmp	r0, r4
 800416e:	d10b      	bne.n	8004188 <_free_r+0x6c>
 8004170:	6820      	ldr	r0, [r4, #0]
 8004172:	4401      	add	r1, r0
 8004174:	1850      	adds	r0, r2, r1
 8004176:	4283      	cmp	r3, r0
 8004178:	6011      	str	r1, [r2, #0]
 800417a:	d1e0      	bne.n	800413e <_free_r+0x22>
 800417c:	6818      	ldr	r0, [r3, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	4408      	add	r0, r1
 8004182:	6010      	str	r0, [r2, #0]
 8004184:	6053      	str	r3, [r2, #4]
 8004186:	e7da      	b.n	800413e <_free_r+0x22>
 8004188:	d902      	bls.n	8004190 <_free_r+0x74>
 800418a:	230c      	movs	r3, #12
 800418c:	602b      	str	r3, [r5, #0]
 800418e:	e7d6      	b.n	800413e <_free_r+0x22>
 8004190:	6820      	ldr	r0, [r4, #0]
 8004192:	1821      	adds	r1, r4, r0
 8004194:	428b      	cmp	r3, r1
 8004196:	bf01      	itttt	eq
 8004198:	6819      	ldreq	r1, [r3, #0]
 800419a:	685b      	ldreq	r3, [r3, #4]
 800419c:	1809      	addeq	r1, r1, r0
 800419e:	6021      	streq	r1, [r4, #0]
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	6054      	str	r4, [r2, #4]
 80041a4:	e7cb      	b.n	800413e <_free_r+0x22>
 80041a6:	bd38      	pop	{r3, r4, r5, pc}
 80041a8:	200002d8 	.word	0x200002d8

080041ac <sbrk_aligned>:
 80041ac:	b570      	push	{r4, r5, r6, lr}
 80041ae:	4e0e      	ldr	r6, [pc, #56]	; (80041e8 <sbrk_aligned+0x3c>)
 80041b0:	460c      	mov	r4, r1
 80041b2:	6831      	ldr	r1, [r6, #0]
 80041b4:	4605      	mov	r5, r0
 80041b6:	b911      	cbnz	r1, 80041be <sbrk_aligned+0x12>
 80041b8:	f000 fca8 	bl	8004b0c <_sbrk_r>
 80041bc:	6030      	str	r0, [r6, #0]
 80041be:	4621      	mov	r1, r4
 80041c0:	4628      	mov	r0, r5
 80041c2:	f000 fca3 	bl	8004b0c <_sbrk_r>
 80041c6:	1c43      	adds	r3, r0, #1
 80041c8:	d00a      	beq.n	80041e0 <sbrk_aligned+0x34>
 80041ca:	1cc4      	adds	r4, r0, #3
 80041cc:	f024 0403 	bic.w	r4, r4, #3
 80041d0:	42a0      	cmp	r0, r4
 80041d2:	d007      	beq.n	80041e4 <sbrk_aligned+0x38>
 80041d4:	1a21      	subs	r1, r4, r0
 80041d6:	4628      	mov	r0, r5
 80041d8:	f000 fc98 	bl	8004b0c <_sbrk_r>
 80041dc:	3001      	adds	r0, #1
 80041de:	d101      	bne.n	80041e4 <sbrk_aligned+0x38>
 80041e0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80041e4:	4620      	mov	r0, r4
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	200002dc 	.word	0x200002dc

080041ec <_malloc_r>:
 80041ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80041f0:	1ccd      	adds	r5, r1, #3
 80041f2:	f025 0503 	bic.w	r5, r5, #3
 80041f6:	3508      	adds	r5, #8
 80041f8:	2d0c      	cmp	r5, #12
 80041fa:	bf38      	it	cc
 80041fc:	250c      	movcc	r5, #12
 80041fe:	2d00      	cmp	r5, #0
 8004200:	4607      	mov	r7, r0
 8004202:	db01      	blt.n	8004208 <_malloc_r+0x1c>
 8004204:	42a9      	cmp	r1, r5
 8004206:	d905      	bls.n	8004214 <_malloc_r+0x28>
 8004208:	230c      	movs	r3, #12
 800420a:	2600      	movs	r6, #0
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4630      	mov	r0, r6
 8004210:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004214:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80042e8 <_malloc_r+0xfc>
 8004218:	f000 f868 	bl	80042ec <__malloc_lock>
 800421c:	f8d8 3000 	ldr.w	r3, [r8]
 8004220:	461c      	mov	r4, r3
 8004222:	bb5c      	cbnz	r4, 800427c <_malloc_r+0x90>
 8004224:	4629      	mov	r1, r5
 8004226:	4638      	mov	r0, r7
 8004228:	f7ff ffc0 	bl	80041ac <sbrk_aligned>
 800422c:	1c43      	adds	r3, r0, #1
 800422e:	4604      	mov	r4, r0
 8004230:	d155      	bne.n	80042de <_malloc_r+0xf2>
 8004232:	f8d8 4000 	ldr.w	r4, [r8]
 8004236:	4626      	mov	r6, r4
 8004238:	2e00      	cmp	r6, #0
 800423a:	d145      	bne.n	80042c8 <_malloc_r+0xdc>
 800423c:	2c00      	cmp	r4, #0
 800423e:	d048      	beq.n	80042d2 <_malloc_r+0xe6>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	4631      	mov	r1, r6
 8004244:	4638      	mov	r0, r7
 8004246:	eb04 0903 	add.w	r9, r4, r3
 800424a:	f000 fc5f 	bl	8004b0c <_sbrk_r>
 800424e:	4581      	cmp	r9, r0
 8004250:	d13f      	bne.n	80042d2 <_malloc_r+0xe6>
 8004252:	6821      	ldr	r1, [r4, #0]
 8004254:	4638      	mov	r0, r7
 8004256:	1a6d      	subs	r5, r5, r1
 8004258:	4629      	mov	r1, r5
 800425a:	f7ff ffa7 	bl	80041ac <sbrk_aligned>
 800425e:	3001      	adds	r0, #1
 8004260:	d037      	beq.n	80042d2 <_malloc_r+0xe6>
 8004262:	6823      	ldr	r3, [r4, #0]
 8004264:	442b      	add	r3, r5
 8004266:	6023      	str	r3, [r4, #0]
 8004268:	f8d8 3000 	ldr.w	r3, [r8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d038      	beq.n	80042e2 <_malloc_r+0xf6>
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	42a2      	cmp	r2, r4
 8004274:	d12b      	bne.n	80042ce <_malloc_r+0xe2>
 8004276:	2200      	movs	r2, #0
 8004278:	605a      	str	r2, [r3, #4]
 800427a:	e00f      	b.n	800429c <_malloc_r+0xb0>
 800427c:	6822      	ldr	r2, [r4, #0]
 800427e:	1b52      	subs	r2, r2, r5
 8004280:	d41f      	bmi.n	80042c2 <_malloc_r+0xd6>
 8004282:	2a0b      	cmp	r2, #11
 8004284:	d917      	bls.n	80042b6 <_malloc_r+0xca>
 8004286:	1961      	adds	r1, r4, r5
 8004288:	42a3      	cmp	r3, r4
 800428a:	6025      	str	r5, [r4, #0]
 800428c:	bf18      	it	ne
 800428e:	6059      	strne	r1, [r3, #4]
 8004290:	6863      	ldr	r3, [r4, #4]
 8004292:	bf08      	it	eq
 8004294:	f8c8 1000 	streq.w	r1, [r8]
 8004298:	5162      	str	r2, [r4, r5]
 800429a:	604b      	str	r3, [r1, #4]
 800429c:	4638      	mov	r0, r7
 800429e:	f104 060b 	add.w	r6, r4, #11
 80042a2:	f000 f829 	bl	80042f8 <__malloc_unlock>
 80042a6:	f026 0607 	bic.w	r6, r6, #7
 80042aa:	1d23      	adds	r3, r4, #4
 80042ac:	1af2      	subs	r2, r6, r3
 80042ae:	d0ae      	beq.n	800420e <_malloc_r+0x22>
 80042b0:	1b9b      	subs	r3, r3, r6
 80042b2:	50a3      	str	r3, [r4, r2]
 80042b4:	e7ab      	b.n	800420e <_malloc_r+0x22>
 80042b6:	42a3      	cmp	r3, r4
 80042b8:	6862      	ldr	r2, [r4, #4]
 80042ba:	d1dd      	bne.n	8004278 <_malloc_r+0x8c>
 80042bc:	f8c8 2000 	str.w	r2, [r8]
 80042c0:	e7ec      	b.n	800429c <_malloc_r+0xb0>
 80042c2:	4623      	mov	r3, r4
 80042c4:	6864      	ldr	r4, [r4, #4]
 80042c6:	e7ac      	b.n	8004222 <_malloc_r+0x36>
 80042c8:	4634      	mov	r4, r6
 80042ca:	6876      	ldr	r6, [r6, #4]
 80042cc:	e7b4      	b.n	8004238 <_malloc_r+0x4c>
 80042ce:	4613      	mov	r3, r2
 80042d0:	e7cc      	b.n	800426c <_malloc_r+0x80>
 80042d2:	230c      	movs	r3, #12
 80042d4:	4638      	mov	r0, r7
 80042d6:	603b      	str	r3, [r7, #0]
 80042d8:	f000 f80e 	bl	80042f8 <__malloc_unlock>
 80042dc:	e797      	b.n	800420e <_malloc_r+0x22>
 80042de:	6025      	str	r5, [r4, #0]
 80042e0:	e7dc      	b.n	800429c <_malloc_r+0xb0>
 80042e2:	605b      	str	r3, [r3, #4]
 80042e4:	deff      	udf	#255	; 0xff
 80042e6:	bf00      	nop
 80042e8:	200002d8 	.word	0x200002d8

080042ec <__malloc_lock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_lock+0x8>)
 80042ee:	f7ff bf13 	b.w	8004118 <__retarget_lock_acquire_recursive>
 80042f2:	bf00      	nop
 80042f4:	200002d4 	.word	0x200002d4

080042f8 <__malloc_unlock>:
 80042f8:	4801      	ldr	r0, [pc, #4]	; (8004300 <__malloc_unlock+0x8>)
 80042fa:	f7ff bf0e 	b.w	800411a <__retarget_lock_release_recursive>
 80042fe:	bf00      	nop
 8004300:	200002d4 	.word	0x200002d4

08004304 <__sfputc_r>:
 8004304:	6893      	ldr	r3, [r2, #8]
 8004306:	b410      	push	{r4}
 8004308:	3b01      	subs	r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	6093      	str	r3, [r2, #8]
 800430e:	da07      	bge.n	8004320 <__sfputc_r+0x1c>
 8004310:	6994      	ldr	r4, [r2, #24]
 8004312:	42a3      	cmp	r3, r4
 8004314:	db01      	blt.n	800431a <__sfputc_r+0x16>
 8004316:	290a      	cmp	r1, #10
 8004318:	d102      	bne.n	8004320 <__sfputc_r+0x1c>
 800431a:	bc10      	pop	{r4}
 800431c:	f7ff bdef 	b.w	8003efe <__swbuf_r>
 8004320:	6813      	ldr	r3, [r2, #0]
 8004322:	1c58      	adds	r0, r3, #1
 8004324:	6010      	str	r0, [r2, #0]
 8004326:	7019      	strb	r1, [r3, #0]
 8004328:	4608      	mov	r0, r1
 800432a:	bc10      	pop	{r4}
 800432c:	4770      	bx	lr

0800432e <__sfputs_r>:
 800432e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004330:	4606      	mov	r6, r0
 8004332:	460f      	mov	r7, r1
 8004334:	4614      	mov	r4, r2
 8004336:	18d5      	adds	r5, r2, r3
 8004338:	42ac      	cmp	r4, r5
 800433a:	d101      	bne.n	8004340 <__sfputs_r+0x12>
 800433c:	2000      	movs	r0, #0
 800433e:	e007      	b.n	8004350 <__sfputs_r+0x22>
 8004340:	463a      	mov	r2, r7
 8004342:	4630      	mov	r0, r6
 8004344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004348:	f7ff ffdc 	bl	8004304 <__sfputc_r>
 800434c:	1c43      	adds	r3, r0, #1
 800434e:	d1f3      	bne.n	8004338 <__sfputs_r+0xa>
 8004350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004354 <_vfiprintf_r>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	460d      	mov	r5, r1
 800435a:	4614      	mov	r4, r2
 800435c:	4698      	mov	r8, r3
 800435e:	4606      	mov	r6, r0
 8004360:	b09d      	sub	sp, #116	; 0x74
 8004362:	b118      	cbz	r0, 800436c <_vfiprintf_r+0x18>
 8004364:	6a03      	ldr	r3, [r0, #32]
 8004366:	b90b      	cbnz	r3, 800436c <_vfiprintf_r+0x18>
 8004368:	f7ff fce2 	bl	8003d30 <__sinit>
 800436c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800436e:	07d9      	lsls	r1, r3, #31
 8004370:	d405      	bmi.n	800437e <_vfiprintf_r+0x2a>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	059a      	lsls	r2, r3, #22
 8004376:	d402      	bmi.n	800437e <_vfiprintf_r+0x2a>
 8004378:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800437a:	f7ff fecd 	bl	8004118 <__retarget_lock_acquire_recursive>
 800437e:	89ab      	ldrh	r3, [r5, #12]
 8004380:	071b      	lsls	r3, r3, #28
 8004382:	d501      	bpl.n	8004388 <_vfiprintf_r+0x34>
 8004384:	692b      	ldr	r3, [r5, #16]
 8004386:	b99b      	cbnz	r3, 80043b0 <_vfiprintf_r+0x5c>
 8004388:	4629      	mov	r1, r5
 800438a:	4630      	mov	r0, r6
 800438c:	f7ff fdf4 	bl	8003f78 <__swsetup_r>
 8004390:	b170      	cbz	r0, 80043b0 <_vfiprintf_r+0x5c>
 8004392:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004394:	07dc      	lsls	r4, r3, #31
 8004396:	d504      	bpl.n	80043a2 <_vfiprintf_r+0x4e>
 8004398:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800439c:	b01d      	add	sp, #116	; 0x74
 800439e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a2:	89ab      	ldrh	r3, [r5, #12]
 80043a4:	0598      	lsls	r0, r3, #22
 80043a6:	d4f7      	bmi.n	8004398 <_vfiprintf_r+0x44>
 80043a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80043aa:	f7ff feb6 	bl	800411a <__retarget_lock_release_recursive>
 80043ae:	e7f3      	b.n	8004398 <_vfiprintf_r+0x44>
 80043b0:	2300      	movs	r3, #0
 80043b2:	9309      	str	r3, [sp, #36]	; 0x24
 80043b4:	2320      	movs	r3, #32
 80043b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80043ba:	2330      	movs	r3, #48	; 0x30
 80043bc:	f04f 0901 	mov.w	r9, #1
 80043c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043c4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004574 <_vfiprintf_r+0x220>
 80043c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80043cc:	4623      	mov	r3, r4
 80043ce:	469a      	mov	sl, r3
 80043d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043d4:	b10a      	cbz	r2, 80043da <_vfiprintf_r+0x86>
 80043d6:	2a25      	cmp	r2, #37	; 0x25
 80043d8:	d1f9      	bne.n	80043ce <_vfiprintf_r+0x7a>
 80043da:	ebba 0b04 	subs.w	fp, sl, r4
 80043de:	d00b      	beq.n	80043f8 <_vfiprintf_r+0xa4>
 80043e0:	465b      	mov	r3, fp
 80043e2:	4622      	mov	r2, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	4630      	mov	r0, r6
 80043e8:	f7ff ffa1 	bl	800432e <__sfputs_r>
 80043ec:	3001      	adds	r0, #1
 80043ee:	f000 80a9 	beq.w	8004544 <_vfiprintf_r+0x1f0>
 80043f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043f4:	445a      	add	r2, fp
 80043f6:	9209      	str	r2, [sp, #36]	; 0x24
 80043f8:	f89a 3000 	ldrb.w	r3, [sl]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 80a1 	beq.w	8004544 <_vfiprintf_r+0x1f0>
 8004402:	2300      	movs	r3, #0
 8004404:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004408:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800440c:	f10a 0a01 	add.w	sl, sl, #1
 8004410:	9304      	str	r3, [sp, #16]
 8004412:	9307      	str	r3, [sp, #28]
 8004414:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004418:	931a      	str	r3, [sp, #104]	; 0x68
 800441a:	4654      	mov	r4, sl
 800441c:	2205      	movs	r2, #5
 800441e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004422:	4854      	ldr	r0, [pc, #336]	; (8004574 <_vfiprintf_r+0x220>)
 8004424:	f000 fb82 	bl	8004b2c <memchr>
 8004428:	9a04      	ldr	r2, [sp, #16]
 800442a:	b9d8      	cbnz	r0, 8004464 <_vfiprintf_r+0x110>
 800442c:	06d1      	lsls	r1, r2, #27
 800442e:	bf44      	itt	mi
 8004430:	2320      	movmi	r3, #32
 8004432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004436:	0713      	lsls	r3, r2, #28
 8004438:	bf44      	itt	mi
 800443a:	232b      	movmi	r3, #43	; 0x2b
 800443c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004440:	f89a 3000 	ldrb.w	r3, [sl]
 8004444:	2b2a      	cmp	r3, #42	; 0x2a
 8004446:	d015      	beq.n	8004474 <_vfiprintf_r+0x120>
 8004448:	4654      	mov	r4, sl
 800444a:	2000      	movs	r0, #0
 800444c:	f04f 0c0a 	mov.w	ip, #10
 8004450:	9a07      	ldr	r2, [sp, #28]
 8004452:	4621      	mov	r1, r4
 8004454:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004458:	3b30      	subs	r3, #48	; 0x30
 800445a:	2b09      	cmp	r3, #9
 800445c:	d94d      	bls.n	80044fa <_vfiprintf_r+0x1a6>
 800445e:	b1b0      	cbz	r0, 800448e <_vfiprintf_r+0x13a>
 8004460:	9207      	str	r2, [sp, #28]
 8004462:	e014      	b.n	800448e <_vfiprintf_r+0x13a>
 8004464:	eba0 0308 	sub.w	r3, r0, r8
 8004468:	fa09 f303 	lsl.w	r3, r9, r3
 800446c:	4313      	orrs	r3, r2
 800446e:	46a2      	mov	sl, r4
 8004470:	9304      	str	r3, [sp, #16]
 8004472:	e7d2      	b.n	800441a <_vfiprintf_r+0xc6>
 8004474:	9b03      	ldr	r3, [sp, #12]
 8004476:	1d19      	adds	r1, r3, #4
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	9103      	str	r1, [sp, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	bfbb      	ittet	lt
 8004480:	425b      	neglt	r3, r3
 8004482:	f042 0202 	orrlt.w	r2, r2, #2
 8004486:	9307      	strge	r3, [sp, #28]
 8004488:	9307      	strlt	r3, [sp, #28]
 800448a:	bfb8      	it	lt
 800448c:	9204      	strlt	r2, [sp, #16]
 800448e:	7823      	ldrb	r3, [r4, #0]
 8004490:	2b2e      	cmp	r3, #46	; 0x2e
 8004492:	d10c      	bne.n	80044ae <_vfiprintf_r+0x15a>
 8004494:	7863      	ldrb	r3, [r4, #1]
 8004496:	2b2a      	cmp	r3, #42	; 0x2a
 8004498:	d134      	bne.n	8004504 <_vfiprintf_r+0x1b0>
 800449a:	9b03      	ldr	r3, [sp, #12]
 800449c:	3402      	adds	r4, #2
 800449e:	1d1a      	adds	r2, r3, #4
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	9203      	str	r2, [sp, #12]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bfb8      	it	lt
 80044a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80044ac:	9305      	str	r3, [sp, #20]
 80044ae:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004578 <_vfiprintf_r+0x224>
 80044b2:	2203      	movs	r2, #3
 80044b4:	4650      	mov	r0, sl
 80044b6:	7821      	ldrb	r1, [r4, #0]
 80044b8:	f000 fb38 	bl	8004b2c <memchr>
 80044bc:	b138      	cbz	r0, 80044ce <_vfiprintf_r+0x17a>
 80044be:	2240      	movs	r2, #64	; 0x40
 80044c0:	9b04      	ldr	r3, [sp, #16]
 80044c2:	eba0 000a 	sub.w	r0, r0, sl
 80044c6:	4082      	lsls	r2, r0
 80044c8:	4313      	orrs	r3, r2
 80044ca:	3401      	adds	r4, #1
 80044cc:	9304      	str	r3, [sp, #16]
 80044ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d2:	2206      	movs	r2, #6
 80044d4:	4829      	ldr	r0, [pc, #164]	; (800457c <_vfiprintf_r+0x228>)
 80044d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044da:	f000 fb27 	bl	8004b2c <memchr>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d03f      	beq.n	8004562 <_vfiprintf_r+0x20e>
 80044e2:	4b27      	ldr	r3, [pc, #156]	; (8004580 <_vfiprintf_r+0x22c>)
 80044e4:	bb1b      	cbnz	r3, 800452e <_vfiprintf_r+0x1da>
 80044e6:	9b03      	ldr	r3, [sp, #12]
 80044e8:	3307      	adds	r3, #7
 80044ea:	f023 0307 	bic.w	r3, r3, #7
 80044ee:	3308      	adds	r3, #8
 80044f0:	9303      	str	r3, [sp, #12]
 80044f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044f4:	443b      	add	r3, r7
 80044f6:	9309      	str	r3, [sp, #36]	; 0x24
 80044f8:	e768      	b.n	80043cc <_vfiprintf_r+0x78>
 80044fa:	460c      	mov	r4, r1
 80044fc:	2001      	movs	r0, #1
 80044fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8004502:	e7a6      	b.n	8004452 <_vfiprintf_r+0xfe>
 8004504:	2300      	movs	r3, #0
 8004506:	f04f 0c0a 	mov.w	ip, #10
 800450a:	4619      	mov	r1, r3
 800450c:	3401      	adds	r4, #1
 800450e:	9305      	str	r3, [sp, #20]
 8004510:	4620      	mov	r0, r4
 8004512:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004516:	3a30      	subs	r2, #48	; 0x30
 8004518:	2a09      	cmp	r2, #9
 800451a:	d903      	bls.n	8004524 <_vfiprintf_r+0x1d0>
 800451c:	2b00      	cmp	r3, #0
 800451e:	d0c6      	beq.n	80044ae <_vfiprintf_r+0x15a>
 8004520:	9105      	str	r1, [sp, #20]
 8004522:	e7c4      	b.n	80044ae <_vfiprintf_r+0x15a>
 8004524:	4604      	mov	r4, r0
 8004526:	2301      	movs	r3, #1
 8004528:	fb0c 2101 	mla	r1, ip, r1, r2
 800452c:	e7f0      	b.n	8004510 <_vfiprintf_r+0x1bc>
 800452e:	ab03      	add	r3, sp, #12
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	462a      	mov	r2, r5
 8004534:	4630      	mov	r0, r6
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <_vfiprintf_r+0x230>)
 8004538:	a904      	add	r1, sp, #16
 800453a:	f3af 8000 	nop.w
 800453e:	4607      	mov	r7, r0
 8004540:	1c78      	adds	r0, r7, #1
 8004542:	d1d6      	bne.n	80044f2 <_vfiprintf_r+0x19e>
 8004544:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004546:	07d9      	lsls	r1, r3, #31
 8004548:	d405      	bmi.n	8004556 <_vfiprintf_r+0x202>
 800454a:	89ab      	ldrh	r3, [r5, #12]
 800454c:	059a      	lsls	r2, r3, #22
 800454e:	d402      	bmi.n	8004556 <_vfiprintf_r+0x202>
 8004550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004552:	f7ff fde2 	bl	800411a <__retarget_lock_release_recursive>
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	065b      	lsls	r3, r3, #25
 800455a:	f53f af1d 	bmi.w	8004398 <_vfiprintf_r+0x44>
 800455e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004560:	e71c      	b.n	800439c <_vfiprintf_r+0x48>
 8004562:	ab03      	add	r3, sp, #12
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	462a      	mov	r2, r5
 8004568:	4630      	mov	r0, r6
 800456a:	4b06      	ldr	r3, [pc, #24]	; (8004584 <_vfiprintf_r+0x230>)
 800456c:	a904      	add	r1, sp, #16
 800456e:	f000 f87d 	bl	800466c <_printf_i>
 8004572:	e7e4      	b.n	800453e <_vfiprintf_r+0x1ea>
 8004574:	08004cc6 	.word	0x08004cc6
 8004578:	08004ccc 	.word	0x08004ccc
 800457c:	08004cd0 	.word	0x08004cd0
 8004580:	00000000 	.word	0x00000000
 8004584:	0800432f 	.word	0x0800432f

08004588 <_printf_common>:
 8004588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800458c:	4616      	mov	r6, r2
 800458e:	4699      	mov	r9, r3
 8004590:	688a      	ldr	r2, [r1, #8]
 8004592:	690b      	ldr	r3, [r1, #16]
 8004594:	4607      	mov	r7, r0
 8004596:	4293      	cmp	r3, r2
 8004598:	bfb8      	it	lt
 800459a:	4613      	movlt	r3, r2
 800459c:	6033      	str	r3, [r6, #0]
 800459e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80045a2:	460c      	mov	r4, r1
 80045a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80045a8:	b10a      	cbz	r2, 80045ae <_printf_common+0x26>
 80045aa:	3301      	adds	r3, #1
 80045ac:	6033      	str	r3, [r6, #0]
 80045ae:	6823      	ldr	r3, [r4, #0]
 80045b0:	0699      	lsls	r1, r3, #26
 80045b2:	bf42      	ittt	mi
 80045b4:	6833      	ldrmi	r3, [r6, #0]
 80045b6:	3302      	addmi	r3, #2
 80045b8:	6033      	strmi	r3, [r6, #0]
 80045ba:	6825      	ldr	r5, [r4, #0]
 80045bc:	f015 0506 	ands.w	r5, r5, #6
 80045c0:	d106      	bne.n	80045d0 <_printf_common+0x48>
 80045c2:	f104 0a19 	add.w	sl, r4, #25
 80045c6:	68e3      	ldr	r3, [r4, #12]
 80045c8:	6832      	ldr	r2, [r6, #0]
 80045ca:	1a9b      	subs	r3, r3, r2
 80045cc:	42ab      	cmp	r3, r5
 80045ce:	dc2b      	bgt.n	8004628 <_printf_common+0xa0>
 80045d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80045d4:	1e13      	subs	r3, r2, #0
 80045d6:	6822      	ldr	r2, [r4, #0]
 80045d8:	bf18      	it	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	0692      	lsls	r2, r2, #26
 80045de:	d430      	bmi.n	8004642 <_printf_common+0xba>
 80045e0:	4649      	mov	r1, r9
 80045e2:	4638      	mov	r0, r7
 80045e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045e8:	47c0      	blx	r8
 80045ea:	3001      	adds	r0, #1
 80045ec:	d023      	beq.n	8004636 <_printf_common+0xae>
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	6922      	ldr	r2, [r4, #16]
 80045f2:	f003 0306 	and.w	r3, r3, #6
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	bf14      	ite	ne
 80045fa:	2500      	movne	r5, #0
 80045fc:	6833      	ldreq	r3, [r6, #0]
 80045fe:	f04f 0600 	mov.w	r6, #0
 8004602:	bf08      	it	eq
 8004604:	68e5      	ldreq	r5, [r4, #12]
 8004606:	f104 041a 	add.w	r4, r4, #26
 800460a:	bf08      	it	eq
 800460c:	1aed      	subeq	r5, r5, r3
 800460e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004612:	bf08      	it	eq
 8004614:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004618:	4293      	cmp	r3, r2
 800461a:	bfc4      	itt	gt
 800461c:	1a9b      	subgt	r3, r3, r2
 800461e:	18ed      	addgt	r5, r5, r3
 8004620:	42b5      	cmp	r5, r6
 8004622:	d11a      	bne.n	800465a <_printf_common+0xd2>
 8004624:	2000      	movs	r0, #0
 8004626:	e008      	b.n	800463a <_printf_common+0xb2>
 8004628:	2301      	movs	r3, #1
 800462a:	4652      	mov	r2, sl
 800462c:	4649      	mov	r1, r9
 800462e:	4638      	mov	r0, r7
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d103      	bne.n	800463e <_printf_common+0xb6>
 8004636:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800463a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800463e:	3501      	adds	r5, #1
 8004640:	e7c1      	b.n	80045c6 <_printf_common+0x3e>
 8004642:	2030      	movs	r0, #48	; 0x30
 8004644:	18e1      	adds	r1, r4, r3
 8004646:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004650:	4422      	add	r2, r4
 8004652:	3302      	adds	r3, #2
 8004654:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004658:	e7c2      	b.n	80045e0 <_printf_common+0x58>
 800465a:	2301      	movs	r3, #1
 800465c:	4622      	mov	r2, r4
 800465e:	4649      	mov	r1, r9
 8004660:	4638      	mov	r0, r7
 8004662:	47c0      	blx	r8
 8004664:	3001      	adds	r0, #1
 8004666:	d0e6      	beq.n	8004636 <_printf_common+0xae>
 8004668:	3601      	adds	r6, #1
 800466a:	e7d9      	b.n	8004620 <_printf_common+0x98>

0800466c <_printf_i>:
 800466c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004670:	7e0f      	ldrb	r7, [r1, #24]
 8004672:	4691      	mov	r9, r2
 8004674:	2f78      	cmp	r7, #120	; 0x78
 8004676:	4680      	mov	r8, r0
 8004678:	460c      	mov	r4, r1
 800467a:	469a      	mov	sl, r3
 800467c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800467e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004682:	d807      	bhi.n	8004694 <_printf_i+0x28>
 8004684:	2f62      	cmp	r7, #98	; 0x62
 8004686:	d80a      	bhi.n	800469e <_printf_i+0x32>
 8004688:	2f00      	cmp	r7, #0
 800468a:	f000 80d5 	beq.w	8004838 <_printf_i+0x1cc>
 800468e:	2f58      	cmp	r7, #88	; 0x58
 8004690:	f000 80c1 	beq.w	8004816 <_printf_i+0x1aa>
 8004694:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004698:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800469c:	e03a      	b.n	8004714 <_printf_i+0xa8>
 800469e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80046a2:	2b15      	cmp	r3, #21
 80046a4:	d8f6      	bhi.n	8004694 <_printf_i+0x28>
 80046a6:	a101      	add	r1, pc, #4	; (adr r1, 80046ac <_printf_i+0x40>)
 80046a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046ac:	08004705 	.word	0x08004705
 80046b0:	08004719 	.word	0x08004719
 80046b4:	08004695 	.word	0x08004695
 80046b8:	08004695 	.word	0x08004695
 80046bc:	08004695 	.word	0x08004695
 80046c0:	08004695 	.word	0x08004695
 80046c4:	08004719 	.word	0x08004719
 80046c8:	08004695 	.word	0x08004695
 80046cc:	08004695 	.word	0x08004695
 80046d0:	08004695 	.word	0x08004695
 80046d4:	08004695 	.word	0x08004695
 80046d8:	0800481f 	.word	0x0800481f
 80046dc:	08004745 	.word	0x08004745
 80046e0:	080047d9 	.word	0x080047d9
 80046e4:	08004695 	.word	0x08004695
 80046e8:	08004695 	.word	0x08004695
 80046ec:	08004841 	.word	0x08004841
 80046f0:	08004695 	.word	0x08004695
 80046f4:	08004745 	.word	0x08004745
 80046f8:	08004695 	.word	0x08004695
 80046fc:	08004695 	.word	0x08004695
 8004700:	080047e1 	.word	0x080047e1
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	602a      	str	r2, [r5, #0]
 800470c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004714:	2301      	movs	r3, #1
 8004716:	e0a0      	b.n	800485a <_printf_i+0x1ee>
 8004718:	6820      	ldr	r0, [r4, #0]
 800471a:	682b      	ldr	r3, [r5, #0]
 800471c:	0607      	lsls	r7, r0, #24
 800471e:	f103 0104 	add.w	r1, r3, #4
 8004722:	6029      	str	r1, [r5, #0]
 8004724:	d501      	bpl.n	800472a <_printf_i+0xbe>
 8004726:	681e      	ldr	r6, [r3, #0]
 8004728:	e003      	b.n	8004732 <_printf_i+0xc6>
 800472a:	0646      	lsls	r6, r0, #25
 800472c:	d5fb      	bpl.n	8004726 <_printf_i+0xba>
 800472e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004732:	2e00      	cmp	r6, #0
 8004734:	da03      	bge.n	800473e <_printf_i+0xd2>
 8004736:	232d      	movs	r3, #45	; 0x2d
 8004738:	4276      	negs	r6, r6
 800473a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800473e:	230a      	movs	r3, #10
 8004740:	4859      	ldr	r0, [pc, #356]	; (80048a8 <_printf_i+0x23c>)
 8004742:	e012      	b.n	800476a <_printf_i+0xfe>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	6820      	ldr	r0, [r4, #0]
 8004748:	1d19      	adds	r1, r3, #4
 800474a:	6029      	str	r1, [r5, #0]
 800474c:	0605      	lsls	r5, r0, #24
 800474e:	d501      	bpl.n	8004754 <_printf_i+0xe8>
 8004750:	681e      	ldr	r6, [r3, #0]
 8004752:	e002      	b.n	800475a <_printf_i+0xee>
 8004754:	0641      	lsls	r1, r0, #25
 8004756:	d5fb      	bpl.n	8004750 <_printf_i+0xe4>
 8004758:	881e      	ldrh	r6, [r3, #0]
 800475a:	2f6f      	cmp	r7, #111	; 0x6f
 800475c:	bf0c      	ite	eq
 800475e:	2308      	moveq	r3, #8
 8004760:	230a      	movne	r3, #10
 8004762:	4851      	ldr	r0, [pc, #324]	; (80048a8 <_printf_i+0x23c>)
 8004764:	2100      	movs	r1, #0
 8004766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800476a:	6865      	ldr	r5, [r4, #4]
 800476c:	2d00      	cmp	r5, #0
 800476e:	bfa8      	it	ge
 8004770:	6821      	ldrge	r1, [r4, #0]
 8004772:	60a5      	str	r5, [r4, #8]
 8004774:	bfa4      	itt	ge
 8004776:	f021 0104 	bicge.w	r1, r1, #4
 800477a:	6021      	strge	r1, [r4, #0]
 800477c:	b90e      	cbnz	r6, 8004782 <_printf_i+0x116>
 800477e:	2d00      	cmp	r5, #0
 8004780:	d04b      	beq.n	800481a <_printf_i+0x1ae>
 8004782:	4615      	mov	r5, r2
 8004784:	fbb6 f1f3 	udiv	r1, r6, r3
 8004788:	fb03 6711 	mls	r7, r3, r1, r6
 800478c:	5dc7      	ldrb	r7, [r0, r7]
 800478e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004792:	4637      	mov	r7, r6
 8004794:	42bb      	cmp	r3, r7
 8004796:	460e      	mov	r6, r1
 8004798:	d9f4      	bls.n	8004784 <_printf_i+0x118>
 800479a:	2b08      	cmp	r3, #8
 800479c:	d10b      	bne.n	80047b6 <_printf_i+0x14a>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	07de      	lsls	r6, r3, #31
 80047a2:	d508      	bpl.n	80047b6 <_printf_i+0x14a>
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	6861      	ldr	r1, [r4, #4]
 80047a8:	4299      	cmp	r1, r3
 80047aa:	bfde      	ittt	le
 80047ac:	2330      	movle	r3, #48	; 0x30
 80047ae:	f805 3c01 	strble.w	r3, [r5, #-1]
 80047b2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80047b6:	1b52      	subs	r2, r2, r5
 80047b8:	6122      	str	r2, [r4, #16]
 80047ba:	464b      	mov	r3, r9
 80047bc:	4621      	mov	r1, r4
 80047be:	4640      	mov	r0, r8
 80047c0:	f8cd a000 	str.w	sl, [sp]
 80047c4:	aa03      	add	r2, sp, #12
 80047c6:	f7ff fedf 	bl	8004588 <_printf_common>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d14a      	bne.n	8004864 <_printf_i+0x1f8>
 80047ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80047d2:	b004      	add	sp, #16
 80047d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	f043 0320 	orr.w	r3, r3, #32
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	2778      	movs	r7, #120	; 0x78
 80047e2:	4832      	ldr	r0, [pc, #200]	; (80048ac <_printf_i+0x240>)
 80047e4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	6829      	ldr	r1, [r5, #0]
 80047ec:	061f      	lsls	r7, r3, #24
 80047ee:	f851 6b04 	ldr.w	r6, [r1], #4
 80047f2:	d402      	bmi.n	80047fa <_printf_i+0x18e>
 80047f4:	065f      	lsls	r7, r3, #25
 80047f6:	bf48      	it	mi
 80047f8:	b2b6      	uxthmi	r6, r6
 80047fa:	07df      	lsls	r7, r3, #31
 80047fc:	bf48      	it	mi
 80047fe:	f043 0320 	orrmi.w	r3, r3, #32
 8004802:	6029      	str	r1, [r5, #0]
 8004804:	bf48      	it	mi
 8004806:	6023      	strmi	r3, [r4, #0]
 8004808:	b91e      	cbnz	r6, 8004812 <_printf_i+0x1a6>
 800480a:	6823      	ldr	r3, [r4, #0]
 800480c:	f023 0320 	bic.w	r3, r3, #32
 8004810:	6023      	str	r3, [r4, #0]
 8004812:	2310      	movs	r3, #16
 8004814:	e7a6      	b.n	8004764 <_printf_i+0xf8>
 8004816:	4824      	ldr	r0, [pc, #144]	; (80048a8 <_printf_i+0x23c>)
 8004818:	e7e4      	b.n	80047e4 <_printf_i+0x178>
 800481a:	4615      	mov	r5, r2
 800481c:	e7bd      	b.n	800479a <_printf_i+0x12e>
 800481e:	682b      	ldr	r3, [r5, #0]
 8004820:	6826      	ldr	r6, [r4, #0]
 8004822:	1d18      	adds	r0, r3, #4
 8004824:	6961      	ldr	r1, [r4, #20]
 8004826:	6028      	str	r0, [r5, #0]
 8004828:	0635      	lsls	r5, r6, #24
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	d501      	bpl.n	8004832 <_printf_i+0x1c6>
 800482e:	6019      	str	r1, [r3, #0]
 8004830:	e002      	b.n	8004838 <_printf_i+0x1cc>
 8004832:	0670      	lsls	r0, r6, #25
 8004834:	d5fb      	bpl.n	800482e <_printf_i+0x1c2>
 8004836:	8019      	strh	r1, [r3, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	4615      	mov	r5, r2
 800483c:	6123      	str	r3, [r4, #16]
 800483e:	e7bc      	b.n	80047ba <_printf_i+0x14e>
 8004840:	682b      	ldr	r3, [r5, #0]
 8004842:	2100      	movs	r1, #0
 8004844:	1d1a      	adds	r2, r3, #4
 8004846:	602a      	str	r2, [r5, #0]
 8004848:	681d      	ldr	r5, [r3, #0]
 800484a:	6862      	ldr	r2, [r4, #4]
 800484c:	4628      	mov	r0, r5
 800484e:	f000 f96d 	bl	8004b2c <memchr>
 8004852:	b108      	cbz	r0, 8004858 <_printf_i+0x1ec>
 8004854:	1b40      	subs	r0, r0, r5
 8004856:	6060      	str	r0, [r4, #4]
 8004858:	6863      	ldr	r3, [r4, #4]
 800485a:	6123      	str	r3, [r4, #16]
 800485c:	2300      	movs	r3, #0
 800485e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004862:	e7aa      	b.n	80047ba <_printf_i+0x14e>
 8004864:	462a      	mov	r2, r5
 8004866:	4649      	mov	r1, r9
 8004868:	4640      	mov	r0, r8
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	47d0      	blx	sl
 800486e:	3001      	adds	r0, #1
 8004870:	d0ad      	beq.n	80047ce <_printf_i+0x162>
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	079b      	lsls	r3, r3, #30
 8004876:	d413      	bmi.n	80048a0 <_printf_i+0x234>
 8004878:	68e0      	ldr	r0, [r4, #12]
 800487a:	9b03      	ldr	r3, [sp, #12]
 800487c:	4298      	cmp	r0, r3
 800487e:	bfb8      	it	lt
 8004880:	4618      	movlt	r0, r3
 8004882:	e7a6      	b.n	80047d2 <_printf_i+0x166>
 8004884:	2301      	movs	r3, #1
 8004886:	4632      	mov	r2, r6
 8004888:	4649      	mov	r1, r9
 800488a:	4640      	mov	r0, r8
 800488c:	47d0      	blx	sl
 800488e:	3001      	adds	r0, #1
 8004890:	d09d      	beq.n	80047ce <_printf_i+0x162>
 8004892:	3501      	adds	r5, #1
 8004894:	68e3      	ldr	r3, [r4, #12]
 8004896:	9903      	ldr	r1, [sp, #12]
 8004898:	1a5b      	subs	r3, r3, r1
 800489a:	42ab      	cmp	r3, r5
 800489c:	dcf2      	bgt.n	8004884 <_printf_i+0x218>
 800489e:	e7eb      	b.n	8004878 <_printf_i+0x20c>
 80048a0:	2500      	movs	r5, #0
 80048a2:	f104 0619 	add.w	r6, r4, #25
 80048a6:	e7f5      	b.n	8004894 <_printf_i+0x228>
 80048a8:	08004cd7 	.word	0x08004cd7
 80048ac:	08004ce8 	.word	0x08004ce8

080048b0 <__sflush_r>:
 80048b0:	898a      	ldrh	r2, [r1, #12]
 80048b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048b4:	4605      	mov	r5, r0
 80048b6:	0710      	lsls	r0, r2, #28
 80048b8:	460c      	mov	r4, r1
 80048ba:	d457      	bmi.n	800496c <__sflush_r+0xbc>
 80048bc:	684b      	ldr	r3, [r1, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	dc04      	bgt.n	80048cc <__sflush_r+0x1c>
 80048c2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	dc01      	bgt.n	80048cc <__sflush_r+0x1c>
 80048c8:	2000      	movs	r0, #0
 80048ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048ce:	2e00      	cmp	r6, #0
 80048d0:	d0fa      	beq.n	80048c8 <__sflush_r+0x18>
 80048d2:	2300      	movs	r3, #0
 80048d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048d8:	682f      	ldr	r7, [r5, #0]
 80048da:	6a21      	ldr	r1, [r4, #32]
 80048dc:	602b      	str	r3, [r5, #0]
 80048de:	d032      	beq.n	8004946 <__sflush_r+0x96>
 80048e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	075a      	lsls	r2, r3, #29
 80048e6:	d505      	bpl.n	80048f4 <__sflush_r+0x44>
 80048e8:	6863      	ldr	r3, [r4, #4]
 80048ea:	1ac0      	subs	r0, r0, r3
 80048ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048ee:	b10b      	cbz	r3, 80048f4 <__sflush_r+0x44>
 80048f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f2:	1ac0      	subs	r0, r0, r3
 80048f4:	2300      	movs	r3, #0
 80048f6:	4602      	mov	r2, r0
 80048f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fa:	4628      	mov	r0, r5
 80048fc:	6a21      	ldr	r1, [r4, #32]
 80048fe:	47b0      	blx	r6
 8004900:	1c43      	adds	r3, r0, #1
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	d106      	bne.n	8004914 <__sflush_r+0x64>
 8004906:	6829      	ldr	r1, [r5, #0]
 8004908:	291d      	cmp	r1, #29
 800490a:	d82b      	bhi.n	8004964 <__sflush_r+0xb4>
 800490c:	4a28      	ldr	r2, [pc, #160]	; (80049b0 <__sflush_r+0x100>)
 800490e:	410a      	asrs	r2, r1
 8004910:	07d6      	lsls	r6, r2, #31
 8004912:	d427      	bmi.n	8004964 <__sflush_r+0xb4>
 8004914:	2200      	movs	r2, #0
 8004916:	6062      	str	r2, [r4, #4]
 8004918:	6922      	ldr	r2, [r4, #16]
 800491a:	04d9      	lsls	r1, r3, #19
 800491c:	6022      	str	r2, [r4, #0]
 800491e:	d504      	bpl.n	800492a <__sflush_r+0x7a>
 8004920:	1c42      	adds	r2, r0, #1
 8004922:	d101      	bne.n	8004928 <__sflush_r+0x78>
 8004924:	682b      	ldr	r3, [r5, #0]
 8004926:	b903      	cbnz	r3, 800492a <__sflush_r+0x7a>
 8004928:	6560      	str	r0, [r4, #84]	; 0x54
 800492a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492c:	602f      	str	r7, [r5, #0]
 800492e:	2900      	cmp	r1, #0
 8004930:	d0ca      	beq.n	80048c8 <__sflush_r+0x18>
 8004932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004936:	4299      	cmp	r1, r3
 8004938:	d002      	beq.n	8004940 <__sflush_r+0x90>
 800493a:	4628      	mov	r0, r5
 800493c:	f7ff fbee 	bl	800411c <_free_r>
 8004940:	2000      	movs	r0, #0
 8004942:	6360      	str	r0, [r4, #52]	; 0x34
 8004944:	e7c1      	b.n	80048ca <__sflush_r+0x1a>
 8004946:	2301      	movs	r3, #1
 8004948:	4628      	mov	r0, r5
 800494a:	47b0      	blx	r6
 800494c:	1c41      	adds	r1, r0, #1
 800494e:	d1c8      	bne.n	80048e2 <__sflush_r+0x32>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0c5      	beq.n	80048e2 <__sflush_r+0x32>
 8004956:	2b1d      	cmp	r3, #29
 8004958:	d001      	beq.n	800495e <__sflush_r+0xae>
 800495a:	2b16      	cmp	r3, #22
 800495c:	d101      	bne.n	8004962 <__sflush_r+0xb2>
 800495e:	602f      	str	r7, [r5, #0]
 8004960:	e7b2      	b.n	80048c8 <__sflush_r+0x18>
 8004962:	89a3      	ldrh	r3, [r4, #12]
 8004964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004968:	81a3      	strh	r3, [r4, #12]
 800496a:	e7ae      	b.n	80048ca <__sflush_r+0x1a>
 800496c:	690f      	ldr	r7, [r1, #16]
 800496e:	2f00      	cmp	r7, #0
 8004970:	d0aa      	beq.n	80048c8 <__sflush_r+0x18>
 8004972:	0793      	lsls	r3, r2, #30
 8004974:	bf18      	it	ne
 8004976:	2300      	movne	r3, #0
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	bf08      	it	eq
 800497c:	694b      	ldreq	r3, [r1, #20]
 800497e:	1bf6      	subs	r6, r6, r7
 8004980:	600f      	str	r7, [r1, #0]
 8004982:	608b      	str	r3, [r1, #8]
 8004984:	2e00      	cmp	r6, #0
 8004986:	dd9f      	ble.n	80048c8 <__sflush_r+0x18>
 8004988:	4633      	mov	r3, r6
 800498a:	463a      	mov	r2, r7
 800498c:	4628      	mov	r0, r5
 800498e:	6a21      	ldr	r1, [r4, #32]
 8004990:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8004994:	47e0      	blx	ip
 8004996:	2800      	cmp	r0, #0
 8004998:	dc06      	bgt.n	80049a8 <__sflush_r+0xf8>
 800499a:	89a3      	ldrh	r3, [r4, #12]
 800499c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80049a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a4:	81a3      	strh	r3, [r4, #12]
 80049a6:	e790      	b.n	80048ca <__sflush_r+0x1a>
 80049a8:	4407      	add	r7, r0
 80049aa:	1a36      	subs	r6, r6, r0
 80049ac:	e7ea      	b.n	8004984 <__sflush_r+0xd4>
 80049ae:	bf00      	nop
 80049b0:	dfbffffe 	.word	0xdfbffffe

080049b4 <_fflush_r>:
 80049b4:	b538      	push	{r3, r4, r5, lr}
 80049b6:	690b      	ldr	r3, [r1, #16]
 80049b8:	4605      	mov	r5, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	b913      	cbnz	r3, 80049c4 <_fflush_r+0x10>
 80049be:	2500      	movs	r5, #0
 80049c0:	4628      	mov	r0, r5
 80049c2:	bd38      	pop	{r3, r4, r5, pc}
 80049c4:	b118      	cbz	r0, 80049ce <_fflush_r+0x1a>
 80049c6:	6a03      	ldr	r3, [r0, #32]
 80049c8:	b90b      	cbnz	r3, 80049ce <_fflush_r+0x1a>
 80049ca:	f7ff f9b1 	bl	8003d30 <__sinit>
 80049ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f3      	beq.n	80049be <_fflush_r+0xa>
 80049d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049d8:	07d0      	lsls	r0, r2, #31
 80049da:	d404      	bmi.n	80049e6 <_fflush_r+0x32>
 80049dc:	0599      	lsls	r1, r3, #22
 80049de:	d402      	bmi.n	80049e6 <_fflush_r+0x32>
 80049e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049e2:	f7ff fb99 	bl	8004118 <__retarget_lock_acquire_recursive>
 80049e6:	4628      	mov	r0, r5
 80049e8:	4621      	mov	r1, r4
 80049ea:	f7ff ff61 	bl	80048b0 <__sflush_r>
 80049ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80049f0:	4605      	mov	r5, r0
 80049f2:	07da      	lsls	r2, r3, #31
 80049f4:	d4e4      	bmi.n	80049c0 <_fflush_r+0xc>
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	059b      	lsls	r3, r3, #22
 80049fa:	d4e1      	bmi.n	80049c0 <_fflush_r+0xc>
 80049fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049fe:	f7ff fb8c 	bl	800411a <__retarget_lock_release_recursive>
 8004a02:	e7dd      	b.n	80049c0 <_fflush_r+0xc>

08004a04 <__swhatbuf_r>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	460c      	mov	r4, r1
 8004a08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a0c:	4615      	mov	r5, r2
 8004a0e:	2900      	cmp	r1, #0
 8004a10:	461e      	mov	r6, r3
 8004a12:	b096      	sub	sp, #88	; 0x58
 8004a14:	da0c      	bge.n	8004a30 <__swhatbuf_r+0x2c>
 8004a16:	89a3      	ldrh	r3, [r4, #12]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004a1e:	bf0c      	ite	eq
 8004a20:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004a24:	2340      	movne	r3, #64	; 0x40
 8004a26:	2000      	movs	r0, #0
 8004a28:	6031      	str	r1, [r6, #0]
 8004a2a:	602b      	str	r3, [r5, #0]
 8004a2c:	b016      	add	sp, #88	; 0x58
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	466a      	mov	r2, sp
 8004a32:	f000 f849 	bl	8004ac8 <_fstat_r>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	dbed      	blt.n	8004a16 <__swhatbuf_r+0x12>
 8004a3a:	9901      	ldr	r1, [sp, #4]
 8004a3c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004a40:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004a44:	4259      	negs	r1, r3
 8004a46:	4159      	adcs	r1, r3
 8004a48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a4c:	e7eb      	b.n	8004a26 <__swhatbuf_r+0x22>

08004a4e <__smakebuf_r>:
 8004a4e:	898b      	ldrh	r3, [r1, #12]
 8004a50:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004a52:	079d      	lsls	r5, r3, #30
 8004a54:	4606      	mov	r6, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	d507      	bpl.n	8004a6a <__smakebuf_r+0x1c>
 8004a5a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	6123      	str	r3, [r4, #16]
 8004a62:	2301      	movs	r3, #1
 8004a64:	6163      	str	r3, [r4, #20]
 8004a66:	b002      	add	sp, #8
 8004a68:	bd70      	pop	{r4, r5, r6, pc}
 8004a6a:	466a      	mov	r2, sp
 8004a6c:	ab01      	add	r3, sp, #4
 8004a6e:	f7ff ffc9 	bl	8004a04 <__swhatbuf_r>
 8004a72:	9900      	ldr	r1, [sp, #0]
 8004a74:	4605      	mov	r5, r0
 8004a76:	4630      	mov	r0, r6
 8004a78:	f7ff fbb8 	bl	80041ec <_malloc_r>
 8004a7c:	b948      	cbnz	r0, 8004a92 <__smakebuf_r+0x44>
 8004a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a82:	059a      	lsls	r2, r3, #22
 8004a84:	d4ef      	bmi.n	8004a66 <__smakebuf_r+0x18>
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	f043 0302 	orr.w	r3, r3, #2
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	e7e3      	b.n	8004a5a <__smakebuf_r+0xc>
 8004a92:	89a3      	ldrh	r3, [r4, #12]
 8004a94:	6020      	str	r0, [r4, #0]
 8004a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9a:	81a3      	strh	r3, [r4, #12]
 8004a9c:	9b00      	ldr	r3, [sp, #0]
 8004a9e:	6120      	str	r0, [r4, #16]
 8004aa0:	6163      	str	r3, [r4, #20]
 8004aa2:	9b01      	ldr	r3, [sp, #4]
 8004aa4:	b15b      	cbz	r3, 8004abe <__smakebuf_r+0x70>
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aac:	f000 f81e 	bl	8004aec <_isatty_r>
 8004ab0:	b128      	cbz	r0, 8004abe <__smakebuf_r+0x70>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f023 0303 	bic.w	r3, r3, #3
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	89a3      	ldrh	r3, [r4, #12]
 8004ac0:	431d      	orrs	r5, r3
 8004ac2:	81a5      	strh	r5, [r4, #12]
 8004ac4:	e7cf      	b.n	8004a66 <__smakebuf_r+0x18>
	...

08004ac8 <_fstat_r>:
 8004ac8:	b538      	push	{r3, r4, r5, lr}
 8004aca:	2300      	movs	r3, #0
 8004acc:	4d06      	ldr	r5, [pc, #24]	; (8004ae8 <_fstat_r+0x20>)
 8004ace:	4604      	mov	r4, r0
 8004ad0:	4608      	mov	r0, r1
 8004ad2:	4611      	mov	r1, r2
 8004ad4:	602b      	str	r3, [r5, #0]
 8004ad6:	f7fc fdc9 	bl	800166c <_fstat>
 8004ada:	1c43      	adds	r3, r0, #1
 8004adc:	d102      	bne.n	8004ae4 <_fstat_r+0x1c>
 8004ade:	682b      	ldr	r3, [r5, #0]
 8004ae0:	b103      	cbz	r3, 8004ae4 <_fstat_r+0x1c>
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	bd38      	pop	{r3, r4, r5, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200002d0 	.word	0x200002d0

08004aec <_isatty_r>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	2300      	movs	r3, #0
 8004af0:	4d05      	ldr	r5, [pc, #20]	; (8004b08 <_isatty_r+0x1c>)
 8004af2:	4604      	mov	r4, r0
 8004af4:	4608      	mov	r0, r1
 8004af6:	602b      	str	r3, [r5, #0]
 8004af8:	f7fc fdc7 	bl	800168a <_isatty>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	d102      	bne.n	8004b06 <_isatty_r+0x1a>
 8004b00:	682b      	ldr	r3, [r5, #0]
 8004b02:	b103      	cbz	r3, 8004b06 <_isatty_r+0x1a>
 8004b04:	6023      	str	r3, [r4, #0]
 8004b06:	bd38      	pop	{r3, r4, r5, pc}
 8004b08:	200002d0 	.word	0x200002d0

08004b0c <_sbrk_r>:
 8004b0c:	b538      	push	{r3, r4, r5, lr}
 8004b0e:	2300      	movs	r3, #0
 8004b10:	4d05      	ldr	r5, [pc, #20]	; (8004b28 <_sbrk_r+0x1c>)
 8004b12:	4604      	mov	r4, r0
 8004b14:	4608      	mov	r0, r1
 8004b16:	602b      	str	r3, [r5, #0]
 8004b18:	f7fc fdce 	bl	80016b8 <_sbrk>
 8004b1c:	1c43      	adds	r3, r0, #1
 8004b1e:	d102      	bne.n	8004b26 <_sbrk_r+0x1a>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	b103      	cbz	r3, 8004b26 <_sbrk_r+0x1a>
 8004b24:	6023      	str	r3, [r4, #0]
 8004b26:	bd38      	pop	{r3, r4, r5, pc}
 8004b28:	200002d0 	.word	0x200002d0

08004b2c <memchr>:
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	b510      	push	{r4, lr}
 8004b30:	b2c9      	uxtb	r1, r1
 8004b32:	4402      	add	r2, r0
 8004b34:	4293      	cmp	r3, r2
 8004b36:	4618      	mov	r0, r3
 8004b38:	d101      	bne.n	8004b3e <memchr+0x12>
 8004b3a:	2000      	movs	r0, #0
 8004b3c:	e003      	b.n	8004b46 <memchr+0x1a>
 8004b3e:	7804      	ldrb	r4, [r0, #0]
 8004b40:	3301      	adds	r3, #1
 8004b42:	428c      	cmp	r4, r1
 8004b44:	d1f6      	bne.n	8004b34 <memchr+0x8>
 8004b46:	bd10      	pop	{r4, pc}

08004b48 <_init>:
 8004b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b4a:	bf00      	nop
 8004b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b4e:	bc08      	pop	{r3}
 8004b50:	469e      	mov	lr, r3
 8004b52:	4770      	bx	lr

08004b54 <_fini>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	bf00      	nop
 8004b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b5a:	bc08      	pop	{r3}
 8004b5c:	469e      	mov	lr, r3
 8004b5e:	4770      	bx	lr
